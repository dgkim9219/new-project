"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-datepicker";
exports.ids = ["vendor-chunks/react-datepicker"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-datepicker/dist/es/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-datepicker/dist/es/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalendarContainer: () => (/* binding */ CalendarContainer),\n/* harmony export */   \"default\": () => (/* binding */ DatePicker),\n/* harmony export */   getDefaultLocale: () => (/* binding */ getDefaultLocale),\n/* harmony export */   registerLocale: () => (/* binding */ registerLocale),\n/* harmony export */   setDefaultLocale: () => (/* binding */ setDefaultLocale)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/react-datepicker/node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var date_fns_isDate__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! date-fns/isDate */ \"(ssr)/./node_modules/date-fns/isDate.mjs\");\n/* harmony import */ var date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns/isValid */ \"(ssr)/./node_modules/date-fns/isValid.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/_lib/format/longFormatters.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/format.mjs\");\n/* harmony import */ var date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! date-fns/addMinutes */ \"(ssr)/./node_modules/date-fns/addMinutes.mjs\");\n/* harmony import */ var date_fns_addHours__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! date-fns/addHours */ \"(ssr)/./node_modules/date-fns/addHours.mjs\");\n/* harmony import */ var date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! date-fns/addDays */ \"(ssr)/./node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! date-fns/addWeeks */ \"(ssr)/./node_modules/date-fns/addWeeks.mjs\");\n/* harmony import */ var date_fns_addMonths__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! date-fns/addMonths */ \"(ssr)/./node_modules/date-fns/addMonths.mjs\");\n/* harmony import */ var date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! date-fns/addQuarters */ \"(ssr)/./node_modules/date-fns/addQuarters.mjs\");\n/* harmony import */ var date_fns_addYears__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! date-fns/addYears */ \"(ssr)/./node_modules/date-fns/addYears.mjs\");\n/* harmony import */ var date_fns_subDays__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! date-fns/subDays */ \"(ssr)/./node_modules/date-fns/subDays.mjs\");\n/* harmony import */ var date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! date-fns/subWeeks */ \"(ssr)/./node_modules/date-fns/subWeeks.mjs\");\n/* harmony import */ var date_fns_subMonths__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! date-fns/subMonths */ \"(ssr)/./node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! date-fns/subQuarters */ \"(ssr)/./node_modules/date-fns/subQuarters.mjs\");\n/* harmony import */ var date_fns_subYears__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! date-fns/subYears */ \"(ssr)/./node_modules/date-fns/subYears.mjs\");\n/* harmony import */ var date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! __barrel_optimize__?names=addSeconds,getSeconds!=!date-fns */ \"(ssr)/./node_modules/date-fns/getSeconds.mjs\");\n/* harmony import */ var date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! date-fns/getMinutes */ \"(ssr)/./node_modules/date-fns/getMinutes.mjs\");\n/* harmony import */ var date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! date-fns/getHours */ \"(ssr)/./node_modules/date-fns/getHours.mjs\");\n/* harmony import */ var date_fns_getDay__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! date-fns/getDay */ \"(ssr)/./node_modules/date-fns/getDay.mjs\");\n/* harmony import */ var date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! date-fns/getDate */ \"(ssr)/./node_modules/date-fns/getDate.mjs\");\n/* harmony import */ var date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns/getISOWeek */ \"(ssr)/./node_modules/date-fns/getISOWeek.mjs\");\n/* harmony import */ var date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! date-fns/getMonth */ \"(ssr)/./node_modules/date-fns/getMonth.mjs\");\n/* harmony import */ var date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! date-fns/getQuarter */ \"(ssr)/./node_modules/date-fns/getQuarter.mjs\");\n/* harmony import */ var date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! date-fns/getYear */ \"(ssr)/./node_modules/date-fns/getYear.mjs\");\n/* harmony import */ var date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! date-fns/getTime */ \"(ssr)/./node_modules/date-fns/getTime.mjs\");\n/* harmony import */ var date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns/setSeconds */ \"(ssr)/./node_modules/date-fns/setSeconds.mjs\");\n/* harmony import */ var date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns/setMinutes */ \"(ssr)/./node_modules/date-fns/setMinutes.mjs\");\n/* harmony import */ var date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns/setHours */ \"(ssr)/./node_modules/date-fns/setHours.mjs\");\n/* harmony import */ var date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! date-fns/setMonth */ \"(ssr)/./node_modules/date-fns/setMonth.mjs\");\n/* harmony import */ var date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! date-fns/setQuarter */ \"(ssr)/./node_modules/date-fns/setQuarter.mjs\");\n/* harmony import */ var date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! date-fns/setYear */ \"(ssr)/./node_modules/date-fns/setYear.mjs\");\n/* harmony import */ var date_fns_min__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! date-fns/min */ \"(ssr)/./node_modules/date-fns/min.mjs\");\n/* harmony import */ var date_fns_max__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! date-fns/max */ \"(ssr)/./node_modules/date-fns/max.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! date-fns/differenceInCalendarDays */ \"(ssr)/./node_modules/date-fns/differenceInCalendarDays.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! date-fns/differenceInCalendarMonths */ \"(ssr)/./node_modules/date-fns/differenceInCalendarMonths.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! date-fns/differenceInCalendarYears */ \"(ssr)/./node_modules/date-fns/differenceInCalendarYears.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! date-fns/differenceInCalendarQuarters */ \"(ssr)/./node_modules/date-fns/differenceInCalendarQuarters.mjs\");\n/* harmony import */ var date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns/startOfDay */ \"(ssr)/./node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns/startOfWeek */ \"(ssr)/./node_modules/date-fns/startOfWeek.mjs\");\n/* harmony import */ var date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns/startOfMonth */ \"(ssr)/./node_modules/date-fns/startOfMonth.mjs\");\n/* harmony import */ var date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns/startOfQuarter */ \"(ssr)/./node_modules/date-fns/startOfQuarter.mjs\");\n/* harmony import */ var date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns/startOfYear */ \"(ssr)/./node_modules/date-fns/startOfYear.mjs\");\n/* harmony import */ var date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns/endOfDay */ \"(ssr)/./node_modules/date-fns/endOfDay.mjs\");\n/* harmony import */ var date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns/endOfWeek */ \"(ssr)/./node_modules/date-fns/endOfWeek.mjs\");\n/* harmony import */ var date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! date-fns/endOfMonth */ \"(ssr)/./node_modules/date-fns/endOfMonth.mjs\");\n/* harmony import */ var date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! date-fns/endOfYear */ \"(ssr)/./node_modules/date-fns/endOfYear.mjs\");\n/* harmony import */ var date_fns_isEqual__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns/isEqual */ \"(ssr)/./node_modules/date-fns/isEqual.mjs\");\n/* harmony import */ var date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns/isSameDay */ \"(ssr)/./node_modules/date-fns/isSameDay.mjs\");\n/* harmony import */ var date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns/isSameMonth */ \"(ssr)/./node_modules/date-fns/isSameMonth.mjs\");\n/* harmony import */ var date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns/isSameYear */ \"(ssr)/./node_modules/date-fns/isSameYear.mjs\");\n/* harmony import */ var date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns/isSameQuarter */ \"(ssr)/./node_modules/date-fns/isSameQuarter.mjs\");\n/* harmony import */ var date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! date-fns/isAfter */ \"(ssr)/./node_modules/date-fns/isAfter.mjs\");\n/* harmony import */ var date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns/isBefore */ \"(ssr)/./node_modules/date-fns/isBefore.mjs\");\n/* harmony import */ var date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! date-fns/isWithinInterval */ \"(ssr)/./node_modules/date-fns/isWithinInterval.mjs\");\n/* harmony import */ var date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns/toDate */ \"(ssr)/./node_modules/date-fns/toDate.mjs\");\n/* harmony import */ var date_fns_parse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/parse */ \"(ssr)/./node_modules/date-fns/parse.mjs\");\n/* harmony import */ var date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns/parseISO */ \"(ssr)/./node_modules/date-fns/parseISO.mjs\");\n/* harmony import */ var _barrel_optimize_names_addSeconds_getSeconds_date_fns__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! __barrel_optimize__?names=addSeconds,getSeconds!=!date-fns */ \"(ssr)/./node_modules/date-fns/addSeconds.mjs\");\n/* harmony import */ var react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-onclickoutside */ \"(ssr)/./node_modules/react-onclickoutside/dist/react-onclickoutside.es.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var date_fns_set__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! date-fns/set */ \"(ssr)/./node_modules/date-fns/set.mjs\");\n/*!\n  react-datepicker v6.7.0\n  https://github.com/Hacker0x01/react-datepicker\n  Released under the MIT License.\n*/ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _callSuper(t, o, e) {\n    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _isNativeReflectConstruct() {\n    try {\n        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (t) {}\n    return (_isNativeReflectConstruct = function() {\n        return !!t;\n    })();\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar DEFAULT_YEAR_ITEM_NUMBER = 12;\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n// ** Date Constructors **\nfunction newDate(value) {\n    var d = value ? typeof value === \"string\" || value instanceof String ? (0,date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__.parseISO)(value) : (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(value) : new Date();\n    return isValid(d) ? d : null;\n}\nfunction parseDate(value, dateFormat, locale, strictParsing, minDate) {\n    var parsedDate = null;\n    var localeObject = getLocaleObject(locale) || getLocaleObject(getDefaultLocale());\n    var strictParsingValueMatch = true;\n    if (Array.isArray(dateFormat)) {\n        dateFormat.forEach(function(df) {\n            var tryParseDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, df, new Date(), {\n                locale: localeObject,\n                useAdditionalWeekYearTokens: true,\n                useAdditionalDayOfYearTokens: true\n            });\n            if (strictParsing) {\n                strictParsingValueMatch = isValid(tryParseDate, minDate) && value === formatDate(tryParseDate, df, locale);\n            }\n            if (isValid(tryParseDate, minDate) && strictParsingValueMatch) {\n                parsedDate = tryParseDate;\n            }\n        });\n        return parsedDate;\n    }\n    parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, dateFormat, new Date(), {\n        locale: localeObject,\n        useAdditionalWeekYearTokens: true,\n        useAdditionalDayOfYearTokens: true\n    });\n    if (strictParsing) {\n        strictParsingValueMatch = isValid(parsedDate) && value === formatDate(parsedDate, dateFormat, locale);\n    } else if (!isValid(parsedDate)) {\n        dateFormat = dateFormat.match(longFormattingTokensRegExp).map(function(substring) {\n            var firstCharacter = substring[0];\n            if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n                var longFormatter = date_fns_format__WEBPACK_IMPORTED_MODULE_7__.longFormatters[firstCharacter];\n                return localeObject ? longFormatter(substring, localeObject.formatLong) : firstCharacter;\n            }\n            return substring;\n        }).join(\"\");\n        if (value.length > 0) {\n            parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, dateFormat.slice(0, value.length), new Date(), {\n                useAdditionalWeekYearTokens: true,\n                useAdditionalDayOfYearTokens: true\n            });\n        }\n        if (!isValid(parsedDate)) {\n            parsedDate = new Date(value);\n        }\n    }\n    return isValid(parsedDate) && strictParsingValueMatch ? parsedDate : null;\n}\nfunction isValid(date, minDate) {\n    minDate = minDate ? minDate : new Date(\"1/1/1000\");\n    return (0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(date) && !(0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, minDate);\n}\n// ** Date Formatting **\nfunction formatDate(date, formatStr, locale) {\n    if (locale === \"en\") {\n        return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\n            useAdditionalWeekYearTokens: true,\n            useAdditionalDayOfYearTokens: true\n        });\n    }\n    var localeObj = getLocaleObject(locale);\n    if (locale && !localeObj) {\n        console.warn('A locale object was not found for the provided string [\"'.concat(locale, '\"].'));\n    }\n    if (!localeObj && !!getDefaultLocale() && !!getLocaleObject(getDefaultLocale())) {\n        localeObj = getLocaleObject(getDefaultLocale());\n    }\n    return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\n        locale: localeObj ? localeObj : null,\n        useAdditionalWeekYearTokens: true,\n        useAdditionalDayOfYearTokens: true\n    });\n}\nfunction safeDateFormat(date, _ref) {\n    var dateFormat = _ref.dateFormat, locale = _ref.locale;\n    return date && formatDate(date, Array.isArray(dateFormat) ? dateFormat[0] : dateFormat, locale) || \"\";\n}\nfunction safeDateRangeFormat(startDate, endDate, props) {\n    if (!startDate) {\n        return \"\";\n    }\n    var formattedStartDate = safeDateFormat(startDate, props);\n    var formattedEndDate = endDate ? safeDateFormat(endDate, props) : \"\";\n    return \"\".concat(formattedStartDate, \" - \").concat(formattedEndDate);\n}\nfunction safeMultipleDatesFormat(dates, props) {\n    if (!(dates !== null && dates !== void 0 && dates.length)) {\n        return \"\";\n    }\n    var formattedFirstDate = safeDateFormat(dates[0], props);\n    if (dates.length === 1) {\n        return formattedFirstDate;\n    }\n    if (dates.length === 2) {\n        var formattedSecondDate = safeDateFormat(dates[1], props);\n        return \"\".concat(formattedFirstDate, \", \").concat(formattedSecondDate);\n    }\n    var extraDatesCount = dates.length - 1;\n    return \"\".concat(formattedFirstDate, \" (+\").concat(extraDatesCount, \")\");\n}\n// ** Date Setters **\nfunction setTime(date, _ref2) {\n    var _ref2$hour = _ref2.hour, hour = _ref2$hour === void 0 ? 0 : _ref2$hour, _ref2$minute = _ref2.minute, minute = _ref2$minute === void 0 ? 0 : _ref2$minute, _ref2$second = _ref2.second, second = _ref2$second === void 0 ? 0 : _ref2$second;\n    return (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)((0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)((0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(date, second), minute), hour);\n}\nfunction getWeek(date, locale) {\n    var localeObj = locale && getLocaleObject(locale) || getDefaultLocale() && getLocaleObject(getDefaultLocale());\n    return (0,date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__.getISOWeek)(date, localeObj ? {\n        locale: localeObj\n    } : null);\n}\nfunction getDayOfWeekCode(day, locale) {\n    return formatDate(day, \"ddd\", locale);\n}\n// *** Start of ***\nfunction getStartOfDay(date) {\n    return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(date);\n}\nfunction getStartOfWeek(date, locale, calendarStartDay) {\n    var localeObj = locale ? getLocaleObject(locale) : getLocaleObject(getDefaultLocale());\n    return (0,date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__.startOfWeek)(date, {\n        locale: localeObj,\n        weekStartsOn: calendarStartDay\n    });\n}\nfunction getStartOfMonth(date) {\n    return (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(date);\n}\nfunction getStartOfYear(date) {\n    return (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\n}\nfunction getStartOfQuarter(date) {\n    return (0,date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__.startOfQuarter)(date);\n}\nfunction getStartOfToday() {\n    return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(newDate());\n}\n// *** End of ***\nfunction getEndOfWeek(date) {\n    return (0,date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_20__.endOfWeek)(date);\n}\nfunction isSameYear(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_21__.isSameYear)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\nfunction isSameMonth(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_22__.isSameMonth)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\nfunction isSameQuarter(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_23__.isSameQuarter)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\nfunction isSameDay(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_24__.isSameDay)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\nfunction isEqual(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isEqual__WEBPACK_IMPORTED_MODULE_25__.isEqual)(date1, date2);\n    } else {\n        return !date1 && !date2;\n    }\n}\nfunction isDayInRange(day, startDate, endDate) {\n    var valid;\n    var start = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(startDate);\n    var end = (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(endDate);\n    try {\n        valid = (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n            start: start,\n            end: end\n        });\n    } catch (err) {\n        valid = false;\n    }\n    return valid;\n}\n// ** Date Localization **\nfunction registerLocale(localeName, localeData) {\n    var scope =  false ? 0 : globalThis;\n    if (!scope.__localeData__) {\n        scope.__localeData__ = {};\n    }\n    scope.__localeData__[localeName] = localeData;\n}\nfunction setDefaultLocale(localeName) {\n    var scope =  false ? 0 : globalThis;\n    scope.__localeId__ = localeName;\n}\nfunction getDefaultLocale() {\n    var scope =  false ? 0 : globalThis;\n    return scope.__localeId__;\n}\nfunction getLocaleObject(localeSpec) {\n    if (typeof localeSpec === \"string\") {\n        // Treat it as a locale name registered by registerLocale\n        var scope =  false ? 0 : globalThis;\n        return scope.__localeData__ ? scope.__localeData__[localeSpec] : null;\n    } else {\n        // Treat it as a raw date-fns locale object\n        return localeSpec;\n    }\n}\nfunction getFormattedWeekdayInLocale(date, formatFunc, locale) {\n    return formatFunc(formatDate(date, \"EEEE\", locale));\n}\nfunction getWeekdayMinInLocale(date, locale) {\n    return formatDate(date, \"EEEEEE\", locale);\n}\nfunction getWeekdayShortInLocale(date, locale) {\n    return formatDate(date, \"EEE\", locale);\n}\nfunction getMonthInLocale(month, locale) {\n    return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLLL\", locale);\n}\nfunction getMonthShortInLocale(month, locale) {\n    return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLL\", locale);\n}\nfunction getQuarterShortInLocale(quarter, locale) {\n    return formatDate((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(newDate(), quarter), \"QQQ\", locale);\n}\n// ** Utils for some components **\nfunction isDayDisabled(day) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minDate = _ref3.minDate, maxDate = _ref3.maxDate, excludeDates = _ref3.excludeDates, excludeDateIntervals = _ref3.excludeDateIntervals, includeDates = _ref3.includeDates, includeDateIntervals = _ref3.includeDateIntervals, filterDate = _ref3.filterDate;\n    return isOutOfBounds(day, {\n        minDate: minDate,\n        maxDate: maxDate\n    }) || excludeDates && excludeDates.some(function(excludeDate) {\n        return isSameDay(day, excludeDate.date ? excludeDate.date : excludeDate);\n    }) || excludeDateIntervals && excludeDateIntervals.some(function(_ref4) {\n        var start = _ref4.start, end = _ref4.end;\n        return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n            start: start,\n            end: end\n        });\n    }) || includeDates && !includeDates.some(function(includeDate) {\n        return isSameDay(day, includeDate);\n    }) || includeDateIntervals && !includeDateIntervals.some(function(_ref5) {\n        var start = _ref5.start, end = _ref5.end;\n        return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n            start: start,\n            end: end\n        });\n    }) || filterDate && !filterDate(newDate(day)) || false;\n}\nfunction isDayExcluded(day) {\n    var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, excludeDates = _ref6.excludeDates, excludeDateIntervals = _ref6.excludeDateIntervals;\n    if (excludeDateIntervals && excludeDateIntervals.length > 0) {\n        return excludeDateIntervals.some(function(_ref7) {\n            var start = _ref7.start, end = _ref7.end;\n            return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n                start: start,\n                end: end\n            });\n        });\n    }\n    return excludeDates && excludeDates.some(function(excludeDate) {\n        return isSameDay(day, excludeDate.date ? excludeDate.date : excludeDate);\n    }) || false;\n}\nfunction isMonthDisabled(month) {\n    var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minDate = _ref8.minDate, maxDate = _ref8.maxDate, excludeDates = _ref8.excludeDates, includeDates = _ref8.includeDates, filterDate = _ref8.filterDate;\n    return isOutOfBounds(month, {\n        minDate: (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(minDate),\n        maxDate: (0,date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__.endOfMonth)(maxDate)\n    }) || excludeDates && excludeDates.some(function(excludeDate) {\n        return isSameMonth(month, excludeDate);\n    }) || includeDates && !includeDates.some(function(includeDate) {\n        return isSameMonth(month, includeDate);\n    }) || filterDate && !filterDate(newDate(month)) || false;\n}\nfunction isMonthInRange(startDate, endDate, m, day) {\n    var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\n    var startDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(startDate);\n    var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\n    var endDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(endDate);\n    var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\n    if (startDateYear === endDateYear && startDateYear === dayYear) {\n        return startDateMonth <= m && m <= endDateMonth;\n    } else if (startDateYear < endDateYear) {\n        return dayYear === startDateYear && startDateMonth <= m || dayYear === endDateYear && endDateMonth >= m || dayYear < endDateYear && dayYear > startDateYear;\n    }\n}\nfunction isQuarterDisabled(quarter) {\n    var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minDate = _ref9.minDate, maxDate = _ref9.maxDate, excludeDates = _ref9.excludeDates, includeDates = _ref9.includeDates, filterDate = _ref9.filterDate;\n    return isOutOfBounds(quarter, {\n        minDate: minDate,\n        maxDate: maxDate\n    }) || excludeDates && excludeDates.some(function(excludeDate) {\n        return isSameQuarter(quarter, excludeDate);\n    }) || includeDates && !includeDates.some(function(includeDate) {\n        return isSameQuarter(quarter, includeDate);\n    }) || filterDate && !filterDate(newDate(quarter)) || false;\n}\n/**\n * @param {number} year\n * @param {Date} start\n * @param {Date} end\n * @returns {boolean}\n */ function isYearInRange(year, start, end) {\n    if (!(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(start) || !(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(end)) return false;\n    var startYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(start);\n    var endYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(end);\n    return startYear <= year && endYear >= year;\n}\nfunction isYearDisabled(year) {\n    var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minDate = _ref10.minDate, maxDate = _ref10.maxDate, excludeDates = _ref10.excludeDates, includeDates = _ref10.includeDates, filterDate = _ref10.filterDate;\n    var date = new Date(year, 0, 1);\n    return isOutOfBounds(date, {\n        minDate: (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(minDate),\n        maxDate: (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(maxDate)\n    }) || excludeDates && excludeDates.some(function(excludeDate) {\n        return isSameYear(date, excludeDate);\n    }) || includeDates && !includeDates.some(function(includeDate) {\n        return isSameYear(date, includeDate);\n    }) || filterDate && !filterDate(newDate(date)) || false;\n}\nfunction isQuarterInRange(startDate, endDate, q, day) {\n    var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\n    var startDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(startDate);\n    var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\n    var endDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(endDate);\n    var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\n    if (startDateYear === endDateYear && startDateYear === dayYear) {\n        return startDateQuarter <= q && q <= endDateQuarter;\n    } else if (startDateYear < endDateYear) {\n        return dayYear === startDateYear && startDateQuarter <= q || dayYear === endDateYear && endDateQuarter >= q || dayYear < endDateYear && dayYear > startDateYear;\n    }\n}\nfunction isOutOfBounds(day) {\n    var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minDate = _ref11.minDate, maxDate = _ref11.maxDate;\n    return minDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, minDate) < 0 || maxDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, maxDate) > 0;\n}\nfunction isTimeInList(time, times) {\n    return times.some(function(listTime) {\n        return (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(listTime) === (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) && (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(listTime) === (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time);\n    });\n}\nfunction isTimeDisabled(time) {\n    var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, excludeTimes = _ref12.excludeTimes, includeTimes = _ref12.includeTimes, filterTime = _ref12.filterTime;\n    return excludeTimes && isTimeInList(time, excludeTimes) || includeTimes && !isTimeInList(time, includeTimes) || filterTime && !filterTime(time) || false;\n}\nfunction isTimeInDisabledRange(time, _ref13) {\n    var minTime = _ref13.minTime, maxTime = _ref13.maxTime;\n    if (!minTime || !maxTime) {\n        throw new Error(\"Both minTime and maxTime props required\");\n    }\n    var base = newDate();\n    var baseTime = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)((0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(base, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time)), (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time));\n    var min = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)((0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(base, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(minTime)), (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(minTime));\n    var max = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)((0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(base, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(maxTime)), (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(maxTime));\n    var valid;\n    try {\n        valid = !(0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(baseTime, {\n            start: min,\n            end: max\n        });\n    } catch (err) {\n        valid = false;\n    }\n    return valid;\n}\nfunction monthDisabledBefore(day) {\n    var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minDate = _ref14.minDate, includeDates = _ref14.includeDates;\n    var previousMonth = (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_38__.subMonths)(day, 1);\n    return minDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_39__.differenceInCalendarMonths)(minDate, previousMonth) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_39__.differenceInCalendarMonths)(includeDate, previousMonth) > 0;\n    }) || false;\n}\nfunction monthDisabledAfter(day) {\n    var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, maxDate = _ref15.maxDate, includeDates = _ref15.includeDates;\n    var nextMonth = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_40__.addMonths)(day, 1);\n    return maxDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_39__.differenceInCalendarMonths)(nextMonth, maxDate) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_39__.differenceInCalendarMonths)(nextMonth, includeDate) > 0;\n    }) || false;\n}\nfunction quarterDisabledBefore(date) {\n    var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minDate = _ref16.minDate, includeDates = _ref16.includeDates;\n    var firstDateOfYear = (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\n    var previousQuarter = (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_41__.subQuarters)(firstDateOfYear, 1);\n    return minDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_42__.differenceInCalendarQuarters)(minDate, previousQuarter) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_42__.differenceInCalendarQuarters)(includeDate, previousQuarter) > 0;\n    }) || false;\n}\nfunction quarterDisabledAfter(date) {\n    var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, maxDate = _ref17.maxDate, includeDates = _ref17.includeDates;\n    var lastDateOfYear = (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(date);\n    var nextQuarter = (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_43__.addQuarters)(lastDateOfYear, 1);\n    return maxDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_42__.differenceInCalendarQuarters)(nextQuarter, maxDate) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_42__.differenceInCalendarQuarters)(nextQuarter, includeDate) > 0;\n    }) || false;\n}\nfunction yearDisabledBefore(day) {\n    var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minDate = _ref18.minDate, includeDates = _ref18.includeDates;\n    var previousYear = (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_44__.subYears)(day, 1);\n    return minDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_45__.differenceInCalendarYears)(minDate, previousYear) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_45__.differenceInCalendarYears)(includeDate, previousYear) > 0;\n    }) || false;\n}\nfunction yearsDisabledBefore(day) {\n    var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minDate = _ref19.minDate, _ref19$yearItemNumber = _ref19.yearItemNumber, yearItemNumber = _ref19$yearItemNumber === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _ref19$yearItemNumber;\n    var previousYear = getStartOfYear((0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_44__.subYears)(day, yearItemNumber));\n    var _getYearsPeriod = getYearsPeriod(previousYear, yearItemNumber), endPeriod = _getYearsPeriod.endPeriod;\n    var minDateYear = minDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate);\n    return minDateYear && minDateYear > endPeriod || false;\n}\nfunction yearDisabledAfter(day) {\n    var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, maxDate = _ref20.maxDate, includeDates = _ref20.includeDates;\n    var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_46__.addYears)(day, 1);\n    return maxDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_45__.differenceInCalendarYears)(nextYear, maxDate) > 0 || includeDates && includeDates.every(function(includeDate) {\n        return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_45__.differenceInCalendarYears)(nextYear, includeDate) > 0;\n    }) || false;\n}\nfunction yearsDisabledAfter(day) {\n    var _ref21 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, maxDate = _ref21.maxDate, _ref21$yearItemNumber = _ref21.yearItemNumber, yearItemNumber = _ref21$yearItemNumber === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _ref21$yearItemNumber;\n    var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_46__.addYears)(day, yearItemNumber);\n    var _getYearsPeriod2 = getYearsPeriod(nextYear, yearItemNumber), startPeriod = _getYearsPeriod2.startPeriod;\n    var maxDateYear = maxDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate);\n    return maxDateYear && maxDateYear < startPeriod || false;\n}\nfunction getEffectiveMinDate(_ref22) {\n    var minDate = _ref22.minDate, includeDates = _ref22.includeDates;\n    if (includeDates && minDate) {\n        var minDates = includeDates.filter(function(includeDate) {\n            return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, minDate) >= 0;\n        });\n        return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_47__.min)(minDates);\n    } else if (includeDates) {\n        return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_47__.min)(includeDates);\n    } else {\n        return minDate;\n    }\n}\nfunction getEffectiveMaxDate(_ref23) {\n    var maxDate = _ref23.maxDate, includeDates = _ref23.includeDates;\n    if (includeDates && maxDate) {\n        var maxDates = includeDates.filter(function(includeDate) {\n            return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, maxDate) <= 0;\n        });\n        return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_48__.max)(maxDates);\n    } else if (includeDates) {\n        return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_48__.max)(includeDates);\n    } else {\n        return maxDate;\n    }\n}\nfunction getHightLightDaysMap() {\n    var highlightDates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var defaultClassName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"react-datepicker__day--highlighted\";\n    var dateClasses = new Map();\n    for(var i = 0, len = highlightDates.length; i < len; i++){\n        var obj = highlightDates[i];\n        if ((0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_49__.isDate)(obj)) {\n            var key = formatDate(obj, \"MM.dd.yyyy\");\n            var classNamesArr = dateClasses.get(key) || [];\n            if (!classNamesArr.includes(defaultClassName)) {\n                classNamesArr.push(defaultClassName);\n                dateClasses.set(key, classNamesArr);\n            }\n        } else if (_typeof(obj) === \"object\") {\n            var keys = Object.keys(obj);\n            var className = keys[0];\n            var arrOfDates = obj[keys[0]];\n            if (typeof className === \"string\" && arrOfDates.constructor === Array) {\n                for(var k = 0, _len = arrOfDates.length; k < _len; k++){\n                    var _key = formatDate(arrOfDates[k], \"MM.dd.yyyy\");\n                    var _classNamesArr = dateClasses.get(_key) || [];\n                    if (!_classNamesArr.includes(className)) {\n                        _classNamesArr.push(className);\n                        dateClasses.set(_key, _classNamesArr);\n                    }\n                }\n            }\n        }\n    }\n    return dateClasses;\n}\n/**\n * Compare the two arrays\n * @param {Array} array1\n * @param {Array} array2\n * @returns {Boolean} true, if the passed array are equal, false otherwise\n */ function arraysAreEqual(array1, array2) {\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    return array1.every(function(value, index) {\n        return value === array2[index];\n    });\n}\n/**\n * Assign the custom class to each date\n * @param {Array} holidayDates array of object containing date and name of the holiday\n * @param {string} classname to be added.\n * @returns {Map} Map containing date as key and array of classname and holiday name as value\n */ function getHolidaysMap() {\n    var holidayDates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var defaultClassName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"react-datepicker__day--holidays\";\n    var dateClasses = new Map();\n    holidayDates.forEach(function(holiday) {\n        var dateObj = holiday.date, holidayName = holiday.holidayName;\n        if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_49__.isDate)(dateObj)) {\n            return;\n        }\n        var key = formatDate(dateObj, \"MM.dd.yyyy\");\n        var classNamesObj = dateClasses.get(key) || {};\n        if (\"className\" in classNamesObj && classNamesObj[\"className\"] === defaultClassName && arraysAreEqual(classNamesObj[\"holidayNames\"], [\n            holidayName\n        ])) {\n            return;\n        }\n        classNamesObj[\"className\"] = defaultClassName;\n        var holidayNameArr = classNamesObj[\"holidayNames\"];\n        classNamesObj[\"holidayNames\"] = holidayNameArr ? [].concat(_toConsumableArray(holidayNameArr), [\n            holidayName\n        ]) : [\n            holidayName\n        ];\n        dateClasses.set(key, classNamesObj);\n    });\n    return dateClasses;\n}\nfunction timesToInjectAfter(startOfDay, currentTime, currentMultiplier, intervals, injectedTimes) {\n    var l = injectedTimes.length;\n    var times = [];\n    for(var i = 0; i < l; i++){\n        var injectedTime = startOfDay;\n        injectedTime = (0,date_fns_addHours__WEBPACK_IMPORTED_MODULE_50__.addHours)(injectedTime, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(injectedTimes[i]));\n        injectedTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_51__.addMinutes)(injectedTime, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(injectedTimes[i]));\n        injectedTime = (0,_barrel_optimize_names_addSeconds_getSeconds_date_fns__WEBPACK_IMPORTED_MODULE_52__.addSeconds)(injectedTime, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_53__.getSeconds)(injectedTimes[i]));\n        var nextTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_51__.addMinutes)(startOfDay, (currentMultiplier + 1) * intervals);\n        if ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(injectedTime, currentTime) && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(injectedTime, nextTime)) {\n            times.push(injectedTimes[i]);\n        }\n    }\n    return times;\n}\nfunction addZero(i) {\n    return i < 10 ? \"0\".concat(i) : \"\".concat(i);\n}\nfunction getYearsPeriod(date) {\n    var yearItemNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_YEAR_ITEM_NUMBER;\n    var endPeriod = Math.ceil((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date) / yearItemNumber) * yearItemNumber;\n    var startPeriod = endPeriod - (yearItemNumber - 1);\n    return {\n        startPeriod: startPeriod,\n        endPeriod: endPeriod\n    };\n}\nfunction getHoursInDay(d) {\n    var startOfDay = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n    var startOfTheNextDay = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 24);\n    return Math.round((+startOfTheNextDay - +startOfDay) / 3600000);\n}\n/**\n * Returns the start of the minute for the given date\n *\n * NOTE: this function is a DST and timezone-safe analog of `date-fns/startOfMinute`\n * do not make changes unless you know what you're doing\n *\n * See comments on https://github.com/Hacker0x01/react-datepicker/pull/4244\n * for more details\n *\n * @param {Date} d date\n * @returns {Date} start of the minute\n */ function startOfMinute(d) {\n    var seconds = d.getSeconds();\n    var milliseconds = d.getMilliseconds();\n    return (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(d.getTime() - seconds * 1000 - milliseconds);\n}\n/**\n * Returns whether the given dates are in the same minute\n *\n * This function is a DST and timezone-safe analog of `date-fns/isSameMinute`\n *\n * @param {Date} d1\n * @param {Date} d2\n * @returns {boolean}\n */ function isSameMinute(d1, d2) {\n    return startOfMinute(d1).getTime() === startOfMinute(d2).getTime();\n}\n/**\n * Returns a cloned date with midnight time (00:00:00)\n *\n * @param {Date} date The date for which midnight time is required\n * @param {Date} dateToCompare the date to compare with\n * @returns {Date} A new datetime object representing the input date with midnight time\n */ function getMidnightDate(date) {\n    if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_49__.isDate)(date)) {\n        throw new Error(\"Invalid date\");\n    }\n    var dateWithoutTime = new Date(date);\n    dateWithoutTime.setHours(0, 0, 0, 0);\n    return dateWithoutTime;\n}\n/**\n * Is the first date before the second one?\n *\n * @param {Date} date The date that should be before the other one to return true\n * @param {Date} dateToCompare The date to compare with\n * @returns {boolean} The first date is before the second date\n *\n * Note:\n *  This function considers the mid-night of the given dates for comparison.\n *  It evaluates whether date is before dateToCompare based on their mid-night timestamps.\n */ function isDateBefore(date, dateToCompare) {\n    if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_49__.isDate)(date) || !(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_49__.isDate)(dateToCompare)) {\n        throw new Error(\"Invalid date received\");\n    }\n    var midnightDate = getMidnightDate(date);\n    var midnightDateToCompare = getMidnightDate(dateToCompare);\n    return (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(midnightDate, midnightDateToCompare);\n}\nfunction isSpaceKeyDown(event) {\n    var SPACE_KEY = \" \";\n    return event.key === SPACE_KEY;\n}\nfunction generateYears(year, noOfYear, minDate, maxDate) {\n    var list = [];\n    for(var i = 0; i < 2 * noOfYear + 1; i++){\n        var newYear = year + noOfYear - i;\n        var isInRange = true;\n        if (minDate) {\n            isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate) <= newYear;\n        }\n        if (maxDate && isInRange) {\n            isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate) >= newYear;\n        }\n        if (isInRange) {\n            list.push(newYear);\n        }\n    }\n    return list;\n}\nvar YearDropdownOptions = /*#__PURE__*/ function(_React$Component) {\n    function YearDropdownOptions(props) {\n        var _this;\n        _classCallCheck(this, YearDropdownOptions);\n        _this = _callSuper(this, YearDropdownOptions, [\n            props\n        ]);\n        _defineProperty(_this, \"renderOptions\", function() {\n            var selectedYear = _this.props.year;\n            var options = _this.state.yearsList.map(function(year) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: selectedYear === year ? \"react-datepicker__year-option react-datepicker__year-option--selected_year\" : \"react-datepicker__year-option\",\n                    key: year,\n                    onClick: _this.onChange.bind(_this, year),\n                    \"aria-selected\": selectedYear === year ? \"true\" : undefined\n                }, selectedYear === year ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                    className: \"react-datepicker__year-option--selected\"\n                }, \"✓\") : \"\", year);\n            });\n            var minYear = _this.props.minDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate) : null;\n            var maxYear = _this.props.maxDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate) : null;\n            if (!maxYear || !_this.state.yearsList.find(function(year) {\n                return year === maxYear;\n            })) {\n                options.unshift(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__year-option\",\n                    key: \"upcoming\",\n                    onClick: _this.incrementYears\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n                    className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming\"\n                })));\n            }\n            if (!minYear || !_this.state.yearsList.find(function(year) {\n                return year === minYear;\n            })) {\n                options.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__year-option\",\n                    key: \"previous\",\n                    onClick: _this.decrementYears\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n                    className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous\"\n                })));\n            }\n            return options;\n        });\n        _defineProperty(_this, \"onChange\", function(year) {\n            _this.props.onChange(year);\n        });\n        _defineProperty(_this, \"handleClickOutside\", function() {\n            _this.props.onCancel();\n        });\n        _defineProperty(_this, \"shiftYears\", function(amount) {\n            var years = _this.state.yearsList.map(function(year) {\n                return year + amount;\n            });\n            _this.setState({\n                yearsList: years\n            });\n        });\n        _defineProperty(_this, \"incrementYears\", function() {\n            return _this.shiftYears(1);\n        });\n        _defineProperty(_this, \"decrementYears\", function() {\n            return _this.shiftYears(-1);\n        });\n        var yearDropdownItemNumber = props.yearDropdownItemNumber, scrollableYearDropdown = props.scrollableYearDropdown;\n        var noOfYear = yearDropdownItemNumber || (scrollableYearDropdown ? 10 : 5);\n        _this.state = {\n            yearsList: generateYears(_this.props.year, noOfYear, _this.props.minDate, _this.props.maxDate)\n        };\n        _this.dropdownRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n        return _this;\n    }\n    _inherits(YearDropdownOptions, _React$Component);\n    return _createClass(YearDropdownOptions, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                var dropdownCurrent = this.dropdownRef.current;\n                if (dropdownCurrent) {\n                    // Get array from HTMLCollection\n                    var dropdownCurrentChildren = dropdownCurrent.children ? Array.from(dropdownCurrent.children) : null;\n                    var selectedYearOptionEl = dropdownCurrentChildren ? dropdownCurrentChildren.find(function(childEl) {\n                        return childEl.ariaSelected;\n                    }) : null;\n                    dropdownCurrent.scrollTop = selectedYearOptionEl ? selectedYearOptionEl.offsetTop + (selectedYearOptionEl.clientHeight - dropdownCurrent.clientHeight) / 2 : (dropdownCurrent.scrollHeight - dropdownCurrent.clientHeight) / 2;\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)({\n                    \"react-datepicker__year-dropdown\": true,\n                    \"react-datepicker__year-dropdown--scrollable\": this.props.scrollableYearDropdown\n                });\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: dropdownClass,\n                    ref: this.dropdownRef\n                }, this.renderOptions());\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar WrappedYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(YearDropdownOptions);\nvar YearDropdown = /*#__PURE__*/ function(_React$Component) {\n    function YearDropdown() {\n        var _this;\n        _classCallCheck(this, YearDropdown);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _callSuper(this, YearDropdown, [].concat(args));\n        _defineProperty(_this, \"state\", {\n            dropdownVisible: false\n        });\n        _defineProperty(_this, \"renderSelectOptions\", function() {\n            var minYear = _this.props.minDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate) : 1900;\n            var maxYear = _this.props.maxDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate) : 2100;\n            var options = [];\n            for(var i = minYear; i <= maxYear; i++){\n                options.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n                    key: i,\n                    value: i\n                }, i));\n            }\n            return options;\n        });\n        _defineProperty(_this, \"onSelectChange\", function(e) {\n            _this.onChange(e.target.value);\n        });\n        _defineProperty(_this, \"renderSelectMode\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n                value: _this.props.year,\n                className: \"react-datepicker__year-select\",\n                onChange: _this.onSelectChange\n            }, _this.renderSelectOptions());\n        });\n        _defineProperty(_this, \"renderReadView\", function(visible) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                key: \"read\",\n                style: {\n                    visibility: visible ? \"visible\" : \"hidden\"\n                },\n                className: \"react-datepicker__year-read-view\",\n                onClick: function onClick(event) {\n                    return _this.toggleDropdown(event);\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                className: \"react-datepicker__year-read-view--down-arrow\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                className: \"react-datepicker__year-read-view--selected-year\"\n            }, _this.props.year));\n        });\n        _defineProperty(_this, \"renderDropdown\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedYearDropdownOptions, {\n                key: \"dropdown\",\n                year: _this.props.year,\n                onChange: _this.onChange,\n                onCancel: _this.toggleDropdown,\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                scrollableYearDropdown: _this.props.scrollableYearDropdown,\n                yearDropdownItemNumber: _this.props.yearDropdownItemNumber\n            });\n        });\n        _defineProperty(_this, \"renderScrollMode\", function() {\n            var dropdownVisible = _this.state.dropdownVisible;\n            var result = [\n                _this.renderReadView(!dropdownVisible)\n            ];\n            if (dropdownVisible) {\n                result.unshift(_this.renderDropdown());\n            }\n            return result;\n        });\n        _defineProperty(_this, \"onChange\", function(year) {\n            _this.toggleDropdown();\n            if (year === _this.props.year) return;\n            _this.props.onChange(year);\n        });\n        _defineProperty(_this, \"toggleDropdown\", function(event) {\n            _this.setState({\n                dropdownVisible: !_this.state.dropdownVisible\n            }, function() {\n                if (_this.props.adjustDateOnChange) {\n                    _this.handleYearChange(_this.props.date, event);\n                }\n            });\n        });\n        _defineProperty(_this, \"handleYearChange\", function(date, event) {\n            _this.onSelect(date, event);\n            _this.setOpen();\n        });\n        _defineProperty(_this, \"onSelect\", function(date, event) {\n            if (_this.props.onSelect) {\n                _this.props.onSelect(date, event);\n            }\n        });\n        _defineProperty(_this, \"setOpen\", function() {\n            if (_this.props.setOpen) {\n                _this.props.setOpen(true);\n            }\n        });\n        return _this;\n    }\n    _inherits(YearDropdown, _React$Component);\n    return _createClass(YearDropdown, [\n        {\n            key: \"render\",\n            value: function render() {\n                var renderedDropdown;\n                switch(this.props.dropdownMode){\n                    case \"scroll\":\n                        renderedDropdown = this.renderScrollMode();\n                        break;\n                    case \"select\":\n                        renderedDropdown = this.renderSelectMode();\n                        break;\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--\".concat(this.props.dropdownMode)\n                }, renderedDropdown);\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar MonthDropdownOptions = /*#__PURE__*/ function(_React$Component) {\n    function MonthDropdownOptions() {\n        var _this;\n        _classCallCheck(this, MonthDropdownOptions);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _callSuper(this, MonthDropdownOptions, [].concat(args));\n        _defineProperty(_this, \"isSelectedMonth\", function(i) {\n            return _this.props.month === i;\n        });\n        _defineProperty(_this, \"renderOptions\", function() {\n            return _this.props.monthNames.map(function(month, i) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: _this.isSelectedMonth(i) ? \"react-datepicker__month-option react-datepicker__month-option--selected_month\" : \"react-datepicker__month-option\",\n                    key: month,\n                    onClick: _this.onChange.bind(_this, i),\n                    \"aria-selected\": _this.isSelectedMonth(i) ? \"true\" : undefined\n                }, _this.isSelectedMonth(i) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                    className: \"react-datepicker__month-option--selected\"\n                }, \"✓\") : \"\", month);\n            });\n        });\n        _defineProperty(_this, \"onChange\", function(month) {\n            return _this.props.onChange(month);\n        });\n        _defineProperty(_this, \"handleClickOutside\", function() {\n            return _this.props.onCancel();\n        });\n        return _this;\n    }\n    _inherits(MonthDropdownOptions, _React$Component);\n    return _createClass(MonthDropdownOptions, [\n        {\n            key: \"render\",\n            value: function render() {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__month-dropdown\"\n                }, this.renderOptions());\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar WrappedMonthDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthDropdownOptions);\nvar MonthDropdown = /*#__PURE__*/ function(_React$Component) {\n    function MonthDropdown() {\n        var _this;\n        _classCallCheck(this, MonthDropdown);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _callSuper(this, MonthDropdown, [].concat(args));\n        _defineProperty(_this, \"state\", {\n            dropdownVisible: false\n        });\n        _defineProperty(_this, \"renderSelectOptions\", function(monthNames) {\n            return monthNames.map(function(M, i) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n                    key: i,\n                    value: i\n                }, M);\n            });\n        });\n        _defineProperty(_this, \"renderSelectMode\", function(monthNames) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n                value: _this.props.month,\n                className: \"react-datepicker__month-select\",\n                onChange: function onChange(e) {\n                    return _this.onChange(e.target.value);\n                }\n            }, _this.renderSelectOptions(monthNames));\n        });\n        _defineProperty(_this, \"renderReadView\", function(visible, monthNames) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                key: \"read\",\n                style: {\n                    visibility: visible ? \"visible\" : \"hidden\"\n                },\n                className: \"react-datepicker__month-read-view\",\n                onClick: _this.toggleDropdown\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                className: \"react-datepicker__month-read-view--down-arrow\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                className: \"react-datepicker__month-read-view--selected-month\"\n            }, monthNames[_this.props.month]));\n        });\n        _defineProperty(_this, \"renderDropdown\", function(monthNames) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedMonthDropdownOptions, {\n                key: \"dropdown\",\n                month: _this.props.month,\n                monthNames: monthNames,\n                onChange: _this.onChange,\n                onCancel: _this.toggleDropdown\n            });\n        });\n        _defineProperty(_this, \"renderScrollMode\", function(monthNames) {\n            var dropdownVisible = _this.state.dropdownVisible;\n            var result = [\n                _this.renderReadView(!dropdownVisible, monthNames)\n            ];\n            if (dropdownVisible) {\n                result.unshift(_this.renderDropdown(monthNames));\n            }\n            return result;\n        });\n        _defineProperty(_this, \"onChange\", function(month) {\n            _this.toggleDropdown();\n            if (month !== _this.props.month) {\n                _this.props.onChange(month);\n            }\n        });\n        _defineProperty(_this, \"toggleDropdown\", function() {\n            return _this.setState({\n                dropdownVisible: !_this.state.dropdownVisible\n            });\n        });\n        return _this;\n    }\n    _inherits(MonthDropdown, _React$Component);\n    return _createClass(MonthDropdown, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this2 = this;\n                var monthNames = [\n                    0,\n                    1,\n                    2,\n                    3,\n                    4,\n                    5,\n                    6,\n                    7,\n                    8,\n                    9,\n                    10,\n                    11\n                ].map(this.props.useShortMonthInDropdown ? function(M) {\n                    return getMonthShortInLocale(M, _this2.props.locale);\n                } : function(M) {\n                    return getMonthInLocale(M, _this2.props.locale);\n                });\n                var renderedDropdown;\n                switch(this.props.dropdownMode){\n                    case \"scroll\":\n                        renderedDropdown = this.renderScrollMode(monthNames);\n                        break;\n                    case \"select\":\n                        renderedDropdown = this.renderSelectMode(monthNames);\n                        break;\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--\".concat(this.props.dropdownMode)\n                }, renderedDropdown);\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nfunction generateMonthYears(minDate, maxDate) {\n    var list = [];\n    var currDate = getStartOfMonth(minDate);\n    var lastDate = getStartOfMonth(maxDate);\n    while(!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)){\n        list.push(newDate(currDate));\n        currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_40__.addMonths)(currDate, 1);\n    }\n    return list;\n}\nvar MonthYearDropdownOptions = /*#__PURE__*/ function(_React$Component) {\n    function MonthYearDropdownOptions(props) {\n        var _this;\n        _classCallCheck(this, MonthYearDropdownOptions);\n        _this = _callSuper(this, MonthYearDropdownOptions, [\n            props\n        ]);\n        _defineProperty(_this, \"renderOptions\", function() {\n            return _this.state.monthYearsList.map(function(monthYear) {\n                var monthYearPoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(monthYear);\n                var isSameMonthYear = isSameYear(_this.props.date, monthYear) && isSameMonth(_this.props.date, monthYear);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: isSameMonthYear ? \"react-datepicker__month-year-option--selected_month-year\" : \"react-datepicker__month-year-option\",\n                    key: monthYearPoint,\n                    onClick: _this.onChange.bind(_this, monthYearPoint),\n                    \"aria-selected\": isSameMonthYear ? \"true\" : undefined\n                }, isSameMonthYear ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                    className: \"react-datepicker__month-year-option--selected\"\n                }, \"✓\") : \"\", formatDate(monthYear, _this.props.dateFormat, _this.props.locale));\n            });\n        });\n        _defineProperty(_this, \"onChange\", function(monthYear) {\n            return _this.props.onChange(monthYear);\n        });\n        _defineProperty(_this, \"handleClickOutside\", function() {\n            _this.props.onCancel();\n        });\n        _this.state = {\n            monthYearsList: generateMonthYears(_this.props.minDate, _this.props.maxDate)\n        };\n        return _this;\n    }\n    _inherits(MonthYearDropdownOptions, _React$Component);\n    return _createClass(MonthYearDropdownOptions, [\n        {\n            key: \"render\",\n            value: function render() {\n                var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)({\n                    \"react-datepicker__month-year-dropdown\": true,\n                    \"react-datepicker__month-year-dropdown--scrollable\": this.props.scrollableMonthYearDropdown\n                });\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: dropdownClass\n                }, this.renderOptions());\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar WrappedMonthYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthYearDropdownOptions);\nvar MonthYearDropdown = /*#__PURE__*/ function(_React$Component) {\n    function MonthYearDropdown() {\n        var _this;\n        _classCallCheck(this, MonthYearDropdown);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _callSuper(this, MonthYearDropdown, [].concat(args));\n        _defineProperty(_this, \"state\", {\n            dropdownVisible: false\n        });\n        _defineProperty(_this, \"renderSelectOptions\", function() {\n            var currDate = getStartOfMonth(_this.props.minDate);\n            var lastDate = getStartOfMonth(_this.props.maxDate);\n            var options = [];\n            while(!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)){\n                var timePoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(currDate);\n                options.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n                    key: timePoint,\n                    value: timePoint\n                }, formatDate(currDate, _this.props.dateFormat, _this.props.locale)));\n                currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_40__.addMonths)(currDate, 1);\n            }\n            return options;\n        });\n        _defineProperty(_this, \"onSelectChange\", function(e) {\n            _this.onChange(e.target.value);\n        });\n        _defineProperty(_this, \"renderSelectMode\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n                value: (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(getStartOfMonth(_this.props.date)),\n                className: \"react-datepicker__month-year-select\",\n                onChange: _this.onSelectChange\n            }, _this.renderSelectOptions());\n        });\n        _defineProperty(_this, \"renderReadView\", function(visible) {\n            var yearMonth = formatDate(_this.props.date, _this.props.dateFormat, _this.props.locale);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                key: \"read\",\n                style: {\n                    visibility: visible ? \"visible\" : \"hidden\"\n                },\n                className: \"react-datepicker__month-year-read-view\",\n                onClick: function onClick(event) {\n                    return _this.toggleDropdown(event);\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                className: \"react-datepicker__month-year-read-view--down-arrow\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                className: \"react-datepicker__month-year-read-view--selected-month-year\"\n            }, yearMonth));\n        });\n        _defineProperty(_this, \"renderDropdown\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedMonthYearDropdownOptions, {\n                key: \"dropdown\",\n                date: _this.props.date,\n                dateFormat: _this.props.dateFormat,\n                onChange: _this.onChange,\n                onCancel: _this.toggleDropdown,\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown,\n                locale: _this.props.locale\n            });\n        });\n        _defineProperty(_this, \"renderScrollMode\", function() {\n            var dropdownVisible = _this.state.dropdownVisible;\n            var result = [\n                _this.renderReadView(!dropdownVisible)\n            ];\n            if (dropdownVisible) {\n                result.unshift(_this.renderDropdown());\n            }\n            return result;\n        });\n        _defineProperty(_this, \"onChange\", function(monthYearPoint) {\n            _this.toggleDropdown();\n            var changedDate = newDate(parseInt(monthYearPoint));\n            if (isSameYear(_this.props.date, changedDate) && isSameMonth(_this.props.date, changedDate)) {\n                return;\n            }\n            _this.props.onChange(changedDate);\n        });\n        _defineProperty(_this, \"toggleDropdown\", function() {\n            return _this.setState({\n                dropdownVisible: !_this.state.dropdownVisible\n            });\n        });\n        return _this;\n    }\n    _inherits(MonthYearDropdown, _React$Component);\n    return _createClass(MonthYearDropdown, [\n        {\n            key: \"render\",\n            value: function render() {\n                var renderedDropdown;\n                switch(this.props.dropdownMode){\n                    case \"scroll\":\n                        renderedDropdown = this.renderScrollMode();\n                        break;\n                    case \"select\":\n                        renderedDropdown = this.renderSelectMode();\n                        break;\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--\".concat(this.props.dropdownMode)\n                }, renderedDropdown);\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar Day = /*#__PURE__*/ function(_React$Component) {\n    function Day() {\n        var _this;\n        _classCallCheck(this, Day);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _callSuper(this, Day, [].concat(args));\n        _defineProperty(_this, \"dayEl\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createRef());\n        _defineProperty(_this, \"handleClick\", function(event) {\n            if (!_this.isDisabled() && _this.props.onClick) {\n                _this.props.onClick(event);\n            }\n        });\n        _defineProperty(_this, \"handleMouseEnter\", function(event) {\n            if (!_this.isDisabled() && _this.props.onMouseEnter) {\n                _this.props.onMouseEnter(event);\n            }\n        });\n        _defineProperty(_this, \"handleOnKeyDown\", function(event) {\n            var eventKey = event.key;\n            if (eventKey === \" \") {\n                event.preventDefault();\n                event.key = \"Enter\";\n            }\n            _this.props.handleOnKeyDown(event);\n        });\n        _defineProperty(_this, \"isSameDay\", function(other) {\n            return isSameDay(_this.props.day, other);\n        });\n        _defineProperty(_this, \"isKeyboardSelected\", function() {\n            var _this$props$selectedD;\n            if (_this.props.disabledKeyboardNavigation) {\n                return false;\n            }\n            var isSelectedDate = _this.props.selectsMultiple ? (_this$props$selectedD = _this.props.selectedDates) === null || _this$props$selectedD === void 0 ? void 0 : _this$props$selectedD.some(function(date) {\n                return _this.isSameDayOrWeek(date);\n            }) : _this.isSameDayOrWeek(_this.props.selected);\n            return !isSelectedDate && _this.isSameDayOrWeek(_this.props.preSelection);\n        });\n        _defineProperty(_this, \"isDisabled\", function() {\n            return isDayDisabled(_this.props.day, _this.props);\n        });\n        _defineProperty(_this, \"isExcluded\", function() {\n            return isDayExcluded(_this.props.day, _this.props);\n        });\n        _defineProperty(_this, \"isStartOfWeek\", function() {\n            return isSameDay(_this.props.day, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n        });\n        _defineProperty(_this, \"isSameWeek\", function(other) {\n            return _this.props.showWeekPicker && isSameDay(other, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n        });\n        _defineProperty(_this, \"isSameDayOrWeek\", function(other) {\n            return _this.isSameDay(other) || _this.isSameWeek(other);\n        });\n        _defineProperty(_this, \"getHighLightedClass\", function() {\n            var _this$props = _this.props, day = _this$props.day, highlightDates = _this$props.highlightDates;\n            if (!highlightDates) {\n                return false;\n            }\n            // Looking for className in the Map of {'day string, 'className'}\n            var dayStr = formatDate(day, \"MM.dd.yyyy\");\n            return highlightDates.get(dayStr);\n        });\n        // Function to return the array containing classname associated to the date\n        _defineProperty(_this, \"getHolidaysClass\", function() {\n            var _this$props2 = _this.props, day = _this$props2.day, holidays = _this$props2.holidays;\n            if (!holidays) {\n                return false;\n            }\n            var dayStr = formatDate(day, \"MM.dd.yyyy\");\n            // Looking for className in the Map of {day string: {className, holidayName}}\n            if (holidays.has(dayStr)) {\n                return [\n                    holidays.get(dayStr).className\n                ];\n            }\n        });\n        _defineProperty(_this, \"isInRange\", function() {\n            var _this$props3 = _this.props, day = _this$props3.day, startDate = _this$props3.startDate, endDate = _this$props3.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isDayInRange(day, startDate, endDate);\n        });\n        _defineProperty(_this, \"isInSelectingRange\", function() {\n            var _this$props$selecting;\n            var _this$props4 = _this.props, day = _this$props4.day, selectsStart = _this$props4.selectsStart, selectsEnd = _this$props4.selectsEnd, selectsRange = _this$props4.selectsRange, selectsDisabledDaysInRange = _this$props4.selectsDisabledDaysInRange, startDate = _this$props4.startDate, endDate = _this$props4.endDate;\n            var selectingDate = (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\n            if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate || !selectsDisabledDaysInRange && _this.isDisabled()) {\n                return false;\n            }\n            if (selectsStart && endDate && ((0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(selectingDate, endDate) || isEqual(selectingDate, endDate))) {\n                return isDayInRange(day, selectingDate, endDate);\n            }\n            if (selectsEnd && startDate && ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n                return isDayInRange(day, startDate, selectingDate);\n            }\n            if (selectsRange && startDate && !endDate && ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n                return isDayInRange(day, startDate, selectingDate);\n            }\n            return false;\n        });\n        _defineProperty(_this, \"isSelectingRangeStart\", function() {\n            var _this$props$selecting2;\n            if (!_this.isInSelectingRange()) {\n                return false;\n            }\n            var _this$props5 = _this.props, day = _this$props5.day, startDate = _this$props5.startDate, selectsStart = _this$props5.selectsStart;\n            var selectingDate = (_this$props$selecting2 = _this.props.selectingDate) !== null && _this$props$selecting2 !== void 0 ? _this$props$selecting2 : _this.props.preSelection;\n            if (selectsStart) {\n                return isSameDay(day, selectingDate);\n            } else {\n                return isSameDay(day, startDate);\n            }\n        });\n        _defineProperty(_this, \"isSelectingRangeEnd\", function() {\n            var _this$props$selecting3;\n            if (!_this.isInSelectingRange()) {\n                return false;\n            }\n            var _this$props6 = _this.props, day = _this$props6.day, endDate = _this$props6.endDate, selectsEnd = _this$props6.selectsEnd, selectsRange = _this$props6.selectsRange;\n            var selectingDate = (_this$props$selecting3 = _this.props.selectingDate) !== null && _this$props$selecting3 !== void 0 ? _this$props$selecting3 : _this.props.preSelection;\n            if (selectsEnd || selectsRange) {\n                return isSameDay(day, selectingDate);\n            } else {\n                return isSameDay(day, endDate);\n            }\n        });\n        _defineProperty(_this, \"isRangeStart\", function() {\n            var _this$props7 = _this.props, day = _this$props7.day, startDate = _this$props7.startDate, endDate = _this$props7.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameDay(startDate, day);\n        });\n        _defineProperty(_this, \"isRangeEnd\", function() {\n            var _this$props8 = _this.props, day = _this$props8.day, startDate = _this$props8.startDate, endDate = _this$props8.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameDay(endDate, day);\n        });\n        _defineProperty(_this, \"isWeekend\", function() {\n            var weekday = (0,date_fns_getDay__WEBPACK_IMPORTED_MODULE_56__.getDay)(_this.props.day);\n            return weekday === 0 || weekday === 6;\n        });\n        _defineProperty(_this, \"isAfterMonth\", function() {\n            return _this.props.month !== undefined && (_this.props.month + 1) % 12 === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day);\n        });\n        _defineProperty(_this, \"isBeforeMonth\", function() {\n            return _this.props.month !== undefined && ((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day) + 1) % 12 === _this.props.month;\n        });\n        _defineProperty(_this, \"isCurrentDay\", function() {\n            return _this.isSameDay(newDate());\n        });\n        _defineProperty(_this, \"isSelected\", function() {\n            if (_this.props.selectsMultiple) {\n                var _this$props$selectedD2;\n                return (_this$props$selectedD2 = _this.props.selectedDates) === null || _this$props$selectedD2 === void 0 ? void 0 : _this$props$selectedD2.some(function(date) {\n                    return _this.isSameDayOrWeek(date);\n                });\n            }\n            return _this.isSameDayOrWeek(_this.props.selected);\n        });\n        _defineProperty(_this, \"getClassNames\", function(date) {\n            var dayClassName = _this.props.dayClassName ? _this.props.dayClassName(date) : undefined;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__day\", dayClassName, \"react-datepicker__day--\" + getDayOfWeekCode(_this.props.day), {\n                \"react-datepicker__day--disabled\": _this.isDisabled(),\n                \"react-datepicker__day--excluded\": _this.isExcluded(),\n                \"react-datepicker__day--selected\": _this.isSelected(),\n                \"react-datepicker__day--keyboard-selected\": _this.isKeyboardSelected(),\n                \"react-datepicker__day--range-start\": _this.isRangeStart(),\n                \"react-datepicker__day--range-end\": _this.isRangeEnd(),\n                \"react-datepicker__day--in-range\": _this.isInRange(),\n                \"react-datepicker__day--in-selecting-range\": _this.isInSelectingRange(),\n                \"react-datepicker__day--selecting-range-start\": _this.isSelectingRangeStart(),\n                \"react-datepicker__day--selecting-range-end\": _this.isSelectingRangeEnd(),\n                \"react-datepicker__day--today\": _this.isCurrentDay(),\n                \"react-datepicker__day--weekend\": _this.isWeekend(),\n                \"react-datepicker__day--outside-month\": _this.isAfterMonth() || _this.isBeforeMonth()\n            }, _this.getHighLightedClass(\"react-datepicker__day--highlighted\"), _this.getHolidaysClass());\n        });\n        _defineProperty(_this, \"getAriaLabel\", function() {\n            var _this$props9 = _this.props, day = _this$props9.day, _this$props9$ariaLabe = _this$props9.ariaLabelPrefixWhenEnabled, ariaLabelPrefixWhenEnabled = _this$props9$ariaLabe === void 0 ? \"Choose\" : _this$props9$ariaLabe, _this$props9$ariaLabe2 = _this$props9.ariaLabelPrefixWhenDisabled, ariaLabelPrefixWhenDisabled = _this$props9$ariaLabe2 === void 0 ? \"Not available\" : _this$props9$ariaLabe2;\n            var prefix = _this.isDisabled() || _this.isExcluded() ? ariaLabelPrefixWhenDisabled : ariaLabelPrefixWhenEnabled;\n            return \"\".concat(prefix, \" \").concat(formatDate(day, \"PPPP\", _this.props.locale));\n        });\n        // A function to return the holiday's name as title's content\n        _defineProperty(_this, \"getTitle\", function() {\n            var _this$props10 = _this.props, day = _this$props10.day, _this$props10$holiday = _this$props10.holidays, holidays = _this$props10$holiday === void 0 ? new Map() : _this$props10$holiday, excludeDates = _this$props10.excludeDates;\n            var compareDt = formatDate(day, \"MM.dd.yyyy\");\n            var titles = [];\n            if (holidays.has(compareDt)) {\n                titles.push.apply(titles, _toConsumableArray(holidays.get(compareDt).holidayNames));\n            }\n            if (_this.isExcluded()) {\n                titles.push(excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.filter(function(excludeDate) {\n                    return isSameDay(excludeDate.date ? excludeDate.date : excludeDate, day);\n                }).map(function(excludeDate) {\n                    return excludeDate.message;\n                }));\n            }\n            return titles.join(\", \");\n        });\n        _defineProperty(_this, \"getTabIndex\", function(selected, preSelection) {\n            var selectedDay = selected || _this.props.selected;\n            var preSelectionDay = preSelection || _this.props.preSelection;\n            var tabIndex = !(_this.props.showWeekPicker && (_this.props.showWeekNumber || !_this.isStartOfWeek())) && (_this.isKeyboardSelected() || _this.isSameDay(selectedDay) && isSameDay(preSelectionDay, selectedDay)) ? 0 : -1;\n            return tabIndex;\n        });\n        // various cases when we need to apply focus to the preselected day\n        // focus the day on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n        // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n        _defineProperty(_this, \"handleFocusDay\", function() {\n            var _this$dayEl$current;\n            var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var shouldFocusDay = false;\n            // only do this while the input isn't focused\n            // otherwise, typing/backspacing the date manually may steal focus away from the input\n            if (_this.getTabIndex() === 0 && !prevProps.isInputFocused && _this.isSameDay(_this.props.preSelection)) {\n                // there is currently no activeElement and not inline\n                if (!document.activeElement || document.activeElement === document.body) {\n                    shouldFocusDay = true;\n                }\n                // inline version:\n                // do not focus on initial render to prevent autoFocus issue\n                // focus after month has changed via keyboard\n                if (_this.props.inline && !_this.props.shouldFocusDayInline) {\n                    shouldFocusDay = false;\n                }\n                // the activeElement is in the container, and it is another instance of Day\n                if (_this.props.containerRef && _this.props.containerRef.current && _this.props.containerRef.current.contains(document.activeElement) && document.activeElement.classList.contains(\"react-datepicker__day\")) {\n                    shouldFocusDay = true;\n                }\n                //day is one of the non rendered duplicate days\n                if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth()) {\n                    shouldFocusDay = false;\n                }\n                if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth()) {\n                    shouldFocusDay = false;\n                }\n            }\n            shouldFocusDay && ((_this$dayEl$current = _this.dayEl.current) === null || _this$dayEl$current === void 0 ? void 0 : _this$dayEl$current.focus({\n                preventScroll: true\n            }));\n        });\n        _defineProperty(_this, \"renderDayContents\", function() {\n            if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth()) return null;\n            if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth()) return null;\n            return _this.props.renderDayContents ? _this.props.renderDayContents((0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__.getDate)(_this.props.day), _this.props.day) : (0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__.getDate)(_this.props.day);\n        });\n        _defineProperty(_this, \"render\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                ref: _this.dayEl,\n                className: _this.getClassNames(_this.props.day),\n                onKeyDown: _this.handleOnKeyDown,\n                onClick: _this.handleClick,\n                onMouseEnter: !_this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\n                onPointerEnter: _this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\n                tabIndex: _this.getTabIndex(),\n                \"aria-label\": _this.getAriaLabel(),\n                role: \"option\",\n                title: _this.getTitle(),\n                \"aria-disabled\": _this.isDisabled(),\n                \"aria-current\": _this.isCurrentDay() ? \"date\" : undefined,\n                \"aria-selected\": _this.isSelected() || _this.isInRange()\n            }, _this.renderDayContents(), _this.getTitle() !== \"\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                className: \"overlay\"\n            }, _this.getTitle()));\n        });\n        return _this;\n    }\n    _inherits(Day, _React$Component);\n    return _createClass(Day, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.handleFocusDay();\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                this.handleFocusDay(prevProps);\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar WeekNumber = /*#__PURE__*/ function(_React$Component) {\n    function WeekNumber() {\n        var _this;\n        _classCallCheck(this, WeekNumber);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _callSuper(this, WeekNumber, [].concat(args));\n        _defineProperty(_this, \"weekNumberEl\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createRef());\n        _defineProperty(_this, \"handleClick\", function(event) {\n            if (_this.props.onClick) {\n                _this.props.onClick(event);\n            }\n        });\n        _defineProperty(_this, \"handleOnKeyDown\", function(event) {\n            var eventKey = event.key;\n            if (eventKey === \" \") {\n                event.preventDefault();\n                event.key = \"Enter\";\n            }\n            _this.props.handleOnKeyDown(event);\n        });\n        _defineProperty(_this, \"isKeyboardSelected\", function() {\n            return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.date, _this.props.preSelection);\n        });\n        _defineProperty(_this, \"getTabIndex\", function() {\n            return _this.props.showWeekPicker && _this.props.showWeekNumber && (_this.isKeyboardSelected() || isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.preSelection, _this.props.selected)) ? 0 : -1;\n        });\n        // various cases when we need to apply focus to the preselected week-number\n        // focus the week-number on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n        // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n        _defineProperty(_this, \"handleFocusWeekNumber\", function() {\n            var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var shouldFocusWeekNumber = false;\n            // only do this while the input isn't focused\n            // otherwise, typing/backspacing the date manually may steal focus away from the input\n            if (_this.getTabIndex() === 0 && !prevProps.isInputFocused && isSameDay(_this.props.date, _this.props.preSelection)) {\n                // there is currently no activeElement and not inline\n                if (!document.activeElement || document.activeElement === document.body) {\n                    shouldFocusWeekNumber = true;\n                }\n                // inline version:\n                // do not focus on initial render to prevent autoFocus issue\n                // focus after month has changed via keyboard\n                if (_this.props.inline && !_this.props.shouldFocusDayInline) {\n                    shouldFocusWeekNumber = false;\n                }\n                // the activeElement is in the container, and it is another instance of WeekNumber\n                if (_this.props.containerRef && _this.props.containerRef.current && _this.props.containerRef.current.contains(document.activeElement) && document.activeElement && document.activeElement.classList.contains(\"react-datepicker__week-number\")) {\n                    shouldFocusWeekNumber = true;\n                }\n            }\n            shouldFocusWeekNumber && _this.weekNumberEl.current && _this.weekNumberEl.current.focus({\n                preventScroll: true\n            });\n        });\n        return _this;\n    }\n    _inherits(WeekNumber, _React$Component);\n    return _createClass(WeekNumber, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.handleFocusWeekNumber();\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                this.handleFocusWeekNumber(prevProps);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, weekNumber = _this$props.weekNumber, _this$props$ariaLabel = _this$props.ariaLabelPrefix, ariaLabelPrefix = _this$props$ariaLabel === void 0 ? \"week \" : _this$props$ariaLabel, onClick = _this$props.onClick;\n                var weekNumberClasses = {\n                    \"react-datepicker__week-number\": true,\n                    \"react-datepicker__week-number--clickable\": !!onClick,\n                    \"react-datepicker__week-number--selected\": !!onClick && isSameDay(this.props.date, this.props.selected),\n                    \"react-datepicker__week-number--keyboard-selected\": this.isKeyboardSelected()\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    ref: this.weekNumberEl,\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(weekNumberClasses),\n                    \"aria-label\": \"\".concat(ariaLabelPrefix, \" \").concat(this.props.weekNumber),\n                    onClick: this.handleClick,\n                    onKeyDown: this.handleOnKeyDown,\n                    tabIndex: this.getTabIndex()\n                }, weekNumber);\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function get() {\n                return {\n                    ariaLabelPrefix: \"week \"\n                };\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar Week = /*#__PURE__*/ function(_React$Component) {\n    function Week() {\n        var _this;\n        _classCallCheck(this, Week);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _callSuper(this, Week, [].concat(args));\n        _defineProperty(_this, \"handleDayClick\", function(day, event) {\n            if (_this.props.onDayClick) {\n                _this.props.onDayClick(day, event);\n            }\n        });\n        _defineProperty(_this, \"handleDayMouseEnter\", function(day) {\n            if (_this.props.onDayMouseEnter) {\n                _this.props.onDayMouseEnter(day);\n            }\n        });\n        _defineProperty(_this, \"handleWeekClick\", function(day, weekNumber, event) {\n            if (typeof _this.props.onWeekSelect === \"function\") {\n                _this.props.onWeekSelect(day, weekNumber, event);\n            }\n            if (_this.props.showWeekPicker) {\n                _this.handleDayClick(day, event);\n            }\n            if (_this.props.shouldCloseOnSelect) {\n                _this.props.setOpen(false);\n            }\n        });\n        _defineProperty(_this, \"formatWeekNumber\", function(date) {\n            if (_this.props.formatWeekNumber) {\n                return _this.props.formatWeekNumber(date);\n            }\n            return getWeek(date);\n        });\n        _defineProperty(_this, \"renderDays\", function() {\n            var startOfWeek = _this.startOfWeek();\n            var days = [];\n            var weekNumber = _this.formatWeekNumber(startOfWeek);\n            if (_this.props.showWeekNumber) {\n                var onClickAction = _this.props.onWeekSelect || _this.props.showWeekPicker ? _this.handleWeekClick.bind(_this, startOfWeek, weekNumber) : undefined;\n                days.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WeekNumber, {\n                    key: \"W\",\n                    weekNumber: weekNumber,\n                    date: startOfWeek,\n                    onClick: onClickAction,\n                    selected: _this.props.selected,\n                    preSelection: _this.props.preSelection,\n                    ariaLabelPrefix: _this.props.ariaLabelPrefix,\n                    showWeekPicker: _this.props.showWeekPicker,\n                    showWeekNumber: _this.props.showWeekNumber,\n                    disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n                    handleOnKeyDown: _this.props.handleOnKeyDown,\n                    isInputFocused: _this.props.isInputFocused,\n                    containerRef: _this.props.containerRef\n                }));\n            }\n            return days.concat([\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6\n            ].map(function(offset) {\n                var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, offset);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Day, {\n                    ariaLabelPrefixWhenEnabled: _this.props.chooseDayAriaLabelPrefix,\n                    ariaLabelPrefixWhenDisabled: _this.props.disabledDayAriaLabelPrefix,\n                    key: day.valueOf(),\n                    day: day,\n                    month: _this.props.month,\n                    onClick: _this.handleDayClick.bind(_this, day),\n                    usePointerEvent: _this.props.usePointerEvent,\n                    onMouseEnter: _this.handleDayMouseEnter.bind(_this, day),\n                    minDate: _this.props.minDate,\n                    maxDate: _this.props.maxDate,\n                    calendarStartDay: _this.props.calendarStartDay,\n                    excludeDates: _this.props.excludeDates,\n                    excludeDateIntervals: _this.props.excludeDateIntervals,\n                    includeDates: _this.props.includeDates,\n                    includeDateIntervals: _this.props.includeDateIntervals,\n                    highlightDates: _this.props.highlightDates,\n                    holidays: _this.props.holidays,\n                    selectingDate: _this.props.selectingDate,\n                    filterDate: _this.props.filterDate,\n                    preSelection: _this.props.preSelection,\n                    selected: _this.props.selected,\n                    selectsStart: _this.props.selectsStart,\n                    selectsEnd: _this.props.selectsEnd,\n                    selectsRange: _this.props.selectsRange,\n                    showWeekPicker: _this.props.showWeekPicker,\n                    showWeekNumber: _this.props.showWeekNumber,\n                    selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n                    selectsMultiple: _this.props.selectsMultiple,\n                    selectedDates: _this.props.selectedDates,\n                    startDate: _this.props.startDate,\n                    endDate: _this.props.endDate,\n                    dayClassName: _this.props.dayClassName,\n                    renderDayContents: _this.props.renderDayContents,\n                    disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n                    handleOnKeyDown: _this.props.handleOnKeyDown,\n                    isInputFocused: _this.props.isInputFocused,\n                    containerRef: _this.props.containerRef,\n                    inline: _this.props.inline,\n                    shouldFocusDayInline: _this.props.shouldFocusDayInline,\n                    monthShowsDuplicateDaysEnd: _this.props.monthShowsDuplicateDaysEnd,\n                    monthShowsDuplicateDaysStart: _this.props.monthShowsDuplicateDaysStart,\n                    locale: _this.props.locale\n                });\n            }));\n        });\n        _defineProperty(_this, \"startOfWeek\", function() {\n            return getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay);\n        });\n        _defineProperty(_this, \"isKeyboardSelected\", function() {\n            return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.startOfWeek(), _this.props.selected) && isSameDay(_this.startOfWeek(), _this.props.preSelection);\n        });\n        return _this;\n    }\n    _inherits(Week, _React$Component);\n    return _createClass(Week, [\n        {\n            key: \"render\",\n            value: function render() {\n                var weekNumberClasses = {\n                    \"react-datepicker__week\": true,\n                    \"react-datepicker__week--selected\": isSameDay(this.startOfWeek(), this.props.selected),\n                    \"react-datepicker__week--keyboard-selected\": this.isKeyboardSelected()\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(weekNumberClasses)\n                }, this.renderDays());\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function get() {\n                return {\n                    shouldCloseOnSelect: true\n                };\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar FIXED_HEIGHT_STANDARD_WEEK_COUNT = 6;\nvar MONTH_COLUMNS_LAYOUT = {\n    TWO_COLUMNS: \"two_columns\",\n    THREE_COLUMNS: \"three_columns\",\n    FOUR_COLUMNS: \"four_columns\"\n};\nvar MONTH_COLUMNS = _defineProperty(_defineProperty(_defineProperty({}, MONTH_COLUMNS_LAYOUT.TWO_COLUMNS, {\n    grid: [\n        [\n            0,\n            1\n        ],\n        [\n            2,\n            3\n        ],\n        [\n            4,\n            5\n        ],\n        [\n            6,\n            7\n        ],\n        [\n            8,\n            9\n        ],\n        [\n            10,\n            11\n        ]\n    ],\n    verticalNavigationOffset: 2\n}), MONTH_COLUMNS_LAYOUT.THREE_COLUMNS, {\n    grid: [\n        [\n            0,\n            1,\n            2\n        ],\n        [\n            3,\n            4,\n            5\n        ],\n        [\n            6,\n            7,\n            8\n        ],\n        [\n            9,\n            10,\n            11\n        ]\n    ],\n    verticalNavigationOffset: 3\n}), MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS, {\n    grid: [\n        [\n            0,\n            1,\n            2,\n            3\n        ],\n        [\n            4,\n            5,\n            6,\n            7\n        ],\n        [\n            8,\n            9,\n            10,\n            11\n        ]\n    ],\n    verticalNavigationOffset: 4\n});\nvar MONTH_NAVIGATION_HORIZONTAL_OFFSET = 1;\nfunction getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker) {\n    if (showFourColumnMonthYearPicker) return MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS;\n    if (showTwoColumnMonthYearPicker) return MONTH_COLUMNS_LAYOUT.TWO_COLUMNS;\n    return MONTH_COLUMNS_LAYOUT.THREE_COLUMNS;\n}\nvar Month = /*#__PURE__*/ function(_React$Component) {\n    function Month() {\n        var _this;\n        _classCallCheck(this, Month);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _callSuper(this, Month, [].concat(args));\n        _defineProperty(_this, \"MONTH_REFS\", _toConsumableArray(Array(12)).map(function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n        }));\n        _defineProperty(_this, \"QUARTER_REFS\", _toConsumableArray(Array(4)).map(function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n        }));\n        _defineProperty(_this, \"isDisabled\", function(date) {\n            return isDayDisabled(date, _this.props);\n        });\n        _defineProperty(_this, \"isExcluded\", function(date) {\n            return isDayExcluded(date, _this.props);\n        });\n        _defineProperty(_this, \"handleDayClick\", function(day, event) {\n            if (_this.props.onDayClick) {\n                _this.props.onDayClick(day, event, _this.props.orderInDisplay);\n            }\n        });\n        _defineProperty(_this, \"handleDayMouseEnter\", function(day) {\n            if (_this.props.onDayMouseEnter) {\n                _this.props.onDayMouseEnter(day);\n            }\n        });\n        _defineProperty(_this, \"handleMouseLeave\", function() {\n            if (_this.props.onMouseLeave) {\n                _this.props.onMouseLeave();\n            }\n        });\n        _defineProperty(_this, \"isRangeStartMonth\", function(m) {\n            var _this$props = _this.props, day = _this$props.day, startDate = _this$props.startDate, endDate = _this$props.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), startDate);\n        });\n        _defineProperty(_this, \"isRangeStartQuarter\", function(q) {\n            var _this$props2 = _this.props, day = _this$props2.day, startDate = _this$props2.startDate, endDate = _this$props2.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), startDate);\n        });\n        _defineProperty(_this, \"isRangeEndMonth\", function(m) {\n            var _this$props3 = _this.props, day = _this$props3.day, startDate = _this$props3.startDate, endDate = _this$props3.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), endDate);\n        });\n        _defineProperty(_this, \"isRangeEndQuarter\", function(q) {\n            var _this$props4 = _this.props, day = _this$props4.day, startDate = _this$props4.startDate, endDate = _this$props4.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), endDate);\n        });\n        _defineProperty(_this, \"isInSelectingRangeMonth\", function(m) {\n            var _this$props$selecting;\n            var _this$props5 = _this.props, day = _this$props5.day, selectsStart = _this$props5.selectsStart, selectsEnd = _this$props5.selectsEnd, selectsRange = _this$props5.selectsRange, startDate = _this$props5.startDate, endDate = _this$props5.endDate;\n            var selectingDate = (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\n            if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n                return false;\n            }\n            if (selectsStart && endDate) {\n                return isMonthInRange(selectingDate, endDate, m, day);\n            }\n            if (selectsEnd && startDate) {\n                return isMonthInRange(startDate, selectingDate, m, day);\n            }\n            if (selectsRange && startDate && !endDate) {\n                return isMonthInRange(startDate, selectingDate, m, day);\n            }\n            return false;\n        });\n        _defineProperty(_this, \"isSelectingMonthRangeStart\", function(m) {\n            var _this$props$selecting2;\n            if (!_this.isInSelectingRangeMonth(m)) {\n                return false;\n            }\n            var _this$props6 = _this.props, day = _this$props6.day, startDate = _this$props6.startDate, selectsStart = _this$props6.selectsStart;\n            var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\n            var selectingDate = (_this$props$selecting2 = _this.props.selectingDate) !== null && _this$props$selecting2 !== void 0 ? _this$props$selecting2 : _this.props.preSelection;\n            if (selectsStart) {\n                return isSameMonth(_month, selectingDate);\n            } else {\n                return isSameMonth(_month, startDate);\n            }\n        });\n        _defineProperty(_this, \"isSelectingMonthRangeEnd\", function(m) {\n            var _this$props$selecting3;\n            if (!_this.isInSelectingRangeMonth(m)) {\n                return false;\n            }\n            var _this$props7 = _this.props, day = _this$props7.day, endDate = _this$props7.endDate, selectsEnd = _this$props7.selectsEnd, selectsRange = _this$props7.selectsRange;\n            var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\n            var selectingDate = (_this$props$selecting3 = _this.props.selectingDate) !== null && _this$props$selecting3 !== void 0 ? _this$props$selecting3 : _this.props.preSelection;\n            if (selectsEnd || selectsRange) {\n                return isSameMonth(_month, selectingDate);\n            } else {\n                return isSameMonth(_month, endDate);\n            }\n        });\n        _defineProperty(_this, \"isInSelectingRangeQuarter\", function(q) {\n            var _this$props$selecting4;\n            var _this$props8 = _this.props, day = _this$props8.day, selectsStart = _this$props8.selectsStart, selectsEnd = _this$props8.selectsEnd, selectsRange = _this$props8.selectsRange, startDate = _this$props8.startDate, endDate = _this$props8.endDate;\n            var selectingDate = (_this$props$selecting4 = _this.props.selectingDate) !== null && _this$props$selecting4 !== void 0 ? _this$props$selecting4 : _this.props.preSelection;\n            if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n                return false;\n            }\n            if (selectsStart && endDate) {\n                return isQuarterInRange(selectingDate, endDate, q, day);\n            }\n            if (selectsEnd && startDate) {\n                return isQuarterInRange(startDate, selectingDate, q, day);\n            }\n            if (selectsRange && startDate && !endDate) {\n                return isQuarterInRange(startDate, selectingDate, q, day);\n            }\n            return false;\n        });\n        _defineProperty(_this, \"isWeekInMonth\", function(startOfWeek) {\n            var day = _this.props.day;\n            var endOfWeek = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, 6);\n            return isSameMonth(startOfWeek, day) || isSameMonth(endOfWeek, day);\n        });\n        _defineProperty(_this, \"isCurrentMonth\", function(day, m) {\n            return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && m === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newDate());\n        });\n        _defineProperty(_this, \"isCurrentQuarter\", function(day, q) {\n            return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && q === (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(newDate());\n        });\n        _defineProperty(_this, \"isSelectedMonth\", function(day, m, selected) {\n            return (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(selected) === m && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\n        });\n        _defineProperty(_this, \"isSelectedQuarter\", function(day, q, selected) {\n            return (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(day) === q && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\n        });\n        _defineProperty(_this, \"renderWeeks\", function() {\n            var weeks = [];\n            var isFixedHeight = _this.props.fixedHeight;\n            var i = 0;\n            var breakAfterNextPush = false;\n            var currentWeekStart = getStartOfWeek(getStartOfMonth(_this.props.day), _this.props.locale, _this.props.calendarStartDay);\n            var selected = _this.props.showWeekPicker ? getStartOfWeek(_this.props.selected, _this.props.locale, _this.props.calendarStartDay) : _this.props.selected;\n            var preSelection = _this.props.showWeekPicker ? getStartOfWeek(_this.props.preSelection, _this.props.locale, _this.props.calendarStartDay) : _this.props.preSelection;\n            while(true){\n                weeks.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Week, {\n                    ariaLabelPrefix: _this.props.weekAriaLabelPrefix,\n                    chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\n                    disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\n                    key: i,\n                    day: currentWeekStart,\n                    month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day),\n                    onDayClick: _this.handleDayClick,\n                    usePointerEvent: _this.props.usePointerEvent,\n                    onDayMouseEnter: _this.handleDayMouseEnter,\n                    onWeekSelect: _this.props.onWeekSelect,\n                    formatWeekNumber: _this.props.formatWeekNumber,\n                    locale: _this.props.locale,\n                    minDate: _this.props.minDate,\n                    maxDate: _this.props.maxDate,\n                    excludeDates: _this.props.excludeDates,\n                    excludeDateIntervals: _this.props.excludeDateIntervals,\n                    includeDates: _this.props.includeDates,\n                    includeDateIntervals: _this.props.includeDateIntervals,\n                    inline: _this.props.inline,\n                    shouldFocusDayInline: _this.props.shouldFocusDayInline,\n                    highlightDates: _this.props.highlightDates,\n                    holidays: _this.props.holidays,\n                    selectingDate: _this.props.selectingDate,\n                    filterDate: _this.props.filterDate,\n                    preSelection: preSelection,\n                    selected: selected,\n                    selectsStart: _this.props.selectsStart,\n                    selectsEnd: _this.props.selectsEnd,\n                    selectsRange: _this.props.selectsRange,\n                    selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n                    selectsMultiple: _this.props.selectsMultiple,\n                    selectedDates: _this.props.selectedDates,\n                    showWeekNumber: _this.props.showWeekNumbers,\n                    showWeekPicker: _this.props.showWeekPicker,\n                    startDate: _this.props.startDate,\n                    endDate: _this.props.endDate,\n                    dayClassName: _this.props.dayClassName,\n                    setOpen: _this.props.setOpen,\n                    shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\n                    disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n                    renderDayContents: _this.props.renderDayContents,\n                    handleOnKeyDown: _this.props.handleOnKeyDown,\n                    isInputFocused: _this.props.isInputFocused,\n                    containerRef: _this.props.containerRef,\n                    calendarStartDay: _this.props.calendarStartDay,\n                    monthShowsDuplicateDaysEnd: _this.props.monthShowsDuplicateDaysEnd,\n                    monthShowsDuplicateDaysStart: _this.props.monthShowsDuplicateDaysStart\n                }));\n                if (breakAfterNextPush) break;\n                i++;\n                currentWeekStart = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(currentWeekStart, 1);\n                // If one of these conditions is true, we will either break on this week\n                // or break on the next week\n                var isFixedAndFinalWeek = isFixedHeight && i >= FIXED_HEIGHT_STANDARD_WEEK_COUNT;\n                var isNonFixedAndOutOfMonth = !isFixedHeight && !_this.isWeekInMonth(currentWeekStart);\n                if (isFixedAndFinalWeek || isNonFixedAndOutOfMonth) {\n                    if (_this.props.peekNextMonth) {\n                        breakAfterNextPush = true;\n                    } else {\n                        break;\n                    }\n                }\n            }\n            return weeks;\n        });\n        _defineProperty(_this, \"onMonthClick\", function(e, m) {\n            var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(_this.props.day, m);\n            if (isMonthDisabled(labelDate, _this.props)) {\n                return;\n            }\n            _this.handleDayClick(getStartOfMonth(labelDate), e);\n        });\n        _defineProperty(_this, \"onMonthMouseEnter\", function(m) {\n            var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(_this.props.day, m);\n            if (isMonthDisabled(labelDate, _this.props)) {\n                return;\n            }\n            _this.handleDayMouseEnter(getStartOfMonth(labelDate));\n        });\n        _defineProperty(_this, \"handleMonthNavigation\", function(newMonth, newDate) {\n            if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\n            _this.props.setPreSelection(newDate);\n            _this.MONTH_REFS[newMonth].current && _this.MONTH_REFS[newMonth].current.focus();\n        });\n        _defineProperty(_this, \"onMonthKeyDown\", function(event, month) {\n            var _this$props9 = _this.props, selected = _this$props9.selected, preSelection = _this$props9.preSelection, disabledKeyboardNavigation = _this$props9.disabledKeyboardNavigation, showTwoColumnMonthYearPicker = _this$props9.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker = _this$props9.showFourColumnMonthYearPicker, setPreSelection = _this$props9.setPreSelection, handleOnMonthKeyDown = _this$props9.handleOnMonthKeyDown;\n            var eventKey = event.key;\n            if (eventKey !== \"Tab\") {\n                // preventDefault on tab event blocks focus change\n                event.preventDefault();\n            }\n            if (!disabledKeyboardNavigation) {\n                var monthColumnsLayout = getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker);\n                var verticalOffset = MONTH_COLUMNS[monthColumnsLayout].verticalNavigationOffset;\n                var monthsGrid = MONTH_COLUMNS[monthColumnsLayout].grid;\n                switch(eventKey){\n                    case \"Enter\":\n                        _this.onMonthClick(event, month);\n                        setPreSelection(selected);\n                        break;\n                    case \"ArrowRight\":\n                        _this.handleMonthNavigation(month === 11 ? 0 : month + MONTH_NAVIGATION_HORIZONTAL_OFFSET, (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_40__.addMonths)(preSelection, MONTH_NAVIGATION_HORIZONTAL_OFFSET));\n                        break;\n                    case \"ArrowLeft\":\n                        _this.handleMonthNavigation(month === 0 ? 11 : month - MONTH_NAVIGATION_HORIZONTAL_OFFSET, (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_38__.subMonths)(preSelection, MONTH_NAVIGATION_HORIZONTAL_OFFSET));\n                        break;\n                    case \"ArrowUp\":\n                        _this.handleMonthNavigation(// Check if month on the first row\n                        monthsGrid[0].includes(month) ? month + 12 - verticalOffset : month - verticalOffset, (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_38__.subMonths)(preSelection, verticalOffset));\n                        break;\n                    case \"ArrowDown\":\n                        _this.handleMonthNavigation(// Check if month on the last row\n                        monthsGrid[monthsGrid.length - 1].includes(month) ? month - 12 + verticalOffset : month + verticalOffset, (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_40__.addMonths)(preSelection, verticalOffset));\n                        break;\n                }\n            }\n            handleOnMonthKeyDown && handleOnMonthKeyDown(event);\n        });\n        _defineProperty(_this, \"onQuarterClick\", function(e, q) {\n            var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\n            if (isQuarterDisabled(labelDate, _this.props)) {\n                return;\n            }\n            _this.handleDayClick(getStartOfQuarter(labelDate), e);\n        });\n        _defineProperty(_this, \"onQuarterMouseEnter\", function(q) {\n            var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\n            if (isQuarterDisabled(labelDate, _this.props)) {\n                return;\n            }\n            _this.handleDayMouseEnter(getStartOfQuarter(labelDate));\n        });\n        _defineProperty(_this, \"handleQuarterNavigation\", function(newQuarter, newDate) {\n            if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\n            _this.props.setPreSelection(newDate);\n            _this.QUARTER_REFS[newQuarter - 1].current && _this.QUARTER_REFS[newQuarter - 1].current.focus();\n        });\n        _defineProperty(_this, \"onQuarterKeyDown\", function(event, quarter) {\n            var eventKey = event.key;\n            if (!_this.props.disabledKeyboardNavigation) {\n                switch(eventKey){\n                    case \"Enter\":\n                        _this.onQuarterClick(event, quarter);\n                        _this.props.setPreSelection(_this.props.selected);\n                        break;\n                    case \"ArrowRight\":\n                        _this.handleQuarterNavigation(quarter === 4 ? 1 : quarter + 1, (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_43__.addQuarters)(_this.props.preSelection, 1));\n                        break;\n                    case \"ArrowLeft\":\n                        _this.handleQuarterNavigation(quarter === 1 ? 4 : quarter - 1, (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_41__.subQuarters)(_this.props.preSelection, 1));\n                        break;\n                }\n            }\n        });\n        _defineProperty(_this, \"getMonthClassNames\", function(m) {\n            var _this$props10 = _this.props, day = _this$props10.day, startDate = _this$props10.startDate, endDate = _this$props10.endDate, selected = _this$props10.selected, minDate = _this$props10.minDate, maxDate = _this$props10.maxDate, preSelection = _this$props10.preSelection, monthClassName = _this$props10.monthClassName, excludeDates = _this$props10.excludeDates, includeDates = _this$props10.includeDates;\n            var _monthClassName = monthClassName ? monthClassName((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m)) : undefined;\n            var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__month-text\", \"react-datepicker__month-\".concat(m), _monthClassName, {\n                \"react-datepicker__month-text--disabled\": (minDate || maxDate || excludeDates || includeDates) && isMonthDisabled(labelDate, _this.props),\n                \"react-datepicker__month-text--selected\": _this.isSelectedMonth(day, m, selected),\n                \"react-datepicker__month-text--keyboard-selected\": !_this.props.disabledKeyboardNavigation && _this.isSelectedMonth(day, m, preSelection),\n                \"react-datepicker__month-text--in-selecting-range\": _this.isInSelectingRangeMonth(m),\n                \"react-datepicker__month-text--in-range\": isMonthInRange(startDate, endDate, m, day),\n                \"react-datepicker__month-text--range-start\": _this.isRangeStartMonth(m),\n                \"react-datepicker__month-text--range-end\": _this.isRangeEndMonth(m),\n                \"react-datepicker__month-text--selecting-range-start\": _this.isSelectingMonthRangeStart(m),\n                \"react-datepicker__month-text--selecting-range-end\": _this.isSelectingMonthRangeEnd(m),\n                \"react-datepicker__month-text--today\": _this.isCurrentMonth(day, m)\n            });\n        });\n        _defineProperty(_this, \"getTabIndex\", function(m) {\n            var preSelectedMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.preSelection);\n            var tabIndex = !_this.props.disabledKeyboardNavigation && m === preSelectedMonth ? \"0\" : \"-1\";\n            return tabIndex;\n        });\n        _defineProperty(_this, \"getQuarterTabIndex\", function(q) {\n            var preSelectedQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(_this.props.preSelection);\n            var tabIndex = !_this.props.disabledKeyboardNavigation && q === preSelectedQuarter ? \"0\" : \"-1\";\n            return tabIndex;\n        });\n        _defineProperty(_this, \"getAriaLabel\", function(month) {\n            var _this$props11 = _this.props, _this$props11$chooseD = _this$props11.chooseDayAriaLabelPrefix, chooseDayAriaLabelPrefix = _this$props11$chooseD === void 0 ? \"Choose\" : _this$props11$chooseD, _this$props11$disable = _this$props11.disabledDayAriaLabelPrefix, disabledDayAriaLabelPrefix = _this$props11$disable === void 0 ? \"Not available\" : _this$props11$disable, day = _this$props11.day;\n            var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, month);\n            var prefix = _this.isDisabled(labelDate) || _this.isExcluded(labelDate) ? disabledDayAriaLabelPrefix : chooseDayAriaLabelPrefix;\n            return \"\".concat(prefix, \" \").concat(formatDate(labelDate, \"MMMM yyyy\"));\n        });\n        _defineProperty(_this, \"getQuarterClassNames\", function(q) {\n            var _this$props12 = _this.props, day = _this$props12.day, startDate = _this$props12.startDate, endDate = _this$props12.endDate, selected = _this$props12.selected, minDate = _this$props12.minDate, maxDate = _this$props12.maxDate, preSelection = _this$props12.preSelection, disabledKeyboardNavigation = _this$props12.disabledKeyboardNavigation;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__quarter-text\", \"react-datepicker__quarter-\".concat(q), {\n                \"react-datepicker__quarter-text--disabled\": (minDate || maxDate) && isQuarterDisabled((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), _this.props),\n                \"react-datepicker__quarter-text--selected\": _this.isSelectedQuarter(day, q, selected),\n                \"react-datepicker__quarter-text--keyboard-selected\": !disabledKeyboardNavigation && _this.isSelectedQuarter(day, q, preSelection),\n                \"react-datepicker__quarter-text--in-selecting-range\": _this.isInSelectingRangeQuarter(q),\n                \"react-datepicker__quarter-text--in-range\": isQuarterInRange(startDate, endDate, q, day),\n                \"react-datepicker__quarter-text--range-start\": _this.isRangeStartQuarter(q),\n                \"react-datepicker__quarter-text--range-end\": _this.isRangeEndQuarter(q)\n            });\n        });\n        _defineProperty(_this, \"getMonthContent\", function(m) {\n            var _this$props13 = _this.props, showFullMonthYearPicker = _this$props13.showFullMonthYearPicker, renderMonthContent = _this$props13.renderMonthContent, locale = _this$props13.locale, day = _this$props13.day;\n            var shortMonthText = getMonthShortInLocale(m, locale);\n            var fullMonthText = getMonthInLocale(m, locale);\n            if (renderMonthContent) {\n                return renderMonthContent(m, shortMonthText, fullMonthText, day);\n            }\n            return showFullMonthYearPicker ? fullMonthText : shortMonthText;\n        });\n        _defineProperty(_this, \"getQuarterContent\", function(q) {\n            var _this$props14 = _this.props, renderQuarterContent = _this$props14.renderQuarterContent, locale = _this$props14.locale;\n            var shortQuarter = getQuarterShortInLocale(q, locale);\n            return renderQuarterContent ? renderQuarterContent(q, shortQuarter) : shortQuarter;\n        });\n        _defineProperty(_this, \"renderMonths\", function() {\n            var _this$props15 = _this.props, showTwoColumnMonthYearPicker = _this$props15.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker = _this$props15.showFourColumnMonthYearPicker, day = _this$props15.day, selected = _this$props15.selected;\n            var monthColumns = MONTH_COLUMNS[getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker)].grid;\n            return monthColumns.map(function(month, i) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__month-wrapper\",\n                    key: i\n                }, month.map(function(m, j) {\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                        ref: _this.MONTH_REFS[m],\n                        key: j,\n                        onClick: function onClick(ev) {\n                            _this.onMonthClick(ev, m);\n                        },\n                        onKeyDown: function onKeyDown(ev) {\n                            if (isSpaceKeyDown(ev)) {\n                                ev.preventDefault();\n                                ev.key = \"Enter\";\n                            }\n                            _this.onMonthKeyDown(ev, m);\n                        },\n                        onMouseEnter: !_this.props.usePointerEvent ? function() {\n                            return _this.onMonthMouseEnter(m);\n                        } : undefined,\n                        onPointerEnter: _this.props.usePointerEvent ? function() {\n                            return _this.onMonthMouseEnter(m);\n                        } : undefined,\n                        tabIndex: _this.getTabIndex(m),\n                        className: _this.getMonthClassNames(m),\n                        role: \"option\",\n                        \"aria-label\": _this.getAriaLabel(m),\n                        \"aria-current\": _this.isCurrentMonth(day, m) ? \"date\" : undefined,\n                        \"aria-selected\": _this.isSelectedMonth(day, m, selected)\n                    }, _this.getMonthContent(m));\n                }));\n            });\n        });\n        _defineProperty(_this, \"renderQuarters\", function() {\n            var _this$props16 = _this.props, day = _this$props16.day, selected = _this$props16.selected;\n            var quarters = [\n                1,\n                2,\n                3,\n                4\n            ];\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"react-datepicker__quarter-wrapper\"\n            }, quarters.map(function(q, j) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    key: j,\n                    ref: _this.QUARTER_REFS[j],\n                    role: \"option\",\n                    onClick: function onClick(ev) {\n                        _this.onQuarterClick(ev, q);\n                    },\n                    onKeyDown: function onKeyDown(ev) {\n                        _this.onQuarterKeyDown(ev, q);\n                    },\n                    onMouseEnter: !_this.props.usePointerEvent ? function() {\n                        return _this.onQuarterMouseEnter(q);\n                    } : undefined,\n                    onPointerEnter: _this.props.usePointerEvent ? function() {\n                        return _this.onQuarterMouseEnter(q);\n                    } : undefined,\n                    className: _this.getQuarterClassNames(q),\n                    \"aria-selected\": _this.isSelectedQuarter(day, q, selected),\n                    tabIndex: _this.getQuarterTabIndex(q),\n                    \"aria-current\": _this.isCurrentQuarter(day, q) ? \"date\" : undefined\n                }, _this.getQuarterContent(q));\n            }));\n        });\n        _defineProperty(_this, \"getClassNames\", function() {\n            var _this$props17 = _this.props, selectingDate = _this$props17.selectingDate, selectsStart = _this$props17.selectsStart, selectsEnd = _this$props17.selectsEnd, showMonthYearPicker = _this$props17.showMonthYearPicker, showQuarterYearPicker = _this$props17.showQuarterYearPicker, showWeekPicker = _this$props17.showWeekPicker;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__month\", {\n                \"react-datepicker__month--selecting-range\": selectingDate && (selectsStart || selectsEnd)\n            }, {\n                \"react-datepicker__monthPicker\": showMonthYearPicker\n            }, {\n                \"react-datepicker__quarterPicker\": showQuarterYearPicker\n            }, {\n                \"react-datepicker__weekPicker\": showWeekPicker\n            });\n        });\n        return _this;\n    }\n    _inherits(Month, _React$Component);\n    return _createClass(Month, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props18 = this.props, showMonthYearPicker = _this$props18.showMonthYearPicker, showQuarterYearPicker = _this$props18.showQuarterYearPicker, day = _this$props18.day, _this$props18$ariaLab = _this$props18.ariaLabelPrefix, ariaLabelPrefix = _this$props18$ariaLab === void 0 ? \"Month \" : _this$props18$ariaLab;\n                var formattedAriaLabelPrefix = ariaLabelPrefix ? ariaLabelPrefix.trim() + \" \" : \"\";\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: this.getClassNames(),\n                    onMouseLeave: !this.props.usePointerEvent ? this.handleMouseLeave : undefined,\n                    onPointerLeave: this.props.usePointerEvent ? this.handleMouseLeave : undefined,\n                    \"aria-label\": \"\".concat(formattedAriaLabelPrefix).concat(formatDate(day, \"MMMM, yyyy\")),\n                    role: \"listbox\"\n                }, showMonthYearPicker ? this.renderMonths() : showQuarterYearPicker ? this.renderQuarters() : this.renderWeeks());\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar Time = /*#__PURE__*/ function(_React$Component) {\n    function Time() {\n        var _this;\n        _classCallCheck(this, Time);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _callSuper(this, Time, [].concat(args));\n        _defineProperty(_this, \"state\", {\n            height: null\n        });\n        _defineProperty(_this, \"scrollToTheSelectedTime\", function() {\n            requestAnimationFrame(function() {\n                if (!_this.list) return;\n                _this.list.scrollTop = _this.centerLi && Time.calcCenterPosition(_this.props.monthRef ? _this.props.monthRef.clientHeight - _this.header.clientHeight : _this.list.clientHeight, _this.centerLi);\n            });\n        });\n        _defineProperty(_this, \"handleClick\", function(time) {\n            if ((_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props)) {\n                return;\n            }\n            _this.props.onChange(time);\n        });\n        _defineProperty(_this, \"isSelectedTime\", function(time) {\n            return _this.props.selected && isSameMinute(_this.props.selected, time);\n        });\n        _defineProperty(_this, \"isDisabledTime\", function(time) {\n            return (_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props);\n        });\n        _defineProperty(_this, \"liClasses\", function(time) {\n            var classes = [\n                \"react-datepicker__time-list-item\",\n                _this.props.timeClassName ? _this.props.timeClassName(time) : undefined\n            ];\n            if (_this.isSelectedTime(time)) {\n                classes.push(\"react-datepicker__time-list-item--selected\");\n            }\n            if (_this.isDisabledTime(time)) {\n                classes.push(\"react-datepicker__time-list-item--disabled\");\n            }\n            //convert this.props.intervals and the relevant time to seconds and check if it it's a clean multiple of the interval\n            if (_this.props.injectTimes && ((0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) * 3600 + (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time) * 60 + (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_53__.getSeconds)(time)) % (_this.props.intervals * 60) !== 0) {\n                classes.push(\"react-datepicker__time-list-item--injected\");\n            }\n            return classes.join(\" \");\n        });\n        _defineProperty(_this, \"handleOnKeyDown\", function(event, time) {\n            if (event.key === \" \") {\n                event.preventDefault();\n                event.key = \"Enter\";\n            }\n            if ((event.key === \"ArrowUp\" || event.key === \"ArrowLeft\") && event.target.previousSibling) {\n                event.preventDefault();\n                event.target.previousSibling.focus();\n            }\n            if ((event.key === \"ArrowDown\" || event.key === \"ArrowRight\") && event.target.nextSibling) {\n                event.preventDefault();\n                event.target.nextSibling.focus();\n            }\n            if (event.key === \"Enter\") {\n                _this.handleClick(time);\n            }\n            _this.props.handleOnKeyDown(event);\n        });\n        _defineProperty(_this, \"renderTimes\", function() {\n            var times = [];\n            var format = _this.props.format ? _this.props.format : \"p\";\n            var intervals = _this.props.intervals;\n            var activeDate = _this.props.selected || _this.props.openToDate || newDate();\n            var base = getStartOfDay(activeDate);\n            var sortedInjectTimes = _this.props.injectTimes && _this.props.injectTimes.sort(function(a, b) {\n                return a - b;\n            });\n            var minutesInDay = 60 * getHoursInDay(activeDate);\n            var multiplier = minutesInDay / intervals;\n            for(var i = 0; i < multiplier; i++){\n                var currentTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_51__.addMinutes)(base, i * intervals);\n                times.push(currentTime);\n                if (sortedInjectTimes) {\n                    var timesToInject = timesToInjectAfter(base, currentTime, i, intervals, sortedInjectTimes);\n                    times = times.concat(timesToInject);\n                }\n            }\n            // Determine which time to focus and scroll into view when component mounts\n            var timeToFocus = times.reduce(function(prev, time) {\n                if (time.getTime() <= activeDate.getTime()) {\n                    return time;\n                }\n                return prev;\n            }, times[0]);\n            return times.map(function(time, i) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"li\", {\n                    key: i,\n                    onClick: _this.handleClick.bind(_this, time),\n                    className: _this.liClasses(time),\n                    ref: function ref(li) {\n                        if (time === timeToFocus) {\n                            _this.centerLi = li;\n                        }\n                    },\n                    onKeyDown: function onKeyDown(ev) {\n                        _this.handleOnKeyDown(ev, time);\n                    },\n                    tabIndex: time === timeToFocus ? 0 : -1,\n                    role: \"option\",\n                    \"aria-selected\": _this.isSelectedTime(time) ? \"true\" : undefined,\n                    \"aria-disabled\": _this.isDisabledTime(time) ? \"true\" : undefined\n                }, formatDate(time, format, _this.props.locale));\n            });\n        });\n        return _this;\n    }\n    _inherits(Time, _React$Component);\n    return _createClass(Time, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                // code to ensure selected time will always be in focus within time window when it first appears\n                this.scrollToTheSelectedTime();\n                if (this.props.monthRef && this.header) {\n                    this.setState({\n                        height: this.props.monthRef.clientHeight - this.header.clientHeight\n                    });\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this2 = this;\n                var height = this.state.height;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__time-container \".concat(this.props.todayButton ? \"react-datepicker__time-container--with-today-button\" : \"\")\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__header react-datepicker__header--time \".concat(this.props.showTimeSelectOnly ? \"react-datepicker__header--time--only\" : \"\"),\n                    ref: function ref(header) {\n                        _this2.header = header;\n                    }\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker-time__header\"\n                }, this.props.timeCaption)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__time\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__time-box\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", {\n                    className: \"react-datepicker__time-list\",\n                    ref: function ref(list) {\n                        _this2.list = list;\n                    },\n                    style: height ? {\n                        height: height\n                    } : {},\n                    role: \"listbox\",\n                    \"aria-label\": this.props.timeCaption\n                }, this.renderTimes()))));\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function get() {\n                return {\n                    intervals: 30,\n                    onTimeChange: function onTimeChange() {},\n                    todayButton: null,\n                    timeCaption: \"Time\"\n                };\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n_defineProperty(Time, \"calcCenterPosition\", function(listHeight, centerLiRef) {\n    return centerLiRef.offsetTop - (listHeight / 2 - centerLiRef.clientHeight / 2);\n});\nvar Year = /*#__PURE__*/ function(_React$Component) {\n    function Year(props) {\n        var _this;\n        _classCallCheck(this, Year);\n        _this = _callSuper(this, Year, [\n            props\n        ]);\n        _defineProperty(_this, \"YEAR_REFS\", _toConsumableArray(Array(_this.props.yearItemNumber)).map(function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n        }));\n        _defineProperty(_this, \"isDisabled\", function(date) {\n            return isDayDisabled(date, _this.props);\n        });\n        _defineProperty(_this, \"isExcluded\", function(date) {\n            return isDayExcluded(date, _this.props);\n        });\n        _defineProperty(_this, \"selectingDate\", function() {\n            var _this$props$selecting;\n            return (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\n        });\n        _defineProperty(_this, \"updateFocusOnPaginate\", function(refIndex) {\n            var waitForReRender = (function() {\n                this.YEAR_REFS[refIndex].current.focus();\n            }).bind(_this);\n            window.requestAnimationFrame(waitForReRender);\n        });\n        _defineProperty(_this, \"handleYearClick\", function(day, event) {\n            if (_this.props.onDayClick) {\n                _this.props.onDayClick(day, event);\n            }\n        });\n        _defineProperty(_this, \"handleYearNavigation\", function(newYear, newDate) {\n            var _this$props = _this.props, date = _this$props.date, yearItemNumber = _this$props.yearItemNumber;\n            var _utils$getYearsPeriod = getYearsPeriod(date, yearItemNumber), startPeriod = _utils$getYearsPeriod.startPeriod;\n            if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\n            _this.props.setPreSelection(newDate);\n            if (newYear - startPeriod === -1) {\n                _this.updateFocusOnPaginate(yearItemNumber - 1);\n            } else if (newYear - startPeriod === yearItemNumber) {\n                _this.updateFocusOnPaginate(0);\n            } else _this.YEAR_REFS[newYear - startPeriod].current.focus();\n        });\n        _defineProperty(_this, \"isSameDay\", function(y, other) {\n            return isSameDay(y, other);\n        });\n        _defineProperty(_this, \"isCurrentYear\", function(y) {\n            return y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate());\n        });\n        _defineProperty(_this, \"isRangeStart\", function(y) {\n            return _this.props.startDate && _this.props.endDate && isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.startDate);\n        });\n        _defineProperty(_this, \"isRangeEnd\", function(y) {\n            return _this.props.startDate && _this.props.endDate && isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.endDate);\n        });\n        _defineProperty(_this, \"isInRange\", function(y) {\n            return isYearInRange(y, _this.props.startDate, _this.props.endDate);\n        });\n        _defineProperty(_this, \"isInSelectingRange\", function(y) {\n            var _this$props2 = _this.props, selectsStart = _this$props2.selectsStart, selectsEnd = _this$props2.selectsEnd, selectsRange = _this$props2.selectsRange, startDate = _this$props2.startDate, endDate = _this$props2.endDate;\n            if (!(selectsStart || selectsEnd || selectsRange) || !_this.selectingDate()) {\n                return false;\n            }\n            if (selectsStart && endDate) {\n                return isYearInRange(y, _this.selectingDate(), endDate);\n            }\n            if (selectsEnd && startDate) {\n                return isYearInRange(y, startDate, _this.selectingDate());\n            }\n            if (selectsRange && startDate && !endDate) {\n                return isYearInRange(y, startDate, _this.selectingDate());\n            }\n            return false;\n        });\n        _defineProperty(_this, \"isSelectingRangeStart\", function(y) {\n            if (!_this.isInSelectingRange(y)) {\n                return false;\n            }\n            var _this$props3 = _this.props, startDate = _this$props3.startDate, selectsStart = _this$props3.selectsStart;\n            var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\n            if (selectsStart) {\n                return isSameYear(_year, _this.selectingDate());\n            }\n            return isSameYear(_year, startDate);\n        });\n        _defineProperty(_this, \"isSelectingRangeEnd\", function(y) {\n            if (!_this.isInSelectingRange(y)) {\n                return false;\n            }\n            var _this$props4 = _this.props, endDate = _this$props4.endDate, selectsEnd = _this$props4.selectsEnd, selectsRange = _this$props4.selectsRange;\n            var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\n            if (selectsEnd || selectsRange) {\n                return isSameYear(_year, _this.selectingDate());\n            }\n            return isSameYear(_year, endDate);\n        });\n        _defineProperty(_this, \"isKeyboardSelected\", function(y) {\n            var date = getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(_this.props.date, y));\n            return !_this.props.disabledKeyboardNavigation && !_this.props.inline && !isSameDay(date, getStartOfYear(_this.props.selected)) && isSameDay(date, getStartOfYear(_this.props.preSelection));\n        });\n        _defineProperty(_this, \"onYearClick\", function(e, y) {\n            var date = _this.props.date;\n            _this.handleYearClick(getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)), e);\n        });\n        _defineProperty(_this, \"onYearKeyDown\", function(e, y) {\n            var key = e.key;\n            var handleOnKeyDown = _this.props.handleOnKeyDown;\n            if (!_this.props.disabledKeyboardNavigation) {\n                switch(key){\n                    case \"Enter\":\n                        _this.onYearClick(e, y);\n                        _this.props.setPreSelection(_this.props.selected);\n                        break;\n                    case \"ArrowRight\":\n                        _this.handleYearNavigation(y + 1, (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_46__.addYears)(_this.props.preSelection, 1));\n                        break;\n                    case \"ArrowLeft\":\n                        _this.handleYearNavigation(y - 1, (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_44__.subYears)(_this.props.preSelection, 1));\n                        break;\n                }\n            }\n            handleOnKeyDown && handleOnKeyDown(e);\n        });\n        _defineProperty(_this, \"getYearClassNames\", function(y) {\n            var _this$props5 = _this.props, date = _this$props5.date, minDate = _this$props5.minDate, maxDate = _this$props5.maxDate, selected = _this$props5.selected, excludeDates = _this$props5.excludeDates, includeDates = _this$props5.includeDates, filterDate = _this$props5.filterDate, yearClassName = _this$props5.yearClassName;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__year-text\", \"react-datepicker__year-\".concat(y), yearClassName ? yearClassName((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)) : undefined, {\n                \"react-datepicker__year-text--selected\": y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected),\n                \"react-datepicker__year-text--disabled\": (minDate || maxDate || excludeDates || includeDates || filterDate) && isYearDisabled(y, _this.props),\n                \"react-datepicker__year-text--keyboard-selected\": _this.isKeyboardSelected(y),\n                \"react-datepicker__year-text--range-start\": _this.isRangeStart(y),\n                \"react-datepicker__year-text--range-end\": _this.isRangeEnd(y),\n                \"react-datepicker__year-text--in-range\": _this.isInRange(y),\n                \"react-datepicker__year-text--in-selecting-range\": _this.isInSelectingRange(y),\n                \"react-datepicker__year-text--selecting-range-start\": _this.isSelectingRangeStart(y),\n                \"react-datepicker__year-text--selecting-range-end\": _this.isSelectingRangeEnd(y),\n                \"react-datepicker__year-text--today\": _this.isCurrentYear(y)\n            });\n        });\n        _defineProperty(_this, \"getYearTabIndex\", function(y) {\n            if (_this.props.disabledKeyboardNavigation) return \"-1\";\n            var preSelected = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.preSelection);\n            return y === preSelected ? \"0\" : \"-1\";\n        });\n        _defineProperty(_this, \"getYearContainerClassNames\", function() {\n            var _this$props6 = _this.props, selectingDate = _this$props6.selectingDate, selectsStart = _this$props6.selectsStart, selectsEnd = _this$props6.selectsEnd, selectsRange = _this$props6.selectsRange;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__year\", {\n                \"react-datepicker__year--selecting-range\": selectingDate && (selectsStart || selectsEnd || selectsRange)\n            });\n        });\n        _defineProperty(_this, \"getYearContent\", function(y) {\n            return _this.props.renderYearContent ? _this.props.renderYearContent(y) : y;\n        });\n        return _this;\n    }\n    _inherits(Year, _React$Component);\n    return _createClass(Year, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this2 = this;\n                var yearsList = [];\n                var _this$props7 = this.props, date = _this$props7.date, yearItemNumber = _this$props7.yearItemNumber, onYearMouseEnter = _this$props7.onYearMouseEnter, onYearMouseLeave = _this$props7.onYearMouseLeave;\n                var _utils$getYearsPeriod2 = getYearsPeriod(date, yearItemNumber), startPeriod = _utils$getYearsPeriod2.startPeriod, endPeriod = _utils$getYearsPeriod2.endPeriod;\n                var _loop = function _loop(y) {\n                    yearsList.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                        ref: _this2.YEAR_REFS[y - startPeriod],\n                        onClick: function onClick(ev) {\n                            _this2.onYearClick(ev, y);\n                        },\n                        onKeyDown: function onKeyDown(ev) {\n                            if (isSpaceKeyDown(ev)) {\n                                ev.preventDefault();\n                                ev.key = \"Enter\";\n                            }\n                            _this2.onYearKeyDown(ev, y);\n                        },\n                        tabIndex: _this2.getYearTabIndex(y),\n                        className: _this2.getYearClassNames(y),\n                        onMouseEnter: !_this2.props.usePointerEvent ? function(ev) {\n                            return onYearMouseEnter(ev, y);\n                        } : undefined,\n                        onPointerEnter: _this2.props.usePointerEvent ? function(ev) {\n                            return onYearMouseEnter(ev, y);\n                        } : undefined,\n                        onMouseLeave: !_this2.props.usePointerEvent ? function(ev) {\n                            return onYearMouseLeave(ev, y);\n                        } : undefined,\n                        onPointerLeave: _this2.props.usePointerEvent ? function(ev) {\n                            return onYearMouseLeave(ev, y);\n                        } : undefined,\n                        key: y,\n                        \"aria-current\": _this2.isCurrentYear(y) ? \"date\" : undefined\n                    }, _this2.getYearContent(y)));\n                };\n                for(var y = startPeriod; y <= endPeriod; y++){\n                    _loop(y);\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: this.getYearContainerClassNames()\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__year-wrapper\",\n                    onMouseLeave: !this.props.usePointerEvent ? this.props.clearSelectingDate : undefined,\n                    onPointerLeave: this.props.usePointerEvent ? this.props.clearSelectingDate : undefined\n                }, yearsList));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar inputTime = /*#__PURE__*/ function(_React$Component) {\n    function inputTime(props) {\n        var _this;\n        _classCallCheck(this, inputTime);\n        _this = _callSuper(this, inputTime, [\n            props\n        ]);\n        _defineProperty(_this, \"onTimeChange\", function(time) {\n            _this.setState({\n                time: time\n            });\n            var propDate = _this.props.date;\n            var isPropDateValid = propDate instanceof Date && !isNaN(propDate);\n            var date = isPropDateValid ? propDate : new Date();\n            date.setHours(time.split(\":\")[0]);\n            date.setMinutes(time.split(\":\")[1]);\n            _this.props.onChange(date);\n        });\n        _defineProperty(_this, \"renderTimeInput\", function() {\n            var time = _this.state.time;\n            var _this$props = _this.props, date = _this$props.date, timeString = _this$props.timeString, customTimeInput = _this$props.customTimeInput;\n            if (customTimeInput) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(customTimeInput, {\n                    date: date,\n                    value: time,\n                    onChange: _this.onTimeChange\n                });\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n                type: \"time\",\n                className: \"react-datepicker-time__input\",\n                placeholder: \"Time\",\n                name: \"time-input\",\n                required: true,\n                value: time,\n                onChange: function onChange(ev) {\n                    _this.onTimeChange(ev.target.value || timeString);\n                }\n            });\n        });\n        _this.state = {\n            time: _this.props.timeString\n        };\n        return _this;\n    }\n    _inherits(inputTime, _React$Component);\n    return _createClass(inputTime, [\n        {\n            key: \"render\",\n            value: function render() {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__input-time-container\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker-time__caption\"\n                }, this.props.timeInputLabel), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker-time__input-container\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker-time__input\"\n                }, this.renderTimeInput())));\n            }\n        }\n    ], [\n        {\n            key: \"getDerivedStateFromProps\",\n            value: function getDerivedStateFromProps(props, state) {\n                if (props.timeString !== state.time) {\n                    return {\n                        time: props.timeString\n                    };\n                }\n                // Return null to indicate no change to state.\n                return null;\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nfunction CalendarContainer(_ref) {\n    var _ref$showTimeSelectOn = _ref.showTimeSelectOnly, showTimeSelectOnly = _ref$showTimeSelectOn === void 0 ? false : _ref$showTimeSelectOn, _ref$showTime = _ref.showTime, showTime = _ref$showTime === void 0 ? false : _ref$showTime, className = _ref.className, children = _ref.children;\n    var ariaLabel = showTimeSelectOnly ? \"Choose Time\" : \"Choose Date\".concat(showTime ? \" and Time\" : \"\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: className,\n        role: \"dialog\",\n        \"aria-label\": ariaLabel,\n        \"aria-modal\": \"true\"\n    }, children);\n}\nvar DROPDOWN_FOCUS_CLASSNAMES = [\n    \"react-datepicker__year-select\",\n    \"react-datepicker__month-select\",\n    \"react-datepicker__month-year-select\"\n];\nvar isDropdownSelect = function isDropdownSelect() {\n    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var classNames = (element.className || \"\").split(/\\s+/);\n    return DROPDOWN_FOCUS_CLASSNAMES.some(function(testClassname) {\n        return classNames.indexOf(testClassname) >= 0;\n    });\n};\nvar Calendar = /*#__PURE__*/ function(_React$Component) {\n    function Calendar(props) {\n        var _this;\n        _classCallCheck(this, Calendar);\n        _this = _callSuper(this, Calendar, [\n            props\n        ]);\n        _defineProperty(_this, \"handleClickOutside\", function(event) {\n            _this.props.onClickOutside(event);\n        });\n        _defineProperty(_this, \"setClickOutsideRef\", function() {\n            return _this.containerRef.current;\n        });\n        _defineProperty(_this, \"handleDropdownFocus\", function(event) {\n            if (isDropdownSelect(event.target)) {\n                _this.props.onDropdownFocus();\n            }\n        });\n        _defineProperty(_this, \"getDateInView\", function() {\n            var _this$props = _this.props, preSelection = _this$props.preSelection, selected = _this$props.selected, openToDate = _this$props.openToDate;\n            var minDate = getEffectiveMinDate(_this.props);\n            var maxDate = getEffectiveMaxDate(_this.props);\n            var current = newDate();\n            var initialDate = openToDate || selected || preSelection;\n            if (initialDate) {\n                return initialDate;\n            } else {\n                if (minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(current, minDate)) {\n                    return minDate;\n                } else if (maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(current, maxDate)) {\n                    return maxDate;\n                }\n            }\n            return current;\n        });\n        _defineProperty(_this, \"increaseMonth\", function() {\n            _this.setState(function(_ref) {\n                var date = _ref.date;\n                return {\n                    date: (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_40__.addMonths)(date, 1)\n                };\n            }, function() {\n                return _this.handleMonthChange(_this.state.date);\n            });\n        });\n        _defineProperty(_this, \"decreaseMonth\", function() {\n            _this.setState(function(_ref2) {\n                var date = _ref2.date;\n                return {\n                    date: (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_38__.subMonths)(date, 1)\n                };\n            }, function() {\n                return _this.handleMonthChange(_this.state.date);\n            });\n        });\n        _defineProperty(_this, \"handleDayClick\", function(day, event, monthSelectedIn) {\n            _this.props.onSelect(day, event, monthSelectedIn);\n            _this.props.setPreSelection && _this.props.setPreSelection(day);\n        });\n        _defineProperty(_this, \"handleDayMouseEnter\", function(day) {\n            _this.setState({\n                selectingDate: day\n            });\n            _this.props.onDayMouseEnter && _this.props.onDayMouseEnter(day);\n        });\n        _defineProperty(_this, \"handleMonthMouseLeave\", function() {\n            _this.setState({\n                selectingDate: null\n            });\n            _this.props.onMonthMouseLeave && _this.props.onMonthMouseLeave();\n        });\n        _defineProperty(_this, \"handleYearMouseEnter\", function(event, year) {\n            _this.setState({\n                selectingDate: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), year)\n            });\n            !!_this.props.onYearMouseEnter && _this.props.onYearMouseEnter(event, year);\n        });\n        _defineProperty(_this, \"handleYearMouseLeave\", function(event, year) {\n            !!_this.props.onYearMouseLeave && _this.props.onYearMouseLeave(event, year);\n        });\n        _defineProperty(_this, \"handleYearChange\", function(date) {\n            if (_this.props.onYearChange) {\n                _this.props.onYearChange(date);\n                _this.setState({\n                    isRenderAriaLiveMessage: true\n                });\n            }\n            if (_this.props.adjustDateOnChange) {\n                if (_this.props.onSelect) {\n                    _this.props.onSelect(date);\n                }\n                if (_this.props.setOpen) {\n                    _this.props.setOpen(true);\n                }\n            }\n            _this.props.setPreSelection && _this.props.setPreSelection(date);\n        });\n        _defineProperty(_this, \"handleMonthChange\", function(date) {\n            _this.handleCustomMonthChange(date);\n            if (_this.props.adjustDateOnChange) {\n                if (_this.props.onSelect) {\n                    _this.props.onSelect(date);\n                }\n                if (_this.props.setOpen) {\n                    _this.props.setOpen(true);\n                }\n            }\n            _this.props.setPreSelection && _this.props.setPreSelection(date);\n        });\n        _defineProperty(_this, \"handleCustomMonthChange\", function(date) {\n            if (_this.props.onMonthChange) {\n                _this.props.onMonthChange(date);\n                _this.setState({\n                    isRenderAriaLiveMessage: true\n                });\n            }\n        });\n        _defineProperty(_this, \"handleMonthYearChange\", function(date) {\n            _this.handleYearChange(date);\n            _this.handleMonthChange(date);\n        });\n        _defineProperty(_this, \"changeYear\", function(year) {\n            _this.setState(function(_ref3) {\n                var date = _ref3.date;\n                return {\n                    date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, year)\n                };\n            }, function() {\n                return _this.handleYearChange(_this.state.date);\n            });\n        });\n        _defineProperty(_this, \"changeMonth\", function(month) {\n            _this.setState(function(_ref4) {\n                var date = _ref4.date;\n                return {\n                    date: (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, month)\n                };\n            }, function() {\n                return _this.handleMonthChange(_this.state.date);\n            });\n        });\n        _defineProperty(_this, \"changeMonthYear\", function(monthYear) {\n            _this.setState(function(_ref5) {\n                var date = _ref5.date;\n                return {\n                    date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(monthYear)), (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthYear))\n                };\n            }, function() {\n                return _this.handleMonthYearChange(_this.state.date);\n            });\n        });\n        _defineProperty(_this, \"header\", function() {\n            var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.date;\n            var startOfWeek = getStartOfWeek(date, _this.props.locale, _this.props.calendarStartDay);\n            var dayNames = [];\n            if (_this.props.showWeekNumbers) {\n                dayNames.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    key: \"W\",\n                    className: \"react-datepicker__day-name\"\n                }, _this.props.weekLabel || \"#\"));\n            }\n            return dayNames.concat([\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6\n            ].map(function(offset) {\n                var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, offset);\n                var weekDayName = _this.formatWeekday(day, _this.props.locale);\n                var weekDayClassName = _this.props.weekDayClassName ? _this.props.weekDayClassName(day) : undefined;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    key: offset,\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__day-name\", weekDayClassName)\n                }, weekDayName);\n            }));\n        });\n        _defineProperty(_this, \"formatWeekday\", function(day, locale) {\n            if (_this.props.formatWeekDay) {\n                return getFormattedWeekdayInLocale(day, _this.props.formatWeekDay, locale);\n            }\n            return _this.props.useWeekdaysShort ? getWeekdayShortInLocale(day, locale) : getWeekdayMinInLocale(day, locale);\n        });\n        _defineProperty(_this, \"decreaseYear\", function() {\n            _this.setState(function(_ref6) {\n                var date = _ref6.date;\n                return {\n                    date: (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_44__.subYears)(date, _this.props.showYearPicker ? _this.props.yearItemNumber : 1)\n                };\n            }, function() {\n                return _this.handleYearChange(_this.state.date);\n            });\n        });\n        _defineProperty(_this, \"clearSelectingDate\", function() {\n            _this.setState({\n                selectingDate: null\n            });\n        });\n        _defineProperty(_this, \"renderPreviousButton\", function() {\n            if (_this.props.renderCustomHeader) {\n                return;\n            }\n            var allPrevDaysDisabled;\n            switch(true){\n                case _this.props.showMonthYearPicker:\n                    allPrevDaysDisabled = yearDisabledBefore(_this.state.date, _this.props);\n                    break;\n                case _this.props.showYearPicker:\n                    allPrevDaysDisabled = yearsDisabledBefore(_this.state.date, _this.props);\n                    break;\n                case _this.props.showQuarterYearPicker:\n                    allPrevDaysDisabled = quarterDisabledBefore(_this.state.date, _this.props);\n                    break;\n                default:\n                    allPrevDaysDisabled = monthDisabledBefore(_this.state.date, _this.props);\n                    break;\n            }\n            if (!_this.props.forceShowMonthNavigation && !_this.props.showDisabledMonthNavigation && allPrevDaysDisabled || _this.props.showTimeSelectOnly) {\n                return;\n            }\n            var iconClasses = [\n                \"react-datepicker__navigation-icon\",\n                \"react-datepicker__navigation-icon--previous\"\n            ];\n            var classes = [\n                \"react-datepicker__navigation\",\n                \"react-datepicker__navigation--previous\"\n            ];\n            var clickHandler = _this.decreaseMonth;\n            if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\n                clickHandler = _this.decreaseYear;\n            }\n            if (allPrevDaysDisabled && _this.props.showDisabledMonthNavigation) {\n                classes.push(\"react-datepicker__navigation--previous--disabled\");\n                clickHandler = null;\n            }\n            var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\n            var _this$props2 = _this.props, previousMonthButtonLabel = _this$props2.previousMonthButtonLabel, previousYearButtonLabel = _this$props2.previousYearButtonLabel;\n            var _this$props3 = _this.props, _this$props3$previous = _this$props3.previousMonthAriaLabel, previousMonthAriaLabel = _this$props3$previous === void 0 ? typeof previousMonthButtonLabel === \"string\" ? previousMonthButtonLabel : \"Previous Month\" : _this$props3$previous, _this$props3$previous2 = _this$props3.previousYearAriaLabel, previousYearAriaLabel = _this$props3$previous2 === void 0 ? typeof previousYearButtonLabel === \"string\" ? previousYearButtonLabel : \"Previous Year\" : _this$props3$previous2;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n                type: \"button\",\n                className: classes.join(\" \"),\n                onClick: clickHandler,\n                onKeyDown: _this.props.handleOnKeyDown,\n                \"aria-label\": isForYear ? previousYearAriaLabel : previousMonthAriaLabel\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                className: iconClasses.join(\" \")\n            }, isForYear ? _this.props.previousYearButtonLabel : _this.props.previousMonthButtonLabel));\n        });\n        _defineProperty(_this, \"increaseYear\", function() {\n            _this.setState(function(_ref7) {\n                var date = _ref7.date;\n                return {\n                    date: (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_46__.addYears)(date, _this.props.showYearPicker ? _this.props.yearItemNumber : 1)\n                };\n            }, function() {\n                return _this.handleYearChange(_this.state.date);\n            });\n        });\n        _defineProperty(_this, \"renderNextButton\", function() {\n            if (_this.props.renderCustomHeader) {\n                return;\n            }\n            var allNextDaysDisabled;\n            switch(true){\n                case _this.props.showMonthYearPicker:\n                    allNextDaysDisabled = yearDisabledAfter(_this.state.date, _this.props);\n                    break;\n                case _this.props.showYearPicker:\n                    allNextDaysDisabled = yearsDisabledAfter(_this.state.date, _this.props);\n                    break;\n                case _this.props.showQuarterYearPicker:\n                    allNextDaysDisabled = quarterDisabledAfter(_this.state.date, _this.props);\n                    break;\n                default:\n                    allNextDaysDisabled = monthDisabledAfter(_this.state.date, _this.props);\n                    break;\n            }\n            if (!_this.props.forceShowMonthNavigation && !_this.props.showDisabledMonthNavigation && allNextDaysDisabled || _this.props.showTimeSelectOnly) {\n                return;\n            }\n            var classes = [\n                \"react-datepicker__navigation\",\n                \"react-datepicker__navigation--next\"\n            ];\n            var iconClasses = [\n                \"react-datepicker__navigation-icon\",\n                \"react-datepicker__navigation-icon--next\"\n            ];\n            if (_this.props.showTimeSelect) {\n                classes.push(\"react-datepicker__navigation--next--with-time\");\n            }\n            if (_this.props.todayButton) {\n                classes.push(\"react-datepicker__navigation--next--with-today-button\");\n            }\n            var clickHandler = _this.increaseMonth;\n            if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\n                clickHandler = _this.increaseYear;\n            }\n            if (allNextDaysDisabled && _this.props.showDisabledMonthNavigation) {\n                classes.push(\"react-datepicker__navigation--next--disabled\");\n                clickHandler = null;\n            }\n            var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\n            var _this$props4 = _this.props, nextMonthButtonLabel = _this$props4.nextMonthButtonLabel, nextYearButtonLabel = _this$props4.nextYearButtonLabel;\n            var _this$props5 = _this.props, _this$props5$nextMont = _this$props5.nextMonthAriaLabel, nextMonthAriaLabel = _this$props5$nextMont === void 0 ? typeof nextMonthButtonLabel === \"string\" ? nextMonthButtonLabel : \"Next Month\" : _this$props5$nextMont, _this$props5$nextYear = _this$props5.nextYearAriaLabel, nextYearAriaLabel = _this$props5$nextYear === void 0 ? typeof nextYearButtonLabel === \"string\" ? nextYearButtonLabel : \"Next Year\" : _this$props5$nextYear;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n                type: \"button\",\n                className: classes.join(\" \"),\n                onClick: clickHandler,\n                onKeyDown: _this.props.handleOnKeyDown,\n                \"aria-label\": isForYear ? nextYearAriaLabel : nextMonthAriaLabel\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                className: iconClasses.join(\" \")\n            }, isForYear ? _this.props.nextYearButtonLabel : _this.props.nextMonthButtonLabel));\n        });\n        _defineProperty(_this, \"renderCurrentMonth\", function() {\n            var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.date;\n            var classes = [\n                \"react-datepicker__current-month\"\n            ];\n            if (_this.props.showYearDropdown) {\n                classes.push(\"react-datepicker__current-month--hasYearDropdown\");\n            }\n            if (_this.props.showMonthDropdown) {\n                classes.push(\"react-datepicker__current-month--hasMonthDropdown\");\n            }\n            if (_this.props.showMonthYearDropdown) {\n                classes.push(\"react-datepicker__current-month--hasMonthYearDropdown\");\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: classes.join(\" \")\n            }, formatDate(date, _this.props.dateFormat, _this.props.locale));\n        });\n        _defineProperty(_this, \"renderYearDropdown\", function() {\n            var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            if (!_this.props.showYearDropdown || overrideHide) {\n                return;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(YearDropdown, {\n                adjustDateOnChange: _this.props.adjustDateOnChange,\n                date: _this.state.date,\n                onSelect: _this.props.onSelect,\n                setOpen: _this.props.setOpen,\n                dropdownMode: _this.props.dropdownMode,\n                onChange: _this.changeYear,\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                year: (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date),\n                scrollableYearDropdown: _this.props.scrollableYearDropdown,\n                yearDropdownItemNumber: _this.props.yearDropdownItemNumber\n            });\n        });\n        _defineProperty(_this, \"renderMonthDropdown\", function() {\n            var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            if (!_this.props.showMonthDropdown || overrideHide) {\n                return;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MonthDropdown, {\n                dropdownMode: _this.props.dropdownMode,\n                locale: _this.props.locale,\n                onChange: _this.changeMonth,\n                month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date),\n                useShortMonthInDropdown: _this.props.useShortMonthInDropdown\n            });\n        });\n        _defineProperty(_this, \"renderMonthYearDropdown\", function() {\n            var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            if (!_this.props.showMonthYearDropdown || overrideHide) {\n                return;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MonthYearDropdown, {\n                dropdownMode: _this.props.dropdownMode,\n                locale: _this.props.locale,\n                dateFormat: _this.props.dateFormat,\n                onChange: _this.changeMonthYear,\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                date: _this.state.date,\n                scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown\n            });\n        });\n        _defineProperty(_this, \"handleTodayButtonClick\", function(e) {\n            _this.props.onSelect(getStartOfToday(), e);\n            _this.props.setPreSelection && _this.props.setPreSelection(getStartOfToday());\n        });\n        _defineProperty(_this, \"renderTodayButton\", function() {\n            if (!_this.props.todayButton || _this.props.showTimeSelectOnly) {\n                return;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"react-datepicker__today-button\",\n                onClick: function onClick(e) {\n                    return _this.handleTodayButtonClick(e);\n                }\n            }, _this.props.todayButton);\n        });\n        _defineProperty(_this, \"renderDefaultHeader\", function(_ref8) {\n            var monthDate = _ref8.monthDate, i = _ref8.i;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"react-datepicker__header \".concat(_this.props.showTimeSelect ? \"react-datepicker__header--has-time-select\" : \"\")\n            }, _this.renderCurrentMonth(monthDate), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"react-datepicker__header__dropdown react-datepicker__header__dropdown--\".concat(_this.props.dropdownMode),\n                onFocus: _this.handleDropdownFocus\n            }, _this.renderMonthDropdown(i !== 0), _this.renderMonthYearDropdown(i !== 0), _this.renderYearDropdown(i !== 0)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"react-datepicker__day-names\"\n            }, _this.header(monthDate)));\n        });\n        _defineProperty(_this, \"renderCustomHeader\", function() {\n            var headerArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var monthDate = headerArgs.monthDate, i = headerArgs.i;\n            if (_this.props.showTimeSelect && !_this.state.monthContainer || _this.props.showTimeSelectOnly) {\n                return null;\n            }\n            var prevMonthButtonDisabled = monthDisabledBefore(_this.state.date, _this.props);\n            var nextMonthButtonDisabled = monthDisabledAfter(_this.state.date, _this.props);\n            var prevYearButtonDisabled = yearDisabledBefore(_this.state.date, _this.props);\n            var nextYearButtonDisabled = yearDisabledAfter(_this.state.date, _this.props);\n            var showDayNames = !_this.props.showMonthYearPicker && !_this.props.showQuarterYearPicker && !_this.props.showYearPicker;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"react-datepicker__header react-datepicker__header--custom\",\n                onFocus: _this.props.onDropdownFocus\n            }, _this.props.renderCustomHeader(_objectSpread2(_objectSpread2({}, _this.state), {}, {\n                customHeaderCount: i,\n                monthDate: monthDate,\n                changeMonth: _this.changeMonth,\n                changeYear: _this.changeYear,\n                decreaseMonth: _this.decreaseMonth,\n                increaseMonth: _this.increaseMonth,\n                decreaseYear: _this.decreaseYear,\n                increaseYear: _this.increaseYear,\n                prevMonthButtonDisabled: prevMonthButtonDisabled,\n                nextMonthButtonDisabled: nextMonthButtonDisabled,\n                prevYearButtonDisabled: prevYearButtonDisabled,\n                nextYearButtonDisabled: nextYearButtonDisabled\n            })), showDayNames && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"react-datepicker__day-names\"\n            }, _this.header(monthDate)));\n        });\n        _defineProperty(_this, \"renderYearHeader\", function(_ref9) {\n            var monthDate = _ref9.monthDate;\n            var _this$props6 = _this.props, showYearPicker = _this$props6.showYearPicker, yearItemNumber = _this$props6.yearItemNumber;\n            var _getYearsPeriod = getYearsPeriod(monthDate, yearItemNumber), startPeriod = _getYearsPeriod.startPeriod, endPeriod = _getYearsPeriod.endPeriod;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"react-datepicker__header react-datepicker-year-header\"\n            }, showYearPicker ? \"\".concat(startPeriod, \" - \").concat(endPeriod) : (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthDate));\n        });\n        _defineProperty(_this, \"renderHeader\", function(headerArgs) {\n            switch(true){\n                case _this.props.renderCustomHeader !== undefined:\n                    return _this.renderCustomHeader(headerArgs);\n                case _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker:\n                    return _this.renderYearHeader(headerArgs);\n                default:\n                    return _this.renderDefaultHeader(headerArgs);\n            }\n        });\n        _defineProperty(_this, \"renderMonths\", function() {\n            var _this$props$monthSele;\n            if (_this.props.showTimeSelectOnly || _this.props.showYearPicker) {\n                return;\n            }\n            var monthList = [];\n            var monthsToSubtract = _this.props.showPreviousMonths ? _this.props.monthsShown - 1 : 0;\n            var fromMonthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_46__.addYears)(_this.state.date, monthsToSubtract) : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_38__.subMonths)(_this.state.date, monthsToSubtract);\n            var monthSelectedIn = (_this$props$monthSele = _this.props.monthSelectedIn) !== null && _this$props$monthSele !== void 0 ? _this$props$monthSele : monthsToSubtract;\n            for(var i = 0; i < _this.props.monthsShown; ++i){\n                var monthsToAdd = i - monthSelectedIn + monthsToSubtract;\n                var monthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_46__.addYears)(fromMonthDate, monthsToAdd) : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_40__.addMonths)(fromMonthDate, monthsToAdd);\n                var monthKey = \"month-\".concat(i);\n                var monthShowsDuplicateDaysEnd = i < _this.props.monthsShown - 1;\n                var monthShowsDuplicateDaysStart = i > 0;\n                monthList.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    key: monthKey,\n                    ref: function ref(div) {\n                        _this.monthContainer = div;\n                    },\n                    className: \"react-datepicker__month-container\"\n                }, _this.renderHeader({\n                    monthDate: monthDate,\n                    i: i\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Month, {\n                    chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\n                    disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\n                    weekAriaLabelPrefix: _this.props.weekAriaLabelPrefix,\n                    ariaLabelPrefix: _this.props.monthAriaLabelPrefix,\n                    onChange: _this.changeMonthYear,\n                    day: monthDate,\n                    dayClassName: _this.props.dayClassName,\n                    calendarStartDay: _this.props.calendarStartDay,\n                    monthClassName: _this.props.monthClassName,\n                    onDayClick: _this.handleDayClick,\n                    handleOnKeyDown: _this.props.handleOnDayKeyDown,\n                    handleOnMonthKeyDown: _this.props.handleOnKeyDown,\n                    usePointerEvent: _this.props.usePointerEvent,\n                    onDayMouseEnter: _this.handleDayMouseEnter,\n                    onMouseLeave: _this.handleMonthMouseLeave,\n                    onWeekSelect: _this.props.onWeekSelect,\n                    orderInDisplay: i,\n                    formatWeekNumber: _this.props.formatWeekNumber,\n                    locale: _this.props.locale,\n                    minDate: _this.props.minDate,\n                    maxDate: _this.props.maxDate,\n                    excludeDates: _this.props.excludeDates,\n                    excludeDateIntervals: _this.props.excludeDateIntervals,\n                    highlightDates: _this.props.highlightDates,\n                    holidays: _this.props.holidays,\n                    selectingDate: _this.state.selectingDate,\n                    includeDates: _this.props.includeDates,\n                    includeDateIntervals: _this.props.includeDateIntervals,\n                    inline: _this.props.inline,\n                    shouldFocusDayInline: _this.props.shouldFocusDayInline,\n                    fixedHeight: _this.props.fixedHeight,\n                    filterDate: _this.props.filterDate,\n                    preSelection: _this.props.preSelection,\n                    setPreSelection: _this.props.setPreSelection,\n                    selected: _this.props.selected,\n                    selectsStart: _this.props.selectsStart,\n                    selectsEnd: _this.props.selectsEnd,\n                    selectsRange: _this.props.selectsRange,\n                    selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n                    selectsMultiple: _this.props.selectsMultiple,\n                    selectedDates: _this.props.selectedDates,\n                    showWeekNumbers: _this.props.showWeekNumbers,\n                    startDate: _this.props.startDate,\n                    endDate: _this.props.endDate,\n                    peekNextMonth: _this.props.peekNextMonth,\n                    setOpen: _this.props.setOpen,\n                    shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\n                    renderDayContents: _this.props.renderDayContents,\n                    renderMonthContent: _this.props.renderMonthContent,\n                    renderQuarterContent: _this.props.renderQuarterContent,\n                    renderYearContent: _this.props.renderYearContent,\n                    disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n                    showMonthYearPicker: _this.props.showMonthYearPicker,\n                    showFullMonthYearPicker: _this.props.showFullMonthYearPicker,\n                    showTwoColumnMonthYearPicker: _this.props.showTwoColumnMonthYearPicker,\n                    showFourColumnMonthYearPicker: _this.props.showFourColumnMonthYearPicker,\n                    showYearPicker: _this.props.showYearPicker,\n                    showQuarterYearPicker: _this.props.showQuarterYearPicker,\n                    showWeekPicker: _this.props.showWeekPicker,\n                    isInputFocused: _this.props.isInputFocused,\n                    containerRef: _this.containerRef,\n                    monthShowsDuplicateDaysEnd: monthShowsDuplicateDaysEnd,\n                    monthShowsDuplicateDaysStart: monthShowsDuplicateDaysStart\n                })));\n            }\n            return monthList;\n        });\n        _defineProperty(_this, \"renderYears\", function() {\n            if (_this.props.showTimeSelectOnly) {\n                return;\n            }\n            if (_this.props.showYearPicker) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__year--container\"\n                }, _this.renderHeader({\n                    monthDate: _this.state.date\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Year, _extends({\n                    onDayClick: _this.handleDayClick,\n                    selectingDate: _this.state.selectingDate,\n                    clearSelectingDate: _this.clearSelectingDate,\n                    date: _this.state.date\n                }, _this.props, {\n                    onYearMouseEnter: _this.handleYearMouseEnter,\n                    onYearMouseLeave: _this.handleYearMouseLeave\n                })));\n            }\n        });\n        _defineProperty(_this, \"renderTimeSection\", function() {\n            if (_this.props.showTimeSelect && (_this.state.monthContainer || _this.props.showTimeSelectOnly)) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Time, {\n                    selected: _this.props.selected,\n                    openToDate: _this.props.openToDate,\n                    onChange: _this.props.onTimeChange,\n                    timeClassName: _this.props.timeClassName,\n                    format: _this.props.timeFormat,\n                    includeTimes: _this.props.includeTimes,\n                    intervals: _this.props.timeIntervals,\n                    minTime: _this.props.minTime,\n                    maxTime: _this.props.maxTime,\n                    excludeTimes: _this.props.excludeTimes,\n                    filterTime: _this.props.filterTime,\n                    timeCaption: _this.props.timeCaption,\n                    todayButton: _this.props.todayButton,\n                    showMonthDropdown: _this.props.showMonthDropdown,\n                    showMonthYearDropdown: _this.props.showMonthYearDropdown,\n                    showYearDropdown: _this.props.showYearDropdown,\n                    withPortal: _this.props.withPortal,\n                    monthRef: _this.state.monthContainer,\n                    injectTimes: _this.props.injectTimes,\n                    locale: _this.props.locale,\n                    handleOnKeyDown: _this.props.handleOnKeyDown,\n                    showTimeSelectOnly: _this.props.showTimeSelectOnly\n                });\n            }\n        });\n        _defineProperty(_this, \"renderInputTimeSection\", function() {\n            var time = new Date(_this.props.selected);\n            var timeValid = isValid(time) && Boolean(_this.props.selected);\n            var timeString = timeValid ? \"\".concat(addZero(time.getHours()), \":\").concat(addZero(time.getMinutes())) : \"\";\n            if (_this.props.showTimeInput) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(inputTime, {\n                    date: time,\n                    timeString: timeString,\n                    timeInputLabel: _this.props.timeInputLabel,\n                    onChange: _this.props.onTimeChange,\n                    customTimeInput: _this.props.customTimeInput\n                });\n            }\n        });\n        _defineProperty(_this, \"renderAriaLiveRegion\", function() {\n            var _getYearsPeriod2 = getYearsPeriod(_this.state.date, _this.props.yearItemNumber), startPeriod = _getYearsPeriod2.startPeriod, endPeriod = _getYearsPeriod2.endPeriod;\n            var ariaLiveMessage;\n            if (_this.props.showYearPicker) {\n                ariaLiveMessage = \"\".concat(startPeriod, \" - \").concat(endPeriod);\n            } else if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker) {\n                ariaLiveMessage = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date);\n            } else {\n                ariaLiveMessage = \"\".concat(getMonthInLocale((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date), _this.props.locale), \" \").concat((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date));\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                role: \"alert\",\n                \"aria-live\": \"polite\",\n                className: \"react-datepicker__aria-live\"\n            }, _this.state.isRenderAriaLiveMessage && ariaLiveMessage);\n        });\n        _defineProperty(_this, \"renderChildren\", function() {\n            if (_this.props.children) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__children-container\"\n                }, _this.props.children);\n            }\n        });\n        _this.containerRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n        _this.state = {\n            date: _this.getDateInView(),\n            selectingDate: null,\n            monthContainer: null,\n            isRenderAriaLiveMessage: false\n        };\n        return _this;\n    }\n    _inherits(Calendar, _React$Component);\n    return _createClass(Calendar, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                var _this2 = this;\n                // monthContainer height is needed in time component\n                // to determine the height for the ul in the time component\n                // setState here so height is given after final component\n                // layout is rendered\n                if (this.props.showTimeSelect) {\n                    this.assignMonthContainer = function() {\n                        _this2.setState({\n                            monthContainer: _this2.monthContainer\n                        });\n                    }();\n                }\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var _this3 = this;\n                if (this.props.preSelection && (!isSameDay(this.props.preSelection, prevProps.preSelection) || this.props.monthSelectedIn !== prevProps.monthSelectedIn)) {\n                    var hasMonthChanged = !isSameMonth(this.state.date, this.props.preSelection);\n                    this.setState({\n                        date: this.props.preSelection\n                    }, function() {\n                        return hasMonthChanged && _this3.handleCustomMonthChange(_this3.state.date);\n                    });\n                } else if (this.props.openToDate && !isSameDay(this.props.openToDate, prevProps.openToDate)) {\n                    this.setState({\n                        date: this.props.openToDate\n                    });\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var Container = this.props.container || CalendarContainer;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    style: {\n                        display: \"contents\"\n                    },\n                    ref: this.containerRef\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Container, {\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker\", this.props.className, {\n                        \"react-datepicker--time-only\": this.props.showTimeSelectOnly\n                    }),\n                    showTime: this.props.showTimeSelect || this.props.showTimeInput,\n                    showTimeSelectOnly: this.props.showTimeSelectOnly\n                }, this.renderAriaLiveRegion(), this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.renderChildren()));\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function get() {\n                return {\n                    onDropdownFocus: function onDropdownFocus() {},\n                    monthsShown: 1,\n                    forceShowMonthNavigation: false,\n                    timeCaption: \"Time\",\n                    previousYearButtonLabel: \"Previous Year\",\n                    nextYearButtonLabel: \"Next Year\",\n                    previousMonthButtonLabel: \"Previous Month\",\n                    nextMonthButtonLabel: \"Next Month\",\n                    customTimeInput: null,\n                    yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER\n                };\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar CalendarIcon = function CalendarIcon(_ref) {\n    var icon = _ref.icon, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, _onClick = _ref.onClick;\n    var defaultClass = \"react-datepicker__calendar-icon\";\n    if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().isValidElement(icon)) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(icon, {\n            className: \"\".concat(icon.props.className || \"\", \" \").concat(defaultClass, \" \").concat(className),\n            onClick: function onClick(e) {\n                if (typeof icon.props.onClick === \"function\") {\n                    icon.props.onClick(e);\n                }\n                if (typeof _onClick === \"function\") {\n                    _onClick(e);\n                }\n            }\n        });\n    }\n    if (typeof icon === \"string\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"i\", {\n            className: \"\".concat(defaultClass, \" \").concat(icon, \" \").concat(className),\n            \"aria-hidden\": \"true\",\n            onClick: _onClick\n        });\n    }\n    // Default SVG Icon\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n        className: \"\".concat(defaultClass, \" \").concat(className),\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 448 512\",\n        onClick: _onClick\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z\"\n    }));\n};\nvar CalendarIcon$1 = CalendarIcon;\nvar Portal = /*#__PURE__*/ function(_React$Component) {\n    function Portal(props) {\n        var _this;\n        _classCallCheck(this, Portal);\n        _this = _callSuper(this, Portal, [\n            props\n        ]);\n        _this.el = document.createElement(\"div\");\n        return _this;\n    }\n    _inherits(Portal, _React$Component);\n    return _createClass(Portal, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId);\n                if (!this.portalRoot) {\n                    this.portalRoot = document.createElement(\"div\");\n                    this.portalRoot.setAttribute(\"id\", this.props.portalId);\n                    (this.props.portalHost || document.body).appendChild(this.portalRoot);\n                }\n                this.portalRoot.appendChild(this.el);\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.portalRoot.removeChild(this.el);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                return /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_3___default().createPortal(this.props.children, this.el);\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n// TabLoop prevents the user from tabbing outside of the popper\n// It creates a tabindex loop so that \"Tab\" on the last element will focus the first element\n// and \"Shift Tab\" on the first element will focus the last element\nvar focusableElementsSelector = \"[tabindex], a, button, input, select, textarea\";\nvar focusableFilter = function focusableFilter(node) {\n    return !node.disabled && node.tabIndex !== -1;\n};\nvar TabLoop = /*#__PURE__*/ function(_React$Component) {\n    function TabLoop(props) {\n        var _this;\n        _classCallCheck(this, TabLoop);\n        _this = _callSuper(this, TabLoop, [\n            props\n        ]);\n        // query all focusable elements\n        // trim first and last because they are the focus guards\n        _defineProperty(_this, \"getTabChildren\", function() {\n            return Array.prototype.slice.call(_this.tabLoopRef.current.querySelectorAll(focusableElementsSelector), 1, -1).filter(focusableFilter);\n        });\n        _defineProperty(_this, \"handleFocusStart\", function() {\n            var tabChildren = _this.getTabChildren();\n            tabChildren && tabChildren.length > 1 && tabChildren[tabChildren.length - 1].focus();\n        });\n        _defineProperty(_this, \"handleFocusEnd\", function() {\n            var tabChildren = _this.getTabChildren();\n            tabChildren && tabChildren.length > 1 && tabChildren[0].focus();\n        });\n        _this.tabLoopRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n        return _this;\n    }\n    _inherits(TabLoop, _React$Component);\n    return _createClass(TabLoop, [\n        {\n            key: \"render\",\n            value: function render() {\n                if (!this.props.enableTabLoop) {\n                    return this.props.children;\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__tab-loop\",\n                    ref: this.tabLoopRef\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__tab-loop__start\",\n                    tabIndex: \"0\",\n                    onFocus: this.handleFocusStart\n                }), this.props.children, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__tab-loop__end\",\n                    tabIndex: \"0\",\n                    onFocus: this.handleFocusEnd\n                }));\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function get() {\n                return {\n                    enableTabLoop: true\n                };\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nfunction withFloating(Component) {\n    var WithFloating = function WithFloating(props) {\n        var alt_props = _objectSpread2(_objectSpread2({}, props), {}, {\n            popperModifiers: props.popperModifiers || [],\n            popperProps: props.popperProps || {},\n            hidePopper: typeof props.hidePopper === \"boolean\" ? props.hidePopper : true\n        });\n        var arrowRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef();\n        var floatingProps = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.useFloating)(_objectSpread2({\n            open: !alt_props.hidePopper,\n            whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.autoUpdate,\n            placement: alt_props.popperPlacement,\n            middleware: [\n                (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.flip)({\n                    padding: 15\n                }),\n                (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.offset)(10),\n                (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_64__.arrow)({\n                    element: arrowRef\n                })\n            ].concat(_toConsumableArray(alt_props.popperModifiers))\n        }, alt_props.popperProps));\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _extends({}, alt_props, {\n            popperProps: _objectSpread2(_objectSpread2({}, floatingProps), {}, {\n                arrowRef: arrowRef\n            })\n        }));\n    };\n    return WithFloating;\n}\n// Exported for testing purposes\nvar PopperComponent = /*#__PURE__*/ function(_React$Component) {\n    function PopperComponent() {\n        _classCallCheck(this, PopperComponent);\n        return _callSuper(this, PopperComponent, arguments);\n    }\n    _inherits(PopperComponent, _React$Component);\n    return _createClass(PopperComponent, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, className = _this$props.className, wrapperClassName = _this$props.wrapperClassName, hidePopper = _this$props.hidePopper, popperComponent = _this$props.popperComponent, targetComponent = _this$props.targetComponent, enableTabLoop = _this$props.enableTabLoop, popperOnKeyDown = _this$props.popperOnKeyDown, portalId = _this$props.portalId, portalHost = _this$props.portalHost, popperProps = _this$props.popperProps, showArrow = _this$props.showArrow;\n                var popper;\n                if (!hidePopper) {\n                    var classes = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker-popper\", className);\n                    popper = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TabLoop, {\n                        enableTabLoop: enableTabLoop\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                        ref: popperProps.refs.setFloating,\n                        style: popperProps.floatingStyles,\n                        className: classes,\n                        \"data-placement\": popperProps.placement,\n                        onKeyDown: popperOnKeyDown\n                    }, popperComponent, showArrow && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.FloatingArrow, {\n                        ref: popperProps.arrowRef,\n                        context: popperProps.context,\n                        fill: \"currentColor\",\n                        strokeWidth: 1,\n                        height: 8,\n                        width: 16,\n                        style: {\n                            transform: \"translateY(-1px)\"\n                        },\n                        className: \"react-datepicker__triangle\"\n                    })));\n                }\n                if (this.props.popperContainer) {\n                    popper = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(this.props.popperContainer, {}, popper);\n                }\n                if (portalId && !hidePopper) {\n                    popper = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Portal, {\n                        portalId: portalId,\n                        portalHost: portalHost\n                    }, popper);\n                }\n                var wrapperClasses = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker-wrapper\", wrapperClassName);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    ref: popperProps.refs.setReference,\n                    className: wrapperClasses\n                }, targetComponent), popper);\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function get() {\n                return {\n                    hidePopper: true\n                };\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar PopperComponent$1 = withFloating(PopperComponent);\nvar outsideClickIgnoreClass = \"react-datepicker-ignore-onclickoutside\";\nvar WrappedCalendar = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Calendar);\n// Compares dates year+month combinations\nfunction hasPreSelectionChanged(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date1) !== (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date2) || (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date1) !== (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date2);\n    }\n    return date1 !== date2;\n}\n/**\n * General datepicker component.\n */ var INPUT_ERR_1 = \"Date input not valid.\";\nvar DatePicker = /*#__PURE__*/ function(_React$Component) {\n    function DatePicker(props) {\n        var _this;\n        _classCallCheck(this, DatePicker);\n        _this = _callSuper(this, DatePicker, [\n            props\n        ]);\n        _defineProperty(_this, \"getPreSelection\", function() {\n            return _this.props.openToDate ? _this.props.openToDate : _this.props.selectsEnd && _this.props.startDate ? _this.props.startDate : _this.props.selectsStart && _this.props.endDate ? _this.props.endDate : newDate();\n        });\n        // Convert the date from string format to standard Date format\n        _defineProperty(_this, \"modifyHolidays\", function() {\n            var _this$props$holidays;\n            return (_this$props$holidays = _this.props.holidays) === null || _this$props$holidays === void 0 ? void 0 : _this$props$holidays.reduce(function(accumulator, holiday) {\n                var date = new Date(holiday.date);\n                if (!(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(date)) {\n                    return accumulator;\n                }\n                return [].concat(_toConsumableArray(accumulator), [\n                    _objectSpread2(_objectSpread2({}, holiday), {}, {\n                        date: date\n                    })\n                ]);\n            }, []);\n        });\n        _defineProperty(_this, \"calcInitialState\", function() {\n            var _ref;\n            var defaultPreSelection = _this.getPreSelection();\n            var minDate = getEffectiveMinDate(_this.props);\n            var maxDate = getEffectiveMaxDate(_this.props);\n            var boundedPreSelection = minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(defaultPreSelection, (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(minDate)) ? minDate : maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(defaultPreSelection, (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(maxDate)) ? maxDate : defaultPreSelection;\n            return {\n                open: _this.props.startOpen || false,\n                preventFocus: false,\n                preSelection: (_ref = _this.props.selectsRange ? _this.props.startDate : _this.props.selected) !== null && _ref !== void 0 ? _ref : boundedPreSelection,\n                // transforming highlighted days (perhaps nested array)\n                // to flat Map for faster access in day.jsx\n                highlightDates: getHightLightDaysMap(_this.props.highlightDates),\n                focused: false,\n                // used to focus day in inline version after month has changed, but not on\n                // initial render\n                shouldFocusDayInline: false,\n                isRenderAriaLiveMessage: false\n            };\n        });\n        _defineProperty(_this, \"clearPreventFocusTimeout\", function() {\n            if (_this.preventFocusTimeout) {\n                clearTimeout(_this.preventFocusTimeout);\n            }\n        });\n        _defineProperty(_this, \"setFocus\", function() {\n            if (_this.input && _this.input.focus) {\n                _this.input.focus({\n                    preventScroll: true\n                });\n            }\n        });\n        _defineProperty(_this, \"setBlur\", function() {\n            if (_this.input && _this.input.blur) {\n                _this.input.blur();\n            }\n            _this.cancelFocusInput();\n        });\n        _defineProperty(_this, \"setOpen\", function(open) {\n            var skipSetBlur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            _this.setState({\n                open: open,\n                preSelection: open && _this.state.open ? _this.state.preSelection : _this.calcInitialState().preSelection,\n                lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\n            }, function() {\n                if (!open) {\n                    _this.setState(function(prev) {\n                        return {\n                            focused: skipSetBlur ? prev.focused : false\n                        };\n                    }, function() {\n                        !skipSetBlur && _this.setBlur();\n                        _this.setState({\n                            inputValue: null\n                        });\n                    });\n                }\n            });\n        });\n        _defineProperty(_this, \"inputOk\", function() {\n            return (0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_49__.isDate)(_this.state.preSelection);\n        });\n        _defineProperty(_this, \"isCalendarOpen\", function() {\n            return _this.props.open === undefined ? _this.state.open && !_this.props.disabled && !_this.props.readOnly : _this.props.open;\n        });\n        _defineProperty(_this, \"handleFocus\", function(event) {\n            if (!_this.state.preventFocus) {\n                _this.props.onFocus(event);\n                if (!_this.props.preventOpenOnFocus && !_this.props.readOnly) {\n                    _this.setOpen(true);\n                }\n            }\n            _this.setState({\n                focused: true\n            });\n        });\n        _defineProperty(_this, \"sendFocusBackToInput\", function() {\n            // Clear previous timeout if it exists\n            if (_this.preventFocusTimeout) {\n                _this.clearPreventFocusTimeout();\n            }\n            // close the popper and refocus the input\n            // stop the input from auto opening onFocus\n            // setFocus to the input\n            _this.setState({\n                preventFocus: true\n            }, function() {\n                _this.preventFocusTimeout = setTimeout(function() {\n                    _this.setFocus();\n                    _this.setState({\n                        preventFocus: false\n                    });\n                });\n            });\n        });\n        _defineProperty(_this, \"cancelFocusInput\", function() {\n            clearTimeout(_this.inputFocusTimeout);\n            _this.inputFocusTimeout = null;\n        });\n        _defineProperty(_this, \"deferFocusInput\", function() {\n            _this.cancelFocusInput();\n            _this.inputFocusTimeout = setTimeout(function() {\n                return _this.setFocus();\n            }, 1);\n        });\n        _defineProperty(_this, \"handleDropdownFocus\", function() {\n            _this.cancelFocusInput();\n        });\n        _defineProperty(_this, \"handleBlur\", function(event) {\n            if (!_this.state.open || _this.props.withPortal || _this.props.showTimeInput) {\n                _this.props.onBlur(event);\n            }\n            _this.setState({\n                focused: false\n            });\n        });\n        _defineProperty(_this, \"handleCalendarClickOutside\", function(event) {\n            if (!_this.props.inline) {\n                _this.setOpen(false);\n            }\n            _this.props.onClickOutside(event);\n            if (_this.props.withPortal) {\n                event.preventDefault();\n            }\n        });\n        _defineProperty(_this, \"handleChange\", function() {\n            for(var _len = arguments.length, allArgs = new Array(_len), _key = 0; _key < _len; _key++){\n                allArgs[_key] = arguments[_key];\n            }\n            var event = allArgs[0];\n            if (_this.props.onChangeRaw) {\n                _this.props.onChangeRaw.apply(_this, allArgs);\n                if (typeof event.isDefaultPrevented !== \"function\" || event.isDefaultPrevented()) {\n                    return;\n                }\n            }\n            _this.setState({\n                inputValue: event.target.value,\n                lastPreSelectChange: PRESELECT_CHANGE_VIA_INPUT\n            });\n            var date = parseDate(event.target.value, _this.props.dateFormat, _this.props.locale, _this.props.strictParsing, _this.props.minDate);\n            // Use date from `selected` prop when manipulating only time for input value\n            if (_this.props.showTimeSelectOnly && _this.props.selected && date && !isSameDay(date, _this.props.selected)) {\n                date = (0,date_fns_set__WEBPACK_IMPORTED_MODULE_65__.set)(_this.props.selected, {\n                    hours: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(date),\n                    minutes: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(date),\n                    seconds: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_53__.getSeconds)(date)\n                });\n            }\n            if (date || !event.target.value) {\n                _this.setSelected(date, event, true);\n            }\n        });\n        _defineProperty(_this, \"handleSelect\", function(date, event, monthSelectedIn) {\n            if (_this.props.shouldCloseOnSelect && !_this.props.showTimeSelect) {\n                // Preventing onFocus event to fix issue\n                // https://github.com/Hacker0x01/react-datepicker/issues/628\n                _this.sendFocusBackToInput();\n            }\n            if (_this.props.onChangeRaw) {\n                _this.props.onChangeRaw(event);\n            }\n            _this.setSelected(date, event, false, monthSelectedIn);\n            if (_this.props.showDateSelect) {\n                _this.setState({\n                    isRenderAriaLiveMessage: true\n                });\n            }\n            if (!_this.props.shouldCloseOnSelect || _this.props.showTimeSelect) {\n                _this.setPreSelection(date);\n            } else if (!_this.props.inline) {\n                if (!_this.props.selectsRange) {\n                    _this.setOpen(false);\n                }\n                var _this$props = _this.props, startDate = _this$props.startDate, endDate = _this$props.endDate;\n                if (startDate && !endDate && !isDateBefore(date, startDate)) {\n                    _this.setOpen(false);\n                }\n            }\n        });\n        _defineProperty(_this, \"setSelected\", function(date, event, keepInput, monthSelectedIn) {\n            var changedDate = date;\n            if (_this.props.showYearPicker) {\n                if (changedDate !== null && isYearDisabled((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(changedDate), _this.props)) {\n                    return;\n                }\n            } else if (_this.props.showMonthYearPicker) {\n                if (changedDate !== null && isMonthDisabled(changedDate, _this.props)) {\n                    return;\n                }\n            } else {\n                if (changedDate !== null && isDayDisabled(changedDate, _this.props)) {\n                    return;\n                }\n            }\n            var _this$props2 = _this.props, onChange = _this$props2.onChange, selectsRange = _this$props2.selectsRange, startDate = _this$props2.startDate, endDate = _this$props2.endDate, selectsMultiple = _this$props2.selectsMultiple, selectedDates = _this$props2.selectedDates, minTime = _this$props2.minTime, swapRange = _this$props2.swapRange;\n            if (!isEqual(_this.props.selected, changedDate) || _this.props.allowSameDay || selectsRange || selectsMultiple) {\n                if (changedDate !== null) {\n                    if (_this.props.selected && (!keepInput || !_this.props.showTimeSelect && !_this.props.showTimeSelectOnly && !_this.props.showTimeInput)) {\n                        changedDate = setTime(changedDate, {\n                            hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(_this.props.selected),\n                            minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(_this.props.selected),\n                            second: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_53__.getSeconds)(_this.props.selected)\n                        });\n                    }\n                    // If minTime is present then set the time to minTime\n                    if (!keepInput && (_this.props.showTimeSelect || _this.props.showTimeSelectOnly)) {\n                        if (minTime) {\n                            changedDate = setTime(changedDate, {\n                                hour: minTime.getHours(),\n                                minute: minTime.getMinutes(),\n                                second: minTime.getSeconds()\n                            });\n                        }\n                    }\n                    if (!_this.props.inline) {\n                        _this.setState({\n                            preSelection: changedDate\n                        });\n                    }\n                    if (!_this.props.focusSelectedMonth) {\n                        _this.setState({\n                            monthSelectedIn: monthSelectedIn\n                        });\n                    }\n                }\n                if (selectsRange) {\n                    var noRanges = !startDate && !endDate;\n                    var hasStartRange = startDate && !endDate;\n                    var isRangeFilled = startDate && endDate;\n                    if (noRanges) {\n                        onChange([\n                            changedDate,\n                            null\n                        ], event);\n                    } else if (hasStartRange) {\n                        if (changedDate === null) {\n                            onChange([\n                                null,\n                                null\n                            ], event);\n                        } else if (isDateBefore(changedDate, startDate)) {\n                            if (swapRange) {\n                                onChange([\n                                    changedDate,\n                                    startDate\n                                ], event);\n                            } else {\n                                onChange([\n                                    changedDate,\n                                    null\n                                ], event);\n                            }\n                        } else {\n                            onChange([\n                                startDate,\n                                changedDate\n                            ], event);\n                        }\n                    }\n                    if (isRangeFilled) {\n                        onChange([\n                            changedDate,\n                            null\n                        ], event);\n                    }\n                } else if (selectsMultiple) {\n                    if (!(selectedDates !== null && selectedDates !== void 0 && selectedDates.length)) {\n                        onChange([\n                            changedDate\n                        ], event);\n                    } else {\n                        var isChangedDateAlreadySelected = selectedDates.some(function(selectedDate) {\n                            return isSameDay(selectedDate, changedDate);\n                        });\n                        if (isChangedDateAlreadySelected) {\n                            var nextDates = selectedDates.filter(function(selectedDate) {\n                                return !isSameDay(selectedDate, changedDate);\n                            });\n                            onChange(nextDates, event);\n                        } else {\n                            onChange([].concat(_toConsumableArray(selectedDates), [\n                                changedDate\n                            ]), event);\n                        }\n                    }\n                } else {\n                    onChange(changedDate, event);\n                }\n            }\n            if (!keepInput) {\n                _this.props.onSelect(changedDate, event);\n                _this.setState({\n                    inputValue: null\n                });\n            }\n        });\n        // When checking preSelection via min/maxDate, times need to be manipulated via startOfDay/endOfDay\n        _defineProperty(_this, \"setPreSelection\", function(date) {\n            var hasMinDate = typeof _this.props.minDate !== \"undefined\";\n            var hasMaxDate = typeof _this.props.maxDate !== \"undefined\";\n            var isValidDateSelection = true;\n            if (date) {\n                var dateStartOfDay = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(date);\n                if (hasMinDate && hasMaxDate) {\n                    // isDayInRange uses startOfDay internally, so not necessary to manipulate times here\n                    isValidDateSelection = isDayInRange(date, _this.props.minDate, _this.props.maxDate);\n                } else if (hasMinDate) {\n                    var minDateStartOfDay = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(_this.props.minDate);\n                    isValidDateSelection = (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(date, minDateStartOfDay) || isEqual(dateStartOfDay, minDateStartOfDay);\n                } else if (hasMaxDate) {\n                    var maxDateEndOfDay = (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(_this.props.maxDate);\n                    isValidDateSelection = (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, maxDateEndOfDay) || isEqual(dateStartOfDay, maxDateEndOfDay);\n                }\n            }\n            if (isValidDateSelection) {\n                _this.setState({\n                    preSelection: date\n                });\n            }\n        });\n        _defineProperty(_this, \"toggleCalendar\", function() {\n            _this.setOpen(!_this.state.open);\n        });\n        _defineProperty(_this, \"handleTimeChange\", function(time) {\n            var selected = _this.props.selected ? _this.props.selected : _this.getPreSelection();\n            var changedDate = _this.props.selected ? time : setTime(selected, {\n                hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time),\n                minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time)\n            });\n            _this.setState({\n                preSelection: changedDate\n            });\n            _this.props.onChange(changedDate);\n            if (_this.props.shouldCloseOnSelect) {\n                _this.sendFocusBackToInput();\n                _this.setOpen(false);\n            }\n            if (_this.props.showTimeInput) {\n                _this.setOpen(true);\n            }\n            if (_this.props.showTimeSelectOnly || _this.props.showTimeSelect) {\n                _this.setState({\n                    isRenderAriaLiveMessage: true\n                });\n            }\n            _this.setState({\n                inputValue: null\n            });\n        });\n        _defineProperty(_this, \"onInputClick\", function() {\n            if (!_this.props.disabled && !_this.props.readOnly) {\n                _this.setOpen(true);\n            }\n            _this.props.onInputClick();\n        });\n        _defineProperty(_this, \"onInputKeyDown\", function(event) {\n            _this.props.onKeyDown(event);\n            var eventKey = event.key;\n            if (!_this.state.open && !_this.props.inline && !_this.props.preventOpenOnFocus) {\n                if (eventKey === \"ArrowDown\" || eventKey === \"ArrowUp\" || eventKey === \"Enter\") {\n                    _this.onInputClick();\n                }\n                return;\n            }\n            // if calendar is open, these keys will focus the selected item\n            if (_this.state.open) {\n                if (eventKey === \"ArrowDown\" || eventKey === \"ArrowUp\") {\n                    event.preventDefault();\n                    var selectorString = _this.props.showWeekPicker && _this.props.showWeekNumbers ? '.react-datepicker__week-number[tabindex=\"0\"]' : '.react-datepicker__day[tabindex=\"0\"]';\n                    var selectedItem = _this.calendar.componentNode && _this.calendar.componentNode.querySelector(selectorString);\n                    selectedItem && selectedItem.focus({\n                        preventScroll: true\n                    });\n                    return;\n                }\n                var copy = newDate(_this.state.preSelection);\n                if (eventKey === \"Enter\") {\n                    event.preventDefault();\n                    if (_this.inputOk() && _this.state.lastPreSelectChange === PRESELECT_CHANGE_VIA_NAVIGATE) {\n                        _this.handleSelect(copy, event);\n                        !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\n                    } else {\n                        _this.setOpen(false);\n                    }\n                } else if (eventKey === \"Escape\") {\n                    event.preventDefault();\n                    _this.sendFocusBackToInput();\n                    _this.setOpen(false);\n                } else if (eventKey === \"Tab\") {\n                    _this.setOpen(false);\n                }\n                if (!_this.inputOk()) {\n                    _this.props.onInputError({\n                        code: 1,\n                        msg: INPUT_ERR_1\n                    });\n                }\n            }\n        });\n        _defineProperty(_this, \"onPortalKeyDown\", function(event) {\n            var eventKey = event.key;\n            if (eventKey === \"Escape\") {\n                event.preventDefault();\n                _this.setState({\n                    preventFocus: true\n                }, function() {\n                    _this.setOpen(false);\n                    setTimeout(function() {\n                        _this.setFocus();\n                        _this.setState({\n                            preventFocus: false\n                        });\n                    });\n                });\n            }\n        });\n        // keyDown events passed down to day.jsx\n        _defineProperty(_this, \"onDayKeyDown\", function(event) {\n            _this.props.onKeyDown(event);\n            var eventKey = event.key;\n            var isShiftKeyActive = event.shiftKey;\n            var copy = newDate(_this.state.preSelection);\n            if (eventKey === \"Enter\") {\n                event.preventDefault();\n                _this.handleSelect(copy, event);\n                !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\n            } else if (eventKey === \"Escape\") {\n                event.preventDefault();\n                _this.setOpen(false);\n                if (!_this.inputOk()) {\n                    _this.props.onInputError({\n                        code: 1,\n                        msg: INPUT_ERR_1\n                    });\n                }\n            } else if (!_this.props.disabledKeyboardNavigation) {\n                var newSelection;\n                switch(eventKey){\n                    case \"ArrowLeft\":\n                        if (_this.props.showWeekPicker) {\n                            newSelection = (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_66__.subWeeks)(copy, 1);\n                        } else {\n                            newSelection = (0,date_fns_subDays__WEBPACK_IMPORTED_MODULE_67__.subDays)(copy, 1);\n                        }\n                        break;\n                    case \"ArrowRight\":\n                        if (_this.props.showWeekPicker) {\n                            newSelection = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(copy, 1);\n                        } else {\n                            newSelection = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(copy, 1);\n                        }\n                        break;\n                    case \"ArrowUp\":\n                        newSelection = (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_66__.subWeeks)(copy, 1);\n                        break;\n                    case \"ArrowDown\":\n                        newSelection = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(copy, 1);\n                        break;\n                    case \"PageUp\":\n                        newSelection = isShiftKeyActive ? (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_44__.subYears)(copy, 1) : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_38__.subMonths)(copy, 1);\n                        break;\n                    case \"PageDown\":\n                        newSelection = isShiftKeyActive ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_46__.addYears)(copy, 1) : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_40__.addMonths)(copy, 1);\n                        break;\n                    case \"Home\":\n                        newSelection = getStartOfWeek(copy, _this.props.locale, _this.props.calendarStartDay);\n                        break;\n                    case \"End\":\n                        newSelection = getEndOfWeek(copy);\n                        break;\n                    default:\n                        newSelection = null;\n                        break;\n                }\n                if (!newSelection) {\n                    if (_this.props.onInputError) {\n                        _this.props.onInputError({\n                            code: 1,\n                            msg: INPUT_ERR_1\n                        });\n                    }\n                    return;\n                }\n                event.preventDefault();\n                _this.setState({\n                    lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\n                });\n                if (_this.props.adjustDateOnChange) {\n                    _this.setSelected(newSelection);\n                }\n                _this.setPreSelection(newSelection);\n                // need to figure out whether month has changed to focus day in inline version\n                if (_this.props.inline) {\n                    var prevMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(copy);\n                    var newMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newSelection);\n                    var prevYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(copy);\n                    var newYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newSelection);\n                    if (prevMonth !== newMonth || prevYear !== newYear) {\n                        // month has changed\n                        _this.setState({\n                            shouldFocusDayInline: true\n                        });\n                    } else {\n                        // month hasn't changed\n                        _this.setState({\n                            shouldFocusDayInline: false\n                        });\n                    }\n                }\n            }\n        });\n        // handle generic key down events in the popper that do not adjust or select dates\n        // ex: while focusing prev and next month buttons\n        _defineProperty(_this, \"onPopperKeyDown\", function(event) {\n            var eventKey = event.key;\n            if (eventKey === \"Escape\") {\n                event.preventDefault();\n                _this.sendFocusBackToInput();\n            }\n        });\n        _defineProperty(_this, \"onClearClick\", function(event) {\n            if (event) {\n                if (event.preventDefault) {\n                    event.preventDefault();\n                }\n            }\n            _this.sendFocusBackToInput();\n            if (_this.props.selectsRange) {\n                _this.props.onChange([\n                    null,\n                    null\n                ], event);\n            } else {\n                _this.props.onChange(null, event);\n            }\n            _this.setState({\n                inputValue: null\n            });\n        });\n        _defineProperty(_this, \"clear\", function() {\n            _this.onClearClick();\n        });\n        _defineProperty(_this, \"onScroll\", function(event) {\n            if (typeof _this.props.closeOnScroll === \"boolean\" && _this.props.closeOnScroll) {\n                if (event.target === document || event.target === document.documentElement || event.target === document.body) {\n                    _this.setOpen(false);\n                }\n            } else if (typeof _this.props.closeOnScroll === \"function\") {\n                if (_this.props.closeOnScroll(event)) {\n                    _this.setOpen(false);\n                }\n            }\n        });\n        _defineProperty(_this, \"renderCalendar\", function() {\n            if (!_this.props.inline && !_this.isCalendarOpen()) {\n                return null;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedCalendar, {\n                ref: function ref(elem) {\n                    _this.calendar = elem;\n                },\n                locale: _this.props.locale,\n                calendarStartDay: _this.props.calendarStartDay,\n                chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\n                disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\n                weekAriaLabelPrefix: _this.props.weekAriaLabelPrefix,\n                monthAriaLabelPrefix: _this.props.monthAriaLabelPrefix,\n                adjustDateOnChange: _this.props.adjustDateOnChange,\n                setOpen: _this.setOpen,\n                shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\n                dateFormat: _this.props.dateFormatCalendar,\n                useWeekdaysShort: _this.props.useWeekdaysShort,\n                formatWeekDay: _this.props.formatWeekDay,\n                dropdownMode: _this.props.dropdownMode,\n                selected: _this.props.selected,\n                preSelection: _this.state.preSelection,\n                onSelect: _this.handleSelect,\n                onWeekSelect: _this.props.onWeekSelect,\n                openToDate: _this.props.openToDate,\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                selectsStart: _this.props.selectsStart,\n                selectsEnd: _this.props.selectsEnd,\n                selectsRange: _this.props.selectsRange,\n                selectsMultiple: _this.props.selectsMultiple,\n                selectedDates: _this.props.selectedDates,\n                startDate: _this.props.startDate,\n                endDate: _this.props.endDate,\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals,\n                filterDate: _this.props.filterDate,\n                onClickOutside: _this.handleCalendarClickOutside,\n                formatWeekNumber: _this.props.formatWeekNumber,\n                highlightDates: _this.state.highlightDates,\n                holidays: getHolidaysMap(_this.modifyHolidays()),\n                includeDates: _this.props.includeDates,\n                includeDateIntervals: _this.props.includeDateIntervals,\n                includeTimes: _this.props.includeTimes,\n                injectTimes: _this.props.injectTimes,\n                inline: _this.props.inline,\n                shouldFocusDayInline: _this.state.shouldFocusDayInline,\n                peekNextMonth: _this.props.peekNextMonth,\n                showMonthDropdown: _this.props.showMonthDropdown,\n                showPreviousMonths: _this.props.showPreviousMonths,\n                useShortMonthInDropdown: _this.props.useShortMonthInDropdown,\n                showMonthYearDropdown: _this.props.showMonthYearDropdown,\n                showWeekNumbers: _this.props.showWeekNumbers,\n                showYearDropdown: _this.props.showYearDropdown,\n                withPortal: _this.props.withPortal,\n                forceShowMonthNavigation: _this.props.forceShowMonthNavigation,\n                showDisabledMonthNavigation: _this.props.showDisabledMonthNavigation,\n                scrollableYearDropdown: _this.props.scrollableYearDropdown,\n                scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown,\n                todayButton: _this.props.todayButton,\n                weekLabel: _this.props.weekLabel,\n                outsideClickIgnoreClass: outsideClickIgnoreClass,\n                fixedHeight: _this.props.fixedHeight,\n                monthsShown: _this.props.monthsShown,\n                monthSelectedIn: _this.state.monthSelectedIn,\n                onDropdownFocus: _this.handleDropdownFocus,\n                onMonthChange: _this.props.onMonthChange,\n                onYearChange: _this.props.onYearChange,\n                dayClassName: _this.props.dayClassName,\n                weekDayClassName: _this.props.weekDayClassName,\n                monthClassName: _this.props.monthClassName,\n                timeClassName: _this.props.timeClassName,\n                showDateSelect: _this.props.showDateSelect,\n                showTimeSelect: _this.props.showTimeSelect,\n                showTimeSelectOnly: _this.props.showTimeSelectOnly,\n                onTimeChange: _this.handleTimeChange,\n                timeFormat: _this.props.timeFormat,\n                timeIntervals: _this.props.timeIntervals,\n                minTime: _this.props.minTime,\n                maxTime: _this.props.maxTime,\n                excludeTimes: _this.props.excludeTimes,\n                filterTime: _this.props.filterTime,\n                timeCaption: _this.props.timeCaption,\n                className: _this.props.calendarClassName,\n                container: _this.props.calendarContainer,\n                yearItemNumber: _this.props.yearItemNumber,\n                yearDropdownItemNumber: _this.props.yearDropdownItemNumber,\n                previousMonthAriaLabel: _this.props.previousMonthAriaLabel,\n                previousMonthButtonLabel: _this.props.previousMonthButtonLabel,\n                nextMonthAriaLabel: _this.props.nextMonthAriaLabel,\n                nextMonthButtonLabel: _this.props.nextMonthButtonLabel,\n                previousYearAriaLabel: _this.props.previousYearAriaLabel,\n                previousYearButtonLabel: _this.props.previousYearButtonLabel,\n                nextYearAriaLabel: _this.props.nextYearAriaLabel,\n                nextYearButtonLabel: _this.props.nextYearButtonLabel,\n                timeInputLabel: _this.props.timeInputLabel,\n                disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n                renderCustomHeader: _this.props.renderCustomHeader,\n                popperProps: _this.props.popperProps,\n                renderDayContents: _this.props.renderDayContents,\n                renderMonthContent: _this.props.renderMonthContent,\n                renderQuarterContent: _this.props.renderQuarterContent,\n                renderYearContent: _this.props.renderYearContent,\n                onDayMouseEnter: _this.props.onDayMouseEnter,\n                onMonthMouseLeave: _this.props.onMonthMouseLeave,\n                onYearMouseEnter: _this.props.onYearMouseEnter,\n                onYearMouseLeave: _this.props.onYearMouseLeave,\n                selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n                showTimeInput: _this.props.showTimeInput,\n                showMonthYearPicker: _this.props.showMonthYearPicker,\n                showFullMonthYearPicker: _this.props.showFullMonthYearPicker,\n                showTwoColumnMonthYearPicker: _this.props.showTwoColumnMonthYearPicker,\n                showFourColumnMonthYearPicker: _this.props.showFourColumnMonthYearPicker,\n                showYearPicker: _this.props.showYearPicker,\n                showQuarterYearPicker: _this.props.showQuarterYearPicker,\n                showWeekPicker: _this.props.showWeekPicker,\n                excludeScrollbar: _this.props.excludeScrollbar,\n                handleOnKeyDown: _this.props.onKeyDown,\n                handleOnDayKeyDown: _this.onDayKeyDown,\n                isInputFocused: _this.state.focused,\n                customTimeInput: _this.props.customTimeInput,\n                setPreSelection: _this.setPreSelection,\n                usePointerEvent: _this.props.usePointerEvent,\n                yearClassName: _this.props.yearClassName\n            }, _this.props.children);\n        });\n        _defineProperty(_this, \"renderAriaLiveRegion\", function() {\n            var _this$props3 = _this.props, dateFormat = _this$props3.dateFormat, locale = _this$props3.locale;\n            var isContainsTime = _this.props.showTimeInput || _this.props.showTimeSelect;\n            var longDateFormat = isContainsTime ? \"PPPPp\" : \"PPPP\";\n            var ariaLiveMessage;\n            if (_this.props.selectsRange) {\n                ariaLiveMessage = \"Selected start date: \".concat(safeDateFormat(_this.props.startDate, {\n                    dateFormat: longDateFormat,\n                    locale: locale\n                }), \". \").concat(_this.props.endDate ? \"End date: \" + safeDateFormat(_this.props.endDate, {\n                    dateFormat: longDateFormat,\n                    locale: locale\n                }) : \"\");\n            } else {\n                if (_this.props.showTimeSelectOnly) {\n                    ariaLiveMessage = \"Selected time: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: dateFormat,\n                        locale: locale\n                    }));\n                } else if (_this.props.showYearPicker) {\n                    ariaLiveMessage = \"Selected year: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: \"yyyy\",\n                        locale: locale\n                    }));\n                } else if (_this.props.showMonthYearPicker) {\n                    ariaLiveMessage = \"Selected month: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: \"MMMM yyyy\",\n                        locale: locale\n                    }));\n                } else if (_this.props.showQuarterYearPicker) {\n                    ariaLiveMessage = \"Selected quarter: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: \"yyyy, QQQ\",\n                        locale: locale\n                    }));\n                } else {\n                    ariaLiveMessage = \"Selected date: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: longDateFormat,\n                        locale: locale\n                    }));\n                }\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                role: \"alert\",\n                \"aria-live\": \"polite\",\n                className: \"react-datepicker__aria-live\"\n            }, ariaLiveMessage);\n        });\n        _defineProperty(_this, \"renderDateInput\", function() {\n            var _React$cloneElement;\n            var className = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(_this.props.className, _defineProperty({}, outsideClickIgnoreClass, _this.state.open));\n            var customInput = _this.props.customInput || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n                type: \"text\"\n            });\n            var customInputRef = _this.props.customInputRef || \"ref\";\n            var inputValue = typeof _this.props.value === \"string\" ? _this.props.value : typeof _this.state.inputValue === \"string\" ? _this.state.inputValue : _this.props.selectsRange ? safeDateRangeFormat(_this.props.startDate, _this.props.endDate, _this.props) : _this.props.selectsMultiple ? safeMultipleDatesFormat(_this.props.selectedDates, _this.props) : safeDateFormat(_this.props.selected, _this.props);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(customInput, (_React$cloneElement = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_React$cloneElement, customInputRef, function(input) {\n                _this.input = input;\n            }), \"value\", inputValue), \"onBlur\", _this.handleBlur), \"onChange\", _this.handleChange), \"onClick\", _this.onInputClick), \"onFocus\", _this.handleFocus), \"onKeyDown\", _this.onInputKeyDown), \"id\", _this.props.id), \"name\", _this.props.name), \"form\", _this.props.form), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_React$cloneElement, \"autoFocus\", _this.props.autoFocus), \"placeholder\", _this.props.placeholderText), \"disabled\", _this.props.disabled), \"autoComplete\", _this.props.autoComplete), \"className\", (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(customInput.props.className, className)), \"title\", _this.props.title), \"readOnly\", _this.props.readOnly), \"required\", _this.props.required), \"tabIndex\", _this.props.tabIndex), \"aria-describedby\", _this.props.ariaDescribedBy), _defineProperty(_defineProperty(_defineProperty(_React$cloneElement, \"aria-invalid\", _this.props.ariaInvalid), \"aria-labelledby\", _this.props.ariaLabelledBy), \"aria-required\", _this.props.ariaRequired)));\n        });\n        _defineProperty(_this, \"renderClearButton\", function() {\n            var _this$props4 = _this.props, isClearable = _this$props4.isClearable, disabled = _this$props4.disabled, selected = _this$props4.selected, startDate = _this$props4.startDate, endDate = _this$props4.endDate, clearButtonTitle = _this$props4.clearButtonTitle, _this$props4$clearBut = _this$props4.clearButtonClassName, clearButtonClassName = _this$props4$clearBut === void 0 ? \"\" : _this$props4$clearBut, _this$props4$ariaLabe = _this$props4.ariaLabelClose, ariaLabelClose = _this$props4$ariaLabe === void 0 ? \"Close\" : _this$props4$ariaLabe, selectedDates = _this$props4.selectedDates;\n            if (isClearable && (selected != null || startDate != null || endDate != null || selectedDates !== null && selectedDates !== void 0 && selectedDates.length)) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n                    type: \"button\",\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__close-icon\", clearButtonClassName, {\n                        \"react-datepicker__close-icon--disabled\": disabled\n                    }),\n                    disabled: disabled,\n                    \"aria-label\": ariaLabelClose,\n                    onClick: _this.onClearClick,\n                    title: clearButtonTitle,\n                    tabIndex: -1\n                });\n            } else {\n                return null;\n            }\n        });\n        _this.state = _this.calcInitialState();\n        _this.preventFocusTimeout = null;\n        return _this;\n    }\n    _inherits(DatePicker, _React$Component);\n    return _createClass(DatePicker, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                window.addEventListener(\"scroll\", this.onScroll, true);\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps, prevState) {\n                if (prevProps.inline && hasPreSelectionChanged(prevProps.selected, this.props.selected)) {\n                    this.setPreSelection(this.props.selected);\n                }\n                if (this.state.monthSelectedIn !== undefined && prevProps.monthsShown !== this.props.monthsShown) {\n                    this.setState({\n                        monthSelectedIn: 0\n                    });\n                }\n                if (prevProps.highlightDates !== this.props.highlightDates) {\n                    this.setState({\n                        highlightDates: getHightLightDaysMap(this.props.highlightDates)\n                    });\n                }\n                if (!prevState.focused && !isEqual(prevProps.selected, this.props.selected)) {\n                    this.setState({\n                        inputValue: null\n                    });\n                }\n                if (prevState.open !== this.state.open) {\n                    if (prevState.open === false && this.state.open === true) {\n                        this.props.onCalendarOpen();\n                    }\n                    if (prevState.open === true && this.state.open === false) {\n                        this.props.onCalendarClose();\n                    }\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.clearPreventFocusTimeout();\n                window.removeEventListener(\"scroll\", this.onScroll, true);\n            }\n        },\n        {\n            key: \"renderInputContainer\",\n            value: function renderInputContainer() {\n                var _this$props5 = this.props, showIcon = _this$props5.showIcon, icon = _this$props5.icon, calendarIconClassname = _this$props5.calendarIconClassname, toggleCalendarOnIconClick = _this$props5.toggleCalendarOnIconClick;\n                var open = this.state.open;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                    className: \"react-datepicker__input-container\".concat(showIcon ? \" react-datepicker__view-calendar-icon\" : \"\")\n                }, showIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CalendarIcon$1, _extends({\n                    icon: icon,\n                    className: \"\".concat(calendarIconClassname, \" \").concat(open && \"react-datepicker-ignore-onclickoutside\")\n                }, toggleCalendarOnIconClick ? {\n                    onClick: this.toggleCalendar\n                } : null)), this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(), this.renderDateInput(), this.renderClearButton());\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var calendar = this.renderCalendar();\n                if (this.props.inline) return calendar;\n                if (this.props.withPortal) {\n                    var portalContainer = this.state.open ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TabLoop, {\n                        enableTabLoop: this.props.enableTabLoop\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                        className: \"react-datepicker__portal\",\n                        tabIndex: -1,\n                        onKeyDown: this.onPortalKeyDown\n                    }, calendar)) : null;\n                    if (this.state.open && this.props.portalId) {\n                        portalContainer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Portal, {\n                            portalId: this.props.portalId,\n                            portalHost: this.props.portalHost\n                        }, portalContainer);\n                    }\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, this.renderInputContainer(), portalContainer);\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PopperComponent$1, {\n                    className: this.props.popperClassName,\n                    wrapperClassName: this.props.wrapperClassName,\n                    hidePopper: !this.isCalendarOpen(),\n                    portalId: this.props.portalId,\n                    portalHost: this.props.portalHost,\n                    popperModifiers: this.props.popperModifiers,\n                    targetComponent: this.renderInputContainer(),\n                    popperContainer: this.props.popperContainer,\n                    popperComponent: calendar,\n                    popperPlacement: this.props.popperPlacement,\n                    popperProps: this.props.popperProps,\n                    popperOnKeyDown: this.onPopperKeyDown,\n                    enableTabLoop: this.props.enableTabLoop,\n                    showArrow: this.props.showPopperArrow\n                });\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function get() {\n                return {\n                    allowSameDay: false,\n                    dateFormat: \"MM/dd/yyyy\",\n                    dateFormatCalendar: \"LLLL yyyy\",\n                    onChange: function onChange() {},\n                    disabled: false,\n                    disabledKeyboardNavigation: false,\n                    dropdownMode: \"scroll\",\n                    onFocus: function onFocus() {},\n                    onBlur: function onBlur() {},\n                    onKeyDown: function onKeyDown() {},\n                    onInputClick: function onInputClick() {},\n                    onSelect: function onSelect() {},\n                    onClickOutside: function onClickOutside() {},\n                    onMonthChange: function onMonthChange() {},\n                    onCalendarOpen: function onCalendarOpen() {},\n                    onCalendarClose: function onCalendarClose() {},\n                    preventOpenOnFocus: false,\n                    onYearChange: function onYearChange() {},\n                    onInputError: function onInputError() {},\n                    monthsShown: 1,\n                    readOnly: false,\n                    withPortal: false,\n                    selectsDisabledDaysInRange: false,\n                    shouldCloseOnSelect: true,\n                    showTimeSelect: false,\n                    showTimeInput: false,\n                    showPreviousMonths: false,\n                    showMonthYearPicker: false,\n                    showFullMonthYearPicker: false,\n                    showTwoColumnMonthYearPicker: false,\n                    showFourColumnMonthYearPicker: false,\n                    showYearPicker: false,\n                    showQuarterYearPicker: false,\n                    showWeekPicker: false,\n                    strictParsing: false,\n                    swapRange: false,\n                    timeIntervals: 30,\n                    timeCaption: \"Time\",\n                    previousMonthAriaLabel: \"Previous Month\",\n                    previousMonthButtonLabel: \"Previous Month\",\n                    nextMonthAriaLabel: \"Next Month\",\n                    nextMonthButtonLabel: \"Next Month\",\n                    previousYearAriaLabel: \"Previous Year\",\n                    previousYearButtonLabel: \"Previous Year\",\n                    nextYearAriaLabel: \"Next Year\",\n                    nextYearButtonLabel: \"Next Year\",\n                    timeInputLabel: \"Time\",\n                    enableTabLoop: true,\n                    yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER,\n                    focusSelectedMonth: false,\n                    showPopperArrow: true,\n                    excludeScrollbar: true,\n                    customTimeInput: null,\n                    calendarStartDay: undefined,\n                    toggleCalendarOnIconClick: false,\n                    usePointerEvent: false\n                };\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar PRESELECT_CHANGE_VIA_INPUT = \"input\";\nvar PRESELECT_CHANGE_VIA_NAVIGATE = \"navigate\";\n //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBSUEsR0FDeUM7QUFDckI7QUFDUTtBQUNhO0FBQ2U7QUFDQztBQUNSO0FBQ0o7QUFDRjtBQUNFO0FBQ0U7QUFDSTtBQUNOO0FBQ0Y7QUFDRTtBQUNFO0FBQ0k7QUFDTjtBQUNJO0FBQ0E7QUFDSjtBQUNKO0FBQ0U7QUFDTTtBQUNKO0FBQ0k7QUFDTjtBQUNBO0FBQ007QUFDQTtBQUNKO0FBQ0E7QUFDSTtBQUNOO0FBQ1I7QUFDQTtBQUMwQztBQUNJO0FBQ0Y7QUFDTTtBQUNwQztBQUNFO0FBQ0U7QUFDSTtBQUNOO0FBQ047QUFDRTtBQUNFO0FBQ0Y7QUFDUztBQUNNO0FBQ007QUFDSDtBQUNTO0FBQy9CO0FBQ0U7QUFDZ0I7QUFDcEI7QUFDRjtBQUNNO0FBQ3FCO0FBQ2hCO0FBQ2pCO0FBQ2dFO0FBQzlEO0FBRW5DLFNBQVM4RSxXQUFXQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUN6QixPQUFPRCxJQUFJRSxnQkFBZ0JGLElBQUlHLDJCQUEyQkosR0FBR0ssOEJBQThCQyxRQUFRQyxTQUFTLENBQUNOLEdBQUdDLEtBQUssRUFBRSxFQUFFQyxnQkFBZ0JILEdBQUdRLFdBQVcsSUFBSVAsRUFBRVEsS0FBSyxDQUFDVCxHQUFHRTtBQUN4SztBQUNBLFNBQVNHO0lBQ1AsSUFBSTtRQUNGLElBQUlMLElBQUksQ0FBQ1UsUUFBUUMsU0FBUyxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQ1AsUUFBUUMsU0FBUyxDQUFDRyxTQUFTLEVBQUUsRUFBRSxZQUFhO0lBQ3RGLEVBQUUsT0FBT1YsR0FBRyxDQUFDO0lBQ2IsT0FBTyxDQUFDSyw0QkFBNEI7UUFDbEMsT0FBTyxDQUFDLENBQUNM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cUYsaUJBQWlCO29CQUNqQjVDLGtCQUFrQjtvQkFDbEJuUixpQkFBaUI7b0JBQ2pCbGpCLGtCQUFrQm1DO29CQUNsQnEwQiwyQkFBMkI7b0JBQzNCeGYsaUJBQWlCO2dCQUNuQjtZQUNGO1FBQ0Y7S0FBRTtBQUNKLEVBQUVybEIsd0RBQWU7QUFDakIsSUFBSXcvQiw2QkFBNkI7QUFDakMsSUFBSWIsZ0NBQWdDO0FBRW9FLENBQ3hHLHdsMmtCQUF3bDJrQiIsInNvdXJjZXMiOlsid2VicGFjazovL25ldy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVwaWNrZXIvZGlzdC9lcy9pbmRleC5qcz8wZDMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICByZWFjdC1kYXRlcGlja2VyIHY2LjcuMFxuICBodHRwczovL2dpdGh1Yi5jb20vSGFja2VyMHgwMS9yZWFjdC1kYXRlcGlja2VyXG4gIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiovXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNsc3ggfSBmcm9tICdjbHN4JztcbmltcG9ydCB7IGlzRGF0ZSB9IGZyb20gJ2RhdGUtZm5zL2lzRGF0ZSc7XG5pbXBvcnQgeyBpc1ZhbGlkIGFzIGlzVmFsaWQkMSB9IGZyb20gJ2RhdGUtZm5zL2lzVmFsaWQnO1xuaW1wb3J0IHsgZm9ybWF0LCBsb25nRm9ybWF0dGVycyB9IGZyb20gJ2RhdGUtZm5zL2Zvcm1hdCc7XG5pbXBvcnQgeyBhZGRNaW51dGVzIH0gZnJvbSAnZGF0ZS1mbnMvYWRkTWludXRlcyc7XG5pbXBvcnQgeyBhZGRIb3VycyB9IGZyb20gJ2RhdGUtZm5zL2FkZEhvdXJzJztcbmltcG9ydCB7IGFkZERheXMgfSBmcm9tICdkYXRlLWZucy9hZGREYXlzJztcbmltcG9ydCB7IGFkZFdlZWtzIH0gZnJvbSAnZGF0ZS1mbnMvYWRkV2Vla3MnO1xuaW1wb3J0IHsgYWRkTW9udGhzIH0gZnJvbSAnZGF0ZS1mbnMvYWRkTW9udGhzJztcbmltcG9ydCB7IGFkZFF1YXJ0ZXJzIH0gZnJvbSAnZGF0ZS1mbnMvYWRkUXVhcnRlcnMnO1xuaW1wb3J0IHsgYWRkWWVhcnMgfSBmcm9tICdkYXRlLWZucy9hZGRZZWFycyc7XG5pbXBvcnQgeyBzdWJEYXlzIH0gZnJvbSAnZGF0ZS1mbnMvc3ViRGF5cyc7XG5pbXBvcnQgeyBzdWJXZWVrcyB9IGZyb20gJ2RhdGUtZm5zL3N1YldlZWtzJztcbmltcG9ydCB7IHN1Yk1vbnRocyB9IGZyb20gJ2RhdGUtZm5zL3N1Yk1vbnRocyc7XG5pbXBvcnQgeyBzdWJRdWFydGVycyB9IGZyb20gJ2RhdGUtZm5zL3N1YlF1YXJ0ZXJzJztcbmltcG9ydCB7IHN1YlllYXJzIH0gZnJvbSAnZGF0ZS1mbnMvc3ViWWVhcnMnO1xuaW1wb3J0IHsgZ2V0U2Vjb25kcyB9IGZyb20gJ2RhdGUtZm5zL2dldFNlY29uZHMnO1xuaW1wb3J0IHsgZ2V0TWludXRlcyB9IGZyb20gJ2RhdGUtZm5zL2dldE1pbnV0ZXMnO1xuaW1wb3J0IHsgZ2V0SG91cnMgfSBmcm9tICdkYXRlLWZucy9nZXRIb3Vycyc7XG5pbXBvcnQgeyBnZXREYXkgfSBmcm9tICdkYXRlLWZucy9nZXREYXknO1xuaW1wb3J0IHsgZ2V0RGF0ZSB9IGZyb20gJ2RhdGUtZm5zL2dldERhdGUnO1xuaW1wb3J0IHsgZ2V0SVNPV2VlayB9IGZyb20gJ2RhdGUtZm5zL2dldElTT1dlZWsnO1xuaW1wb3J0IHsgZ2V0TW9udGggfSBmcm9tICdkYXRlLWZucy9nZXRNb250aCc7XG5pbXBvcnQgeyBnZXRRdWFydGVyIH0gZnJvbSAnZGF0ZS1mbnMvZ2V0UXVhcnRlcic7XG5pbXBvcnQgeyBnZXRZZWFyIH0gZnJvbSAnZGF0ZS1mbnMvZ2V0WWVhcic7XG5pbXBvcnQgeyBnZXRUaW1lIH0gZnJvbSAnZGF0ZS1mbnMvZ2V0VGltZSc7XG5pbXBvcnQgeyBzZXRTZWNvbmRzIH0gZnJvbSAnZGF0ZS1mbnMvc2V0U2Vjb25kcyc7XG5pbXBvcnQgeyBzZXRNaW51dGVzIH0gZnJvbSAnZGF0ZS1mbnMvc2V0TWludXRlcyc7XG5pbXBvcnQgeyBzZXRIb3VycyB9IGZyb20gJ2RhdGUtZm5zL3NldEhvdXJzJztcbmltcG9ydCB7IHNldE1vbnRoIH0gZnJvbSAnZGF0ZS1mbnMvc2V0TW9udGgnO1xuaW1wb3J0IHsgc2V0UXVhcnRlciB9IGZyb20gJ2RhdGUtZm5zL3NldFF1YXJ0ZXInO1xuaW1wb3J0IHsgc2V0WWVhciB9IGZyb20gJ2RhdGUtZm5zL3NldFllYXInO1xuaW1wb3J0IHsgbWluIH0gZnJvbSAnZGF0ZS1mbnMvbWluJztcbmltcG9ydCB7IG1heCB9IGZyb20gJ2RhdGUtZm5zL21heCc7XG5pbXBvcnQgeyBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMgfSBmcm9tICdkYXRlLWZucy9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMnO1xuaW1wb3J0IHsgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMgfSBmcm9tICdkYXRlLWZucy9kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyc7XG5pbXBvcnQgeyBkaWZmZXJlbmNlSW5DYWxlbmRhclllYXJzIH0gZnJvbSAnZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycyc7XG5pbXBvcnQgeyBkaWZmZXJlbmNlSW5DYWxlbmRhclF1YXJ0ZXJzIH0gZnJvbSAnZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJRdWFydGVycyc7XG5pbXBvcnQgeyBzdGFydE9mRGF5IH0gZnJvbSAnZGF0ZS1mbnMvc3RhcnRPZkRheSc7XG5pbXBvcnQgeyBzdGFydE9mV2VlayB9IGZyb20gJ2RhdGUtZm5zL3N0YXJ0T2ZXZWVrJztcbmltcG9ydCB7IHN0YXJ0T2ZNb250aCB9IGZyb20gJ2RhdGUtZm5zL3N0YXJ0T2ZNb250aCc7XG5pbXBvcnQgeyBzdGFydE9mUXVhcnRlciB9IGZyb20gJ2RhdGUtZm5zL3N0YXJ0T2ZRdWFydGVyJztcbmltcG9ydCB7IHN0YXJ0T2ZZZWFyIH0gZnJvbSAnZGF0ZS1mbnMvc3RhcnRPZlllYXInO1xuaW1wb3J0IHsgZW5kT2ZEYXkgfSBmcm9tICdkYXRlLWZucy9lbmRPZkRheSc7XG5pbXBvcnQgeyBlbmRPZldlZWsgfSBmcm9tICdkYXRlLWZucy9lbmRPZldlZWsnO1xuaW1wb3J0IHsgZW5kT2ZNb250aCB9IGZyb20gJ2RhdGUtZm5zL2VuZE9mTW9udGgnO1xuaW1wb3J0IHsgZW5kT2ZZZWFyIH0gZnJvbSAnZGF0ZS1mbnMvZW5kT2ZZZWFyJztcbmltcG9ydCB7IGlzRXF1YWwgYXMgaXNFcXVhbCQxIH0gZnJvbSAnZGF0ZS1mbnMvaXNFcXVhbCc7XG5pbXBvcnQgeyBpc1NhbWVEYXkgYXMgaXNTYW1lRGF5JDEgfSBmcm9tICdkYXRlLWZucy9pc1NhbWVEYXknO1xuaW1wb3J0IHsgaXNTYW1lTW9udGggYXMgaXNTYW1lTW9udGgkMSB9IGZyb20gJ2RhdGUtZm5zL2lzU2FtZU1vbnRoJztcbmltcG9ydCB7IGlzU2FtZVllYXIgYXMgaXNTYW1lWWVhciQxIH0gZnJvbSAnZGF0ZS1mbnMvaXNTYW1lWWVhcic7XG5pbXBvcnQgeyBpc1NhbWVRdWFydGVyIGFzIGlzU2FtZVF1YXJ0ZXIkMSB9IGZyb20gJ2RhdGUtZm5zL2lzU2FtZVF1YXJ0ZXInO1xuaW1wb3J0IHsgaXNBZnRlciB9IGZyb20gJ2RhdGUtZm5zL2lzQWZ0ZXInO1xuaW1wb3J0IHsgaXNCZWZvcmUgfSBmcm9tICdkYXRlLWZucy9pc0JlZm9yZSc7XG5pbXBvcnQgeyBpc1dpdGhpbkludGVydmFsIH0gZnJvbSAnZGF0ZS1mbnMvaXNXaXRoaW5JbnRlcnZhbCc7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tICdkYXRlLWZucy90b0RhdGUnO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tICdkYXRlLWZucy9wYXJzZSc7XG5pbXBvcnQgeyBwYXJzZUlTTyB9IGZyb20gJ2RhdGUtZm5zL3BhcnNlSVNPJztcbmltcG9ydCB7IGFkZFNlY29uZHMsIGdldFNlY29uZHMgYXMgZ2V0U2Vjb25kcyQxIH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IG9uQ2xpY2tPdXRzaWRlIGZyb20gJ3JlYWN0LW9uY2xpY2tvdXRzaWRlJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgdXNlRmxvYXRpbmcsIGF1dG9VcGRhdGUsIGZsaXAsIG9mZnNldCwgYXJyb3csIEZsb2F0aW5nQXJyb3cgfSBmcm9tICdAZmxvYXRpbmctdWkvcmVhY3QnO1xuaW1wb3J0IHsgc2V0IH0gZnJvbSAnZGF0ZS1mbnMvc2V0JztcblxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7XG4gIHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7XG59XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICB0cnkge1xuICAgIHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgfSBjYXRjaCAodCkge31cbiAgcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXQ7XG4gIH0pKCk7XG59XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHtcbiAgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7XG4gICAgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pO1xuICB9XG4gIHJldHVybiB0O1xufVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIoZSkge1xuICBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykge1xuICAgIHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTtcbiAgICByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBlO1xufVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHtcbiAgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgIXQpIHJldHVybiB0O1xuICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IHR5cGVvZiBpID8gaSA6IGkgKyBcIlwiO1xufVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG4gIHJldHVybiBzZWxmO1xufVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcbiAgcmV0dXJuIGFycjI7XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgREVGQVVMVF9ZRUFSX0lURU1fTlVNQkVSID0gMTI7XG5cbi8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xuXG4vLyAqKiBEYXRlIENvbnN0cnVjdG9ycyAqKlxuXG5mdW5jdGlvbiBuZXdEYXRlKHZhbHVlKSB7XG4gIHZhciBkID0gdmFsdWUgPyB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcgPyBwYXJzZUlTTyh2YWx1ZSkgOiB0b0RhdGUodmFsdWUpIDogbmV3IERhdGUoKTtcbiAgcmV0dXJuIGlzVmFsaWQoZCkgPyBkIDogbnVsbDtcbn1cbmZ1bmN0aW9uIHBhcnNlRGF0ZSh2YWx1ZSwgZGF0ZUZvcm1hdCwgbG9jYWxlLCBzdHJpY3RQYXJzaW5nLCBtaW5EYXRlKSB7XG4gIHZhciBwYXJzZWREYXRlID0gbnVsbDtcbiAgdmFyIGxvY2FsZU9iamVjdCA9IGdldExvY2FsZU9iamVjdChsb2NhbGUpIHx8IGdldExvY2FsZU9iamVjdChnZXREZWZhdWx0TG9jYWxlKCkpO1xuICB2YXIgc3RyaWN0UGFyc2luZ1ZhbHVlTWF0Y2ggPSB0cnVlO1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRlRm9ybWF0KSkge1xuICAgIGRhdGVGb3JtYXQuZm9yRWFjaChmdW5jdGlvbiAoZGYpIHtcbiAgICAgIHZhciB0cnlQYXJzZURhdGUgPSBwYXJzZSh2YWx1ZSwgZGYsIG5ldyBEYXRlKCksIHtcbiAgICAgICAgbG9jYWxlOiBsb2NhbGVPYmplY3QsXG4gICAgICAgIHVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VuczogdHJ1ZSxcbiAgICAgICAgdXNlQWRkaXRpb25hbERheU9mWWVhclRva2VuczogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBpZiAoc3RyaWN0UGFyc2luZykge1xuICAgICAgICBzdHJpY3RQYXJzaW5nVmFsdWVNYXRjaCA9IGlzVmFsaWQodHJ5UGFyc2VEYXRlLCBtaW5EYXRlKSAmJiB2YWx1ZSA9PT0gZm9ybWF0RGF0ZSh0cnlQYXJzZURhdGUsIGRmLCBsb2NhbGUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmFsaWQodHJ5UGFyc2VEYXRlLCBtaW5EYXRlKSAmJiBzdHJpY3RQYXJzaW5nVmFsdWVNYXRjaCkge1xuICAgICAgICBwYXJzZWREYXRlID0gdHJ5UGFyc2VEYXRlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZWREYXRlO1xuICB9XG4gIHBhcnNlZERhdGUgPSBwYXJzZSh2YWx1ZSwgZGF0ZUZvcm1hdCwgbmV3IERhdGUoKSwge1xuICAgIGxvY2FsZTogbG9jYWxlT2JqZWN0LFxuICAgIHVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VuczogdHJ1ZSxcbiAgICB1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zOiB0cnVlXG4gIH0pO1xuICBpZiAoc3RyaWN0UGFyc2luZykge1xuICAgIHN0cmljdFBhcnNpbmdWYWx1ZU1hdGNoID0gaXNWYWxpZChwYXJzZWREYXRlKSAmJiB2YWx1ZSA9PT0gZm9ybWF0RGF0ZShwYXJzZWREYXRlLCBkYXRlRm9ybWF0LCBsb2NhbGUpO1xuICB9IGVsc2UgaWYgKCFpc1ZhbGlkKHBhcnNlZERhdGUpKSB7XG4gICAgZGF0ZUZvcm1hdCA9IGRhdGVGb3JtYXQubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG4gICAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwicFwiIHx8IGZpcnN0Q2hhcmFjdGVyID09PSBcIlBcIikge1xuICAgICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZU9iamVjdCA/IGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGVPYmplY3QuZm9ybWF0TG9uZykgOiBmaXJzdENoYXJhY3RlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdWJzdHJpbmc7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgcGFyc2VkRGF0ZSA9IHBhcnNlKHZhbHVlLCBkYXRlRm9ybWF0LnNsaWNlKDAsIHZhbHVlLmxlbmd0aCksIG5ldyBEYXRlKCksIHtcbiAgICAgICAgdXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zOiB0cnVlLFxuICAgICAgICB1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkKHBhcnNlZERhdGUpKSB7XG4gICAgICBwYXJzZWREYXRlID0gbmV3IERhdGUodmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXNWYWxpZChwYXJzZWREYXRlKSAmJiBzdHJpY3RQYXJzaW5nVmFsdWVNYXRjaCA/IHBhcnNlZERhdGUgOiBudWxsO1xufVxuZnVuY3Rpb24gaXNWYWxpZChkYXRlLCBtaW5EYXRlKSB7XG4gIG1pbkRhdGUgPSBtaW5EYXRlID8gbWluRGF0ZSA6IG5ldyBEYXRlKFwiMS8xLzEwMDBcIik7XG4gIHJldHVybiBpc1ZhbGlkJDEoZGF0ZSkgJiYgIWlzQmVmb3JlKGRhdGUsIG1pbkRhdGUpO1xufVxuXG4vLyAqKiBEYXRlIEZvcm1hdHRpbmcgKipcblxuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlLCBmb3JtYXRTdHIsIGxvY2FsZSkge1xuICBpZiAobG9jYWxlID09PSBcImVuXCIpIHtcbiAgICByZXR1cm4gZm9ybWF0KGRhdGUsIGZvcm1hdFN0ciwge1xuICAgICAgdXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zOiB0cnVlLFxuICAgICAgdXNlQWRkaXRpb25hbERheU9mWWVhclRva2VuczogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHZhciBsb2NhbGVPYmogPSBnZXRMb2NhbGVPYmplY3QobG9jYWxlKTtcbiAgaWYgKGxvY2FsZSAmJiAhbG9jYWxlT2JqKSB7XG4gICAgY29uc29sZS53YXJuKFwiQSBsb2NhbGUgb2JqZWN0IHdhcyBub3QgZm91bmQgZm9yIHRoZSBwcm92aWRlZCBzdHJpbmcgW1xcXCJcIi5jb25jYXQobG9jYWxlLCBcIlxcXCJdLlwiKSk7XG4gIH1cbiAgaWYgKCFsb2NhbGVPYmogJiYgISFnZXREZWZhdWx0TG9jYWxlKCkgJiYgISFnZXRMb2NhbGVPYmplY3QoZ2V0RGVmYXVsdExvY2FsZSgpKSkge1xuICAgIGxvY2FsZU9iaiA9IGdldExvY2FsZU9iamVjdChnZXREZWZhdWx0TG9jYWxlKCkpO1xuICB9XG4gIHJldHVybiBmb3JtYXQoZGF0ZSwgZm9ybWF0U3RyLCB7XG4gICAgbG9jYWxlOiBsb2NhbGVPYmogPyBsb2NhbGVPYmogOiBudWxsLFxuICAgIHVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VuczogdHJ1ZSxcbiAgICB1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zOiB0cnVlXG4gIH0pO1xufVxuZnVuY3Rpb24gc2FmZURhdGVGb3JtYXQoZGF0ZSwgX3JlZikge1xuICB2YXIgZGF0ZUZvcm1hdCA9IF9yZWYuZGF0ZUZvcm1hdCxcbiAgICBsb2NhbGUgPSBfcmVmLmxvY2FsZTtcbiAgcmV0dXJuIGRhdGUgJiYgZm9ybWF0RGF0ZShkYXRlLCBBcnJheS5pc0FycmF5KGRhdGVGb3JtYXQpID8gZGF0ZUZvcm1hdFswXSA6IGRhdGVGb3JtYXQsIGxvY2FsZSkgfHwgXCJcIjtcbn1cbmZ1bmN0aW9uIHNhZmVEYXRlUmFuZ2VGb3JtYXQoc3RhcnREYXRlLCBlbmREYXRlLCBwcm9wcykge1xuICBpZiAoIXN0YXJ0RGF0ZSkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHZhciBmb3JtYXR0ZWRTdGFydERhdGUgPSBzYWZlRGF0ZUZvcm1hdChzdGFydERhdGUsIHByb3BzKTtcbiAgdmFyIGZvcm1hdHRlZEVuZERhdGUgPSBlbmREYXRlID8gc2FmZURhdGVGb3JtYXQoZW5kRGF0ZSwgcHJvcHMpIDogXCJcIjtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KGZvcm1hdHRlZFN0YXJ0RGF0ZSwgXCIgLSBcIikuY29uY2F0KGZvcm1hdHRlZEVuZERhdGUpO1xufVxuZnVuY3Rpb24gc2FmZU11bHRpcGxlRGF0ZXNGb3JtYXQoZGF0ZXMsIHByb3BzKSB7XG4gIGlmICghKGRhdGVzICE9PSBudWxsICYmIGRhdGVzICE9PSB2b2lkIDAgJiYgZGF0ZXMubGVuZ3RoKSkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHZhciBmb3JtYXR0ZWRGaXJzdERhdGUgPSBzYWZlRGF0ZUZvcm1hdChkYXRlc1swXSwgcHJvcHMpO1xuICBpZiAoZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZvcm1hdHRlZEZpcnN0RGF0ZTtcbiAgfVxuICBpZiAoZGF0ZXMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFyIGZvcm1hdHRlZFNlY29uZERhdGUgPSBzYWZlRGF0ZUZvcm1hdChkYXRlc1sxXSwgcHJvcHMpO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChmb3JtYXR0ZWRGaXJzdERhdGUsIFwiLCBcIikuY29uY2F0KGZvcm1hdHRlZFNlY29uZERhdGUpO1xuICB9XG4gIHZhciBleHRyYURhdGVzQ291bnQgPSBkYXRlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gXCJcIi5jb25jYXQoZm9ybWF0dGVkRmlyc3REYXRlLCBcIiAoK1wiKS5jb25jYXQoZXh0cmFEYXRlc0NvdW50LCBcIilcIik7XG59XG5cbi8vICoqIERhdGUgU2V0dGVycyAqKlxuXG5mdW5jdGlvbiBzZXRUaW1lKGRhdGUsIF9yZWYyKSB7XG4gIHZhciBfcmVmMiRob3VyID0gX3JlZjIuaG91cixcbiAgICBob3VyID0gX3JlZjIkaG91ciA9PT0gdm9pZCAwID8gMCA6IF9yZWYyJGhvdXIsXG4gICAgX3JlZjIkbWludXRlID0gX3JlZjIubWludXRlLFxuICAgIG1pbnV0ZSA9IF9yZWYyJG1pbnV0ZSA9PT0gdm9pZCAwID8gMCA6IF9yZWYyJG1pbnV0ZSxcbiAgICBfcmVmMiRzZWNvbmQgPSBfcmVmMi5zZWNvbmQsXG4gICAgc2Vjb25kID0gX3JlZjIkc2Vjb25kID09PSB2b2lkIDAgPyAwIDogX3JlZjIkc2Vjb25kO1xuICByZXR1cm4gc2V0SG91cnMoc2V0TWludXRlcyhzZXRTZWNvbmRzKGRhdGUsIHNlY29uZCksIG1pbnV0ZSksIGhvdXIpO1xufVxuZnVuY3Rpb24gZ2V0V2VlayhkYXRlLCBsb2NhbGUpIHtcbiAgdmFyIGxvY2FsZU9iaiA9IGxvY2FsZSAmJiBnZXRMb2NhbGVPYmplY3QobG9jYWxlKSB8fCBnZXREZWZhdWx0TG9jYWxlKCkgJiYgZ2V0TG9jYWxlT2JqZWN0KGdldERlZmF1bHRMb2NhbGUoKSk7XG4gIHJldHVybiBnZXRJU09XZWVrKGRhdGUsIGxvY2FsZU9iaiA/IHtcbiAgICBsb2NhbGU6IGxvY2FsZU9ialxuICB9IDogbnVsbCk7XG59XG5mdW5jdGlvbiBnZXREYXlPZldlZWtDb2RlKGRheSwgbG9jYWxlKSB7XG4gIHJldHVybiBmb3JtYXREYXRlKGRheSwgXCJkZGRcIiwgbG9jYWxlKTtcbn1cblxuLy8gKioqIFN0YXJ0IG9mICoqKlxuXG5mdW5jdGlvbiBnZXRTdGFydE9mRGF5KGRhdGUpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZEYXkoZGF0ZSk7XG59XG5mdW5jdGlvbiBnZXRTdGFydE9mV2VlayhkYXRlLCBsb2NhbGUsIGNhbGVuZGFyU3RhcnREYXkpIHtcbiAgdmFyIGxvY2FsZU9iaiA9IGxvY2FsZSA/IGdldExvY2FsZU9iamVjdChsb2NhbGUpIDogZ2V0TG9jYWxlT2JqZWN0KGdldERlZmF1bHRMb2NhbGUoKSk7XG4gIHJldHVybiBzdGFydE9mV2VlayhkYXRlLCB7XG4gICAgbG9jYWxlOiBsb2NhbGVPYmosXG4gICAgd2Vla1N0YXJ0c09uOiBjYWxlbmRhclN0YXJ0RGF5XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0U3RhcnRPZk1vbnRoKGRhdGUpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZNb250aChkYXRlKTtcbn1cbmZ1bmN0aW9uIGdldFN0YXJ0T2ZZZWFyKGRhdGUpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZZZWFyKGRhdGUpO1xufVxuZnVuY3Rpb24gZ2V0U3RhcnRPZlF1YXJ0ZXIoZGF0ZSkge1xuICByZXR1cm4gc3RhcnRPZlF1YXJ0ZXIoZGF0ZSk7XG59XG5mdW5jdGlvbiBnZXRTdGFydE9mVG9kYXkoKSB7XG4gIHJldHVybiBzdGFydE9mRGF5KG5ld0RhdGUoKSk7XG59XG5cbi8vICoqKiBFbmQgb2YgKioqXG5cbmZ1bmN0aW9uIGdldEVuZE9mV2VlayhkYXRlKSB7XG4gIHJldHVybiBlbmRPZldlZWsoZGF0ZSk7XG59XG5mdW5jdGlvbiBpc1NhbWVZZWFyKGRhdGUxLCBkYXRlMikge1xuICBpZiAoZGF0ZTEgJiYgZGF0ZTIpIHtcbiAgICByZXR1cm4gaXNTYW1lWWVhciQxKGRhdGUxLCBkYXRlMik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICFkYXRlMSAmJiAhZGF0ZTI7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzU2FtZU1vbnRoKGRhdGUxLCBkYXRlMikge1xuICBpZiAoZGF0ZTEgJiYgZGF0ZTIpIHtcbiAgICByZXR1cm4gaXNTYW1lTW9udGgkMShkYXRlMSwgZGF0ZTIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAhZGF0ZTEgJiYgIWRhdGUyO1xuICB9XG59XG5mdW5jdGlvbiBpc1NhbWVRdWFydGVyKGRhdGUxLCBkYXRlMikge1xuICBpZiAoZGF0ZTEgJiYgZGF0ZTIpIHtcbiAgICByZXR1cm4gaXNTYW1lUXVhcnRlciQxKGRhdGUxLCBkYXRlMik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICFkYXRlMSAmJiAhZGF0ZTI7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzU2FtZURheShkYXRlMSwgZGF0ZTIpIHtcbiAgaWYgKGRhdGUxICYmIGRhdGUyKSB7XG4gICAgcmV0dXJuIGlzU2FtZURheSQxKGRhdGUxLCBkYXRlMik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICFkYXRlMSAmJiAhZGF0ZTI7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzRXF1YWwoZGF0ZTEsIGRhdGUyKSB7XG4gIGlmIChkYXRlMSAmJiBkYXRlMikge1xuICAgIHJldHVybiBpc0VxdWFsJDEoZGF0ZTEsIGRhdGUyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gIWRhdGUxICYmICFkYXRlMjtcbiAgfVxufVxuZnVuY3Rpb24gaXNEYXlJblJhbmdlKGRheSwgc3RhcnREYXRlLCBlbmREYXRlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIHN0YXJ0ID0gc3RhcnRPZkRheShzdGFydERhdGUpO1xuICB2YXIgZW5kID0gZW5kT2ZEYXkoZW5kRGF0ZSk7XG4gIHRyeSB7XG4gICAgdmFsaWQgPSBpc1dpdGhpbkludGVydmFsKGRheSwge1xuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgZW5kOiBlbmRcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbi8vICoqIERhdGUgTG9jYWxpemF0aW9uICoqXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTG9jYWxlKGxvY2FsZU5hbWUsIGxvY2FsZURhdGEpIHtcbiAgdmFyIHNjb3BlID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IGdsb2JhbFRoaXM7XG4gIGlmICghc2NvcGUuX19sb2NhbGVEYXRhX18pIHtcbiAgICBzY29wZS5fX2xvY2FsZURhdGFfXyA9IHt9O1xuICB9XG4gIHNjb3BlLl9fbG9jYWxlRGF0YV9fW2xvY2FsZU5hbWVdID0gbG9jYWxlRGF0YTtcbn1cbmZ1bmN0aW9uIHNldERlZmF1bHRMb2NhbGUobG9jYWxlTmFtZSkge1xuICB2YXIgc2NvcGUgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogZ2xvYmFsVGhpcztcbiAgc2NvcGUuX19sb2NhbGVJZF9fID0gbG9jYWxlTmFtZTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRMb2NhbGUoKSB7XG4gIHZhciBzY29wZSA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBnbG9iYWxUaGlzO1xuICByZXR1cm4gc2NvcGUuX19sb2NhbGVJZF9fO1xufVxuZnVuY3Rpb24gZ2V0TG9jYWxlT2JqZWN0KGxvY2FsZVNwZWMpIHtcbiAgaWYgKHR5cGVvZiBsb2NhbGVTcGVjID09PSBcInN0cmluZ1wiKSB7XG4gICAgLy8gVHJlYXQgaXQgYXMgYSBsb2NhbGUgbmFtZSByZWdpc3RlcmVkIGJ5IHJlZ2lzdGVyTG9jYWxlXG4gICAgdmFyIHNjb3BlID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IGdsb2JhbFRoaXM7XG4gICAgcmV0dXJuIHNjb3BlLl9fbG9jYWxlRGF0YV9fID8gc2NvcGUuX19sb2NhbGVEYXRhX19bbG9jYWxlU3BlY10gOiBudWxsO1xuICB9IGVsc2Uge1xuICAgIC8vIFRyZWF0IGl0IGFzIGEgcmF3IGRhdGUtZm5zIGxvY2FsZSBvYmplY3RcbiAgICByZXR1cm4gbG9jYWxlU3BlYztcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkV2Vla2RheUluTG9jYWxlKGRhdGUsIGZvcm1hdEZ1bmMsIGxvY2FsZSkge1xuICByZXR1cm4gZm9ybWF0RnVuYyhmb3JtYXREYXRlKGRhdGUsIFwiRUVFRVwiLCBsb2NhbGUpKTtcbn1cbmZ1bmN0aW9uIGdldFdlZWtkYXlNaW5JbkxvY2FsZShkYXRlLCBsb2NhbGUpIHtcbiAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgXCJFRUVFRUVcIiwgbG9jYWxlKTtcbn1cbmZ1bmN0aW9uIGdldFdlZWtkYXlTaG9ydEluTG9jYWxlKGRhdGUsIGxvY2FsZSkge1xuICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCBcIkVFRVwiLCBsb2NhbGUpO1xufVxuZnVuY3Rpb24gZ2V0TW9udGhJbkxvY2FsZShtb250aCwgbG9jYWxlKSB7XG4gIHJldHVybiBmb3JtYXREYXRlKHNldE1vbnRoKG5ld0RhdGUoKSwgbW9udGgpLCBcIkxMTExcIiwgbG9jYWxlKTtcbn1cbmZ1bmN0aW9uIGdldE1vbnRoU2hvcnRJbkxvY2FsZShtb250aCwgbG9jYWxlKSB7XG4gIHJldHVybiBmb3JtYXREYXRlKHNldE1vbnRoKG5ld0RhdGUoKSwgbW9udGgpLCBcIkxMTFwiLCBsb2NhbGUpO1xufVxuZnVuY3Rpb24gZ2V0UXVhcnRlclNob3J0SW5Mb2NhbGUocXVhcnRlciwgbG9jYWxlKSB7XG4gIHJldHVybiBmb3JtYXREYXRlKHNldFF1YXJ0ZXIobmV3RGF0ZSgpLCBxdWFydGVyKSwgXCJRUVFcIiwgbG9jYWxlKTtcbn1cblxuLy8gKiogVXRpbHMgZm9yIHNvbWUgY29tcG9uZW50cyAqKlxuXG5mdW5jdGlvbiBpc0RheURpc2FibGVkKGRheSkge1xuICB2YXIgX3JlZjMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgIG1pbkRhdGUgPSBfcmVmMy5taW5EYXRlLFxuICAgIG1heERhdGUgPSBfcmVmMy5tYXhEYXRlLFxuICAgIGV4Y2x1ZGVEYXRlcyA9IF9yZWYzLmV4Y2x1ZGVEYXRlcyxcbiAgICBleGNsdWRlRGF0ZUludGVydmFscyA9IF9yZWYzLmV4Y2x1ZGVEYXRlSW50ZXJ2YWxzLFxuICAgIGluY2x1ZGVEYXRlcyA9IF9yZWYzLmluY2x1ZGVEYXRlcyxcbiAgICBpbmNsdWRlRGF0ZUludGVydmFscyA9IF9yZWYzLmluY2x1ZGVEYXRlSW50ZXJ2YWxzLFxuICAgIGZpbHRlckRhdGUgPSBfcmVmMy5maWx0ZXJEYXRlO1xuICByZXR1cm4gaXNPdXRPZkJvdW5kcyhkYXksIHtcbiAgICBtaW5EYXRlOiBtaW5EYXRlLFxuICAgIG1heERhdGU6IG1heERhdGVcbiAgfSkgfHwgZXhjbHVkZURhdGVzICYmIGV4Y2x1ZGVEYXRlcy5zb21lKGZ1bmN0aW9uIChleGNsdWRlRGF0ZSkge1xuICAgIHJldHVybiBpc1NhbWVEYXkoZGF5LCBleGNsdWRlRGF0ZS5kYXRlID8gZXhjbHVkZURhdGUuZGF0ZSA6IGV4Y2x1ZGVEYXRlKTtcbiAgfSkgfHwgZXhjbHVkZURhdGVJbnRlcnZhbHMgJiYgZXhjbHVkZURhdGVJbnRlcnZhbHMuc29tZShmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICB2YXIgc3RhcnQgPSBfcmVmNC5zdGFydCxcbiAgICAgIGVuZCA9IF9yZWY0LmVuZDtcbiAgICByZXR1cm4gaXNXaXRoaW5JbnRlcnZhbChkYXksIHtcbiAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgIGVuZDogZW5kXG4gICAgfSk7XG4gIH0pIHx8IGluY2x1ZGVEYXRlcyAmJiAhaW5jbHVkZURhdGVzLnNvbWUoZnVuY3Rpb24gKGluY2x1ZGVEYXRlKSB7XG4gICAgcmV0dXJuIGlzU2FtZURheShkYXksIGluY2x1ZGVEYXRlKTtcbiAgfSkgfHwgaW5jbHVkZURhdGVJbnRlcnZhbHMgJiYgIWluY2x1ZGVEYXRlSW50ZXJ2YWxzLnNvbWUoZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgdmFyIHN0YXJ0ID0gX3JlZjUuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmNS5lbmQ7XG4gICAgcmV0dXJuIGlzV2l0aGluSW50ZXJ2YWwoZGF5LCB7XG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IGVuZFxuICAgIH0pO1xuICB9KSB8fCBmaWx0ZXJEYXRlICYmICFmaWx0ZXJEYXRlKG5ld0RhdGUoZGF5KSkgfHwgZmFsc2U7XG59XG5mdW5jdGlvbiBpc0RheUV4Y2x1ZGVkKGRheSkge1xuICB2YXIgX3JlZjYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgIGV4Y2x1ZGVEYXRlcyA9IF9yZWY2LmV4Y2x1ZGVEYXRlcyxcbiAgICBleGNsdWRlRGF0ZUludGVydmFscyA9IF9yZWY2LmV4Y2x1ZGVEYXRlSW50ZXJ2YWxzO1xuICBpZiAoZXhjbHVkZURhdGVJbnRlcnZhbHMgJiYgZXhjbHVkZURhdGVJbnRlcnZhbHMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBleGNsdWRlRGF0ZUludGVydmFscy5zb21lKGZ1bmN0aW9uIChfcmVmNykge1xuICAgICAgdmFyIHN0YXJ0ID0gX3JlZjcuc3RhcnQsXG4gICAgICAgIGVuZCA9IF9yZWY3LmVuZDtcbiAgICAgIHJldHVybiBpc1dpdGhpbkludGVydmFsKGRheSwge1xuICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgIGVuZDogZW5kXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZXhjbHVkZURhdGVzICYmIGV4Y2x1ZGVEYXRlcy5zb21lKGZ1bmN0aW9uIChleGNsdWRlRGF0ZSkge1xuICAgIHJldHVybiBpc1NhbWVEYXkoZGF5LCBleGNsdWRlRGF0ZS5kYXRlID8gZXhjbHVkZURhdGUuZGF0ZSA6IGV4Y2x1ZGVEYXRlKTtcbiAgfSkgfHwgZmFsc2U7XG59XG5mdW5jdGlvbiBpc01vbnRoRGlzYWJsZWQobW9udGgpIHtcbiAgdmFyIF9yZWY4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICBtaW5EYXRlID0gX3JlZjgubWluRGF0ZSxcbiAgICBtYXhEYXRlID0gX3JlZjgubWF4RGF0ZSxcbiAgICBleGNsdWRlRGF0ZXMgPSBfcmVmOC5leGNsdWRlRGF0ZXMsXG4gICAgaW5jbHVkZURhdGVzID0gX3JlZjguaW5jbHVkZURhdGVzLFxuICAgIGZpbHRlckRhdGUgPSBfcmVmOC5maWx0ZXJEYXRlO1xuICByZXR1cm4gaXNPdXRPZkJvdW5kcyhtb250aCwge1xuICAgIG1pbkRhdGU6IHN0YXJ0T2ZNb250aChtaW5EYXRlKSxcbiAgICBtYXhEYXRlOiBlbmRPZk1vbnRoKG1heERhdGUpXG4gIH0pIHx8IGV4Y2x1ZGVEYXRlcyAmJiBleGNsdWRlRGF0ZXMuc29tZShmdW5jdGlvbiAoZXhjbHVkZURhdGUpIHtcbiAgICByZXR1cm4gaXNTYW1lTW9udGgobW9udGgsIGV4Y2x1ZGVEYXRlKTtcbiAgfSkgfHwgaW5jbHVkZURhdGVzICYmICFpbmNsdWRlRGF0ZXMuc29tZShmdW5jdGlvbiAoaW5jbHVkZURhdGUpIHtcbiAgICByZXR1cm4gaXNTYW1lTW9udGgobW9udGgsIGluY2x1ZGVEYXRlKTtcbiAgfSkgfHwgZmlsdGVyRGF0ZSAmJiAhZmlsdGVyRGF0ZShuZXdEYXRlKG1vbnRoKSkgfHwgZmFsc2U7XG59XG5mdW5jdGlvbiBpc01vbnRoSW5SYW5nZShzdGFydERhdGUsIGVuZERhdGUsIG0sIGRheSkge1xuICB2YXIgc3RhcnREYXRlWWVhciA9IGdldFllYXIoc3RhcnREYXRlKTtcbiAgdmFyIHN0YXJ0RGF0ZU1vbnRoID0gZ2V0TW9udGgoc3RhcnREYXRlKTtcbiAgdmFyIGVuZERhdGVZZWFyID0gZ2V0WWVhcihlbmREYXRlKTtcbiAgdmFyIGVuZERhdGVNb250aCA9IGdldE1vbnRoKGVuZERhdGUpO1xuICB2YXIgZGF5WWVhciA9IGdldFllYXIoZGF5KTtcbiAgaWYgKHN0YXJ0RGF0ZVllYXIgPT09IGVuZERhdGVZZWFyICYmIHN0YXJ0RGF0ZVllYXIgPT09IGRheVllYXIpIHtcbiAgICByZXR1cm4gc3RhcnREYXRlTW9udGggPD0gbSAmJiBtIDw9IGVuZERhdGVNb250aDtcbiAgfSBlbHNlIGlmIChzdGFydERhdGVZZWFyIDwgZW5kRGF0ZVllYXIpIHtcbiAgICByZXR1cm4gZGF5WWVhciA9PT0gc3RhcnREYXRlWWVhciAmJiBzdGFydERhdGVNb250aCA8PSBtIHx8IGRheVllYXIgPT09IGVuZERhdGVZZWFyICYmIGVuZERhdGVNb250aCA+PSBtIHx8IGRheVllYXIgPCBlbmREYXRlWWVhciAmJiBkYXlZZWFyID4gc3RhcnREYXRlWWVhcjtcbiAgfVxufVxuZnVuY3Rpb24gaXNRdWFydGVyRGlzYWJsZWQocXVhcnRlcikge1xuICB2YXIgX3JlZjkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgIG1pbkRhdGUgPSBfcmVmOS5taW5EYXRlLFxuICAgIG1heERhdGUgPSBfcmVmOS5tYXhEYXRlLFxuICAgIGV4Y2x1ZGVEYXRlcyA9IF9yZWY5LmV4Y2x1ZGVEYXRlcyxcbiAgICBpbmNsdWRlRGF0ZXMgPSBfcmVmOS5pbmNsdWRlRGF0ZXMsXG4gICAgZmlsdGVyRGF0ZSA9IF9yZWY5LmZpbHRlckRhdGU7XG4gIHJldHVybiBpc091dE9mQm91bmRzKHF1YXJ0ZXIsIHtcbiAgICBtaW5EYXRlOiBtaW5EYXRlLFxuICAgIG1heERhdGU6IG1heERhdGVcbiAgfSkgfHwgZXhjbHVkZURhdGVzICYmIGV4Y2x1ZGVEYXRlcy5zb21lKGZ1bmN0aW9uIChleGNsdWRlRGF0ZSkge1xuICAgIHJldHVybiBpc1NhbWVRdWFydGVyKHF1YXJ0ZXIsIGV4Y2x1ZGVEYXRlKTtcbiAgfSkgfHwgaW5jbHVkZURhdGVzICYmICFpbmNsdWRlRGF0ZXMuc29tZShmdW5jdGlvbiAoaW5jbHVkZURhdGUpIHtcbiAgICByZXR1cm4gaXNTYW1lUXVhcnRlcihxdWFydGVyLCBpbmNsdWRlRGF0ZSk7XG4gIH0pIHx8IGZpbHRlckRhdGUgJiYgIWZpbHRlckRhdGUobmV3RGF0ZShxdWFydGVyKSkgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHllYXJcbiAqIEBwYXJhbSB7RGF0ZX0gc3RhcnRcbiAqIEBwYXJhbSB7RGF0ZX0gZW5kXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNZZWFySW5SYW5nZSh5ZWFyLCBzdGFydCwgZW5kKSB7XG4gIGlmICghaXNWYWxpZCQxKHN0YXJ0KSB8fCAhaXNWYWxpZCQxKGVuZCkpIHJldHVybiBmYWxzZTtcbiAgdmFyIHN0YXJ0WWVhciA9IGdldFllYXIoc3RhcnQpO1xuICB2YXIgZW5kWWVhciA9IGdldFllYXIoZW5kKTtcbiAgcmV0dXJuIHN0YXJ0WWVhciA8PSB5ZWFyICYmIGVuZFllYXIgPj0geWVhcjtcbn1cbmZ1bmN0aW9uIGlzWWVhckRpc2FibGVkKHllYXIpIHtcbiAgdmFyIF9yZWYxMCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgbWluRGF0ZSA9IF9yZWYxMC5taW5EYXRlLFxuICAgIG1heERhdGUgPSBfcmVmMTAubWF4RGF0ZSxcbiAgICBleGNsdWRlRGF0ZXMgPSBfcmVmMTAuZXhjbHVkZURhdGVzLFxuICAgIGluY2x1ZGVEYXRlcyA9IF9yZWYxMC5pbmNsdWRlRGF0ZXMsXG4gICAgZmlsdGVyRGF0ZSA9IF9yZWYxMC5maWx0ZXJEYXRlO1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIDAsIDEpO1xuICByZXR1cm4gaXNPdXRPZkJvdW5kcyhkYXRlLCB7XG4gICAgbWluRGF0ZTogc3RhcnRPZlllYXIobWluRGF0ZSksXG4gICAgbWF4RGF0ZTogZW5kT2ZZZWFyKG1heERhdGUpXG4gIH0pIHx8IGV4Y2x1ZGVEYXRlcyAmJiBleGNsdWRlRGF0ZXMuc29tZShmdW5jdGlvbiAoZXhjbHVkZURhdGUpIHtcbiAgICByZXR1cm4gaXNTYW1lWWVhcihkYXRlLCBleGNsdWRlRGF0ZSk7XG4gIH0pIHx8IGluY2x1ZGVEYXRlcyAmJiAhaW5jbHVkZURhdGVzLnNvbWUoZnVuY3Rpb24gKGluY2x1ZGVEYXRlKSB7XG4gICAgcmV0dXJuIGlzU2FtZVllYXIoZGF0ZSwgaW5jbHVkZURhdGUpO1xuICB9KSB8fCBmaWx0ZXJEYXRlICYmICFmaWx0ZXJEYXRlKG5ld0RhdGUoZGF0ZSkpIHx8IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNRdWFydGVySW5SYW5nZShzdGFydERhdGUsIGVuZERhdGUsIHEsIGRheSkge1xuICB2YXIgc3RhcnREYXRlWWVhciA9IGdldFllYXIoc3RhcnREYXRlKTtcbiAgdmFyIHN0YXJ0RGF0ZVF1YXJ0ZXIgPSBnZXRRdWFydGVyKHN0YXJ0RGF0ZSk7XG4gIHZhciBlbmREYXRlWWVhciA9IGdldFllYXIoZW5kRGF0ZSk7XG4gIHZhciBlbmREYXRlUXVhcnRlciA9IGdldFF1YXJ0ZXIoZW5kRGF0ZSk7XG4gIHZhciBkYXlZZWFyID0gZ2V0WWVhcihkYXkpO1xuICBpZiAoc3RhcnREYXRlWWVhciA9PT0gZW5kRGF0ZVllYXIgJiYgc3RhcnREYXRlWWVhciA9PT0gZGF5WWVhcikge1xuICAgIHJldHVybiBzdGFydERhdGVRdWFydGVyIDw9IHEgJiYgcSA8PSBlbmREYXRlUXVhcnRlcjtcbiAgfSBlbHNlIGlmIChzdGFydERhdGVZZWFyIDwgZW5kRGF0ZVllYXIpIHtcbiAgICByZXR1cm4gZGF5WWVhciA9PT0gc3RhcnREYXRlWWVhciAmJiBzdGFydERhdGVRdWFydGVyIDw9IHEgfHwgZGF5WWVhciA9PT0gZW5kRGF0ZVllYXIgJiYgZW5kRGF0ZVF1YXJ0ZXIgPj0gcSB8fCBkYXlZZWFyIDwgZW5kRGF0ZVllYXIgJiYgZGF5WWVhciA+IHN0YXJ0RGF0ZVllYXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzT3V0T2ZCb3VuZHMoZGF5KSB7XG4gIHZhciBfcmVmMTEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgIG1pbkRhdGUgPSBfcmVmMTEubWluRGF0ZSxcbiAgICBtYXhEYXRlID0gX3JlZjExLm1heERhdGU7XG4gIHJldHVybiBtaW5EYXRlICYmIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXksIG1pbkRhdGUpIDwgMCB8fCBtYXhEYXRlICYmIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXksIG1heERhdGUpID4gMDtcbn1cbmZ1bmN0aW9uIGlzVGltZUluTGlzdCh0aW1lLCB0aW1lcykge1xuICByZXR1cm4gdGltZXMuc29tZShmdW5jdGlvbiAobGlzdFRpbWUpIHtcbiAgICByZXR1cm4gZ2V0SG91cnMobGlzdFRpbWUpID09PSBnZXRIb3Vycyh0aW1lKSAmJiBnZXRNaW51dGVzKGxpc3RUaW1lKSA9PT0gZ2V0TWludXRlcyh0aW1lKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBpc1RpbWVEaXNhYmxlZCh0aW1lKSB7XG4gIHZhciBfcmVmMTIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgIGV4Y2x1ZGVUaW1lcyA9IF9yZWYxMi5leGNsdWRlVGltZXMsXG4gICAgaW5jbHVkZVRpbWVzID0gX3JlZjEyLmluY2x1ZGVUaW1lcyxcbiAgICBmaWx0ZXJUaW1lID0gX3JlZjEyLmZpbHRlclRpbWU7XG4gIHJldHVybiBleGNsdWRlVGltZXMgJiYgaXNUaW1lSW5MaXN0KHRpbWUsIGV4Y2x1ZGVUaW1lcykgfHwgaW5jbHVkZVRpbWVzICYmICFpc1RpbWVJbkxpc3QodGltZSwgaW5jbHVkZVRpbWVzKSB8fCBmaWx0ZXJUaW1lICYmICFmaWx0ZXJUaW1lKHRpbWUpIHx8IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNUaW1lSW5EaXNhYmxlZFJhbmdlKHRpbWUsIF9yZWYxMykge1xuICB2YXIgbWluVGltZSA9IF9yZWYxMy5taW5UaW1lLFxuICAgIG1heFRpbWUgPSBfcmVmMTMubWF4VGltZTtcbiAgaWYgKCFtaW5UaW1lIHx8ICFtYXhUaW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQm90aCBtaW5UaW1lIGFuZCBtYXhUaW1lIHByb3BzIHJlcXVpcmVkXCIpO1xuICB9XG4gIHZhciBiYXNlID0gbmV3RGF0ZSgpO1xuICB2YXIgYmFzZVRpbWUgPSBzZXRIb3VycyhzZXRNaW51dGVzKGJhc2UsIGdldE1pbnV0ZXModGltZSkpLCBnZXRIb3Vycyh0aW1lKSk7XG4gIHZhciBtaW4gPSBzZXRIb3VycyhzZXRNaW51dGVzKGJhc2UsIGdldE1pbnV0ZXMobWluVGltZSkpLCBnZXRIb3VycyhtaW5UaW1lKSk7XG4gIHZhciBtYXggPSBzZXRIb3VycyhzZXRNaW51dGVzKGJhc2UsIGdldE1pbnV0ZXMobWF4VGltZSkpLCBnZXRIb3VycyhtYXhUaW1lKSk7XG4gIHZhciB2YWxpZDtcbiAgdHJ5IHtcbiAgICB2YWxpZCA9ICFpc1dpdGhpbkludGVydmFsKGJhc2VUaW1lLCB7XG4gICAgICBzdGFydDogbWluLFxuICAgICAgZW5kOiBtYXhcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5mdW5jdGlvbiBtb250aERpc2FibGVkQmVmb3JlKGRheSkge1xuICB2YXIgX3JlZjE0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICBtaW5EYXRlID0gX3JlZjE0Lm1pbkRhdGUsXG4gICAgaW5jbHVkZURhdGVzID0gX3JlZjE0LmluY2x1ZGVEYXRlcztcbiAgdmFyIHByZXZpb3VzTW9udGggPSBzdWJNb250aHMoZGF5LCAxKTtcbiAgcmV0dXJuIG1pbkRhdGUgJiYgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMobWluRGF0ZSwgcHJldmlvdXNNb250aCkgPiAwIHx8IGluY2x1ZGVEYXRlcyAmJiBpbmNsdWRlRGF0ZXMuZXZlcnkoZnVuY3Rpb24gKGluY2x1ZGVEYXRlKSB7XG4gICAgcmV0dXJuIGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKGluY2x1ZGVEYXRlLCBwcmV2aW91c01vbnRoKSA+IDA7XG4gIH0pIHx8IGZhbHNlO1xufVxuZnVuY3Rpb24gbW9udGhEaXNhYmxlZEFmdGVyKGRheSkge1xuICB2YXIgX3JlZjE1ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICBtYXhEYXRlID0gX3JlZjE1Lm1heERhdGUsXG4gICAgaW5jbHVkZURhdGVzID0gX3JlZjE1LmluY2x1ZGVEYXRlcztcbiAgdmFyIG5leHRNb250aCA9IGFkZE1vbnRocyhkYXksIDEpO1xuICByZXR1cm4gbWF4RGF0ZSAmJiBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyhuZXh0TW9udGgsIG1heERhdGUpID4gMCB8fCBpbmNsdWRlRGF0ZXMgJiYgaW5jbHVkZURhdGVzLmV2ZXJ5KGZ1bmN0aW9uIChpbmNsdWRlRGF0ZSkge1xuICAgIHJldHVybiBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyhuZXh0TW9udGgsIGluY2x1ZGVEYXRlKSA+IDA7XG4gIH0pIHx8IGZhbHNlO1xufVxuZnVuY3Rpb24gcXVhcnRlckRpc2FibGVkQmVmb3JlKGRhdGUpIHtcbiAgdmFyIF9yZWYxNiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgbWluRGF0ZSA9IF9yZWYxNi5taW5EYXRlLFxuICAgIGluY2x1ZGVEYXRlcyA9IF9yZWYxNi5pbmNsdWRlRGF0ZXM7XG4gIHZhciBmaXJzdERhdGVPZlllYXIgPSBzdGFydE9mWWVhcihkYXRlKTtcbiAgdmFyIHByZXZpb3VzUXVhcnRlciA9IHN1YlF1YXJ0ZXJzKGZpcnN0RGF0ZU9mWWVhciwgMSk7XG4gIHJldHVybiBtaW5EYXRlICYmIGRpZmZlcmVuY2VJbkNhbGVuZGFyUXVhcnRlcnMobWluRGF0ZSwgcHJldmlvdXNRdWFydGVyKSA+IDAgfHwgaW5jbHVkZURhdGVzICYmIGluY2x1ZGVEYXRlcy5ldmVyeShmdW5jdGlvbiAoaW5jbHVkZURhdGUpIHtcbiAgICByZXR1cm4gZGlmZmVyZW5jZUluQ2FsZW5kYXJRdWFydGVycyhpbmNsdWRlRGF0ZSwgcHJldmlvdXNRdWFydGVyKSA+IDA7XG4gIH0pIHx8IGZhbHNlO1xufVxuZnVuY3Rpb24gcXVhcnRlckRpc2FibGVkQWZ0ZXIoZGF0ZSkge1xuICB2YXIgX3JlZjE3ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICBtYXhEYXRlID0gX3JlZjE3Lm1heERhdGUsXG4gICAgaW5jbHVkZURhdGVzID0gX3JlZjE3LmluY2x1ZGVEYXRlcztcbiAgdmFyIGxhc3REYXRlT2ZZZWFyID0gZW5kT2ZZZWFyKGRhdGUpO1xuICB2YXIgbmV4dFF1YXJ0ZXIgPSBhZGRRdWFydGVycyhsYXN0RGF0ZU9mWWVhciwgMSk7XG4gIHJldHVybiBtYXhEYXRlICYmIGRpZmZlcmVuY2VJbkNhbGVuZGFyUXVhcnRlcnMobmV4dFF1YXJ0ZXIsIG1heERhdGUpID4gMCB8fCBpbmNsdWRlRGF0ZXMgJiYgaW5jbHVkZURhdGVzLmV2ZXJ5KGZ1bmN0aW9uIChpbmNsdWRlRGF0ZSkge1xuICAgIHJldHVybiBkaWZmZXJlbmNlSW5DYWxlbmRhclF1YXJ0ZXJzKG5leHRRdWFydGVyLCBpbmNsdWRlRGF0ZSkgPiAwO1xuICB9KSB8fCBmYWxzZTtcbn1cbmZ1bmN0aW9uIHllYXJEaXNhYmxlZEJlZm9yZShkYXkpIHtcbiAgdmFyIF9yZWYxOCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgbWluRGF0ZSA9IF9yZWYxOC5taW5EYXRlLFxuICAgIGluY2x1ZGVEYXRlcyA9IF9yZWYxOC5pbmNsdWRlRGF0ZXM7XG4gIHZhciBwcmV2aW91c1llYXIgPSBzdWJZZWFycyhkYXksIDEpO1xuICByZXR1cm4gbWluRGF0ZSAmJiBkaWZmZXJlbmNlSW5DYWxlbmRhclllYXJzKG1pbkRhdGUsIHByZXZpb3VzWWVhcikgPiAwIHx8IGluY2x1ZGVEYXRlcyAmJiBpbmNsdWRlRGF0ZXMuZXZlcnkoZnVuY3Rpb24gKGluY2x1ZGVEYXRlKSB7XG4gICAgcmV0dXJuIGRpZmZlcmVuY2VJbkNhbGVuZGFyWWVhcnMoaW5jbHVkZURhdGUsIHByZXZpb3VzWWVhcikgPiAwO1xuICB9KSB8fCBmYWxzZTtcbn1cbmZ1bmN0aW9uIHllYXJzRGlzYWJsZWRCZWZvcmUoZGF5KSB7XG4gIHZhciBfcmVmMTkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgIG1pbkRhdGUgPSBfcmVmMTkubWluRGF0ZSxcbiAgICBfcmVmMTkkeWVhckl0ZW1OdW1iZXIgPSBfcmVmMTkueWVhckl0ZW1OdW1iZXIsXG4gICAgeWVhckl0ZW1OdW1iZXIgPSBfcmVmMTkkeWVhckl0ZW1OdW1iZXIgPT09IHZvaWQgMCA/IERFRkFVTFRfWUVBUl9JVEVNX05VTUJFUiA6IF9yZWYxOSR5ZWFySXRlbU51bWJlcjtcbiAgdmFyIHByZXZpb3VzWWVhciA9IGdldFN0YXJ0T2ZZZWFyKHN1YlllYXJzKGRheSwgeWVhckl0ZW1OdW1iZXIpKTtcbiAgdmFyIF9nZXRZZWFyc1BlcmlvZCA9IGdldFllYXJzUGVyaW9kKHByZXZpb3VzWWVhciwgeWVhckl0ZW1OdW1iZXIpLFxuICAgIGVuZFBlcmlvZCA9IF9nZXRZZWFyc1BlcmlvZC5lbmRQZXJpb2Q7XG4gIHZhciBtaW5EYXRlWWVhciA9IG1pbkRhdGUgJiYgZ2V0WWVhcihtaW5EYXRlKTtcbiAgcmV0dXJuIG1pbkRhdGVZZWFyICYmIG1pbkRhdGVZZWFyID4gZW5kUGVyaW9kIHx8IGZhbHNlO1xufVxuZnVuY3Rpb24geWVhckRpc2FibGVkQWZ0ZXIoZGF5KSB7XG4gIHZhciBfcmVmMjAgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgIG1heERhdGUgPSBfcmVmMjAubWF4RGF0ZSxcbiAgICBpbmNsdWRlRGF0ZXMgPSBfcmVmMjAuaW5jbHVkZURhdGVzO1xuICB2YXIgbmV4dFllYXIgPSBhZGRZZWFycyhkYXksIDEpO1xuICByZXR1cm4gbWF4RGF0ZSAmJiBkaWZmZXJlbmNlSW5DYWxlbmRhclllYXJzKG5leHRZZWFyLCBtYXhEYXRlKSA+IDAgfHwgaW5jbHVkZURhdGVzICYmIGluY2x1ZGVEYXRlcy5ldmVyeShmdW5jdGlvbiAoaW5jbHVkZURhdGUpIHtcbiAgICByZXR1cm4gZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycyhuZXh0WWVhciwgaW5jbHVkZURhdGUpID4gMDtcbiAgfSkgfHwgZmFsc2U7XG59XG5mdW5jdGlvbiB5ZWFyc0Rpc2FibGVkQWZ0ZXIoZGF5KSB7XG4gIHZhciBfcmVmMjEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgIG1heERhdGUgPSBfcmVmMjEubWF4RGF0ZSxcbiAgICBfcmVmMjEkeWVhckl0ZW1OdW1iZXIgPSBfcmVmMjEueWVhckl0ZW1OdW1iZXIsXG4gICAgeWVhckl0ZW1OdW1iZXIgPSBfcmVmMjEkeWVhckl0ZW1OdW1iZXIgPT09IHZvaWQgMCA/IERFRkFVTFRfWUVBUl9JVEVNX05VTUJFUiA6IF9yZWYyMSR5ZWFySXRlbU51bWJlcjtcbiAgdmFyIG5leHRZZWFyID0gYWRkWWVhcnMoZGF5LCB5ZWFySXRlbU51bWJlcik7XG4gIHZhciBfZ2V0WWVhcnNQZXJpb2QyID0gZ2V0WWVhcnNQZXJpb2QobmV4dFllYXIsIHllYXJJdGVtTnVtYmVyKSxcbiAgICBzdGFydFBlcmlvZCA9IF9nZXRZZWFyc1BlcmlvZDIuc3RhcnRQZXJpb2Q7XG4gIHZhciBtYXhEYXRlWWVhciA9IG1heERhdGUgJiYgZ2V0WWVhcihtYXhEYXRlKTtcbiAgcmV0dXJuIG1heERhdGVZZWFyICYmIG1heERhdGVZZWFyIDwgc3RhcnRQZXJpb2QgfHwgZmFsc2U7XG59XG5mdW5jdGlvbiBnZXRFZmZlY3RpdmVNaW5EYXRlKF9yZWYyMikge1xuICB2YXIgbWluRGF0ZSA9IF9yZWYyMi5taW5EYXRlLFxuICAgIGluY2x1ZGVEYXRlcyA9IF9yZWYyMi5pbmNsdWRlRGF0ZXM7XG4gIGlmIChpbmNsdWRlRGF0ZXMgJiYgbWluRGF0ZSkge1xuICAgIHZhciBtaW5EYXRlcyA9IGluY2x1ZGVEYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGluY2x1ZGVEYXRlKSB7XG4gICAgICByZXR1cm4gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGluY2x1ZGVEYXRlLCBtaW5EYXRlKSA+PSAwO1xuICAgIH0pO1xuICAgIHJldHVybiBtaW4obWluRGF0ZXMpO1xuICB9IGVsc2UgaWYgKGluY2x1ZGVEYXRlcykge1xuICAgIHJldHVybiBtaW4oaW5jbHVkZURhdGVzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWluRGF0ZTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0RWZmZWN0aXZlTWF4RGF0ZShfcmVmMjMpIHtcbiAgdmFyIG1heERhdGUgPSBfcmVmMjMubWF4RGF0ZSxcbiAgICBpbmNsdWRlRGF0ZXMgPSBfcmVmMjMuaW5jbHVkZURhdGVzO1xuICBpZiAoaW5jbHVkZURhdGVzICYmIG1heERhdGUpIHtcbiAgICB2YXIgbWF4RGF0ZXMgPSBpbmNsdWRlRGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChpbmNsdWRlRGF0ZSkge1xuICAgICAgcmV0dXJuIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhpbmNsdWRlRGF0ZSwgbWF4RGF0ZSkgPD0gMDtcbiAgICB9KTtcbiAgICByZXR1cm4gbWF4KG1heERhdGVzKTtcbiAgfSBlbHNlIGlmIChpbmNsdWRlRGF0ZXMpIHtcbiAgICByZXR1cm4gbWF4KGluY2x1ZGVEYXRlcyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1heERhdGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEhpZ2h0TGlnaHREYXlzTWFwKCkge1xuICB2YXIgaGlnaGxpZ2h0RGF0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICB2YXIgZGVmYXVsdENsYXNzTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWhpZ2hsaWdodGVkXCI7XG4gIHZhciBkYXRlQ2xhc3NlcyA9IG5ldyBNYXAoKTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhpZ2hsaWdodERhdGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIG9iaiA9IGhpZ2hsaWdodERhdGVzW2ldO1xuICAgIGlmIChpc0RhdGUob2JqKSkge1xuICAgICAgdmFyIGtleSA9IGZvcm1hdERhdGUob2JqLCBcIk1NLmRkLnl5eXlcIik7XG4gICAgICB2YXIgY2xhc3NOYW1lc0FyciA9IGRhdGVDbGFzc2VzLmdldChrZXkpIHx8IFtdO1xuICAgICAgaWYgKCFjbGFzc05hbWVzQXJyLmluY2x1ZGVzKGRlZmF1bHRDbGFzc05hbWUpKSB7XG4gICAgICAgIGNsYXNzTmFtZXNBcnIucHVzaChkZWZhdWx0Q2xhc3NOYW1lKTtcbiAgICAgICAgZGF0ZUNsYXNzZXMuc2V0KGtleSwgY2xhc3NOYW1lc0Fycik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKG9iaikgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBrZXlzWzBdO1xuICAgICAgdmFyIGFyck9mRGF0ZXMgPSBvYmpba2V5c1swXV07XG4gICAgICBpZiAodHlwZW9mIGNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBhcnJPZkRhdGVzLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICBmb3IgKHZhciBrID0gMCwgX2xlbiA9IGFyck9mRGF0ZXMubGVuZ3RoOyBrIDwgX2xlbjsgaysrKSB7XG4gICAgICAgICAgdmFyIF9rZXkgPSBmb3JtYXREYXRlKGFyck9mRGF0ZXNba10sIFwiTU0uZGQueXl5eVwiKTtcbiAgICAgICAgICB2YXIgX2NsYXNzTmFtZXNBcnIgPSBkYXRlQ2xhc3Nlcy5nZXQoX2tleSkgfHwgW107XG4gICAgICAgICAgaWYgKCFfY2xhc3NOYW1lc0Fyci5pbmNsdWRlcyhjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICBfY2xhc3NOYW1lc0Fyci5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICBkYXRlQ2xhc3Nlcy5zZXQoX2tleSwgX2NsYXNzTmFtZXNBcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0ZUNsYXNzZXM7XG59XG5cbi8qKlxuICogQ29tcGFyZSB0aGUgdHdvIGFycmF5c1xuICogQHBhcmFtIHtBcnJheX0gYXJyYXkxXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheTJcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlLCBpZiB0aGUgcGFzc2VkIGFycmF5IGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmZ1bmN0aW9uIGFycmF5c0FyZUVxdWFsKGFycmF5MSwgYXJyYXkyKSB7XG4gIGlmIChhcnJheTEubGVuZ3RoICE9PSBhcnJheTIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBhcnJheTEuZXZlcnkoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gYXJyYXkyW2luZGV4XTtcbiAgfSk7XG59XG5cbi8qKlxuICogQXNzaWduIHRoZSBjdXN0b20gY2xhc3MgdG8gZWFjaCBkYXRlXG4gKiBAcGFyYW0ge0FycmF5fSBob2xpZGF5RGF0ZXMgYXJyYXkgb2Ygb2JqZWN0IGNvbnRhaW5pbmcgZGF0ZSBhbmQgbmFtZSBvZiB0aGUgaG9saWRheVxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzbmFtZSB0byBiZSBhZGRlZC5cbiAqIEByZXR1cm5zIHtNYXB9IE1hcCBjb250YWluaW5nIGRhdGUgYXMga2V5IGFuZCBhcnJheSBvZiBjbGFzc25hbWUgYW5kIGhvbGlkYXkgbmFtZSBhcyB2YWx1ZVxuICovXG5mdW5jdGlvbiBnZXRIb2xpZGF5c01hcCgpIHtcbiAgdmFyIGhvbGlkYXlEYXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gIHZhciBkZWZhdWx0Q2xhc3NOYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0taG9saWRheXNcIjtcbiAgdmFyIGRhdGVDbGFzc2VzID0gbmV3IE1hcCgpO1xuICBob2xpZGF5RGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoaG9saWRheSkge1xuICAgIHZhciBkYXRlT2JqID0gaG9saWRheS5kYXRlLFxuICAgICAgaG9saWRheU5hbWUgPSBob2xpZGF5LmhvbGlkYXlOYW1lO1xuICAgIGlmICghaXNEYXRlKGRhdGVPYmopKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBrZXkgPSBmb3JtYXREYXRlKGRhdGVPYmosIFwiTU0uZGQueXl5eVwiKTtcbiAgICB2YXIgY2xhc3NOYW1lc09iaiA9IGRhdGVDbGFzc2VzLmdldChrZXkpIHx8IHt9O1xuICAgIGlmIChcImNsYXNzTmFtZVwiIGluIGNsYXNzTmFtZXNPYmogJiYgY2xhc3NOYW1lc09ialtcImNsYXNzTmFtZVwiXSA9PT0gZGVmYXVsdENsYXNzTmFtZSAmJiBhcnJheXNBcmVFcXVhbChjbGFzc05hbWVzT2JqW1wiaG9saWRheU5hbWVzXCJdLCBbaG9saWRheU5hbWVdKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbGFzc05hbWVzT2JqW1wiY2xhc3NOYW1lXCJdID0gZGVmYXVsdENsYXNzTmFtZTtcbiAgICB2YXIgaG9saWRheU5hbWVBcnIgPSBjbGFzc05hbWVzT2JqW1wiaG9saWRheU5hbWVzXCJdO1xuICAgIGNsYXNzTmFtZXNPYmpbXCJob2xpZGF5TmFtZXNcIl0gPSBob2xpZGF5TmFtZUFyciA/IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoaG9saWRheU5hbWVBcnIpLCBbaG9saWRheU5hbWVdKSA6IFtob2xpZGF5TmFtZV07XG4gICAgZGF0ZUNsYXNzZXMuc2V0KGtleSwgY2xhc3NOYW1lc09iaik7XG4gIH0pO1xuICByZXR1cm4gZGF0ZUNsYXNzZXM7XG59XG5mdW5jdGlvbiB0aW1lc1RvSW5qZWN0QWZ0ZXIoc3RhcnRPZkRheSwgY3VycmVudFRpbWUsIGN1cnJlbnRNdWx0aXBsaWVyLCBpbnRlcnZhbHMsIGluamVjdGVkVGltZXMpIHtcbiAgdmFyIGwgPSBpbmplY3RlZFRpbWVzLmxlbmd0aDtcbiAgdmFyIHRpbWVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGluamVjdGVkVGltZSA9IHN0YXJ0T2ZEYXk7XG4gICAgaW5qZWN0ZWRUaW1lID0gYWRkSG91cnMoaW5qZWN0ZWRUaW1lLCBnZXRIb3VycyhpbmplY3RlZFRpbWVzW2ldKSk7XG4gICAgaW5qZWN0ZWRUaW1lID0gYWRkTWludXRlcyhpbmplY3RlZFRpbWUsIGdldE1pbnV0ZXMoaW5qZWN0ZWRUaW1lc1tpXSkpO1xuICAgIGluamVjdGVkVGltZSA9IGFkZFNlY29uZHMoaW5qZWN0ZWRUaW1lLCBnZXRTZWNvbmRzKGluamVjdGVkVGltZXNbaV0pKTtcbiAgICB2YXIgbmV4dFRpbWUgPSBhZGRNaW51dGVzKHN0YXJ0T2ZEYXksIChjdXJyZW50TXVsdGlwbGllciArIDEpICogaW50ZXJ2YWxzKTtcbiAgICBpZiAoaXNBZnRlcihpbmplY3RlZFRpbWUsIGN1cnJlbnRUaW1lKSAmJiBpc0JlZm9yZShpbmplY3RlZFRpbWUsIG5leHRUaW1lKSkge1xuICAgICAgdGltZXMucHVzaChpbmplY3RlZFRpbWVzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpbWVzO1xufVxuZnVuY3Rpb24gYWRkWmVybyhpKSB7XG4gIHJldHVybiBpIDwgMTAgPyBcIjBcIi5jb25jYXQoaSkgOiBcIlwiLmNvbmNhdChpKTtcbn1cbmZ1bmN0aW9uIGdldFllYXJzUGVyaW9kKGRhdGUpIHtcbiAgdmFyIHllYXJJdGVtTnVtYmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBERUZBVUxUX1lFQVJfSVRFTV9OVU1CRVI7XG4gIHZhciBlbmRQZXJpb2QgPSBNYXRoLmNlaWwoZ2V0WWVhcihkYXRlKSAvIHllYXJJdGVtTnVtYmVyKSAqIHllYXJJdGVtTnVtYmVyO1xuICB2YXIgc3RhcnRQZXJpb2QgPSBlbmRQZXJpb2QgLSAoeWVhckl0ZW1OdW1iZXIgLSAxKTtcbiAgcmV0dXJuIHtcbiAgICBzdGFydFBlcmlvZDogc3RhcnRQZXJpb2QsXG4gICAgZW5kUGVyaW9kOiBlbmRQZXJpb2RcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEhvdXJzSW5EYXkoZCkge1xuICB2YXIgc3RhcnRPZkRheSA9IG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCBkLmdldERhdGUoKSk7XG4gIHZhciBzdGFydE9mVGhlTmV4dERheSA9IG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCBkLmdldERhdGUoKSwgMjQpO1xuICByZXR1cm4gTWF0aC5yb3VuZCgoK3N0YXJ0T2ZUaGVOZXh0RGF5IC0gK3N0YXJ0T2ZEYXkpIC8gMzYwMDAwMCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3RhcnQgb2YgdGhlIG1pbnV0ZSBmb3IgdGhlIGdpdmVuIGRhdGVcbiAqXG4gKiBOT1RFOiB0aGlzIGZ1bmN0aW9uIGlzIGEgRFNUIGFuZCB0aW1lem9uZS1zYWZlIGFuYWxvZyBvZiBgZGF0ZS1mbnMvc3RhcnRPZk1pbnV0ZWBcbiAqIGRvIG5vdCBtYWtlIGNoYW5nZXMgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91J3JlIGRvaW5nXG4gKlxuICogU2VlIGNvbW1lbnRzIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9IYWNrZXIweDAxL3JlYWN0LWRhdGVwaWNrZXIvcHVsbC80MjQ0XG4gKiBmb3IgbW9yZSBkZXRhaWxzXG4gKlxuICogQHBhcmFtIHtEYXRlfSBkIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSBzdGFydCBvZiB0aGUgbWludXRlXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0T2ZNaW51dGUoZCkge1xuICB2YXIgc2Vjb25kcyA9IGQuZ2V0U2Vjb25kcygpO1xuICB2YXIgbWlsbGlzZWNvbmRzID0gZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgcmV0dXJuIHRvRGF0ZShkLmdldFRpbWUoKSAtIHNlY29uZHMgKiAxMDAwIC0gbWlsbGlzZWNvbmRzKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSBtaW51dGVcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGEgRFNUIGFuZCB0aW1lem9uZS1zYWZlIGFuYWxvZyBvZiBgZGF0ZS1mbnMvaXNTYW1lTWludXRlYFxuICpcbiAqIEBwYXJhbSB7RGF0ZX0gZDFcbiAqIEBwYXJhbSB7RGF0ZX0gZDJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NhbWVNaW51dGUoZDEsIGQyKSB7XG4gIHJldHVybiBzdGFydE9mTWludXRlKGQxKS5nZXRUaW1lKCkgPT09IHN0YXJ0T2ZNaW51dGUoZDIpLmdldFRpbWUoKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2xvbmVkIGRhdGUgd2l0aCBtaWRuaWdodCB0aW1lICgwMDowMDowMClcbiAqXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgVGhlIGRhdGUgZm9yIHdoaWNoIG1pZG5pZ2h0IHRpbWUgaXMgcmVxdWlyZWRcbiAqIEBwYXJhbSB7RGF0ZX0gZGF0ZVRvQ29tcGFyZSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm5zIHtEYXRlfSBBIG5ldyBkYXRldGltZSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCBkYXRlIHdpdGggbWlkbmlnaHQgdGltZVxuICovXG5mdW5jdGlvbiBnZXRNaWRuaWdodERhdGUoZGF0ZSkge1xuICBpZiAoIWlzRGF0ZShkYXRlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZVwiKTtcbiAgfVxuICB2YXIgZGF0ZVdpdGhvdXRUaW1lID0gbmV3IERhdGUoZGF0ZSk7XG4gIGRhdGVXaXRob3V0VGltZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGVXaXRob3V0VGltZTtcbn1cblxuLyoqXG4gKiBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQHBhcmFtIHtEYXRlfSBkYXRlIFRoZSBkYXRlIHRoYXQgc2hvdWxkIGJlIGJlZm9yZSB0aGUgb3RoZXIgb25lIHRvIHJldHVybiB0cnVlXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGVUb0NvbXBhcmUgVGhlIGRhdGUgdG8gY29tcGFyZSB3aXRoXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVGhlIGZpcnN0IGRhdGUgaXMgYmVmb3JlIHRoZSBzZWNvbmQgZGF0ZVxuICpcbiAqIE5vdGU6XG4gKiAgVGhpcyBmdW5jdGlvbiBjb25zaWRlcnMgdGhlIG1pZC1uaWdodCBvZiB0aGUgZ2l2ZW4gZGF0ZXMgZm9yIGNvbXBhcmlzb24uXG4gKiAgSXQgZXZhbHVhdGVzIHdoZXRoZXIgZGF0ZSBpcyBiZWZvcmUgZGF0ZVRvQ29tcGFyZSBiYXNlZCBvbiB0aGVpciBtaWQtbmlnaHQgdGltZXN0YW1wcy5cbiAqL1xuZnVuY3Rpb24gaXNEYXRlQmVmb3JlKGRhdGUsIGRhdGVUb0NvbXBhcmUpIHtcbiAgaWYgKCFpc0RhdGUoZGF0ZSkgfHwgIWlzRGF0ZShkYXRlVG9Db21wYXJlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZSByZWNlaXZlZFwiKTtcbiAgfVxuICB2YXIgbWlkbmlnaHREYXRlID0gZ2V0TWlkbmlnaHREYXRlKGRhdGUpO1xuICB2YXIgbWlkbmlnaHREYXRlVG9Db21wYXJlID0gZ2V0TWlkbmlnaHREYXRlKGRhdGVUb0NvbXBhcmUpO1xuICByZXR1cm4gaXNCZWZvcmUobWlkbmlnaHREYXRlLCBtaWRuaWdodERhdGVUb0NvbXBhcmUpO1xufVxuZnVuY3Rpb24gaXNTcGFjZUtleURvd24oZXZlbnQpIHtcbiAgdmFyIFNQQUNFX0tFWSA9IFwiIFwiO1xuICByZXR1cm4gZXZlbnQua2V5ID09PSBTUEFDRV9LRVk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlWWVhcnMoeWVhciwgbm9PZlllYXIsIG1pbkRhdGUsIG1heERhdGUpIHtcbiAgdmFyIGxpc3QgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyICogbm9PZlllYXIgKyAxOyBpKyspIHtcbiAgICB2YXIgbmV3WWVhciA9IHllYXIgKyBub09mWWVhciAtIGk7XG4gICAgdmFyIGlzSW5SYW5nZSA9IHRydWU7XG4gICAgaWYgKG1pbkRhdGUpIHtcbiAgICAgIGlzSW5SYW5nZSA9IGdldFllYXIobWluRGF0ZSkgPD0gbmV3WWVhcjtcbiAgICB9XG4gICAgaWYgKG1heERhdGUgJiYgaXNJblJhbmdlKSB7XG4gICAgICBpc0luUmFuZ2UgPSBnZXRZZWFyKG1heERhdGUpID49IG5ld1llYXI7XG4gICAgfVxuICAgIGlmIChpc0luUmFuZ2UpIHtcbiAgICAgIGxpc3QucHVzaChuZXdZZWFyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxpc3Q7XG59XG52YXIgWWVhckRyb3Bkb3duT3B0aW9ucyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBZZWFyRHJvcGRvd25PcHRpb25zKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBZZWFyRHJvcGRvd25PcHRpb25zKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgWWVhckRyb3Bkb3duT3B0aW9ucywgW3Byb3BzXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlck9wdGlvbnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGVjdGVkWWVhciA9IF90aGlzLnByb3BzLnllYXI7XG4gICAgICB2YXIgb3B0aW9ucyA9IF90aGlzLnN0YXRlLnllYXJzTGlzdC5tYXAoZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IHNlbGVjdGVkWWVhciA9PT0geWVhciA/IFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24gcmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24tLXNlbGVjdGVkX3llYXJcIiA6IFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb25cIixcbiAgICAgICAgICBrZXk6IHllYXIsXG4gICAgICAgICAgb25DbGljazogX3RoaXMub25DaGFuZ2UuYmluZChfdGhpcywgeWVhciksXG4gICAgICAgICAgXCJhcmlhLXNlbGVjdGVkXCI6IHNlbGVjdGVkWWVhciA9PT0geWVhciA/IFwidHJ1ZVwiIDogdW5kZWZpbmVkXG4gICAgICAgIH0sIHNlbGVjdGVkWWVhciA9PT0geWVhciA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uLS1zZWxlY3RlZFwiXG4gICAgICAgIH0sIFwiXFx1MjcxM1wiKSA6IFwiXCIsIHllYXIpO1xuICAgICAgfSk7XG4gICAgICB2YXIgbWluWWVhciA9IF90aGlzLnByb3BzLm1pbkRhdGUgPyBnZXRZZWFyKF90aGlzLnByb3BzLm1pbkRhdGUpIDogbnVsbDtcbiAgICAgIHZhciBtYXhZZWFyID0gX3RoaXMucHJvcHMubWF4RGF0ZSA/IGdldFllYXIoX3RoaXMucHJvcHMubWF4RGF0ZSkgOiBudWxsO1xuICAgICAgaWYgKCFtYXhZZWFyIHx8ICFfdGhpcy5zdGF0ZS55ZWFyc0xpc3QuZmluZChmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICByZXR1cm4geWVhciA9PT0gbWF4WWVhcjtcbiAgICAgIH0pKSB7XG4gICAgICAgIG9wdGlvbnMudW5zaGlmdCggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLW9wdGlvblwiLFxuICAgICAgICAgIGtleTogXCJ1cGNvbWluZ1wiLFxuICAgICAgICAgIG9uQ2xpY2s6IF90aGlzLmluY3JlbWVudFllYXJzXG4gICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24gcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMgcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtdXBjb21pbmdcIlxuICAgICAgICB9KSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFtaW5ZZWFyIHx8ICFfdGhpcy5zdGF0ZS55ZWFyc0xpc3QuZmluZChmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICByZXR1cm4geWVhciA9PT0gbWluWWVhcjtcbiAgICAgIH0pKSB7XG4gICAgICAgIG9wdGlvbnMucHVzaCggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLW9wdGlvblwiLFxuICAgICAgICAgIGtleTogXCJwcmV2aW91c1wiLFxuICAgICAgICAgIG9uQ2xpY2s6IF90aGlzLmRlY3JlbWVudFllYXJzXG4gICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24gcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMgcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXNcIlxuICAgICAgICB9KSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIm9uQ2hhbmdlXCIsIGZ1bmN0aW9uICh5ZWFyKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSh5ZWFyKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlQ2xpY2tPdXRzaWRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnByb3BzLm9uQ2FuY2VsKCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInNoaWZ0WWVhcnNcIiwgZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgdmFyIHllYXJzID0gX3RoaXMuc3RhdGUueWVhcnNMaXN0Lm1hcChmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICByZXR1cm4geWVhciArIGFtb3VudDtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB5ZWFyc0xpc3Q6IHllYXJzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaW5jcmVtZW50WWVhcnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNoaWZ0WWVhcnMoMSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImRlY3JlbWVudFllYXJzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zaGlmdFllYXJzKC0xKTtcbiAgICB9KTtcbiAgICB2YXIgeWVhckRyb3Bkb3duSXRlbU51bWJlciA9IHByb3BzLnllYXJEcm9wZG93bkl0ZW1OdW1iZXIsXG4gICAgICBzY3JvbGxhYmxlWWVhckRyb3Bkb3duID0gcHJvcHMuc2Nyb2xsYWJsZVllYXJEcm9wZG93bjtcbiAgICB2YXIgbm9PZlllYXIgPSB5ZWFyRHJvcGRvd25JdGVtTnVtYmVyIHx8IChzY3JvbGxhYmxlWWVhckRyb3Bkb3duID8gMTAgOiA1KTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHllYXJzTGlzdDogZ2VuZXJhdGVZZWFycyhfdGhpcy5wcm9wcy55ZWFyLCBub09mWWVhciwgX3RoaXMucHJvcHMubWluRGF0ZSwgX3RoaXMucHJvcHMubWF4RGF0ZSlcbiAgICB9O1xuICAgIF90aGlzLmRyb3Bkb3duUmVmID0gLyojX19QVVJFX18qL2NyZWF0ZVJlZigpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoWWVhckRyb3Bkb3duT3B0aW9ucywgX1JlYWN0JENvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoWWVhckRyb3Bkb3duT3B0aW9ucywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgZHJvcGRvd25DdXJyZW50ID0gdGhpcy5kcm9wZG93blJlZi5jdXJyZW50O1xuICAgICAgaWYgKGRyb3Bkb3duQ3VycmVudCkge1xuICAgICAgICAvLyBHZXQgYXJyYXkgZnJvbSBIVE1MQ29sbGVjdGlvblxuICAgICAgICB2YXIgZHJvcGRvd25DdXJyZW50Q2hpbGRyZW4gPSBkcm9wZG93bkN1cnJlbnQuY2hpbGRyZW4gPyBBcnJheS5mcm9tKGRyb3Bkb3duQ3VycmVudC5jaGlsZHJlbikgOiBudWxsO1xuICAgICAgICB2YXIgc2VsZWN0ZWRZZWFyT3B0aW9uRWwgPSBkcm9wZG93bkN1cnJlbnRDaGlsZHJlbiA/IGRyb3Bkb3duQ3VycmVudENoaWxkcmVuLmZpbmQoZnVuY3Rpb24gKGNoaWxkRWwpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRFbC5hcmlhU2VsZWN0ZWQ7XG4gICAgICAgIH0pIDogbnVsbDtcbiAgICAgICAgZHJvcGRvd25DdXJyZW50LnNjcm9sbFRvcCA9IHNlbGVjdGVkWWVhck9wdGlvbkVsID8gc2VsZWN0ZWRZZWFyT3B0aW9uRWwub2Zmc2V0VG9wICsgKHNlbGVjdGVkWWVhck9wdGlvbkVsLmNsaWVudEhlaWdodCAtIGRyb3Bkb3duQ3VycmVudC5jbGllbnRIZWlnaHQpIC8gMiA6IChkcm9wZG93bkN1cnJlbnQuc2Nyb2xsSGVpZ2h0IC0gZHJvcGRvd25DdXJyZW50LmNsaWVudEhlaWdodCkgLyAyO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGRyb3Bkb3duQ2xhc3MgPSBjbHN4KHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLWRyb3Bkb3duXCI6IHRydWUsXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bi0tc2Nyb2xsYWJsZVwiOiB0aGlzLnByb3BzLnNjcm9sbGFibGVZZWFyRHJvcGRvd25cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBkcm9wZG93bkNsYXNzLFxuICAgICAgICByZWY6IHRoaXMuZHJvcGRvd25SZWZcbiAgICAgIH0sIHRoaXMucmVuZGVyT3B0aW9ucygpKTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIFdyYXBwZWRZZWFyRHJvcGRvd25PcHRpb25zID0gb25DbGlja091dHNpZGUoWWVhckRyb3Bkb3duT3B0aW9ucyk7XG52YXIgWWVhckRyb3Bkb3duID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFllYXJEcm9wZG93bigpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFllYXJEcm9wZG93bik7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgWWVhckRyb3Bkb3duLCBbXS5jb25jYXQoYXJncykpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJzdGF0ZVwiLCB7XG4gICAgICBkcm9wZG93blZpc2libGU6IGZhbHNlXG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlclNlbGVjdE9wdGlvbnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1pblllYXIgPSBfdGhpcy5wcm9wcy5taW5EYXRlID8gZ2V0WWVhcihfdGhpcy5wcm9wcy5taW5EYXRlKSA6IDE5MDA7XG4gICAgICB2YXIgbWF4WWVhciA9IF90aGlzLnByb3BzLm1heERhdGUgPyBnZXRZZWFyKF90aGlzLnByb3BzLm1heERhdGUpIDogMjEwMDtcbiAgICAgIHZhciBvcHRpb25zID0gW107XG4gICAgICBmb3IgKHZhciBpID0gbWluWWVhcjsgaSA8PSBtYXhZZWFyOyBpKyspIHtcbiAgICAgICAgb3B0aW9ucy5wdXNoKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCB7XG4gICAgICAgICAga2V5OiBpLFxuICAgICAgICAgIHZhbHVlOiBpXG4gICAgICAgIH0sIGkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvblNlbGVjdENoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMub25DaGFuZ2UoZS50YXJnZXQudmFsdWUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJTZWxlY3RNb2RlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCB7XG4gICAgICAgIHZhbHVlOiBfdGhpcy5wcm9wcy55ZWFyLFxuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1zZWxlY3RcIixcbiAgICAgICAgb25DaGFuZ2U6IF90aGlzLm9uU2VsZWN0Q2hhbmdlXG4gICAgICB9LCBfdGhpcy5yZW5kZXJTZWxlY3RPcHRpb25zKCkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJSZWFkVmlld1wiLCBmdW5jdGlvbiAodmlzaWJsZSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAga2V5OiBcInJlYWRcIixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiXG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlld1wiLFxuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnRvZ2dsZURyb3Bkb3duKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItcmVhZC12aWV3LS1kb3duLWFycm93XCJcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXctLXNlbGVjdGVkLXllYXJcIlxuICAgICAgfSwgX3RoaXMucHJvcHMueWVhcikpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJEcm9wZG93blwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZFllYXJEcm9wZG93bk9wdGlvbnMsIHtcbiAgICAgICAga2V5OiBcImRyb3Bkb3duXCIsXG4gICAgICAgIHllYXI6IF90aGlzLnByb3BzLnllYXIsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5vbkNoYW5nZSxcbiAgICAgICAgb25DYW5jZWw6IF90aGlzLnRvZ2dsZURyb3Bkb3duLFxuICAgICAgICBtaW5EYXRlOiBfdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiBfdGhpcy5wcm9wcy5tYXhEYXRlLFxuICAgICAgICBzY3JvbGxhYmxlWWVhckRyb3Bkb3duOiBfdGhpcy5wcm9wcy5zY3JvbGxhYmxlWWVhckRyb3Bkb3duLFxuICAgICAgICB5ZWFyRHJvcGRvd25JdGVtTnVtYmVyOiBfdGhpcy5wcm9wcy55ZWFyRHJvcGRvd25JdGVtTnVtYmVyXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyU2Nyb2xsTW9kZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZHJvcGRvd25WaXNpYmxlID0gX3RoaXMuc3RhdGUuZHJvcGRvd25WaXNpYmxlO1xuICAgICAgdmFyIHJlc3VsdCA9IFtfdGhpcy5yZW5kZXJSZWFkVmlldyghZHJvcGRvd25WaXNpYmxlKV07XG4gICAgICBpZiAoZHJvcGRvd25WaXNpYmxlKSB7XG4gICAgICAgIHJlc3VsdC51bnNoaWZ0KF90aGlzLnJlbmRlckRyb3Bkb3duKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwib25DaGFuZ2VcIiwgZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgIF90aGlzLnRvZ2dsZURyb3Bkb3duKCk7XG4gICAgICBpZiAoeWVhciA9PT0gX3RoaXMucHJvcHMueWVhcikgcmV0dXJuO1xuICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoeWVhcik7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInRvZ2dsZURyb3Bkb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkcm9wZG93blZpc2libGU6ICFfdGhpcy5zdGF0ZS5kcm9wZG93blZpc2libGVcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmFkanVzdERhdGVPbkNoYW5nZSkge1xuICAgICAgICAgIF90aGlzLmhhbmRsZVllYXJDaGFuZ2UoX3RoaXMucHJvcHMuZGF0ZSwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlWWVhckNoYW5nZVwiLCBmdW5jdGlvbiAoZGF0ZSwgZXZlbnQpIHtcbiAgICAgIF90aGlzLm9uU2VsZWN0KGRhdGUsIGV2ZW50KTtcbiAgICAgIF90aGlzLnNldE9wZW4oKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwib25TZWxlY3RcIiwgZnVuY3Rpb24gKGRhdGUsIGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25TZWxlY3QpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25TZWxlY3QoZGF0ZSwgZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJzZXRPcGVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zZXRPcGVuKSB7XG4gICAgICAgIF90aGlzLnByb3BzLnNldE9wZW4odHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhZZWFyRHJvcGRvd24sIF9SZWFjdCRDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFllYXJEcm9wZG93biwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciByZW5kZXJlZERyb3Bkb3duO1xuICAgICAgc3dpdGNoICh0aGlzLnByb3BzLmRyb3Bkb3duTW9kZSkge1xuICAgICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgICAgcmVuZGVyZWREcm9wZG93biA9IHRoaXMucmVuZGVyU2Nyb2xsTW9kZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgcmVuZGVyZWREcm9wZG93biA9IHRoaXMucmVuZGVyU2VsZWN0TW9kZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd24tY29udGFpbmVyIHJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd24tY29udGFpbmVyLS1cIi5jb25jYXQodGhpcy5wcm9wcy5kcm9wZG93bk1vZGUpXG4gICAgICB9LCByZW5kZXJlZERyb3Bkb3duKTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIE1vbnRoRHJvcGRvd25PcHRpb25zID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIE1vbnRoRHJvcGRvd25PcHRpb25zKCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9udGhEcm9wZG93bk9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIE1vbnRoRHJvcGRvd25PcHRpb25zLCBbXS5jb25jYXQoYXJncykpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1NlbGVjdGVkTW9udGhcIiwgZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5tb250aCA9PT0gaTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyT3B0aW9uc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMubW9udGhOYW1lcy5tYXAoZnVuY3Rpb24gKG1vbnRoLCBpKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBfdGhpcy5pc1NlbGVjdGVkTW9udGgoaSkgPyBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbiByZWFjdC1kYXRlcGlja2VyX19tb250aC1vcHRpb24tLXNlbGVjdGVkX21vbnRoXCIgOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvblwiLFxuICAgICAgICAgIGtleTogbW9udGgsXG4gICAgICAgICAgb25DbGljazogX3RoaXMub25DaGFuZ2UuYmluZChfdGhpcywgaSksXG4gICAgICAgICAgXCJhcmlhLXNlbGVjdGVkXCI6IF90aGlzLmlzU2VsZWN0ZWRNb250aChpKSA/IFwidHJ1ZVwiIDogdW5kZWZpbmVkXG4gICAgICAgIH0sIF90aGlzLmlzU2VsZWN0ZWRNb250aChpKSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbi0tc2VsZWN0ZWRcIlxuICAgICAgICB9LCBcIlxcdTI3MTNcIikgOiBcIlwiLCBtb250aCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwib25DaGFuZ2VcIiwgZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMub25DaGFuZ2UobW9udGgpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVDbGlja091dHNpZGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uQ2FuY2VsKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhNb250aERyb3Bkb3duT3B0aW9ucywgX1JlYWN0JENvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoTW9udGhEcm9wZG93bk9wdGlvbnMsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd25cIlxuICAgICAgfSwgdGhpcy5yZW5kZXJPcHRpb25zKCkpO1xuICAgIH1cbiAgfV0pO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG52YXIgV3JhcHBlZE1vbnRoRHJvcGRvd25PcHRpb25zID0gb25DbGlja091dHNpZGUoTW9udGhEcm9wZG93bk9wdGlvbnMpO1xudmFyIE1vbnRoRHJvcGRvd24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gTW9udGhEcm9wZG93bigpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbnRoRHJvcGRvd24pO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIE1vbnRoRHJvcGRvd24sIFtdLmNvbmNhdChhcmdzKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInN0YXRlXCIsIHtcbiAgICAgIGRyb3Bkb3duVmlzaWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyU2VsZWN0T3B0aW9uc1wiLCBmdW5jdGlvbiAobW9udGhOYW1lcykge1xuICAgICAgcmV0dXJuIG1vbnRoTmFtZXMubWFwKGZ1bmN0aW9uIChNLCBpKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCB7XG4gICAgICAgICAga2V5OiBpLFxuICAgICAgICAgIHZhbHVlOiBpXG4gICAgICAgIH0sIE0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlclNlbGVjdE1vZGVcIiwgZnVuY3Rpb24gKG1vbnRoTmFtZXMpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCB7XG4gICAgICAgIHZhbHVlOiBfdGhpcy5wcm9wcy5tb250aCxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXNlbGVjdFwiLFxuICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5vbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIF90aGlzLnJlbmRlclNlbGVjdE9wdGlvbnMobW9udGhOYW1lcykpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJSZWFkVmlld1wiLCBmdW5jdGlvbiAodmlzaWJsZSwgbW9udGhOYW1lcykge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAga2V5OiBcInJlYWRcIixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiXG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXdcIixcbiAgICAgICAgb25DbGljazogX3RoaXMudG9nZ2xlRHJvcGRvd25cbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLWRvd24tYXJyb3dcIlxuICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXctLXNlbGVjdGVkLW1vbnRoXCJcbiAgICAgIH0sIG1vbnRoTmFtZXNbX3RoaXMucHJvcHMubW9udGhdKSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlckRyb3Bkb3duXCIsIGZ1bmN0aW9uIChtb250aE5hbWVzKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZE1vbnRoRHJvcGRvd25PcHRpb25zLCB7XG4gICAgICAgIGtleTogXCJkcm9wZG93blwiLFxuICAgICAgICBtb250aDogX3RoaXMucHJvcHMubW9udGgsXG4gICAgICAgIG1vbnRoTmFtZXM6IG1vbnRoTmFtZXMsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5vbkNoYW5nZSxcbiAgICAgICAgb25DYW5jZWw6IF90aGlzLnRvZ2dsZURyb3Bkb3duXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyU2Nyb2xsTW9kZVwiLCBmdW5jdGlvbiAobW9udGhOYW1lcykge1xuICAgICAgdmFyIGRyb3Bkb3duVmlzaWJsZSA9IF90aGlzLnN0YXRlLmRyb3Bkb3duVmlzaWJsZTtcbiAgICAgIHZhciByZXN1bHQgPSBbX3RoaXMucmVuZGVyUmVhZFZpZXcoIWRyb3Bkb3duVmlzaWJsZSwgbW9udGhOYW1lcyldO1xuICAgICAgaWYgKGRyb3Bkb3duVmlzaWJsZSkge1xuICAgICAgICByZXN1bHQudW5zaGlmdChfdGhpcy5yZW5kZXJEcm9wZG93bihtb250aE5hbWVzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvbkNoYW5nZVwiLCBmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgIF90aGlzLnRvZ2dsZURyb3Bkb3duKCk7XG4gICAgICBpZiAobW9udGggIT09IF90aGlzLnByb3BzLm1vbnRoKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKG1vbnRoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwidG9nZ2xlRHJvcGRvd25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZHJvcGRvd25WaXNpYmxlOiAhX3RoaXMuc3RhdGUuZHJvcGRvd25WaXNpYmxlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKE1vbnRoRHJvcGRvd24sIF9SZWFjdCRDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKE1vbnRoRHJvcGRvd24sIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciBtb250aE5hbWVzID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMV0ubWFwKHRoaXMucHJvcHMudXNlU2hvcnRNb250aEluRHJvcGRvd24gPyBmdW5jdGlvbiAoTSkge1xuICAgICAgICByZXR1cm4gZ2V0TW9udGhTaG9ydEluTG9jYWxlKE0sIF90aGlzMi5wcm9wcy5sb2NhbGUpO1xuICAgICAgfSA6IGZ1bmN0aW9uIChNKSB7XG4gICAgICAgIHJldHVybiBnZXRNb250aEluTG9jYWxlKE0sIF90aGlzMi5wcm9wcy5sb2NhbGUpO1xuICAgICAgfSk7XG4gICAgICB2YXIgcmVuZGVyZWREcm9wZG93bjtcbiAgICAgIHN3aXRjaCAodGhpcy5wcm9wcy5kcm9wZG93bk1vZGUpIHtcbiAgICAgICAgY2FzZSBcInNjcm9sbFwiOlxuICAgICAgICAgIHJlbmRlcmVkRHJvcGRvd24gPSB0aGlzLnJlbmRlclNjcm9sbE1vZGUobW9udGhOYW1lcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICByZW5kZXJlZERyb3Bkb3duID0gdGhpcy5yZW5kZXJTZWxlY3RNb2RlKG1vbnRoTmFtZXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLWRyb3Bkb3duLWNvbnRhaW5lciByZWFjdC1kYXRlcGlja2VyX19tb250aC1kcm9wZG93bi1jb250YWluZXItLVwiLmNvbmNhdCh0aGlzLnByb3BzLmRyb3Bkb3duTW9kZSlcbiAgICAgIH0sIHJlbmRlcmVkRHJvcGRvd24pO1xuICAgIH1cbiAgfV0pO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZU1vbnRoWWVhcnMobWluRGF0ZSwgbWF4RGF0ZSkge1xuICB2YXIgbGlzdCA9IFtdO1xuICB2YXIgY3VyckRhdGUgPSBnZXRTdGFydE9mTW9udGgobWluRGF0ZSk7XG4gIHZhciBsYXN0RGF0ZSA9IGdldFN0YXJ0T2ZNb250aChtYXhEYXRlKTtcbiAgd2hpbGUgKCFpc0FmdGVyKGN1cnJEYXRlLCBsYXN0RGF0ZSkpIHtcbiAgICBsaXN0LnB1c2gobmV3RGF0ZShjdXJyRGF0ZSkpO1xuICAgIGN1cnJEYXRlID0gYWRkTW9udGhzKGN1cnJEYXRlLCAxKTtcbiAgfVxuICByZXR1cm4gbGlzdDtcbn1cbnZhciBNb250aFllYXJEcm9wZG93bk9wdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gTW9udGhZZWFyRHJvcGRvd25PcHRpb25zKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb250aFllYXJEcm9wZG93bk9wdGlvbnMpO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBNb250aFllYXJEcm9wZG93bk9wdGlvbnMsIFtwcm9wc10pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJPcHRpb25zXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zdGF0ZS5tb250aFllYXJzTGlzdC5tYXAoZnVuY3Rpb24gKG1vbnRoWWVhcikge1xuICAgICAgICB2YXIgbW9udGhZZWFyUG9pbnQgPSBnZXRUaW1lKG1vbnRoWWVhcik7XG4gICAgICAgIHZhciBpc1NhbWVNb250aFllYXIgPSBpc1NhbWVZZWFyKF90aGlzLnByb3BzLmRhdGUsIG1vbnRoWWVhcikgJiYgaXNTYW1lTW9udGgoX3RoaXMucHJvcHMuZGF0ZSwgbW9udGhZZWFyKTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGlzU2FtZU1vbnRoWWVhciA/IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb24tLXNlbGVjdGVkX21vbnRoLXllYXJcIiA6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb25cIixcbiAgICAgICAgICBrZXk6IG1vbnRoWWVhclBvaW50LFxuICAgICAgICAgIG9uQ2xpY2s6IF90aGlzLm9uQ2hhbmdlLmJpbmQoX3RoaXMsIG1vbnRoWWVhclBvaW50KSxcbiAgICAgICAgICBcImFyaWEtc2VsZWN0ZWRcIjogaXNTYW1lTW9udGhZZWFyID8gXCJ0cnVlXCIgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgaXNTYW1lTW9udGhZZWFyID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb24tLXNlbGVjdGVkXCJcbiAgICAgICAgfSwgXCJcXHUyNzEzXCIpIDogXCJcIiwgZm9ybWF0RGF0ZShtb250aFllYXIsIF90aGlzLnByb3BzLmRhdGVGb3JtYXQsIF90aGlzLnByb3BzLmxvY2FsZSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIm9uQ2hhbmdlXCIsIGZ1bmN0aW9uIChtb250aFllYXIpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vbkNoYW5nZShtb250aFllYXIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVDbGlja091dHNpZGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucHJvcHMub25DYW5jZWwoKTtcbiAgICB9KTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1vbnRoWWVhcnNMaXN0OiBnZW5lcmF0ZU1vbnRoWWVhcnMoX3RoaXMucHJvcHMubWluRGF0ZSwgX3RoaXMucHJvcHMubWF4RGF0ZSlcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoTW9udGhZZWFyRHJvcGRvd25PcHRpb25zLCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhNb250aFllYXJEcm9wZG93bk9wdGlvbnMsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgZHJvcGRvd25DbGFzcyA9IGNsc3goe1xuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd25cIjogdHJ1ZSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duLS1zY3JvbGxhYmxlXCI6IHRoaXMucHJvcHMuc2Nyb2xsYWJsZU1vbnRoWWVhckRyb3Bkb3duXG4gICAgICB9KTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogZHJvcGRvd25DbGFzc1xuICAgICAgfSwgdGhpcy5yZW5kZXJPcHRpb25zKCkpO1xuICAgIH1cbiAgfV0pO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG52YXIgV3JhcHBlZE1vbnRoWWVhckRyb3Bkb3duT3B0aW9ucyA9IG9uQ2xpY2tPdXRzaWRlKE1vbnRoWWVhckRyb3Bkb3duT3B0aW9ucyk7XG52YXIgTW9udGhZZWFyRHJvcGRvd24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gTW9udGhZZWFyRHJvcGRvd24oKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb250aFllYXJEcm9wZG93bik7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgTW9udGhZZWFyRHJvcGRvd24sIFtdLmNvbmNhdChhcmdzKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInN0YXRlXCIsIHtcbiAgICAgIGRyb3Bkb3duVmlzaWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyU2VsZWN0T3B0aW9uc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VyckRhdGUgPSBnZXRTdGFydE9mTW9udGgoX3RoaXMucHJvcHMubWluRGF0ZSk7XG4gICAgICB2YXIgbGFzdERhdGUgPSBnZXRTdGFydE9mTW9udGgoX3RoaXMucHJvcHMubWF4RGF0ZSk7XG4gICAgICB2YXIgb3B0aW9ucyA9IFtdO1xuICAgICAgd2hpbGUgKCFpc0FmdGVyKGN1cnJEYXRlLCBsYXN0RGF0ZSkpIHtcbiAgICAgICAgdmFyIHRpbWVQb2ludCA9IGdldFRpbWUoY3VyckRhdGUpO1xuICAgICAgICBvcHRpb25zLnB1c2goIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIsIHtcbiAgICAgICAgICBrZXk6IHRpbWVQb2ludCxcbiAgICAgICAgICB2YWx1ZTogdGltZVBvaW50XG4gICAgICAgIH0sIGZvcm1hdERhdGUoY3VyckRhdGUsIF90aGlzLnByb3BzLmRhdGVGb3JtYXQsIF90aGlzLnByb3BzLmxvY2FsZSkpKTtcbiAgICAgICAgY3VyckRhdGUgPSBhZGRNb250aHMoY3VyckRhdGUsIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIm9uU2VsZWN0Q2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5vbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlclNlbGVjdE1vZGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIHtcbiAgICAgICAgdmFsdWU6IGdldFRpbWUoZ2V0U3RhcnRPZk1vbnRoKF90aGlzLnByb3BzLmRhdGUpKSxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItc2VsZWN0XCIsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5vblNlbGVjdENoYW5nZVxuICAgICAgfSwgX3RoaXMucmVuZGVyU2VsZWN0T3B0aW9ucygpKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyUmVhZFZpZXdcIiwgZnVuY3Rpb24gKHZpc2libGUpIHtcbiAgICAgIHZhciB5ZWFyTW9udGggPSBmb3JtYXREYXRlKF90aGlzLnByb3BzLmRhdGUsIF90aGlzLnByb3BzLmRhdGVGb3JtYXQsIF90aGlzLnByb3BzLmxvY2FsZSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBrZXk6IFwicmVhZFwiLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHZpc2liaWxpdHk6IHZpc2libGUgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCJcbiAgICAgICAgfSxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3XCIsXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudG9nZ2xlRHJvcGRvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3dcIlxuICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldy0tc2VsZWN0ZWQtbW9udGgteWVhclwiXG4gICAgICB9LCB5ZWFyTW9udGgpKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyRHJvcGRvd25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRNb250aFllYXJEcm9wZG93bk9wdGlvbnMsIHtcbiAgICAgICAga2V5OiBcImRyb3Bkb3duXCIsXG4gICAgICAgIGRhdGU6IF90aGlzLnByb3BzLmRhdGUsXG4gICAgICAgIGRhdGVGb3JtYXQ6IF90aGlzLnByb3BzLmRhdGVGb3JtYXQsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5vbkNoYW5nZSxcbiAgICAgICAgb25DYW5jZWw6IF90aGlzLnRvZ2dsZURyb3Bkb3duLFxuICAgICAgICBtaW5EYXRlOiBfdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiBfdGhpcy5wcm9wcy5tYXhEYXRlLFxuICAgICAgICBzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd246IF90aGlzLnByb3BzLnNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bixcbiAgICAgICAgbG9jYWxlOiBfdGhpcy5wcm9wcy5sb2NhbGVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJTY3JvbGxNb2RlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkcm9wZG93blZpc2libGUgPSBfdGhpcy5zdGF0ZS5kcm9wZG93blZpc2libGU7XG4gICAgICB2YXIgcmVzdWx0ID0gW190aGlzLnJlbmRlclJlYWRWaWV3KCFkcm9wZG93blZpc2libGUpXTtcbiAgICAgIGlmIChkcm9wZG93blZpc2libGUpIHtcbiAgICAgICAgcmVzdWx0LnVuc2hpZnQoX3RoaXMucmVuZGVyRHJvcGRvd24oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvbkNoYW5nZVwiLCBmdW5jdGlvbiAobW9udGhZZWFyUG9pbnQpIHtcbiAgICAgIF90aGlzLnRvZ2dsZURyb3Bkb3duKCk7XG4gICAgICB2YXIgY2hhbmdlZERhdGUgPSBuZXdEYXRlKHBhcnNlSW50KG1vbnRoWWVhclBvaW50KSk7XG4gICAgICBpZiAoaXNTYW1lWWVhcihfdGhpcy5wcm9wcy5kYXRlLCBjaGFuZ2VkRGF0ZSkgJiYgaXNTYW1lTW9udGgoX3RoaXMucHJvcHMuZGF0ZSwgY2hhbmdlZERhdGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKGNoYW5nZWREYXRlKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwidG9nZ2xlRHJvcGRvd25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZHJvcGRvd25WaXNpYmxlOiAhX3RoaXMuc3RhdGUuZHJvcGRvd25WaXNpYmxlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKE1vbnRoWWVhckRyb3Bkb3duLCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhNb250aFllYXJEcm9wZG93biwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciByZW5kZXJlZERyb3Bkb3duO1xuICAgICAgc3dpdGNoICh0aGlzLnByb3BzLmRyb3Bkb3duTW9kZSkge1xuICAgICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgICAgcmVuZGVyZWREcm9wZG93biA9IHRoaXMucmVuZGVyU2Nyb2xsTW9kZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgcmVuZGVyZWREcm9wZG93biA9IHRoaXMucmVuZGVyU2VsZWN0TW9kZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd24tY29udGFpbmVyIHJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd24tY29udGFpbmVyLS1cIi5jb25jYXQodGhpcy5wcm9wcy5kcm9wZG93bk1vZGUpXG4gICAgICB9LCByZW5kZXJlZERyb3Bkb3duKTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIERheSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBEYXkoKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXkpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIERheSwgW10uY29uY2F0KGFyZ3MpKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiZGF5RWxcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlQ2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLmlzRGlzYWJsZWQoKSAmJiBfdGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVNb3VzZUVudGVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5pc0Rpc2FibGVkKCkgJiYgX3RoaXMucHJvcHMub25Nb3VzZUVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VFbnRlcihldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZU9uS2V5RG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBldmVudEtleSA9IGV2ZW50LmtleTtcbiAgICAgIGlmIChldmVudEtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQua2V5ID0gXCJFbnRlclwiO1xuICAgICAgfVxuICAgICAgX3RoaXMucHJvcHMuaGFuZGxlT25LZXlEb3duKGV2ZW50KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNTYW1lRGF5XCIsIGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgcmV0dXJuIGlzU2FtZURheShfdGhpcy5wcm9wcy5kYXksIG90aGVyKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNLZXlib2FyZFNlbGVjdGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyRzZWxlY3RlZEQ7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGlzU2VsZWN0ZWREYXRlID0gX3RoaXMucHJvcHMuc2VsZWN0c011bHRpcGxlID8gKF90aGlzJHByb3BzJHNlbGVjdGVkRCA9IF90aGlzLnByb3BzLnNlbGVjdGVkRGF0ZXMpID09PSBudWxsIHx8IF90aGlzJHByb3BzJHNlbGVjdGVkRCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkc2VsZWN0ZWRELnNvbWUoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzU2FtZURheU9yV2VlayhkYXRlKTtcbiAgICAgIH0pIDogX3RoaXMuaXNTYW1lRGF5T3JXZWVrKF90aGlzLnByb3BzLnNlbGVjdGVkKTtcbiAgICAgIHJldHVybiAhaXNTZWxlY3RlZERhdGUgJiYgX3RoaXMuaXNTYW1lRGF5T3JXZWVrKF90aGlzLnByb3BzLnByZVNlbGVjdGlvbik7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzRGlzYWJsZWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGlzRGF5RGlzYWJsZWQoX3RoaXMucHJvcHMuZGF5LCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzRXhjbHVkZWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGlzRGF5RXhjbHVkZWQoX3RoaXMucHJvcHMuZGF5LCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzU3RhcnRPZldlZWtcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGlzU2FtZURheShfdGhpcy5wcm9wcy5kYXksIGdldFN0YXJ0T2ZXZWVrKF90aGlzLnByb3BzLmRheSwgX3RoaXMucHJvcHMubG9jYWxlLCBfdGhpcy5wcm9wcy5jYWxlbmRhclN0YXJ0RGF5KSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzU2FtZVdlZWtcIiwgZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuc2hvd1dlZWtQaWNrZXIgJiYgaXNTYW1lRGF5KG90aGVyLCBnZXRTdGFydE9mV2VlayhfdGhpcy5wcm9wcy5kYXksIF90aGlzLnByb3BzLmxvY2FsZSwgX3RoaXMucHJvcHMuY2FsZW5kYXJTdGFydERheSkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1NhbWVEYXlPcldlZWtcIiwgZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaXNTYW1lRGF5KG90aGVyKSB8fCBfdGhpcy5pc1NhbWVXZWVrKG90aGVyKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiZ2V0SGlnaExpZ2h0ZWRDbGFzc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHMuZGF5LFxuICAgICAgICBoaWdobGlnaHREYXRlcyA9IF90aGlzJHByb3BzLmhpZ2hsaWdodERhdGVzO1xuICAgICAgaWYgKCFoaWdobGlnaHREYXRlcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIExvb2tpbmcgZm9yIGNsYXNzTmFtZSBpbiB0aGUgTWFwIG9mIHsnZGF5IHN0cmluZywgJ2NsYXNzTmFtZSd9XG4gICAgICB2YXIgZGF5U3RyID0gZm9ybWF0RGF0ZShkYXksIFwiTU0uZGQueXl5eVwiKTtcbiAgICAgIHJldHVybiBoaWdobGlnaHREYXRlcy5nZXQoZGF5U3RyKTtcbiAgICB9KTtcbiAgICAvLyBGdW5jdGlvbiB0byByZXR1cm4gdGhlIGFycmF5IGNvbnRhaW5pbmcgY2xhc3NuYW1lIGFzc29jaWF0ZWQgdG8gdGhlIGRhdGVcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiZ2V0SG9saWRheXNDbGFzc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzMi5kYXksXG4gICAgICAgIGhvbGlkYXlzID0gX3RoaXMkcHJvcHMyLmhvbGlkYXlzO1xuICAgICAgaWYgKCFob2xpZGF5cykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgZGF5U3RyID0gZm9ybWF0RGF0ZShkYXksIFwiTU0uZGQueXl5eVwiKTtcbiAgICAgIC8vIExvb2tpbmcgZm9yIGNsYXNzTmFtZSBpbiB0aGUgTWFwIG9mIHtkYXkgc3RyaW5nOiB7Y2xhc3NOYW1lLCBob2xpZGF5TmFtZX19XG4gICAgICBpZiAoaG9saWRheXMuaGFzKGRheVN0cikpIHtcbiAgICAgICAgcmV0dXJuIFtob2xpZGF5cy5nZXQoZGF5U3RyKS5jbGFzc05hbWVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc0luUmFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICBkYXkgPSBfdGhpcyRwcm9wczMuZGF5LFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczMuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHMzLmVuZERhdGU7XG4gICAgICBpZiAoIXN0YXJ0RGF0ZSB8fCAhZW5kRGF0ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNEYXlJblJhbmdlKGRheSwgc3RhcnREYXRlLCBlbmREYXRlKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNJblNlbGVjdGluZ1JhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyRzZWxlY3Rpbmc7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzNC5kYXksXG4gICAgICAgIHNlbGVjdHNTdGFydCA9IF90aGlzJHByb3BzNC5zZWxlY3RzU3RhcnQsXG4gICAgICAgIHNlbGVjdHNFbmQgPSBfdGhpcyRwcm9wczQuc2VsZWN0c0VuZCxcbiAgICAgICAgc2VsZWN0c1JhbmdlID0gX3RoaXMkcHJvcHM0LnNlbGVjdHNSYW5nZSxcbiAgICAgICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2UgPSBfdGhpcyRwcm9wczQuc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2UsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzNC5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczQuZW5kRGF0ZTtcbiAgICAgIHZhciBzZWxlY3RpbmdEYXRlID0gKF90aGlzJHByb3BzJHNlbGVjdGluZyA9IF90aGlzLnByb3BzLnNlbGVjdGluZ0RhdGUpICE9PSBudWxsICYmIF90aGlzJHByb3BzJHNlbGVjdGluZyAhPT0gdm9pZCAwID8gX3RoaXMkcHJvcHMkc2VsZWN0aW5nIDogX3RoaXMucHJvcHMucHJlU2VsZWN0aW9uO1xuICAgICAgaWYgKCEoc2VsZWN0c1N0YXJ0IHx8IHNlbGVjdHNFbmQgfHwgc2VsZWN0c1JhbmdlKSB8fCAhc2VsZWN0aW5nRGF0ZSB8fCAhc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2UgJiYgX3RoaXMuaXNEaXNhYmxlZCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RzU3RhcnQgJiYgZW5kRGF0ZSAmJiAoaXNCZWZvcmUoc2VsZWN0aW5nRGF0ZSwgZW5kRGF0ZSkgfHwgaXNFcXVhbChzZWxlY3RpbmdEYXRlLCBlbmREYXRlKSkpIHtcbiAgICAgICAgcmV0dXJuIGlzRGF5SW5SYW5nZShkYXksIHNlbGVjdGluZ0RhdGUsIGVuZERhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdHNFbmQgJiYgc3RhcnREYXRlICYmIChpc0FmdGVyKHNlbGVjdGluZ0RhdGUsIHN0YXJ0RGF0ZSkgfHwgaXNFcXVhbChzZWxlY3RpbmdEYXRlLCBzdGFydERhdGUpKSkge1xuICAgICAgICByZXR1cm4gaXNEYXlJblJhbmdlKGRheSwgc3RhcnREYXRlLCBzZWxlY3RpbmdEYXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RzUmFuZ2UgJiYgc3RhcnREYXRlICYmICFlbmREYXRlICYmIChpc0FmdGVyKHNlbGVjdGluZ0RhdGUsIHN0YXJ0RGF0ZSkgfHwgaXNFcXVhbChzZWxlY3RpbmdEYXRlLCBzdGFydERhdGUpKSkge1xuICAgICAgICByZXR1cm4gaXNEYXlJblJhbmdlKGRheSwgc3RhcnREYXRlLCBzZWxlY3RpbmdEYXRlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNTZWxlY3RpbmdSYW5nZVN0YXJ0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyRzZWxlY3RpbmcyO1xuICAgICAgaWYgKCFfdGhpcy5pc0luU2VsZWN0aW5nUmFuZ2UoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzNS5kYXksXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzNS5zdGFydERhdGUsXG4gICAgICAgIHNlbGVjdHNTdGFydCA9IF90aGlzJHByb3BzNS5zZWxlY3RzU3RhcnQ7XG4gICAgICB2YXIgc2VsZWN0aW5nRGF0ZSA9IChfdGhpcyRwcm9wcyRzZWxlY3RpbmcyID0gX3RoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZSkgIT09IG51bGwgJiYgX3RoaXMkcHJvcHMkc2VsZWN0aW5nMiAhPT0gdm9pZCAwID8gX3RoaXMkcHJvcHMkc2VsZWN0aW5nMiA6IF90aGlzLnByb3BzLnByZVNlbGVjdGlvbjtcbiAgICAgIGlmIChzZWxlY3RzU3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIGlzU2FtZURheShkYXksIHNlbGVjdGluZ0RhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzU2FtZURheShkYXksIHN0YXJ0RGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzU2VsZWN0aW5nUmFuZ2VFbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzJHNlbGVjdGluZzM7XG4gICAgICBpZiAoIV90aGlzLmlzSW5TZWxlY3RpbmdSYW5nZSgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHM2LmRheSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzNi5lbmREYXRlLFxuICAgICAgICBzZWxlY3RzRW5kID0gX3RoaXMkcHJvcHM2LnNlbGVjdHNFbmQsXG4gICAgICAgIHNlbGVjdHNSYW5nZSA9IF90aGlzJHByb3BzNi5zZWxlY3RzUmFuZ2U7XG4gICAgICB2YXIgc2VsZWN0aW5nRGF0ZSA9IChfdGhpcyRwcm9wcyRzZWxlY3RpbmczID0gX3RoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZSkgIT09IG51bGwgJiYgX3RoaXMkcHJvcHMkc2VsZWN0aW5nMyAhPT0gdm9pZCAwID8gX3RoaXMkcHJvcHMkc2VsZWN0aW5nMyA6IF90aGlzLnByb3BzLnByZVNlbGVjdGlvbjtcbiAgICAgIGlmIChzZWxlY3RzRW5kIHx8IHNlbGVjdHNSYW5nZSkge1xuICAgICAgICByZXR1cm4gaXNTYW1lRGF5KGRheSwgc2VsZWN0aW5nRGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNTYW1lRGF5KGRheSwgZW5kRGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzUmFuZ2VTdGFydFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzNy5kYXksXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzNy5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczcuZW5kRGF0ZTtcbiAgICAgIGlmICghc3RhcnREYXRlIHx8ICFlbmREYXRlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1NhbWVEYXkoc3RhcnREYXRlLCBkYXkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1JhbmdlRW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczggPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHM4LmRheSxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHM4LnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzOC5lbmREYXRlO1xuICAgICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU2FtZURheShlbmREYXRlLCBkYXkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1dlZWtlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHdlZWtkYXkgPSBnZXREYXkoX3RoaXMucHJvcHMuZGF5KTtcbiAgICAgIHJldHVybiB3ZWVrZGF5ID09PSAwIHx8IHdlZWtkYXkgPT09IDY7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzQWZ0ZXJNb250aFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMubW9udGggIT09IHVuZGVmaW5lZCAmJiAoX3RoaXMucHJvcHMubW9udGggKyAxKSAlIDEyID09PSBnZXRNb250aChfdGhpcy5wcm9wcy5kYXkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc0JlZm9yZU1vbnRoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5tb250aCAhPT0gdW5kZWZpbmVkICYmIChnZXRNb250aChfdGhpcy5wcm9wcy5kYXkpICsgMSkgJSAxMiA9PT0gX3RoaXMucHJvcHMubW9udGg7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzQ3VycmVudERheVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaXNTYW1lRGF5KG5ld0RhdGUoKSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzU2VsZWN0ZWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNlbGVjdHNNdWx0aXBsZSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMkc2VsZWN0ZWREMjtcbiAgICAgICAgcmV0dXJuIChfdGhpcyRwcm9wcyRzZWxlY3RlZEQyID0gX3RoaXMucHJvcHMuc2VsZWN0ZWREYXRlcykgPT09IG51bGwgfHwgX3RoaXMkcHJvcHMkc2VsZWN0ZWREMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkc2VsZWN0ZWREMi5zb21lKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmlzU2FtZURheU9yV2VlayhkYXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXMuaXNTYW1lRGF5T3JXZWVrKF90aGlzLnByb3BzLnNlbGVjdGVkKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiZ2V0Q2xhc3NOYW1lc1wiLCBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgdmFyIGRheUNsYXNzTmFtZSA9IF90aGlzLnByb3BzLmRheUNsYXNzTmFtZSA/IF90aGlzLnByb3BzLmRheUNsYXNzTmFtZShkYXRlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBjbHN4KFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5XCIsIGRheUNsYXNzTmFtZSwgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLVwiICsgZ2V0RGF5T2ZXZWVrQ29kZShfdGhpcy5wcm9wcy5kYXkpLCB7XG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1kaXNhYmxlZFwiOiBfdGhpcy5pc0Rpc2FibGVkKCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1leGNsdWRlZFwiOiBfdGhpcy5pc0V4Y2x1ZGVkKCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1zZWxlY3RlZFwiOiBfdGhpcy5pc1NlbGVjdGVkKCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1rZXlib2FyZC1zZWxlY3RlZFwiOiBfdGhpcy5pc0tleWJvYXJkU2VsZWN0ZWQoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLXJhbmdlLXN0YXJ0XCI6IF90aGlzLmlzUmFuZ2VTdGFydCgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tcmFuZ2UtZW5kXCI6IF90aGlzLmlzUmFuZ2VFbmQoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXJhbmdlXCI6IF90aGlzLmlzSW5SYW5nZSgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tc2VsZWN0aW5nLXJhbmdlXCI6IF90aGlzLmlzSW5TZWxlY3RpbmdSYW5nZSgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tc2VsZWN0aW5nLXJhbmdlLXN0YXJ0XCI6IF90aGlzLmlzU2VsZWN0aW5nUmFuZ2VTdGFydCgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tc2VsZWN0aW5nLXJhbmdlLWVuZFwiOiBfdGhpcy5pc1NlbGVjdGluZ1JhbmdlRW5kKCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS10b2RheVwiOiBfdGhpcy5pc0N1cnJlbnREYXkoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLXdlZWtlbmRcIjogX3RoaXMuaXNXZWVrZW5kKCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1vdXRzaWRlLW1vbnRoXCI6IF90aGlzLmlzQWZ0ZXJNb250aCgpIHx8IF90aGlzLmlzQmVmb3JlTW9udGgoKVxuICAgICAgfSwgX3RoaXMuZ2V0SGlnaExpZ2h0ZWRDbGFzcyhcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWRcIiksIF90aGlzLmdldEhvbGlkYXlzQ2xhc3MoKSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImdldEFyaWFMYWJlbFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM5ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzOS5kYXksXG4gICAgICAgIF90aGlzJHByb3BzOSRhcmlhTGFiZSA9IF90aGlzJHByb3BzOS5hcmlhTGFiZWxQcmVmaXhXaGVuRW5hYmxlZCxcbiAgICAgICAgYXJpYUxhYmVsUHJlZml4V2hlbkVuYWJsZWQgPSBfdGhpcyRwcm9wczkkYXJpYUxhYmUgPT09IHZvaWQgMCA/IFwiQ2hvb3NlXCIgOiBfdGhpcyRwcm9wczkkYXJpYUxhYmUsXG4gICAgICAgIF90aGlzJHByb3BzOSRhcmlhTGFiZTIgPSBfdGhpcyRwcm9wczkuYXJpYUxhYmVsUHJlZml4V2hlbkRpc2FibGVkLFxuICAgICAgICBhcmlhTGFiZWxQcmVmaXhXaGVuRGlzYWJsZWQgPSBfdGhpcyRwcm9wczkkYXJpYUxhYmUyID09PSB2b2lkIDAgPyBcIk5vdCBhdmFpbGFibGVcIiA6IF90aGlzJHByb3BzOSRhcmlhTGFiZTI7XG4gICAgICB2YXIgcHJlZml4ID0gX3RoaXMuaXNEaXNhYmxlZCgpIHx8IF90aGlzLmlzRXhjbHVkZWQoKSA/IGFyaWFMYWJlbFByZWZpeFdoZW5EaXNhYmxlZCA6IGFyaWFMYWJlbFByZWZpeFdoZW5FbmFibGVkO1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIpLmNvbmNhdChmb3JtYXREYXRlKGRheSwgXCJQUFBQXCIsIF90aGlzLnByb3BzLmxvY2FsZSkpO1xuICAgIH0pO1xuICAgIC8vIEEgZnVuY3Rpb24gdG8gcmV0dXJuIHRoZSBob2xpZGF5J3MgbmFtZSBhcyB0aXRsZSdzIGNvbnRlbnRcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiZ2V0VGl0bGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTAgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHMxMC5kYXksXG4gICAgICAgIF90aGlzJHByb3BzMTAkaG9saWRheSA9IF90aGlzJHByb3BzMTAuaG9saWRheXMsXG4gICAgICAgIGhvbGlkYXlzID0gX3RoaXMkcHJvcHMxMCRob2xpZGF5ID09PSB2b2lkIDAgPyBuZXcgTWFwKCkgOiBfdGhpcyRwcm9wczEwJGhvbGlkYXksXG4gICAgICAgIGV4Y2x1ZGVEYXRlcyA9IF90aGlzJHByb3BzMTAuZXhjbHVkZURhdGVzO1xuICAgICAgdmFyIGNvbXBhcmVEdCA9IGZvcm1hdERhdGUoZGF5LCBcIk1NLmRkLnl5eXlcIik7XG4gICAgICB2YXIgdGl0bGVzID0gW107XG4gICAgICBpZiAoaG9saWRheXMuaGFzKGNvbXBhcmVEdCkpIHtcbiAgICAgICAgdGl0bGVzLnB1c2guYXBwbHkodGl0bGVzLCBfdG9Db25zdW1hYmxlQXJyYXkoaG9saWRheXMuZ2V0KGNvbXBhcmVEdCkuaG9saWRheU5hbWVzKSk7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMuaXNFeGNsdWRlZCgpKSB7XG4gICAgICAgIHRpdGxlcy5wdXNoKGV4Y2x1ZGVEYXRlcyA9PT0gbnVsbCB8fCBleGNsdWRlRGF0ZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4Y2x1ZGVEYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGV4Y2x1ZGVEYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzU2FtZURheShleGNsdWRlRGF0ZS5kYXRlID8gZXhjbHVkZURhdGUuZGF0ZSA6IGV4Y2x1ZGVEYXRlLCBkYXkpO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGV4Y2x1ZGVEYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGV4Y2x1ZGVEYXRlLm1lc3NhZ2U7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aXRsZXMuam9pbihcIiwgXCIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXRUYWJJbmRleFwiLCBmdW5jdGlvbiAoc2VsZWN0ZWQsIHByZVNlbGVjdGlvbikge1xuICAgICAgdmFyIHNlbGVjdGVkRGF5ID0gc2VsZWN0ZWQgfHwgX3RoaXMucHJvcHMuc2VsZWN0ZWQ7XG4gICAgICB2YXIgcHJlU2VsZWN0aW9uRGF5ID0gcHJlU2VsZWN0aW9uIHx8IF90aGlzLnByb3BzLnByZVNlbGVjdGlvbjtcbiAgICAgIHZhciB0YWJJbmRleCA9ICEoX3RoaXMucHJvcHMuc2hvd1dlZWtQaWNrZXIgJiYgKF90aGlzLnByb3BzLnNob3dXZWVrTnVtYmVyIHx8ICFfdGhpcy5pc1N0YXJ0T2ZXZWVrKCkpKSAmJiAoX3RoaXMuaXNLZXlib2FyZFNlbGVjdGVkKCkgfHwgX3RoaXMuaXNTYW1lRGF5KHNlbGVjdGVkRGF5KSAmJiBpc1NhbWVEYXkocHJlU2VsZWN0aW9uRGF5LCBzZWxlY3RlZERheSkpID8gMCA6IC0xO1xuICAgICAgcmV0dXJuIHRhYkluZGV4O1xuICAgIH0pO1xuICAgIC8vIHZhcmlvdXMgY2FzZXMgd2hlbiB3ZSBuZWVkIHRvIGFwcGx5IGZvY3VzIHRvIHRoZSBwcmVzZWxlY3RlZCBkYXlcbiAgICAvLyBmb2N1cyB0aGUgZGF5IG9uIG1vdW50L3VwZGF0ZSBzbyB0aGF0IGtleWJvYXJkIG5hdmlnYXRpb24gd29ya3Mgd2hpbGUgY3ljbGluZyB0aHJvdWdoIG1vbnRocyB3aXRoIHVwIG9yIGRvd24ga2V5cyAobm90IGZvciBwcmV2IGFuZCBuZXh0IG1vbnRoIGJ1dHRvbnMpXG4gICAgLy8gcHJldmVudCBmb2N1cyBmb3IgdGhlc2UgYWN0aXZlRWxlbWVudCBjYXNlcyBzbyB3ZSBkb24ndCBwdWxsIGZvY3VzIGZyb20gdGhlIGlucHV0IGFzIHRoZSBjYWxlbmRhciBvcGVuc1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVGb2N1c0RheVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkZGF5RWwkY3VycmVudDtcbiAgICAgIHZhciBwcmV2UHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIHNob3VsZEZvY3VzRGF5ID0gZmFsc2U7XG4gICAgICAvLyBvbmx5IGRvIHRoaXMgd2hpbGUgdGhlIGlucHV0IGlzbid0IGZvY3VzZWRcbiAgICAgIC8vIG90aGVyd2lzZSwgdHlwaW5nL2JhY2tzcGFjaW5nIHRoZSBkYXRlIG1hbnVhbGx5IG1heSBzdGVhbCBmb2N1cyBhd2F5IGZyb20gdGhlIGlucHV0XG4gICAgICBpZiAoX3RoaXMuZ2V0VGFiSW5kZXgoKSA9PT0gMCAmJiAhcHJldlByb3BzLmlzSW5wdXRGb2N1c2VkICYmIF90aGlzLmlzU2FtZURheShfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pKSB7XG4gICAgICAgIC8vIHRoZXJlIGlzIGN1cnJlbnRseSBubyBhY3RpdmVFbGVtZW50IGFuZCBub3QgaW5saW5lXG4gICAgICAgIGlmICghZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgc2hvdWxkRm9jdXNEYXkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlubGluZSB2ZXJzaW9uOlxuICAgICAgICAvLyBkbyBub3QgZm9jdXMgb24gaW5pdGlhbCByZW5kZXIgdG8gcHJldmVudCBhdXRvRm9jdXMgaXNzdWVcbiAgICAgICAgLy8gZm9jdXMgYWZ0ZXIgbW9udGggaGFzIGNoYW5nZWQgdmlhIGtleWJvYXJkXG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5pbmxpbmUgJiYgIV90aGlzLnByb3BzLnNob3VsZEZvY3VzRGF5SW5saW5lKSB7XG4gICAgICAgICAgc2hvdWxkRm9jdXNEYXkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGUgYWN0aXZlRWxlbWVudCBpcyBpbiB0aGUgY29udGFpbmVyLCBhbmQgaXQgaXMgYW5vdGhlciBpbnN0YW5jZSBvZiBEYXlcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmNvbnRhaW5lclJlZiAmJiBfdGhpcy5wcm9wcy5jb250YWluZXJSZWYuY3VycmVudCAmJiBfdGhpcy5wcm9wcy5jb250YWluZXJSZWYuY3VycmVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInJlYWN0LWRhdGVwaWNrZXJfX2RheVwiKSkge1xuICAgICAgICAgIHNob3VsZEZvY3VzRGF5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvL2RheSBpcyBvbmUgb2YgdGhlIG5vbiByZW5kZXJlZCBkdXBsaWNhdGUgZGF5c1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMubW9udGhTaG93c0R1cGxpY2F0ZURheXNFbmQgJiYgX3RoaXMuaXNBZnRlck1vbnRoKCkpIHtcbiAgICAgICAgICBzaG91bGRGb2N1c0RheSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5tb250aFNob3dzRHVwbGljYXRlRGF5c1N0YXJ0ICYmIF90aGlzLmlzQmVmb3JlTW9udGgoKSkge1xuICAgICAgICAgIHNob3VsZEZvY3VzRGF5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNob3VsZEZvY3VzRGF5ICYmICgoX3RoaXMkZGF5RWwkY3VycmVudCA9IF90aGlzLmRheUVsLmN1cnJlbnQpID09PSBudWxsIHx8IF90aGlzJGRheUVsJGN1cnJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGRheUVsJGN1cnJlbnQuZm9jdXMoe1xuICAgICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlckRheUNvbnRlbnRzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5tb250aFNob3dzRHVwbGljYXRlRGF5c0VuZCAmJiBfdGhpcy5pc0FmdGVyTW9udGgoKSkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubW9udGhTaG93c0R1cGxpY2F0ZURheXNTdGFydCAmJiBfdGhpcy5pc0JlZm9yZU1vbnRoKCkpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLnJlbmRlckRheUNvbnRlbnRzID8gX3RoaXMucHJvcHMucmVuZGVyRGF5Q29udGVudHMoZ2V0RGF0ZShfdGhpcy5wcm9wcy5kYXkpLCBfdGhpcy5wcm9wcy5kYXkpIDogZ2V0RGF0ZShfdGhpcy5wcm9wcy5kYXkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgcmVmOiBfdGhpcy5kYXlFbCxcbiAgICAgICAgY2xhc3NOYW1lOiBfdGhpcy5nZXRDbGFzc05hbWVzKF90aGlzLnByb3BzLmRheSksXG4gICAgICAgIG9uS2V5RG93bjogX3RoaXMuaGFuZGxlT25LZXlEb3duLFxuICAgICAgICBvbkNsaWNrOiBfdGhpcy5oYW5kbGVDbGljayxcbiAgICAgICAgb25Nb3VzZUVudGVyOiAhX3RoaXMucHJvcHMudXNlUG9pbnRlckV2ZW50ID8gX3RoaXMuaGFuZGxlTW91c2VFbnRlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgb25Qb2ludGVyRW50ZXI6IF90aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudCA/IF90aGlzLmhhbmRsZU1vdXNlRW50ZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIHRhYkluZGV4OiBfdGhpcy5nZXRUYWJJbmRleCgpLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogX3RoaXMuZ2V0QXJpYUxhYmVsKCksXG4gICAgICAgIHJvbGU6IFwib3B0aW9uXCIsXG4gICAgICAgIHRpdGxlOiBfdGhpcy5nZXRUaXRsZSgpLFxuICAgICAgICBcImFyaWEtZGlzYWJsZWRcIjogX3RoaXMuaXNEaXNhYmxlZCgpLFxuICAgICAgICBcImFyaWEtY3VycmVudFwiOiBfdGhpcy5pc0N1cnJlbnREYXkoKSA/IFwiZGF0ZVwiIDogdW5kZWZpbmVkLFxuICAgICAgICBcImFyaWEtc2VsZWN0ZWRcIjogX3RoaXMuaXNTZWxlY3RlZCgpIHx8IF90aGlzLmlzSW5SYW5nZSgpXG4gICAgICB9LCBfdGhpcy5yZW5kZXJEYXlDb250ZW50cygpLCBfdGhpcy5nZXRUaXRsZSgpICE9PSBcIlwiICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJvdmVybGF5XCJcbiAgICAgIH0sIF90aGlzLmdldFRpdGxlKCkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKERheSwgX1JlYWN0JENvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRGF5LCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuaGFuZGxlRm9jdXNEYXkoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHRoaXMuaGFuZGxlRm9jdXNEYXkocHJldlByb3BzKTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIFdlZWtOdW1iZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gV2Vla051bWJlcigpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlZWtOdW1iZXIpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIFdlZWtOdW1iZXIsIFtdLmNvbmNhdChhcmdzKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIndlZWtOdW1iZXJFbFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlUmVmKCkpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVDbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVPbktleURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgZXZlbnRLZXkgPSBldmVudC5rZXk7XG4gICAgICBpZiAoZXZlbnRLZXkgPT09IFwiIFwiKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LmtleSA9IFwiRW50ZXJcIjtcbiAgICAgIH1cbiAgICAgIF90aGlzLnByb3BzLmhhbmRsZU9uS2V5RG93bihldmVudCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzS2V5Ym9hcmRTZWxlY3RlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gIV90aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uICYmICFpc1NhbWVEYXkoX3RoaXMucHJvcHMuZGF0ZSwgX3RoaXMucHJvcHMuc2VsZWN0ZWQpICYmIGlzU2FtZURheShfdGhpcy5wcm9wcy5kYXRlLCBfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXRUYWJJbmRleFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuc2hvd1dlZWtQaWNrZXIgJiYgX3RoaXMucHJvcHMuc2hvd1dlZWtOdW1iZXIgJiYgKF90aGlzLmlzS2V5Ym9hcmRTZWxlY3RlZCgpIHx8IGlzU2FtZURheShfdGhpcy5wcm9wcy5kYXRlLCBfdGhpcy5wcm9wcy5zZWxlY3RlZCkgJiYgaXNTYW1lRGF5KF90aGlzLnByb3BzLnByZVNlbGVjdGlvbiwgX3RoaXMucHJvcHMuc2VsZWN0ZWQpKSA/IDAgOiAtMTtcbiAgICB9KTtcbiAgICAvLyB2YXJpb3VzIGNhc2VzIHdoZW4gd2UgbmVlZCB0byBhcHBseSBmb2N1cyB0byB0aGUgcHJlc2VsZWN0ZWQgd2Vlay1udW1iZXJcbiAgICAvLyBmb2N1cyB0aGUgd2Vlay1udW1iZXIgb24gbW91bnQvdXBkYXRlIHNvIHRoYXQga2V5Ym9hcmQgbmF2aWdhdGlvbiB3b3JrcyB3aGlsZSBjeWNsaW5nIHRocm91Z2ggbW9udGhzIHdpdGggdXAgb3IgZG93biBrZXlzIChub3QgZm9yIHByZXYgYW5kIG5leHQgbW9udGggYnV0dG9ucylcbiAgICAvLyBwcmV2ZW50IGZvY3VzIGZvciB0aGVzZSBhY3RpdmVFbGVtZW50IGNhc2VzIHNvIHdlIGRvbid0IHB1bGwgZm9jdXMgZnJvbSB0aGUgaW5wdXQgYXMgdGhlIGNhbGVuZGFyIG9wZW5zXG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZUZvY3VzV2Vla051bWJlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJldlByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBzaG91bGRGb2N1c1dlZWtOdW1iZXIgPSBmYWxzZTtcbiAgICAgIC8vIG9ubHkgZG8gdGhpcyB3aGlsZSB0aGUgaW5wdXQgaXNuJ3QgZm9jdXNlZFxuICAgICAgLy8gb3RoZXJ3aXNlLCB0eXBpbmcvYmFja3NwYWNpbmcgdGhlIGRhdGUgbWFudWFsbHkgbWF5IHN0ZWFsIGZvY3VzIGF3YXkgZnJvbSB0aGUgaW5wdXRcbiAgICAgIGlmIChfdGhpcy5nZXRUYWJJbmRleCgpID09PSAwICYmICFwcmV2UHJvcHMuaXNJbnB1dEZvY3VzZWQgJiYgaXNTYW1lRGF5KF90aGlzLnByb3BzLmRhdGUsIF90aGlzLnByb3BzLnByZVNlbGVjdGlvbikpIHtcbiAgICAgICAgLy8gdGhlcmUgaXMgY3VycmVudGx5IG5vIGFjdGl2ZUVsZW1lbnQgYW5kIG5vdCBpbmxpbmVcbiAgICAgICAgaWYgKCFkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICBzaG91bGRGb2N1c1dlZWtOdW1iZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlubGluZSB2ZXJzaW9uOlxuICAgICAgICAvLyBkbyBub3QgZm9jdXMgb24gaW5pdGlhbCByZW5kZXIgdG8gcHJldmVudCBhdXRvRm9jdXMgaXNzdWVcbiAgICAgICAgLy8gZm9jdXMgYWZ0ZXIgbW9udGggaGFzIGNoYW5nZWQgdmlhIGtleWJvYXJkXG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5pbmxpbmUgJiYgIV90aGlzLnByb3BzLnNob3VsZEZvY3VzRGF5SW5saW5lKSB7XG4gICAgICAgICAgc2hvdWxkRm9jdXNXZWVrTnVtYmVyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlIGFjdGl2ZUVsZW1lbnQgaXMgaW4gdGhlIGNvbnRhaW5lciwgYW5kIGl0IGlzIGFub3RoZXIgaW5zdGFuY2Ugb2YgV2Vla051bWJlclxuICAgICAgICBpZiAoX3RoaXMucHJvcHMuY29udGFpbmVyUmVmICYmIF90aGlzLnByb3BzLmNvbnRhaW5lclJlZi5jdXJyZW50ICYmIF90aGlzLnByb3BzLmNvbnRhaW5lclJlZi5jdXJyZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlclwiKSkge1xuICAgICAgICAgIHNob3VsZEZvY3VzV2Vla051bWJlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNob3VsZEZvY3VzV2Vla051bWJlciAmJiBfdGhpcy53ZWVrTnVtYmVyRWwuY3VycmVudCAmJiBfdGhpcy53ZWVrTnVtYmVyRWwuY3VycmVudC5mb2N1cyh7XG4gICAgICAgIHByZXZlbnRTY3JvbGw6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoV2Vla051bWJlciwgX1JlYWN0JENvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoV2Vla051bWJlciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmhhbmRsZUZvY3VzV2Vla051bWJlcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdGhpcy5oYW5kbGVGb2N1c1dlZWtOdW1iZXIocHJldlByb3BzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHdlZWtOdW1iZXIgPSBfdGhpcyRwcm9wcy53ZWVrTnVtYmVyLFxuICAgICAgICBfdGhpcyRwcm9wcyRhcmlhTGFiZWwgPSBfdGhpcyRwcm9wcy5hcmlhTGFiZWxQcmVmaXgsXG4gICAgICAgIGFyaWFMYWJlbFByZWZpeCA9IF90aGlzJHByb3BzJGFyaWFMYWJlbCA9PT0gdm9pZCAwID8gXCJ3ZWVrIFwiIDogX3RoaXMkcHJvcHMkYXJpYUxhYmVsLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljaztcbiAgICAgIHZhciB3ZWVrTnVtYmVyQ2xhc3NlcyA9IHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlclwiOiB0cnVlLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyLS1jbGlja2FibGVcIjogISFvbkNsaWNrLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyLS1zZWxlY3RlZFwiOiAhIW9uQ2xpY2sgJiYgaXNTYW1lRGF5KHRoaXMucHJvcHMuZGF0ZSwgdGhpcy5wcm9wcy5zZWxlY3RlZCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay1udW1iZXItLWtleWJvYXJkLXNlbGVjdGVkXCI6IHRoaXMuaXNLZXlib2FyZFNlbGVjdGVkKClcbiAgICAgIH07XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICByZWY6IHRoaXMud2Vla051bWJlckVsLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3god2Vla051bWJlckNsYXNzZXMpLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogXCJcIi5jb25jYXQoYXJpYUxhYmVsUHJlZml4LCBcIiBcIikuY29uY2F0KHRoaXMucHJvcHMud2Vla051bWJlciksXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVPbktleURvd24sXG4gICAgICAgIHRhYkluZGV4OiB0aGlzLmdldFRhYkluZGV4KClcbiAgICAgIH0sIHdlZWtOdW1iZXIpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImRlZmF1bHRQcm9wc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYXJpYUxhYmVsUHJlZml4OiBcIndlZWsgXCJcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbnZhciBXZWVrID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFdlZWsoKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWVrKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBXZWVrLCBbXS5jb25jYXQoYXJncykpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVEYXlDbGlja1wiLCBmdW5jdGlvbiAoZGF5LCBldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRGF5Q2xpY2spIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25EYXlDbGljayhkYXksIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlRGF5TW91c2VFbnRlclwiLCBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25EYXlNb3VzZUVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRGF5TW91c2VFbnRlcihkYXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVXZWVrQ2xpY2tcIiwgZnVuY3Rpb24gKGRheSwgd2Vla051bWJlciwgZXZlbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgX3RoaXMucHJvcHMub25XZWVrU2VsZWN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25XZWVrU2VsZWN0KGRheSwgd2Vla051bWJlciwgZXZlbnQpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dXZWVrUGlja2VyKSB7XG4gICAgICAgIF90aGlzLmhhbmRsZURheUNsaWNrKGRheSwgZXZlbnQpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3QpIHtcbiAgICAgICAgX3RoaXMucHJvcHMuc2V0T3BlbihmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImZvcm1hdFdlZWtOdW1iZXJcIiwgZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5mb3JtYXRXZWVrTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5mb3JtYXRXZWVrTnVtYmVyKGRhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdldFdlZWsoZGF0ZSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlckRheXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXJ0T2ZXZWVrID0gX3RoaXMuc3RhcnRPZldlZWsoKTtcbiAgICAgIHZhciBkYXlzID0gW107XG4gICAgICB2YXIgd2Vla051bWJlciA9IF90aGlzLmZvcm1hdFdlZWtOdW1iZXIoc3RhcnRPZldlZWspO1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dXZWVrTnVtYmVyKSB7XG4gICAgICAgIHZhciBvbkNsaWNrQWN0aW9uID0gX3RoaXMucHJvcHMub25XZWVrU2VsZWN0IHx8IF90aGlzLnByb3BzLnNob3dXZWVrUGlja2VyID8gX3RoaXMuaGFuZGxlV2Vla0NsaWNrLmJpbmQoX3RoaXMsIHN0YXJ0T2ZXZWVrLCB3ZWVrTnVtYmVyKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgZGF5cy5wdXNoKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXZWVrTnVtYmVyLCB7XG4gICAgICAgICAga2V5OiBcIldcIixcbiAgICAgICAgICB3ZWVrTnVtYmVyOiB3ZWVrTnVtYmVyLFxuICAgICAgICAgIGRhdGU6IHN0YXJ0T2ZXZWVrLFxuICAgICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tBY3Rpb24sXG4gICAgICAgICAgc2VsZWN0ZWQ6IF90aGlzLnByb3BzLnNlbGVjdGVkLFxuICAgICAgICAgIHByZVNlbGVjdGlvbjogX3RoaXMucHJvcHMucHJlU2VsZWN0aW9uLFxuICAgICAgICAgIGFyaWFMYWJlbFByZWZpeDogX3RoaXMucHJvcHMuYXJpYUxhYmVsUHJlZml4LFxuICAgICAgICAgIHNob3dXZWVrUGlja2VyOiBfdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlcixcbiAgICAgICAgICBzaG93V2Vla051bWJlcjogX3RoaXMucHJvcHMuc2hvd1dlZWtOdW1iZXIsXG4gICAgICAgICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb246IF90aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uLFxuICAgICAgICAgIGhhbmRsZU9uS2V5RG93bjogX3RoaXMucHJvcHMuaGFuZGxlT25LZXlEb3duLFxuICAgICAgICAgIGlzSW5wdXRGb2N1c2VkOiBfdGhpcy5wcm9wcy5pc0lucHV0Rm9jdXNlZCxcbiAgICAgICAgICBjb250YWluZXJSZWY6IF90aGlzLnByb3BzLmNvbnRhaW5lclJlZlxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF5cy5jb25jYXQoWzAsIDEsIDIsIDMsIDQsIDUsIDZdLm1hcChmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgIHZhciBkYXkgPSBhZGREYXlzKHN0YXJ0T2ZXZWVrLCBvZmZzZXQpO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF5LCB7XG4gICAgICAgICAgYXJpYUxhYmVsUHJlZml4V2hlbkVuYWJsZWQ6IF90aGlzLnByb3BzLmNob29zZURheUFyaWFMYWJlbFByZWZpeCxcbiAgICAgICAgICBhcmlhTGFiZWxQcmVmaXhXaGVuRGlzYWJsZWQ6IF90aGlzLnByb3BzLmRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4LFxuICAgICAgICAgIGtleTogZGF5LnZhbHVlT2YoKSxcbiAgICAgICAgICBkYXk6IGRheSxcbiAgICAgICAgICBtb250aDogX3RoaXMucHJvcHMubW9udGgsXG4gICAgICAgICAgb25DbGljazogX3RoaXMuaGFuZGxlRGF5Q2xpY2suYmluZChfdGhpcywgZGF5KSxcbiAgICAgICAgICB1c2VQb2ludGVyRXZlbnQ6IF90aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudCxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IF90aGlzLmhhbmRsZURheU1vdXNlRW50ZXIuYmluZChfdGhpcywgZGF5KSxcbiAgICAgICAgICBtaW5EYXRlOiBfdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICAgIG1heERhdGU6IF90aGlzLnByb3BzLm1heERhdGUsXG4gICAgICAgICAgY2FsZW5kYXJTdGFydERheTogX3RoaXMucHJvcHMuY2FsZW5kYXJTdGFydERheSxcbiAgICAgICAgICBleGNsdWRlRGF0ZXM6IF90aGlzLnByb3BzLmV4Y2x1ZGVEYXRlcyxcbiAgICAgICAgICBleGNsdWRlRGF0ZUludGVydmFsczogX3RoaXMucHJvcHMuZXhjbHVkZURhdGVJbnRlcnZhbHMsXG4gICAgICAgICAgaW5jbHVkZURhdGVzOiBfdGhpcy5wcm9wcy5pbmNsdWRlRGF0ZXMsXG4gICAgICAgICAgaW5jbHVkZURhdGVJbnRlcnZhbHM6IF90aGlzLnByb3BzLmluY2x1ZGVEYXRlSW50ZXJ2YWxzLFxuICAgICAgICAgIGhpZ2hsaWdodERhdGVzOiBfdGhpcy5wcm9wcy5oaWdobGlnaHREYXRlcyxcbiAgICAgICAgICBob2xpZGF5czogX3RoaXMucHJvcHMuaG9saWRheXMsXG4gICAgICAgICAgc2VsZWN0aW5nRGF0ZTogX3RoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZSxcbiAgICAgICAgICBmaWx0ZXJEYXRlOiBfdGhpcy5wcm9wcy5maWx0ZXJEYXRlLFxuICAgICAgICAgIHByZVNlbGVjdGlvbjogX3RoaXMucHJvcHMucHJlU2VsZWN0aW9uLFxuICAgICAgICAgIHNlbGVjdGVkOiBfdGhpcy5wcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgICBzZWxlY3RzU3RhcnQ6IF90aGlzLnByb3BzLnNlbGVjdHNTdGFydCxcbiAgICAgICAgICBzZWxlY3RzRW5kOiBfdGhpcy5wcm9wcy5zZWxlY3RzRW5kLFxuICAgICAgICAgIHNlbGVjdHNSYW5nZTogX3RoaXMucHJvcHMuc2VsZWN0c1JhbmdlLFxuICAgICAgICAgIHNob3dXZWVrUGlja2VyOiBfdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlcixcbiAgICAgICAgICBzaG93V2Vla051bWJlcjogX3RoaXMucHJvcHMuc2hvd1dlZWtOdW1iZXIsXG4gICAgICAgICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U6IF90aGlzLnByb3BzLnNlbGVjdHNEaXNhYmxlZERheXNJblJhbmdlLFxuICAgICAgICAgIHNlbGVjdHNNdWx0aXBsZTogX3RoaXMucHJvcHMuc2VsZWN0c011bHRpcGxlLFxuICAgICAgICAgIHNlbGVjdGVkRGF0ZXM6IF90aGlzLnByb3BzLnNlbGVjdGVkRGF0ZXMsXG4gICAgICAgICAgc3RhcnREYXRlOiBfdGhpcy5wcm9wcy5zdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogX3RoaXMucHJvcHMuZW5kRGF0ZSxcbiAgICAgICAgICBkYXlDbGFzc05hbWU6IF90aGlzLnByb3BzLmRheUNsYXNzTmFtZSxcbiAgICAgICAgICByZW5kZXJEYXlDb250ZW50czogX3RoaXMucHJvcHMucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb246IF90aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uLFxuICAgICAgICAgIGhhbmRsZU9uS2V5RG93bjogX3RoaXMucHJvcHMuaGFuZGxlT25LZXlEb3duLFxuICAgICAgICAgIGlzSW5wdXRGb2N1c2VkOiBfdGhpcy5wcm9wcy5pc0lucHV0Rm9jdXNlZCxcbiAgICAgICAgICBjb250YWluZXJSZWY6IF90aGlzLnByb3BzLmNvbnRhaW5lclJlZixcbiAgICAgICAgICBpbmxpbmU6IF90aGlzLnByb3BzLmlubGluZSxcbiAgICAgICAgICBzaG91bGRGb2N1c0RheUlubGluZTogX3RoaXMucHJvcHMuc2hvdWxkRm9jdXNEYXlJbmxpbmUsXG4gICAgICAgICAgbW9udGhTaG93c0R1cGxpY2F0ZURheXNFbmQ6IF90aGlzLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kLFxuICAgICAgICAgIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQ6IF90aGlzLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQsXG4gICAgICAgICAgbG9jYWxlOiBfdGhpcy5wcm9wcy5sb2NhbGVcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInN0YXJ0T2ZXZWVrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXRTdGFydE9mV2VlayhfdGhpcy5wcm9wcy5kYXksIF90aGlzLnByb3BzLmxvY2FsZSwgX3RoaXMucHJvcHMuY2FsZW5kYXJTdGFydERheSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzS2V5Ym9hcmRTZWxlY3RlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gIV90aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uICYmICFpc1NhbWVEYXkoX3RoaXMuc3RhcnRPZldlZWsoKSwgX3RoaXMucHJvcHMuc2VsZWN0ZWQpICYmIGlzU2FtZURheShfdGhpcy5zdGFydE9mV2VlaygpLCBfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoV2VlaywgX1JlYWN0JENvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoV2VlaywgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciB3ZWVrTnVtYmVyQ2xhc3NlcyA9IHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrXCI6IHRydWUsXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay0tc2VsZWN0ZWRcIjogaXNTYW1lRGF5KHRoaXMuc3RhcnRPZldlZWsoKSwgdGhpcy5wcm9wcy5zZWxlY3RlZCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay0ta2V5Ym9hcmQtc2VsZWN0ZWRcIjogdGhpcy5pc0tleWJvYXJkU2VsZWN0ZWQoKVxuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xzeCh3ZWVrTnVtYmVyQ2xhc3NlcylcbiAgICAgIH0sIHRoaXMucmVuZGVyRGF5cygpKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJkZWZhdWx0UHJvcHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3VsZENsb3NlT25TZWxlY3Q6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbnZhciBGSVhFRF9IRUlHSFRfU1RBTkRBUkRfV0VFS19DT1VOVCA9IDY7XG52YXIgTU9OVEhfQ09MVU1OU19MQVlPVVQgPSB7XG4gIFRXT19DT0xVTU5TOiBcInR3b19jb2x1bW5zXCIsXG4gIFRIUkVFX0NPTFVNTlM6IFwidGhyZWVfY29sdW1uc1wiLFxuICBGT1VSX0NPTFVNTlM6IFwiZm91cl9jb2x1bW5zXCJcbn07XG52YXIgTU9OVEhfQ09MVU1OUyA9IF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KHt9LCBNT05USF9DT0xVTU5TX0xBWU9VVC5UV09fQ09MVU1OUywge1xuICBncmlkOiBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XSwgWzYsIDddLCBbOCwgOV0sIFsxMCwgMTFdXSxcbiAgdmVydGljYWxOYXZpZ2F0aW9uT2Zmc2V0OiAyXG59KSwgTU9OVEhfQ09MVU1OU19MQVlPVVQuVEhSRUVfQ09MVU1OUywge1xuICBncmlkOiBbWzAsIDEsIDJdLCBbMywgNCwgNV0sIFs2LCA3LCA4XSwgWzksIDEwLCAxMV1dLFxuICB2ZXJ0aWNhbE5hdmlnYXRpb25PZmZzZXQ6IDNcbn0pLCBNT05USF9DT0xVTU5TX0xBWU9VVC5GT1VSX0NPTFVNTlMsIHtcbiAgZ3JpZDogW1swLCAxLCAyLCAzXSwgWzQsIDUsIDYsIDddLCBbOCwgOSwgMTAsIDExXV0sXG4gIHZlcnRpY2FsTmF2aWdhdGlvbk9mZnNldDogNFxufSk7XG52YXIgTU9OVEhfTkFWSUdBVElPTl9IT1JJWk9OVEFMX09GRlNFVCA9IDE7XG5mdW5jdGlvbiBnZXRNb250aENvbHVtbnNMYXlvdXQoc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIsIHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXIpIHtcbiAgaWYgKHNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyKSByZXR1cm4gTU9OVEhfQ09MVU1OU19MQVlPVVQuRk9VUl9DT0xVTU5TO1xuICBpZiAoc2hvd1R3b0NvbHVtbk1vbnRoWWVhclBpY2tlcikgcmV0dXJuIE1PTlRIX0NPTFVNTlNfTEFZT1VULlRXT19DT0xVTU5TO1xuICByZXR1cm4gTU9OVEhfQ09MVU1OU19MQVlPVVQuVEhSRUVfQ09MVU1OUztcbn1cbnZhciBNb250aCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBNb250aCgpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vbnRoKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBNb250aCwgW10uY29uY2F0KGFyZ3MpKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiTU9OVEhfUkVGU1wiLCBfdG9Db25zdW1hYmxlQXJyYXkoQXJyYXkoMTIpKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVSZWYoKTtcbiAgICB9KSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIlFVQVJURVJfUkVGU1wiLCBfdG9Db25zdW1hYmxlQXJyYXkoQXJyYXkoNCkpLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpO1xuICAgIH0pKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNEaXNhYmxlZFwiLCBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIGlzRGF5RGlzYWJsZWQoZGF0ZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc0V4Y2x1ZGVkXCIsIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICByZXR1cm4gaXNEYXlFeGNsdWRlZChkYXRlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZURheUNsaWNrXCIsIGZ1bmN0aW9uIChkYXksIGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25EYXlDbGljaykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkRheUNsaWNrKGRheSwgZXZlbnQsIF90aGlzLnByb3BzLm9yZGVySW5EaXNwbGF5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlRGF5TW91c2VFbnRlclwiLCBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25EYXlNb3VzZUVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRGF5TW91c2VFbnRlcihkYXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVNb3VzZUxlYXZlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzUmFuZ2VTdGFydE1vbnRoXCIsIGZ1bmN0aW9uIChtKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHMuZGF5LFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wcy5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wcy5lbmREYXRlO1xuICAgICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU2FtZU1vbnRoKHNldE1vbnRoKGRheSwgbSksIHN0YXJ0RGF0ZSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzUmFuZ2VTdGFydFF1YXJ0ZXJcIiwgZnVuY3Rpb24gKHEpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHMyLmRheSxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMyLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzMi5lbmREYXRlO1xuICAgICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU2FtZVF1YXJ0ZXIoc2V0UXVhcnRlcihkYXksIHEpLCBzdGFydERhdGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1JhbmdlRW5kTW9udGhcIiwgZnVuY3Rpb24gKG0pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHMzLmRheSxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMzLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzMy5lbmREYXRlO1xuICAgICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU2FtZU1vbnRoKHNldE1vbnRoKGRheSwgbSksIGVuZERhdGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1JhbmdlRW5kUXVhcnRlclwiLCBmdW5jdGlvbiAocSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICBkYXkgPSBfdGhpcyRwcm9wczQuZGF5LFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczQuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHM0LmVuZERhdGU7XG4gICAgICBpZiAoIXN0YXJ0RGF0ZSB8fCAhZW5kRGF0ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTYW1lUXVhcnRlcihzZXRRdWFydGVyKGRheSwgcSksIGVuZERhdGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc0luU2VsZWN0aW5nUmFuZ2VNb250aFwiLCBmdW5jdGlvbiAobSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzJHNlbGVjdGluZztcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHM1LmRheSxcbiAgICAgICAgc2VsZWN0c1N0YXJ0ID0gX3RoaXMkcHJvcHM1LnNlbGVjdHNTdGFydCxcbiAgICAgICAgc2VsZWN0c0VuZCA9IF90aGlzJHByb3BzNS5zZWxlY3RzRW5kLFxuICAgICAgICBzZWxlY3RzUmFuZ2UgPSBfdGhpcyRwcm9wczUuc2VsZWN0c1JhbmdlLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczUuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHM1LmVuZERhdGU7XG4gICAgICB2YXIgc2VsZWN0aW5nRGF0ZSA9IChfdGhpcyRwcm9wcyRzZWxlY3RpbmcgPSBfdGhpcy5wcm9wcy5zZWxlY3RpbmdEYXRlKSAhPT0gbnVsbCAmJiBfdGhpcyRwcm9wcyRzZWxlY3RpbmcgIT09IHZvaWQgMCA/IF90aGlzJHByb3BzJHNlbGVjdGluZyA6IF90aGlzLnByb3BzLnByZVNlbGVjdGlvbjtcbiAgICAgIGlmICghKHNlbGVjdHNTdGFydCB8fCBzZWxlY3RzRW5kIHx8IHNlbGVjdHNSYW5nZSkgfHwgIXNlbGVjdGluZ0RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdHNTdGFydCAmJiBlbmREYXRlKSB7XG4gICAgICAgIHJldHVybiBpc01vbnRoSW5SYW5nZShzZWxlY3RpbmdEYXRlLCBlbmREYXRlLCBtLCBkYXkpO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdHNFbmQgJiYgc3RhcnREYXRlKSB7XG4gICAgICAgIHJldHVybiBpc01vbnRoSW5SYW5nZShzdGFydERhdGUsIHNlbGVjdGluZ0RhdGUsIG0sIGRheSk7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZWN0c1JhbmdlICYmIHN0YXJ0RGF0ZSAmJiAhZW5kRGF0ZSkge1xuICAgICAgICByZXR1cm4gaXNNb250aEluUmFuZ2Uoc3RhcnREYXRlLCBzZWxlY3RpbmdEYXRlLCBtLCBkYXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1NlbGVjdGluZ01vbnRoUmFuZ2VTdGFydFwiLCBmdW5jdGlvbiAobSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzJHNlbGVjdGluZzI7XG4gICAgICBpZiAoIV90aGlzLmlzSW5TZWxlY3RpbmdSYW5nZU1vbnRoKG0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHM2LmRheSxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHM2LnN0YXJ0RGF0ZSxcbiAgICAgICAgc2VsZWN0c1N0YXJ0ID0gX3RoaXMkcHJvcHM2LnNlbGVjdHNTdGFydDtcbiAgICAgIHZhciBfbW9udGggPSBzZXRNb250aChkYXksIG0pO1xuICAgICAgdmFyIHNlbGVjdGluZ0RhdGUgPSAoX3RoaXMkcHJvcHMkc2VsZWN0aW5nMiA9IF90aGlzLnByb3BzLnNlbGVjdGluZ0RhdGUpICE9PSBudWxsICYmIF90aGlzJHByb3BzJHNlbGVjdGluZzIgIT09IHZvaWQgMCA/IF90aGlzJHByb3BzJHNlbGVjdGluZzIgOiBfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb247XG4gICAgICBpZiAoc2VsZWN0c1N0YXJ0KSB7XG4gICAgICAgIHJldHVybiBpc1NhbWVNb250aChfbW9udGgsIHNlbGVjdGluZ0RhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzU2FtZU1vbnRoKF9tb250aCwgc3RhcnREYXRlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNTZWxlY3RpbmdNb250aFJhbmdlRW5kXCIsIGZ1bmN0aW9uIChtKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkc2VsZWN0aW5nMztcbiAgICAgIGlmICghX3RoaXMuaXNJblNlbGVjdGluZ1JhbmdlTW9udGgobSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIF90aGlzJHByb3BzNyA9IF90aGlzLnByb3BzLFxuICAgICAgICBkYXkgPSBfdGhpcyRwcm9wczcuZGF5LFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHM3LmVuZERhdGUsXG4gICAgICAgIHNlbGVjdHNFbmQgPSBfdGhpcyRwcm9wczcuc2VsZWN0c0VuZCxcbiAgICAgICAgc2VsZWN0c1JhbmdlID0gX3RoaXMkcHJvcHM3LnNlbGVjdHNSYW5nZTtcbiAgICAgIHZhciBfbW9udGggPSBzZXRNb250aChkYXksIG0pO1xuICAgICAgdmFyIHNlbGVjdGluZ0RhdGUgPSAoX3RoaXMkcHJvcHMkc2VsZWN0aW5nMyA9IF90aGlzLnByb3BzLnNlbGVjdGluZ0RhdGUpICE9PSBudWxsICYmIF90aGlzJHByb3BzJHNlbGVjdGluZzMgIT09IHZvaWQgMCA/IF90aGlzJHByb3BzJHNlbGVjdGluZzMgOiBfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb247XG4gICAgICBpZiAoc2VsZWN0c0VuZCB8fCBzZWxlY3RzUmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIGlzU2FtZU1vbnRoKF9tb250aCwgc2VsZWN0aW5nRGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNTYW1lTW9udGgoX21vbnRoLCBlbmREYXRlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNJblNlbGVjdGluZ1JhbmdlUXVhcnRlclwiLCBmdW5jdGlvbiAocSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzJHNlbGVjdGluZzQ7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM4ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzOC5kYXksXG4gICAgICAgIHNlbGVjdHNTdGFydCA9IF90aGlzJHByb3BzOC5zZWxlY3RzU3RhcnQsXG4gICAgICAgIHNlbGVjdHNFbmQgPSBfdGhpcyRwcm9wczguc2VsZWN0c0VuZCxcbiAgICAgICAgc2VsZWN0c1JhbmdlID0gX3RoaXMkcHJvcHM4LnNlbGVjdHNSYW5nZSxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHM4LnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzOC5lbmREYXRlO1xuICAgICAgdmFyIHNlbGVjdGluZ0RhdGUgPSAoX3RoaXMkcHJvcHMkc2VsZWN0aW5nNCA9IF90aGlzLnByb3BzLnNlbGVjdGluZ0RhdGUpICE9PSBudWxsICYmIF90aGlzJHByb3BzJHNlbGVjdGluZzQgIT09IHZvaWQgMCA/IF90aGlzJHByb3BzJHNlbGVjdGluZzQgOiBfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb247XG4gICAgICBpZiAoIShzZWxlY3RzU3RhcnQgfHwgc2VsZWN0c0VuZCB8fCBzZWxlY3RzUmFuZ2UpIHx8ICFzZWxlY3RpbmdEYXRlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RzU3RhcnQgJiYgZW5kRGF0ZSkge1xuICAgICAgICByZXR1cm4gaXNRdWFydGVySW5SYW5nZShzZWxlY3RpbmdEYXRlLCBlbmREYXRlLCBxLCBkYXkpO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdHNFbmQgJiYgc3RhcnREYXRlKSB7XG4gICAgICAgIHJldHVybiBpc1F1YXJ0ZXJJblJhbmdlKHN0YXJ0RGF0ZSwgc2VsZWN0aW5nRGF0ZSwgcSwgZGF5KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RzUmFuZ2UgJiYgc3RhcnREYXRlICYmICFlbmREYXRlKSB7XG4gICAgICAgIHJldHVybiBpc1F1YXJ0ZXJJblJhbmdlKHN0YXJ0RGF0ZSwgc2VsZWN0aW5nRGF0ZSwgcSwgZGF5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNXZWVrSW5Nb250aFwiLCBmdW5jdGlvbiAoc3RhcnRPZldlZWspIHtcbiAgICAgIHZhciBkYXkgPSBfdGhpcy5wcm9wcy5kYXk7XG4gICAgICB2YXIgZW5kT2ZXZWVrID0gYWRkRGF5cyhzdGFydE9mV2VlaywgNik7XG4gICAgICByZXR1cm4gaXNTYW1lTW9udGgoc3RhcnRPZldlZWssIGRheSkgfHwgaXNTYW1lTW9udGgoZW5kT2ZXZWVrLCBkYXkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc0N1cnJlbnRNb250aFwiLCBmdW5jdGlvbiAoZGF5LCBtKSB7XG4gICAgICByZXR1cm4gZ2V0WWVhcihkYXkpID09PSBnZXRZZWFyKG5ld0RhdGUoKSkgJiYgbSA9PT0gZ2V0TW9udGgobmV3RGF0ZSgpKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNDdXJyZW50UXVhcnRlclwiLCBmdW5jdGlvbiAoZGF5LCBxKSB7XG4gICAgICByZXR1cm4gZ2V0WWVhcihkYXkpID09PSBnZXRZZWFyKG5ld0RhdGUoKSkgJiYgcSA9PT0gZ2V0UXVhcnRlcihuZXdEYXRlKCkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1NlbGVjdGVkTW9udGhcIiwgZnVuY3Rpb24gKGRheSwgbSwgc2VsZWN0ZWQpIHtcbiAgICAgIHJldHVybiBnZXRNb250aChzZWxlY3RlZCkgPT09IG0gJiYgZ2V0WWVhcihkYXkpID09PSBnZXRZZWFyKHNlbGVjdGVkKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNTZWxlY3RlZFF1YXJ0ZXJcIiwgZnVuY3Rpb24gKGRheSwgcSwgc2VsZWN0ZWQpIHtcbiAgICAgIHJldHVybiBnZXRRdWFydGVyKGRheSkgPT09IHEgJiYgZ2V0WWVhcihkYXkpID09PSBnZXRZZWFyKHNlbGVjdGVkKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyV2Vla3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHdlZWtzID0gW107XG4gICAgICB2YXIgaXNGaXhlZEhlaWdodCA9IF90aGlzLnByb3BzLmZpeGVkSGVpZ2h0O1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGJyZWFrQWZ0ZXJOZXh0UHVzaCA9IGZhbHNlO1xuICAgICAgdmFyIGN1cnJlbnRXZWVrU3RhcnQgPSBnZXRTdGFydE9mV2VlayhnZXRTdGFydE9mTW9udGgoX3RoaXMucHJvcHMuZGF5KSwgX3RoaXMucHJvcHMubG9jYWxlLCBfdGhpcy5wcm9wcy5jYWxlbmRhclN0YXJ0RGF5KTtcbiAgICAgIHZhciBzZWxlY3RlZCA9IF90aGlzLnByb3BzLnNob3dXZWVrUGlja2VyID8gZ2V0U3RhcnRPZldlZWsoX3RoaXMucHJvcHMuc2VsZWN0ZWQsIF90aGlzLnByb3BzLmxvY2FsZSwgX3RoaXMucHJvcHMuY2FsZW5kYXJTdGFydERheSkgOiBfdGhpcy5wcm9wcy5zZWxlY3RlZDtcbiAgICAgIHZhciBwcmVTZWxlY3Rpb24gPSBfdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlciA/IGdldFN0YXJ0T2ZXZWVrKF90aGlzLnByb3BzLnByZVNlbGVjdGlvbiwgX3RoaXMucHJvcHMubG9jYWxlLCBfdGhpcy5wcm9wcy5jYWxlbmRhclN0YXJ0RGF5KSA6IF90aGlzLnByb3BzLnByZVNlbGVjdGlvbjtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHdlZWtzLnB1c2goIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFdlZWssIHtcbiAgICAgICAgICBhcmlhTGFiZWxQcmVmaXg6IF90aGlzLnByb3BzLndlZWtBcmlhTGFiZWxQcmVmaXgsXG4gICAgICAgICAgY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4OiBfdGhpcy5wcm9wcy5jaG9vc2VEYXlBcmlhTGFiZWxQcmVmaXgsXG4gICAgICAgICAgZGlzYWJsZWREYXlBcmlhTGFiZWxQcmVmaXg6IF90aGlzLnByb3BzLmRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4LFxuICAgICAgICAgIGtleTogaSxcbiAgICAgICAgICBkYXk6IGN1cnJlbnRXZWVrU3RhcnQsXG4gICAgICAgICAgbW9udGg6IGdldE1vbnRoKF90aGlzLnByb3BzLmRheSksXG4gICAgICAgICAgb25EYXlDbGljazogX3RoaXMuaGFuZGxlRGF5Q2xpY2ssXG4gICAgICAgICAgdXNlUG9pbnRlckV2ZW50OiBfdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnQsXG4gICAgICAgICAgb25EYXlNb3VzZUVudGVyOiBfdGhpcy5oYW5kbGVEYXlNb3VzZUVudGVyLFxuICAgICAgICAgIG9uV2Vla1NlbGVjdDogX3RoaXMucHJvcHMub25XZWVrU2VsZWN0LFxuICAgICAgICAgIGZvcm1hdFdlZWtOdW1iZXI6IF90aGlzLnByb3BzLmZvcm1hdFdlZWtOdW1iZXIsXG4gICAgICAgICAgbG9jYWxlOiBfdGhpcy5wcm9wcy5sb2NhbGUsXG4gICAgICAgICAgbWluRGF0ZTogX3RoaXMucHJvcHMubWluRGF0ZSxcbiAgICAgICAgICBtYXhEYXRlOiBfdGhpcy5wcm9wcy5tYXhEYXRlLFxuICAgICAgICAgIGV4Y2x1ZGVEYXRlczogX3RoaXMucHJvcHMuZXhjbHVkZURhdGVzLFxuICAgICAgICAgIGV4Y2x1ZGVEYXRlSW50ZXJ2YWxzOiBfdGhpcy5wcm9wcy5leGNsdWRlRGF0ZUludGVydmFscyxcbiAgICAgICAgICBpbmNsdWRlRGF0ZXM6IF90aGlzLnByb3BzLmluY2x1ZGVEYXRlcyxcbiAgICAgICAgICBpbmNsdWRlRGF0ZUludGVydmFsczogX3RoaXMucHJvcHMuaW5jbHVkZURhdGVJbnRlcnZhbHMsXG4gICAgICAgICAgaW5saW5lOiBfdGhpcy5wcm9wcy5pbmxpbmUsXG4gICAgICAgICAgc2hvdWxkRm9jdXNEYXlJbmxpbmU6IF90aGlzLnByb3BzLnNob3VsZEZvY3VzRGF5SW5saW5lLFxuICAgICAgICAgIGhpZ2hsaWdodERhdGVzOiBfdGhpcy5wcm9wcy5oaWdobGlnaHREYXRlcyxcbiAgICAgICAgICBob2xpZGF5czogX3RoaXMucHJvcHMuaG9saWRheXMsXG4gICAgICAgICAgc2VsZWN0aW5nRGF0ZTogX3RoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZSxcbiAgICAgICAgICBmaWx0ZXJEYXRlOiBfdGhpcy5wcm9wcy5maWx0ZXJEYXRlLFxuICAgICAgICAgIHByZVNlbGVjdGlvbjogcHJlU2VsZWN0aW9uLFxuICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCxcbiAgICAgICAgICBzZWxlY3RzU3RhcnQ6IF90aGlzLnByb3BzLnNlbGVjdHNTdGFydCxcbiAgICAgICAgICBzZWxlY3RzRW5kOiBfdGhpcy5wcm9wcy5zZWxlY3RzRW5kLFxuICAgICAgICAgIHNlbGVjdHNSYW5nZTogX3RoaXMucHJvcHMuc2VsZWN0c1JhbmdlLFxuICAgICAgICAgIHNlbGVjdHNEaXNhYmxlZERheXNJblJhbmdlOiBfdGhpcy5wcm9wcy5zZWxlY3RzRGlzYWJsZWREYXlzSW5SYW5nZSxcbiAgICAgICAgICBzZWxlY3RzTXVsdGlwbGU6IF90aGlzLnByb3BzLnNlbGVjdHNNdWx0aXBsZSxcbiAgICAgICAgICBzZWxlY3RlZERhdGVzOiBfdGhpcy5wcm9wcy5zZWxlY3RlZERhdGVzLFxuICAgICAgICAgIHNob3dXZWVrTnVtYmVyOiBfdGhpcy5wcm9wcy5zaG93V2Vla051bWJlcnMsXG4gICAgICAgICAgc2hvd1dlZWtQaWNrZXI6IF90aGlzLnByb3BzLnNob3dXZWVrUGlja2VyLFxuICAgICAgICAgIHN0YXJ0RGF0ZTogX3RoaXMucHJvcHMuc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGU6IF90aGlzLnByb3BzLmVuZERhdGUsXG4gICAgICAgICAgZGF5Q2xhc3NOYW1lOiBfdGhpcy5wcm9wcy5kYXlDbGFzc05hbWUsXG4gICAgICAgICAgc2V0T3BlbjogX3RoaXMucHJvcHMuc2V0T3BlbixcbiAgICAgICAgICBzaG91bGRDbG9zZU9uU2VsZWN0OiBfdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uU2VsZWN0LFxuICAgICAgICAgIGRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uOiBfdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbixcbiAgICAgICAgICByZW5kZXJEYXlDb250ZW50czogX3RoaXMucHJvcHMucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgICAgaGFuZGxlT25LZXlEb3duOiBfdGhpcy5wcm9wcy5oYW5kbGVPbktleURvd24sXG4gICAgICAgICAgaXNJbnB1dEZvY3VzZWQ6IF90aGlzLnByb3BzLmlzSW5wdXRGb2N1c2VkLFxuICAgICAgICAgIGNvbnRhaW5lclJlZjogX3RoaXMucHJvcHMuY29udGFpbmVyUmVmLFxuICAgICAgICAgIGNhbGVuZGFyU3RhcnREYXk6IF90aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXksXG4gICAgICAgICAgbW9udGhTaG93c0R1cGxpY2F0ZURheXNFbmQ6IF90aGlzLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kLFxuICAgICAgICAgIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQ6IF90aGlzLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnRcbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAoYnJlYWtBZnRlck5leHRQdXNoKSBicmVhaztcbiAgICAgICAgaSsrO1xuICAgICAgICBjdXJyZW50V2Vla1N0YXJ0ID0gYWRkV2Vla3MoY3VycmVudFdlZWtTdGFydCwgMSk7XG5cbiAgICAgICAgLy8gSWYgb25lIG9mIHRoZXNlIGNvbmRpdGlvbnMgaXMgdHJ1ZSwgd2Ugd2lsbCBlaXRoZXIgYnJlYWsgb24gdGhpcyB3ZWVrXG4gICAgICAgIC8vIG9yIGJyZWFrIG9uIHRoZSBuZXh0IHdlZWtcbiAgICAgICAgdmFyIGlzRml4ZWRBbmRGaW5hbFdlZWsgPSBpc0ZpeGVkSGVpZ2h0ICYmIGkgPj0gRklYRURfSEVJR0hUX1NUQU5EQVJEX1dFRUtfQ09VTlQ7XG4gICAgICAgIHZhciBpc05vbkZpeGVkQW5kT3V0T2ZNb250aCA9ICFpc0ZpeGVkSGVpZ2h0ICYmICFfdGhpcy5pc1dlZWtJbk1vbnRoKGN1cnJlbnRXZWVrU3RhcnQpO1xuICAgICAgICBpZiAoaXNGaXhlZEFuZEZpbmFsV2VlayB8fCBpc05vbkZpeGVkQW5kT3V0T2ZNb250aCkge1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5wZWVrTmV4dE1vbnRoKSB7XG4gICAgICAgICAgICBicmVha0FmdGVyTmV4dFB1c2ggPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB3ZWVrcztcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwib25Nb250aENsaWNrXCIsIGZ1bmN0aW9uIChlLCBtKSB7XG4gICAgICB2YXIgbGFiZWxEYXRlID0gc2V0TW9udGgoX3RoaXMucHJvcHMuZGF5LCBtKTtcbiAgICAgIGlmIChpc01vbnRoRGlzYWJsZWQobGFiZWxEYXRlLCBfdGhpcy5wcm9wcykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgX3RoaXMuaGFuZGxlRGF5Q2xpY2soZ2V0U3RhcnRPZk1vbnRoKGxhYmVsRGF0ZSksIGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvbk1vbnRoTW91c2VFbnRlclwiLCBmdW5jdGlvbiAobSkge1xuICAgICAgdmFyIGxhYmVsRGF0ZSA9IHNldE1vbnRoKF90aGlzLnByb3BzLmRheSwgbSk7XG4gICAgICBpZiAoaXNNb250aERpc2FibGVkKGxhYmVsRGF0ZSwgX3RoaXMucHJvcHMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF90aGlzLmhhbmRsZURheU1vdXNlRW50ZXIoZ2V0U3RhcnRPZk1vbnRoKGxhYmVsRGF0ZSkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVNb250aE5hdmlnYXRpb25cIiwgZnVuY3Rpb24gKG5ld01vbnRoLCBuZXdEYXRlKSB7XG4gICAgICBpZiAoX3RoaXMuaXNEaXNhYmxlZChuZXdEYXRlKSB8fCBfdGhpcy5pc0V4Y2x1ZGVkKG5ld0RhdGUpKSByZXR1cm47XG4gICAgICBfdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24obmV3RGF0ZSk7XG4gICAgICBfdGhpcy5NT05USF9SRUZTW25ld01vbnRoXS5jdXJyZW50ICYmIF90aGlzLk1PTlRIX1JFRlNbbmV3TW9udGhdLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwib25Nb250aEtleURvd25cIiwgZnVuY3Rpb24gKGV2ZW50LCBtb250aCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzOSA9IF90aGlzLnByb3BzLFxuICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzOS5zZWxlY3RlZCxcbiAgICAgICAgcHJlU2VsZWN0aW9uID0gX3RoaXMkcHJvcHM5LnByZVNlbGVjdGlvbixcbiAgICAgICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24gPSBfdGhpcyRwcm9wczkuZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24sXG4gICAgICAgIHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXIgPSBfdGhpcyRwcm9wczkuc2hvd1R3b0NvbHVtbk1vbnRoWWVhclBpY2tlcixcbiAgICAgICAgc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIgPSBfdGhpcyRwcm9wczkuc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIsXG4gICAgICAgIHNldFByZVNlbGVjdGlvbiA9IF90aGlzJHByb3BzOS5zZXRQcmVTZWxlY3Rpb24sXG4gICAgICAgIGhhbmRsZU9uTW9udGhLZXlEb3duID0gX3RoaXMkcHJvcHM5LmhhbmRsZU9uTW9udGhLZXlEb3duO1xuICAgICAgdmFyIGV2ZW50S2V5ID0gZXZlbnQua2V5O1xuICAgICAgaWYgKGV2ZW50S2V5ICE9PSBcIlRhYlwiKSB7XG4gICAgICAgIC8vIHByZXZlbnREZWZhdWx0IG9uIHRhYiBldmVudCBibG9ja3MgZm9jdXMgY2hhbmdlXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBpZiAoIWRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uKSB7XG4gICAgICAgIHZhciBtb250aENvbHVtbnNMYXlvdXQgPSBnZXRNb250aENvbHVtbnNMYXlvdXQoc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIsIHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXIpO1xuICAgICAgICB2YXIgdmVydGljYWxPZmZzZXQgPSBNT05USF9DT0xVTU5TW21vbnRoQ29sdW1uc0xheW91dF0udmVydGljYWxOYXZpZ2F0aW9uT2Zmc2V0O1xuICAgICAgICB2YXIgbW9udGhzR3JpZCA9IE1PTlRIX0NPTFVNTlNbbW9udGhDb2x1bW5zTGF5b3V0XS5ncmlkO1xuICAgICAgICBzd2l0Y2ggKGV2ZW50S2V5KSB7XG4gICAgICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICAgICAgICBfdGhpcy5vbk1vbnRoQ2xpY2soZXZlbnQsIG1vbnRoKTtcbiAgICAgICAgICAgIHNldFByZVNlbGVjdGlvbihzZWxlY3RlZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlTW9udGhOYXZpZ2F0aW9uKG1vbnRoID09PSAxMSA/IDAgOiBtb250aCArIE1PTlRIX05BVklHQVRJT05fSE9SSVpPTlRBTF9PRkZTRVQsIGFkZE1vbnRocyhwcmVTZWxlY3Rpb24sIE1PTlRIX05BVklHQVRJT05fSE9SSVpPTlRBTF9PRkZTRVQpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZU1vbnRoTmF2aWdhdGlvbihtb250aCA9PT0gMCA/IDExIDogbW9udGggLSBNT05USF9OQVZJR0FUSU9OX0hPUklaT05UQUxfT0ZGU0VULCBzdWJNb250aHMocHJlU2VsZWN0aW9uLCBNT05USF9OQVZJR0FUSU9OX0hPUklaT05UQUxfT0ZGU0VUKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlTW9udGhOYXZpZ2F0aW9uKFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbW9udGggb24gdGhlIGZpcnN0IHJvd1xuICAgICAgICAgICAgbW9udGhzR3JpZFswXS5pbmNsdWRlcyhtb250aCkgPyBtb250aCArIDEyIC0gdmVydGljYWxPZmZzZXQgOiBtb250aCAtIHZlcnRpY2FsT2Zmc2V0LCBzdWJNb250aHMocHJlU2VsZWN0aW9uLCB2ZXJ0aWNhbE9mZnNldCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlTW9udGhOYXZpZ2F0aW9uKFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbW9udGggb24gdGhlIGxhc3Qgcm93XG4gICAgICAgICAgICBtb250aHNHcmlkW21vbnRoc0dyaWQubGVuZ3RoIC0gMV0uaW5jbHVkZXMobW9udGgpID8gbW9udGggLSAxMiArIHZlcnRpY2FsT2Zmc2V0IDogbW9udGggKyB2ZXJ0aWNhbE9mZnNldCwgYWRkTW9udGhzKHByZVNlbGVjdGlvbiwgdmVydGljYWxPZmZzZXQpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBoYW5kbGVPbk1vbnRoS2V5RG93biAmJiBoYW5kbGVPbk1vbnRoS2V5RG93bihldmVudCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIm9uUXVhcnRlckNsaWNrXCIsIGZ1bmN0aW9uIChlLCBxKSB7XG4gICAgICB2YXIgbGFiZWxEYXRlID0gc2V0UXVhcnRlcihfdGhpcy5wcm9wcy5kYXksIHEpO1xuICAgICAgaWYgKGlzUXVhcnRlckRpc2FibGVkKGxhYmVsRGF0ZSwgX3RoaXMucHJvcHMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF90aGlzLmhhbmRsZURheUNsaWNrKGdldFN0YXJ0T2ZRdWFydGVyKGxhYmVsRGF0ZSksIGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvblF1YXJ0ZXJNb3VzZUVudGVyXCIsIGZ1bmN0aW9uIChxKSB7XG4gICAgICB2YXIgbGFiZWxEYXRlID0gc2V0UXVhcnRlcihfdGhpcy5wcm9wcy5kYXksIHEpO1xuICAgICAgaWYgKGlzUXVhcnRlckRpc2FibGVkKGxhYmVsRGF0ZSwgX3RoaXMucHJvcHMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF90aGlzLmhhbmRsZURheU1vdXNlRW50ZXIoZ2V0U3RhcnRPZlF1YXJ0ZXIobGFiZWxEYXRlKSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZVF1YXJ0ZXJOYXZpZ2F0aW9uXCIsIGZ1bmN0aW9uIChuZXdRdWFydGVyLCBuZXdEYXRlKSB7XG4gICAgICBpZiAoX3RoaXMuaXNEaXNhYmxlZChuZXdEYXRlKSB8fCBfdGhpcy5pc0V4Y2x1ZGVkKG5ld0RhdGUpKSByZXR1cm47XG4gICAgICBfdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24obmV3RGF0ZSk7XG4gICAgICBfdGhpcy5RVUFSVEVSX1JFRlNbbmV3UXVhcnRlciAtIDFdLmN1cnJlbnQgJiYgX3RoaXMuUVVBUlRFUl9SRUZTW25ld1F1YXJ0ZXIgLSAxXS5jdXJyZW50LmZvY3VzKCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIm9uUXVhcnRlcktleURvd25cIiwgZnVuY3Rpb24gKGV2ZW50LCBxdWFydGVyKSB7XG4gICAgICB2YXIgZXZlbnRLZXkgPSBldmVudC5rZXk7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnRLZXkpIHtcbiAgICAgICAgICBjYXNlIFwiRW50ZXJcIjpcbiAgICAgICAgICAgIF90aGlzLm9uUXVhcnRlckNsaWNrKGV2ZW50LCBxdWFydGVyKTtcbiAgICAgICAgICAgIF90aGlzLnByb3BzLnNldFByZVNlbGVjdGlvbihfdGhpcy5wcm9wcy5zZWxlY3RlZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUXVhcnRlck5hdmlnYXRpb24ocXVhcnRlciA9PT0gNCA/IDEgOiBxdWFydGVyICsgMSwgYWRkUXVhcnRlcnMoX3RoaXMucHJvcHMucHJlU2VsZWN0aW9uLCAxKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVRdWFydGVyTmF2aWdhdGlvbihxdWFydGVyID09PSAxID8gNCA6IHF1YXJ0ZXIgLSAxLCBzdWJRdWFydGVycyhfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24sIDEpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImdldE1vbnRoQ2xhc3NOYW1lc1wiLCBmdW5jdGlvbiAobSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTAgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHMxMC5kYXksXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzMTAuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHMxMC5lbmREYXRlLFxuICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzMTAuc2VsZWN0ZWQsXG4gICAgICAgIG1pbkRhdGUgPSBfdGhpcyRwcm9wczEwLm1pbkRhdGUsXG4gICAgICAgIG1heERhdGUgPSBfdGhpcyRwcm9wczEwLm1heERhdGUsXG4gICAgICAgIHByZVNlbGVjdGlvbiA9IF90aGlzJHByb3BzMTAucHJlU2VsZWN0aW9uLFxuICAgICAgICBtb250aENsYXNzTmFtZSA9IF90aGlzJHByb3BzMTAubW9udGhDbGFzc05hbWUsXG4gICAgICAgIGV4Y2x1ZGVEYXRlcyA9IF90aGlzJHByb3BzMTAuZXhjbHVkZURhdGVzLFxuICAgICAgICBpbmNsdWRlRGF0ZXMgPSBfdGhpcyRwcm9wczEwLmluY2x1ZGVEYXRlcztcbiAgICAgIHZhciBfbW9udGhDbGFzc05hbWUgPSBtb250aENsYXNzTmFtZSA/IG1vbnRoQ2xhc3NOYW1lKHNldE1vbnRoKGRheSwgbSkpIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGxhYmVsRGF0ZSA9IHNldE1vbnRoKGRheSwgbSk7XG4gICAgICByZXR1cm4gY2xzeChcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHRcIiwgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC1cIi5jb25jYXQobSksIF9tb250aENsYXNzTmFtZSwge1xuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWRpc2FibGVkXCI6IChtaW5EYXRlIHx8IG1heERhdGUgfHwgZXhjbHVkZURhdGVzIHx8IGluY2x1ZGVEYXRlcykgJiYgaXNNb250aERpc2FibGVkKGxhYmVsRGF0ZSwgX3RoaXMucHJvcHMpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLXNlbGVjdGVkXCI6IF90aGlzLmlzU2VsZWN0ZWRNb250aChkYXksIG0sIHNlbGVjdGVkKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1rZXlib2FyZC1zZWxlY3RlZFwiOiAhX3RoaXMucHJvcHMuZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24gJiYgX3RoaXMuaXNTZWxlY3RlZE1vbnRoKGRheSwgbSwgcHJlU2VsZWN0aW9uKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2VcIjogX3RoaXMuaXNJblNlbGVjdGluZ1JhbmdlTW9udGgobSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0taW4tcmFuZ2VcIjogaXNNb250aEluUmFuZ2Uoc3RhcnREYXRlLCBlbmREYXRlLCBtLCBkYXkpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLXJhbmdlLXN0YXJ0XCI6IF90aGlzLmlzUmFuZ2VTdGFydE1vbnRoKG0pLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLXJhbmdlLWVuZFwiOiBfdGhpcy5pc1JhbmdlRW5kTW9udGgobSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0tc2VsZWN0aW5nLXJhbmdlLXN0YXJ0XCI6IF90aGlzLmlzU2VsZWN0aW5nTW9udGhSYW5nZVN0YXJ0KG0pLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLXNlbGVjdGluZy1yYW5nZS1lbmRcIjogX3RoaXMuaXNTZWxlY3RpbmdNb250aFJhbmdlRW5kKG0pLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLXRvZGF5XCI6IF90aGlzLmlzQ3VycmVudE1vbnRoKGRheSwgbSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXRUYWJJbmRleFwiLCBmdW5jdGlvbiAobSkge1xuICAgICAgdmFyIHByZVNlbGVjdGVkTW9udGggPSBnZXRNb250aChfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pO1xuICAgICAgdmFyIHRhYkluZGV4ID0gIV90aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uICYmIG0gPT09IHByZVNlbGVjdGVkTW9udGggPyBcIjBcIiA6IFwiLTFcIjtcbiAgICAgIHJldHVybiB0YWJJbmRleDtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiZ2V0UXVhcnRlclRhYkluZGV4XCIsIGZ1bmN0aW9uIChxKSB7XG4gICAgICB2YXIgcHJlU2VsZWN0ZWRRdWFydGVyID0gZ2V0UXVhcnRlcihfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pO1xuICAgICAgdmFyIHRhYkluZGV4ID0gIV90aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uICYmIHEgPT09IHByZVNlbGVjdGVkUXVhcnRlciA/IFwiMFwiIDogXCItMVwiO1xuICAgICAgcmV0dXJuIHRhYkluZGV4O1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXRBcmlhTGFiZWxcIiwgZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxMSA9IF90aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczExJGNob29zZUQgPSBfdGhpcyRwcm9wczExLmNob29zZURheUFyaWFMYWJlbFByZWZpeCxcbiAgICAgICAgY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4ID0gX3RoaXMkcHJvcHMxMSRjaG9vc2VEID09PSB2b2lkIDAgPyBcIkNob29zZVwiIDogX3RoaXMkcHJvcHMxMSRjaG9vc2VELFxuICAgICAgICBfdGhpcyRwcm9wczExJGRpc2FibGUgPSBfdGhpcyRwcm9wczExLmRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4LFxuICAgICAgICBkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeCA9IF90aGlzJHByb3BzMTEkZGlzYWJsZSA9PT0gdm9pZCAwID8gXCJOb3QgYXZhaWxhYmxlXCIgOiBfdGhpcyRwcm9wczExJGRpc2FibGUsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzMTEuZGF5O1xuICAgICAgdmFyIGxhYmVsRGF0ZSA9IHNldE1vbnRoKGRheSwgbW9udGgpO1xuICAgICAgdmFyIHByZWZpeCA9IF90aGlzLmlzRGlzYWJsZWQobGFiZWxEYXRlKSB8fCBfdGhpcy5pc0V4Y2x1ZGVkKGxhYmVsRGF0ZSkgPyBkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeCA6IGNob29zZURheUFyaWFMYWJlbFByZWZpeDtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiKS5jb25jYXQoZm9ybWF0RGF0ZShsYWJlbERhdGUsIFwiTU1NTSB5eXl5XCIpKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiZ2V0UXVhcnRlckNsYXNzTmFtZXNcIiwgZnVuY3Rpb24gKHEpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczEyID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzMTIuZGF5LFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczEyLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzMTIuZW5kRGF0ZSxcbiAgICAgICAgc2VsZWN0ZWQgPSBfdGhpcyRwcm9wczEyLnNlbGVjdGVkLFxuICAgICAgICBtaW5EYXRlID0gX3RoaXMkcHJvcHMxMi5taW5EYXRlLFxuICAgICAgICBtYXhEYXRlID0gX3RoaXMkcHJvcHMxMi5tYXhEYXRlLFxuICAgICAgICBwcmVTZWxlY3Rpb24gPSBfdGhpcyRwcm9wczEyLnByZVNlbGVjdGlvbixcbiAgICAgICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24gPSBfdGhpcyRwcm9wczEyLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uO1xuICAgICAgcmV0dXJuIGNsc3goXCJyZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHRcIiwgXCJyZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLVwiLmNvbmNhdChxKSwge1xuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0tZGlzYWJsZWRcIjogKG1pbkRhdGUgfHwgbWF4RGF0ZSkgJiYgaXNRdWFydGVyRGlzYWJsZWQoc2V0UXVhcnRlcihkYXksIHEpLCBfdGhpcy5wcm9wcyksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1zZWxlY3RlZFwiOiBfdGhpcy5pc1NlbGVjdGVkUXVhcnRlcihkYXksIHEsIHNlbGVjdGVkKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLWtleWJvYXJkLXNlbGVjdGVkXCI6ICFkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbiAmJiBfdGhpcy5pc1NlbGVjdGVkUXVhcnRlcihkYXksIHEsIHByZVNlbGVjdGlvbiksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2VcIjogX3RoaXMuaXNJblNlbGVjdGluZ1JhbmdlUXVhcnRlcihxKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLWluLXJhbmdlXCI6IGlzUXVhcnRlckluUmFuZ2Uoc3RhcnREYXRlLCBlbmREYXRlLCBxLCBkYXkpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0tcmFuZ2Utc3RhcnRcIjogX3RoaXMuaXNSYW5nZVN0YXJ0UXVhcnRlcihxKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLXJhbmdlLWVuZFwiOiBfdGhpcy5pc1JhbmdlRW5kUXVhcnRlcihxKVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImdldE1vbnRoQ29udGVudFwiLCBmdW5jdGlvbiAobSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgc2hvd0Z1bGxNb250aFllYXJQaWNrZXIgPSBfdGhpcyRwcm9wczEzLnNob3dGdWxsTW9udGhZZWFyUGlja2VyLFxuICAgICAgICByZW5kZXJNb250aENvbnRlbnQgPSBfdGhpcyRwcm9wczEzLnJlbmRlck1vbnRoQ29udGVudCxcbiAgICAgICAgbG9jYWxlID0gX3RoaXMkcHJvcHMxMy5sb2NhbGUsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzMTMuZGF5O1xuICAgICAgdmFyIHNob3J0TW9udGhUZXh0ID0gZ2V0TW9udGhTaG9ydEluTG9jYWxlKG0sIGxvY2FsZSk7XG4gICAgICB2YXIgZnVsbE1vbnRoVGV4dCA9IGdldE1vbnRoSW5Mb2NhbGUobSwgbG9jYWxlKTtcbiAgICAgIGlmIChyZW5kZXJNb250aENvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlck1vbnRoQ29udGVudChtLCBzaG9ydE1vbnRoVGV4dCwgZnVsbE1vbnRoVGV4dCwgZGF5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaG93RnVsbE1vbnRoWWVhclBpY2tlciA/IGZ1bGxNb250aFRleHQgOiBzaG9ydE1vbnRoVGV4dDtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiZ2V0UXVhcnRlckNvbnRlbnRcIiwgZnVuY3Rpb24gKHEpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczE0ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIHJlbmRlclF1YXJ0ZXJDb250ZW50ID0gX3RoaXMkcHJvcHMxNC5yZW5kZXJRdWFydGVyQ29udGVudCxcbiAgICAgICAgbG9jYWxlID0gX3RoaXMkcHJvcHMxNC5sb2NhbGU7XG4gICAgICB2YXIgc2hvcnRRdWFydGVyID0gZ2V0UXVhcnRlclNob3J0SW5Mb2NhbGUocSwgbG9jYWxlKTtcbiAgICAgIHJldHVybiByZW5kZXJRdWFydGVyQ29udGVudCA/IHJlbmRlclF1YXJ0ZXJDb250ZW50KHEsIHNob3J0UXVhcnRlcikgOiBzaG9ydFF1YXJ0ZXI7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlck1vbnRoc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNSA9IF90aGlzLnByb3BzLFxuICAgICAgICBzaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyID0gX3RoaXMkcHJvcHMxNS5zaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyLFxuICAgICAgICBzaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlciA9IF90aGlzJHByb3BzMTUuc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzMTUuZGF5LFxuICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzMTUuc2VsZWN0ZWQ7XG4gICAgICB2YXIgbW9udGhDb2x1bW5zID0gTU9OVEhfQ09MVU1OU1tnZXRNb250aENvbHVtbnNMYXlvdXQoc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIsIHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXIpXS5ncmlkO1xuICAgICAgcmV0dXJuIG1vbnRoQ29sdW1ucy5tYXAoZnVuY3Rpb24gKG1vbnRoLCBpKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXdyYXBwZXJcIixcbiAgICAgICAgICBrZXk6IGlcbiAgICAgICAgfSwgbW9udGgubWFwKGZ1bmN0aW9uIChtLCBqKSB7XG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIHJlZjogX3RoaXMuTU9OVEhfUkVGU1ttXSxcbiAgICAgICAgICAgIGtleTogaixcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXYpIHtcbiAgICAgICAgICAgICAgX3RoaXMub25Nb250aENsaWNrKGV2LCBtKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bihldikge1xuICAgICAgICAgICAgICBpZiAoaXNTcGFjZUtleURvd24oZXYpKSB7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldi5rZXkgPSBcIkVudGVyXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX3RoaXMub25Nb250aEtleURvd24oZXYsIG0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTW91c2VFbnRlcjogIV90aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uTW9udGhNb3VzZUVudGVyKG0pO1xuICAgICAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9uUG9pbnRlckVudGVyOiBfdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnQgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5vbk1vbnRoTW91c2VFbnRlcihtKTtcbiAgICAgICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0YWJJbmRleDogX3RoaXMuZ2V0VGFiSW5kZXgobSksXG4gICAgICAgICAgICBjbGFzc05hbWU6IF90aGlzLmdldE1vbnRoQ2xhc3NOYW1lcyhtKSxcbiAgICAgICAgICAgIHJvbGU6IFwib3B0aW9uXCIsXG4gICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogX3RoaXMuZ2V0QXJpYUxhYmVsKG0pLFxuICAgICAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogX3RoaXMuaXNDdXJyZW50TW9udGgoZGF5LCBtKSA/IFwiZGF0ZVwiIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgXCJhcmlhLXNlbGVjdGVkXCI6IF90aGlzLmlzU2VsZWN0ZWRNb250aChkYXksIG0sIHNlbGVjdGVkKVxuICAgICAgICAgIH0sIF90aGlzLmdldE1vbnRoQ29udGVudChtKSk7XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJRdWFydGVyc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNiA9IF90aGlzLnByb3BzLFxuICAgICAgICBkYXkgPSBfdGhpcyRwcm9wczE2LmRheSxcbiAgICAgICAgc2VsZWN0ZWQgPSBfdGhpcyRwcm9wczE2LnNlbGVjdGVkO1xuICAgICAgdmFyIHF1YXJ0ZXJzID0gWzEsIDIsIDMsIDRdO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItd3JhcHBlclwiXG4gICAgICB9LCBxdWFydGVycy5tYXAoZnVuY3Rpb24gKHEsIGopIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBrZXk6IGosXG4gICAgICAgICAgcmVmOiBfdGhpcy5RVUFSVEVSX1JFRlNbal0sXG4gICAgICAgICAgcm9sZTogXCJvcHRpb25cIixcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5vblF1YXJ0ZXJDbGljayhldiwgcSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bihldikge1xuICAgICAgICAgICAgX3RoaXMub25RdWFydGVyS2V5RG93bihldiwgcSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6ICFfdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnQgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub25RdWFydGVyTW91c2VFbnRlcihxKTtcbiAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgIG9uUG9pbnRlckVudGVyOiBfdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnQgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub25RdWFydGVyTW91c2VFbnRlcihxKTtcbiAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgIGNsYXNzTmFtZTogX3RoaXMuZ2V0UXVhcnRlckNsYXNzTmFtZXMocSksXG4gICAgICAgICAgXCJhcmlhLXNlbGVjdGVkXCI6IF90aGlzLmlzU2VsZWN0ZWRRdWFydGVyKGRheSwgcSwgc2VsZWN0ZWQpLFxuICAgICAgICAgIHRhYkluZGV4OiBfdGhpcy5nZXRRdWFydGVyVGFiSW5kZXgocSksXG4gICAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogX3RoaXMuaXNDdXJyZW50UXVhcnRlcihkYXksIHEpID8gXCJkYXRlXCIgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgX3RoaXMuZ2V0UXVhcnRlckNvbnRlbnQocSkpO1xuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXRDbGFzc05hbWVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczE3ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIHNlbGVjdGluZ0RhdGUgPSBfdGhpcyRwcm9wczE3LnNlbGVjdGluZ0RhdGUsXG4gICAgICAgIHNlbGVjdHNTdGFydCA9IF90aGlzJHByb3BzMTcuc2VsZWN0c1N0YXJ0LFxuICAgICAgICBzZWxlY3RzRW5kID0gX3RoaXMkcHJvcHMxNy5zZWxlY3RzRW5kLFxuICAgICAgICBzaG93TW9udGhZZWFyUGlja2VyID0gX3RoaXMkcHJvcHMxNy5zaG93TW9udGhZZWFyUGlja2VyLFxuICAgICAgICBzaG93UXVhcnRlclllYXJQaWNrZXIgPSBfdGhpcyRwcm9wczE3LnNob3dRdWFydGVyWWVhclBpY2tlcixcbiAgICAgICAgc2hvd1dlZWtQaWNrZXIgPSBfdGhpcyRwcm9wczE3LnNob3dXZWVrUGlja2VyO1xuICAgICAgcmV0dXJuIGNsc3goXCJyZWFjdC1kYXRlcGlja2VyX19tb250aFwiLCB7XG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtLXNlbGVjdGluZy1yYW5nZVwiOiBzZWxlY3RpbmdEYXRlICYmIChzZWxlY3RzU3RhcnQgfHwgc2VsZWN0c0VuZClcbiAgICAgIH0sIHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aFBpY2tlclwiOiBzaG93TW9udGhZZWFyUGlja2VyXG4gICAgICB9LCB7XG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlclBpY2tlclwiOiBzaG93UXVhcnRlclllYXJQaWNrZXJcbiAgICAgIH0sIHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrUGlja2VyXCI6IHNob3dXZWVrUGlja2VyXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKE1vbnRoLCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhNb250aCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczE4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc2hvd01vbnRoWWVhclBpY2tlciA9IF90aGlzJHByb3BzMTguc2hvd01vbnRoWWVhclBpY2tlcixcbiAgICAgICAgc2hvd1F1YXJ0ZXJZZWFyUGlja2VyID0gX3RoaXMkcHJvcHMxOC5zaG93UXVhcnRlclllYXJQaWNrZXIsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzMTguZGF5LFxuICAgICAgICBfdGhpcyRwcm9wczE4JGFyaWFMYWIgPSBfdGhpcyRwcm9wczE4LmFyaWFMYWJlbFByZWZpeCxcbiAgICAgICAgYXJpYUxhYmVsUHJlZml4ID0gX3RoaXMkcHJvcHMxOCRhcmlhTGFiID09PSB2b2lkIDAgPyBcIk1vbnRoIFwiIDogX3RoaXMkcHJvcHMxOCRhcmlhTGFiO1xuICAgICAgdmFyIGZvcm1hdHRlZEFyaWFMYWJlbFByZWZpeCA9IGFyaWFMYWJlbFByZWZpeCA/IGFyaWFMYWJlbFByZWZpeC50cmltKCkgKyBcIiBcIiA6IFwiXCI7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3NOYW1lcygpLFxuICAgICAgICBvbk1vdXNlTGVhdmU6ICF0aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudCA/IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgb25Qb2ludGVyTGVhdmU6IHRoaXMucHJvcHMudXNlUG9pbnRlckV2ZW50ID8gdGhpcy5oYW5kbGVNb3VzZUxlYXZlIDogdW5kZWZpbmVkLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogXCJcIi5jb25jYXQoZm9ybWF0dGVkQXJpYUxhYmVsUHJlZml4KS5jb25jYXQoZm9ybWF0RGF0ZShkYXksIFwiTU1NTSwgeXl5eVwiKSksXG4gICAgICAgIHJvbGU6IFwibGlzdGJveFwiXG4gICAgICB9LCBzaG93TW9udGhZZWFyUGlja2VyID8gdGhpcy5yZW5kZXJNb250aHMoKSA6IHNob3dRdWFydGVyWWVhclBpY2tlciA/IHRoaXMucmVuZGVyUXVhcnRlcnMoKSA6IHRoaXMucmVuZGVyV2Vla3MoKSk7XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbnZhciBUaW1lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFRpbWUoKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaW1lKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBUaW1lLCBbXS5jb25jYXQoYXJncykpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJzdGF0ZVwiLCB7XG4gICAgICBoZWlnaHQ6IG51bGxcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwic2Nyb2xsVG9UaGVTZWxlY3RlZFRpbWVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5saXN0KSByZXR1cm47XG4gICAgICAgIF90aGlzLmxpc3Quc2Nyb2xsVG9wID0gX3RoaXMuY2VudGVyTGkgJiYgVGltZS5jYWxjQ2VudGVyUG9zaXRpb24oX3RoaXMucHJvcHMubW9udGhSZWYgPyBfdGhpcy5wcm9wcy5tb250aFJlZi5jbGllbnRIZWlnaHQgLSBfdGhpcy5oZWFkZXIuY2xpZW50SGVpZ2h0IDogX3RoaXMubGlzdC5jbGllbnRIZWlnaHQsIF90aGlzLmNlbnRlckxpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVDbGlja1wiLCBmdW5jdGlvbiAodGltZSkge1xuICAgICAgaWYgKChfdGhpcy5wcm9wcy5taW5UaW1lIHx8IF90aGlzLnByb3BzLm1heFRpbWUpICYmIGlzVGltZUluRGlzYWJsZWRSYW5nZSh0aW1lLCBfdGhpcy5wcm9wcykgfHwgKF90aGlzLnByb3BzLmV4Y2x1ZGVUaW1lcyB8fCBfdGhpcy5wcm9wcy5pbmNsdWRlVGltZXMgfHwgX3RoaXMucHJvcHMuZmlsdGVyVGltZSkgJiYgaXNUaW1lRGlzYWJsZWQodGltZSwgX3RoaXMucHJvcHMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKHRpbWUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1NlbGVjdGVkVGltZVwiLCBmdW5jdGlvbiAodGltZSkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLnNlbGVjdGVkICYmIGlzU2FtZU1pbnV0ZShfdGhpcy5wcm9wcy5zZWxlY3RlZCwgdGltZSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzRGlzYWJsZWRUaW1lXCIsIGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICByZXR1cm4gKF90aGlzLnByb3BzLm1pblRpbWUgfHwgX3RoaXMucHJvcHMubWF4VGltZSkgJiYgaXNUaW1lSW5EaXNhYmxlZFJhbmdlKHRpbWUsIF90aGlzLnByb3BzKSB8fCAoX3RoaXMucHJvcHMuZXhjbHVkZVRpbWVzIHx8IF90aGlzLnByb3BzLmluY2x1ZGVUaW1lcyB8fCBfdGhpcy5wcm9wcy5maWx0ZXJUaW1lKSAmJiBpc1RpbWVEaXNhYmxlZCh0aW1lLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImxpQ2xhc3Nlc1wiLCBmdW5jdGlvbiAodGltZSkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBbXCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbVwiLCBfdGhpcy5wcm9wcy50aW1lQ2xhc3NOYW1lID8gX3RoaXMucHJvcHMudGltZUNsYXNzTmFtZSh0aW1lKSA6IHVuZGVmaW5lZF07XG4gICAgICBpZiAoX3RoaXMuaXNTZWxlY3RlZFRpbWUodGltZSkpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0LWl0ZW0tLXNlbGVjdGVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLmlzRGlzYWJsZWRUaW1lKHRpbWUpKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1kaXNhYmxlZFwiKTtcbiAgICAgIH1cblxuICAgICAgLy9jb252ZXJ0IHRoaXMucHJvcHMuaW50ZXJ2YWxzIGFuZCB0aGUgcmVsZXZhbnQgdGltZSB0byBzZWNvbmRzIGFuZCBjaGVjayBpZiBpdCBpdCdzIGEgY2xlYW4gbXVsdGlwbGUgb2YgdGhlIGludGVydmFsXG4gICAgICBpZiAoX3RoaXMucHJvcHMuaW5qZWN0VGltZXMgJiYgKGdldEhvdXJzKHRpbWUpICogMzYwMCArIGdldE1pbnV0ZXModGltZSkgKiA2MCArIGdldFNlY29uZHMkMSh0aW1lKSkgJSAoX3RoaXMucHJvcHMuaW50ZXJ2YWxzICogNjApICE9PSAwKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1pbmplY3RlZFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbGFzc2VzLmpvaW4oXCIgXCIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVPbktleURvd25cIiwgZnVuY3Rpb24gKGV2ZW50LCB0aW1lKSB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSBcIiBcIikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5rZXkgPSBcIkVudGVyXCI7XG4gICAgICB9XG4gICAgICBpZiAoKGV2ZW50LmtleSA9PT0gXCJBcnJvd1VwXCIgfHwgZXZlbnQua2V5ID09PSBcIkFycm93TGVmdFwiKSAmJiBldmVudC50YXJnZXQucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnRhcmdldC5wcmV2aW91c1NpYmxpbmcuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICgoZXZlbnQua2V5ID09PSBcIkFycm93RG93blwiIHx8IGV2ZW50LmtleSA9PT0gXCJBcnJvd1JpZ2h0XCIpICYmIGV2ZW50LnRhcmdldC5uZXh0U2libGluZykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC50YXJnZXQubmV4dFNpYmxpbmcuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICBfdGhpcy5oYW5kbGVDbGljayh0aW1lKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnByb3BzLmhhbmRsZU9uS2V5RG93bihldmVudCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlclRpbWVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aW1lcyA9IFtdO1xuICAgICAgdmFyIGZvcm1hdCA9IF90aGlzLnByb3BzLmZvcm1hdCA/IF90aGlzLnByb3BzLmZvcm1hdCA6IFwicFwiO1xuICAgICAgdmFyIGludGVydmFscyA9IF90aGlzLnByb3BzLmludGVydmFscztcbiAgICAgIHZhciBhY3RpdmVEYXRlID0gX3RoaXMucHJvcHMuc2VsZWN0ZWQgfHwgX3RoaXMucHJvcHMub3BlblRvRGF0ZSB8fCBuZXdEYXRlKCk7XG4gICAgICB2YXIgYmFzZSA9IGdldFN0YXJ0T2ZEYXkoYWN0aXZlRGF0ZSk7XG4gICAgICB2YXIgc29ydGVkSW5qZWN0VGltZXMgPSBfdGhpcy5wcm9wcy5pbmplY3RUaW1lcyAmJiBfdGhpcy5wcm9wcy5pbmplY3RUaW1lcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgIH0pO1xuICAgICAgdmFyIG1pbnV0ZXNJbkRheSA9IDYwICogZ2V0SG91cnNJbkRheShhY3RpdmVEYXRlKTtcbiAgICAgIHZhciBtdWx0aXBsaWVyID0gbWludXRlc0luRGF5IC8gaW50ZXJ2YWxzO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdWx0aXBsaWVyOyBpKyspIHtcbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gYWRkTWludXRlcyhiYXNlLCBpICogaW50ZXJ2YWxzKTtcbiAgICAgICAgdGltZXMucHVzaChjdXJyZW50VGltZSk7XG4gICAgICAgIGlmIChzb3J0ZWRJbmplY3RUaW1lcykge1xuICAgICAgICAgIHZhciB0aW1lc1RvSW5qZWN0ID0gdGltZXNUb0luamVjdEFmdGVyKGJhc2UsIGN1cnJlbnRUaW1lLCBpLCBpbnRlcnZhbHMsIHNvcnRlZEluamVjdFRpbWVzKTtcbiAgICAgICAgICB0aW1lcyA9IHRpbWVzLmNvbmNhdCh0aW1lc1RvSW5qZWN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBEZXRlcm1pbmUgd2hpY2ggdGltZSB0byBmb2N1cyBhbmQgc2Nyb2xsIGludG8gdmlldyB3aGVuIGNvbXBvbmVudCBtb3VudHNcbiAgICAgIHZhciB0aW1lVG9Gb2N1cyA9IHRpbWVzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgdGltZSkge1xuICAgICAgICBpZiAodGltZS5nZXRUaW1lKCkgPD0gYWN0aXZlRGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICByZXR1cm4gdGltZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgIH0sIHRpbWVzWzBdKTtcbiAgICAgIHJldHVybiB0aW1lcy5tYXAoZnVuY3Rpb24gKHRpbWUsIGkpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICAgIGtleTogaSxcbiAgICAgICAgICBvbkNsaWNrOiBfdGhpcy5oYW5kbGVDbGljay5iaW5kKF90aGlzLCB0aW1lKSxcbiAgICAgICAgICBjbGFzc05hbWU6IF90aGlzLmxpQ2xhc3Nlcyh0aW1lKSxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihsaSkge1xuICAgICAgICAgICAgaWYgKHRpbWUgPT09IHRpbWVUb0ZvY3VzKSB7XG4gICAgICAgICAgICAgIF90aGlzLmNlbnRlckxpID0gbGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bihldikge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlT25LZXlEb3duKGV2LCB0aW1lKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRhYkluZGV4OiB0aW1lID09PSB0aW1lVG9Gb2N1cyA/IDAgOiAtMSxcbiAgICAgICAgICByb2xlOiBcIm9wdGlvblwiLFxuICAgICAgICAgIFwiYXJpYS1zZWxlY3RlZFwiOiBfdGhpcy5pc1NlbGVjdGVkVGltZSh0aW1lKSA/IFwidHJ1ZVwiIDogdW5kZWZpbmVkLFxuICAgICAgICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBfdGhpcy5pc0Rpc2FibGVkVGltZSh0aW1lKSA/IFwidHJ1ZVwiIDogdW5kZWZpbmVkXG4gICAgICAgIH0sIGZvcm1hdERhdGUodGltZSwgZm9ybWF0LCBfdGhpcy5wcm9wcy5sb2NhbGUpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoVGltZSwgX1JlYWN0JENvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoVGltZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAvLyBjb2RlIHRvIGVuc3VyZSBzZWxlY3RlZCB0aW1lIHdpbGwgYWx3YXlzIGJlIGluIGZvY3VzIHdpdGhpbiB0aW1lIHdpbmRvdyB3aGVuIGl0IGZpcnN0IGFwcGVhcnNcbiAgICAgIHRoaXMuc2Nyb2xsVG9UaGVTZWxlY3RlZFRpbWUoKTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm1vbnRoUmVmICYmIHRoaXMuaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGhlaWdodDogdGhpcy5wcm9wcy5tb250aFJlZi5jbGllbnRIZWlnaHQgLSB0aGlzLmhlYWRlci5jbGllbnRIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciBoZWlnaHQgPSB0aGlzLnN0YXRlLmhlaWdodDtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciBcIi5jb25jYXQodGhpcy5wcm9wcy50b2RheUJ1dHRvbiA/IFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXItLXdpdGgtdG9kYXktYnV0dG9uXCIgOiBcIlwiKVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyIHJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlci0tdGltZSBcIi5jb25jYXQodGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkgPyBcInJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlci0tdGltZS0tb25seVwiIDogXCJcIiksXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGhlYWRlcikge1xuICAgICAgICAgIF90aGlzMi5oZWFkZXIgPSBoZWFkZXI7XG4gICAgICAgIH1cbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXItdGltZV9faGVhZGVyXCJcbiAgICAgIH0sIHRoaXMucHJvcHMudGltZUNhcHRpb24pKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZVwiXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWJveFwiXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdFwiLFxuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihsaXN0KSB7XG4gICAgICAgICAgX3RoaXMyLmxpc3QgPSBsaXN0O1xuICAgICAgICB9LFxuICAgICAgICBzdHlsZTogaGVpZ2h0ID8ge1xuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgcm9sZTogXCJsaXN0Ym94XCIsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLnByb3BzLnRpbWVDYXB0aW9uXG4gICAgICB9LCB0aGlzLnJlbmRlclRpbWVzKCkpKSkpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImRlZmF1bHRQcm9wc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW50ZXJ2YWxzOiAzMCxcbiAgICAgICAgb25UaW1lQ2hhbmdlOiBmdW5jdGlvbiBvblRpbWVDaGFuZ2UoKSB7fSxcbiAgICAgICAgdG9kYXlCdXR0b246IG51bGwsXG4gICAgICAgIHRpbWVDYXB0aW9uOiBcIlRpbWVcIlxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcbl9kZWZpbmVQcm9wZXJ0eShUaW1lLCBcImNhbGNDZW50ZXJQb3NpdGlvblwiLCBmdW5jdGlvbiAobGlzdEhlaWdodCwgY2VudGVyTGlSZWYpIHtcbiAgcmV0dXJuIGNlbnRlckxpUmVmLm9mZnNldFRvcCAtIChsaXN0SGVpZ2h0IC8gMiAtIGNlbnRlckxpUmVmLmNsaWVudEhlaWdodCAvIDIpO1xufSk7XG5cbnZhciBZZWFyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFllYXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFllYXIpO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBZZWFyLCBbcHJvcHNdKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiWUVBUl9SRUZTXCIsIF90b0NvbnN1bWFibGVBcnJheShBcnJheShfdGhpcy5wcm9wcy55ZWFySXRlbU51bWJlcikpLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpO1xuICAgIH0pKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNEaXNhYmxlZFwiLCBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIGlzRGF5RGlzYWJsZWQoZGF0ZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc0V4Y2x1ZGVkXCIsIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICByZXR1cm4gaXNEYXlFeGNsdWRlZChkYXRlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInNlbGVjdGluZ0RhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzJHNlbGVjdGluZztcbiAgICAgIHJldHVybiAoX3RoaXMkcHJvcHMkc2VsZWN0aW5nID0gX3RoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZSkgIT09IG51bGwgJiYgX3RoaXMkcHJvcHMkc2VsZWN0aW5nICE9PSB2b2lkIDAgPyBfdGhpcyRwcm9wcyRzZWxlY3RpbmcgOiBfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb247XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInVwZGF0ZUZvY3VzT25QYWdpbmF0ZVwiLCBmdW5jdGlvbiAocmVmSW5kZXgpIHtcbiAgICAgIHZhciB3YWl0Rm9yUmVSZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuWUVBUl9SRUZTW3JlZkluZGV4XS5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9LmJpbmQoX3RoaXMpO1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh3YWl0Rm9yUmVSZW5kZXIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVZZWFyQ2xpY2tcIiwgZnVuY3Rpb24gKGRheSwgZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkRheUNsaWNrKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRGF5Q2xpY2soZGF5LCBldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZVllYXJOYXZpZ2F0aW9uXCIsIGZ1bmN0aW9uIChuZXdZZWFyLCBuZXdEYXRlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzLmRhdGUsXG4gICAgICAgIHllYXJJdGVtTnVtYmVyID0gX3RoaXMkcHJvcHMueWVhckl0ZW1OdW1iZXI7XG4gICAgICB2YXIgX3V0aWxzJGdldFllYXJzUGVyaW9kID0gZ2V0WWVhcnNQZXJpb2QoZGF0ZSwgeWVhckl0ZW1OdW1iZXIpLFxuICAgICAgICBzdGFydFBlcmlvZCA9IF91dGlscyRnZXRZZWFyc1BlcmlvZC5zdGFydFBlcmlvZDtcbiAgICAgIGlmIChfdGhpcy5pc0Rpc2FibGVkKG5ld0RhdGUpIHx8IF90aGlzLmlzRXhjbHVkZWQobmV3RGF0ZSkpIHJldHVybjtcbiAgICAgIF90aGlzLnByb3BzLnNldFByZVNlbGVjdGlvbihuZXdEYXRlKTtcbiAgICAgIGlmIChuZXdZZWFyIC0gc3RhcnRQZXJpb2QgPT09IC0xKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZUZvY3VzT25QYWdpbmF0ZSh5ZWFySXRlbU51bWJlciAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChuZXdZZWFyIC0gc3RhcnRQZXJpb2QgPT09IHllYXJJdGVtTnVtYmVyKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZUZvY3VzT25QYWdpbmF0ZSgwKTtcbiAgICAgIH0gZWxzZSBfdGhpcy5ZRUFSX1JFRlNbbmV3WWVhciAtIHN0YXJ0UGVyaW9kXS5jdXJyZW50LmZvY3VzKCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzU2FtZURheVwiLCBmdW5jdGlvbiAoeSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBpc1NhbWVEYXkoeSwgb3RoZXIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc0N1cnJlbnRZZWFyXCIsIGZ1bmN0aW9uICh5KSB7XG4gICAgICByZXR1cm4geSA9PT0gZ2V0WWVhcihuZXdEYXRlKCkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1JhbmdlU3RhcnRcIiwgZnVuY3Rpb24gKHkpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5zdGFydERhdGUgJiYgX3RoaXMucHJvcHMuZW5kRGF0ZSAmJiBpc1NhbWVZZWFyKHNldFllYXIobmV3RGF0ZSgpLCB5KSwgX3RoaXMucHJvcHMuc3RhcnREYXRlKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNSYW5nZUVuZFwiLCBmdW5jdGlvbiAoeSkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLnN0YXJ0RGF0ZSAmJiBfdGhpcy5wcm9wcy5lbmREYXRlICYmIGlzU2FtZVllYXIoc2V0WWVhcihuZXdEYXRlKCksIHkpLCBfdGhpcy5wcm9wcy5lbmREYXRlKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNJblJhbmdlXCIsIGZ1bmN0aW9uICh5KSB7XG4gICAgICByZXR1cm4gaXNZZWFySW5SYW5nZSh5LCBfdGhpcy5wcm9wcy5zdGFydERhdGUsIF90aGlzLnByb3BzLmVuZERhdGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc0luU2VsZWN0aW5nUmFuZ2VcIiwgZnVuY3Rpb24gKHkpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgc2VsZWN0c1N0YXJ0ID0gX3RoaXMkcHJvcHMyLnNlbGVjdHNTdGFydCxcbiAgICAgICAgc2VsZWN0c0VuZCA9IF90aGlzJHByb3BzMi5zZWxlY3RzRW5kLFxuICAgICAgICBzZWxlY3RzUmFuZ2UgPSBfdGhpcyRwcm9wczIuc2VsZWN0c1JhbmdlLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczIuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHMyLmVuZERhdGU7XG4gICAgICBpZiAoIShzZWxlY3RzU3RhcnQgfHwgc2VsZWN0c0VuZCB8fCBzZWxlY3RzUmFuZ2UpIHx8ICFfdGhpcy5zZWxlY3RpbmdEYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdHNTdGFydCAmJiBlbmREYXRlKSB7XG4gICAgICAgIHJldHVybiBpc1llYXJJblJhbmdlKHksIF90aGlzLnNlbGVjdGluZ0RhdGUoKSwgZW5kRGF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZWN0c0VuZCAmJiBzdGFydERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGlzWWVhckluUmFuZ2UoeSwgc3RhcnREYXRlLCBfdGhpcy5zZWxlY3RpbmdEYXRlKCkpO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdHNSYW5nZSAmJiBzdGFydERhdGUgJiYgIWVuZERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGlzWWVhckluUmFuZ2UoeSwgc3RhcnREYXRlLCBfdGhpcy5zZWxlY3RpbmdEYXRlKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpc1NlbGVjdGluZ1JhbmdlU3RhcnRcIiwgZnVuY3Rpb24gKHkpIHtcbiAgICAgIGlmICghX3RoaXMuaXNJblNlbGVjdGluZ1JhbmdlKHkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMzLnN0YXJ0RGF0ZSxcbiAgICAgICAgc2VsZWN0c1N0YXJ0ID0gX3RoaXMkcHJvcHMzLnNlbGVjdHNTdGFydDtcbiAgICAgIHZhciBfeWVhciA9IHNldFllYXIobmV3RGF0ZSgpLCB5KTtcbiAgICAgIGlmIChzZWxlY3RzU3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIGlzU2FtZVllYXIoX3llYXIsIF90aGlzLnNlbGVjdGluZ0RhdGUoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTYW1lWWVhcihfeWVhciwgc3RhcnREYXRlKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNTZWxlY3RpbmdSYW5nZUVuZFwiLCBmdW5jdGlvbiAoeSkge1xuICAgICAgaWYgKCFfdGhpcy5pc0luU2VsZWN0aW5nUmFuZ2UoeSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHM0LmVuZERhdGUsXG4gICAgICAgIHNlbGVjdHNFbmQgPSBfdGhpcyRwcm9wczQuc2VsZWN0c0VuZCxcbiAgICAgICAgc2VsZWN0c1JhbmdlID0gX3RoaXMkcHJvcHM0LnNlbGVjdHNSYW5nZTtcbiAgICAgIHZhciBfeWVhciA9IHNldFllYXIobmV3RGF0ZSgpLCB5KTtcbiAgICAgIGlmIChzZWxlY3RzRW5kIHx8IHNlbGVjdHNSYW5nZSkge1xuICAgICAgICByZXR1cm4gaXNTYW1lWWVhcihfeWVhciwgX3RoaXMuc2VsZWN0aW5nRGF0ZSgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1NhbWVZZWFyKF95ZWFyLCBlbmREYXRlKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaXNLZXlib2FyZFNlbGVjdGVkXCIsIGZ1bmN0aW9uICh5KSB7XG4gICAgICB2YXIgZGF0ZSA9IGdldFN0YXJ0T2ZZZWFyKHNldFllYXIoX3RoaXMucHJvcHMuZGF0ZSwgeSkpO1xuICAgICAgcmV0dXJuICFfdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbiAmJiAhX3RoaXMucHJvcHMuaW5saW5lICYmICFpc1NhbWVEYXkoZGF0ZSwgZ2V0U3RhcnRPZlllYXIoX3RoaXMucHJvcHMuc2VsZWN0ZWQpKSAmJiBpc1NhbWVEYXkoZGF0ZSwgZ2V0U3RhcnRPZlllYXIoX3RoaXMucHJvcHMucHJlU2VsZWN0aW9uKSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIm9uWWVhckNsaWNrXCIsIGZ1bmN0aW9uIChlLCB5KSB7XG4gICAgICB2YXIgZGF0ZSA9IF90aGlzLnByb3BzLmRhdGU7XG4gICAgICBfdGhpcy5oYW5kbGVZZWFyQ2xpY2soZ2V0U3RhcnRPZlllYXIoc2V0WWVhcihkYXRlLCB5KSksIGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvblllYXJLZXlEb3duXCIsIGZ1bmN0aW9uIChlLCB5KSB7XG4gICAgICB2YXIga2V5ID0gZS5rZXk7XG4gICAgICB2YXIgaGFuZGxlT25LZXlEb3duID0gX3RoaXMucHJvcHMuaGFuZGxlT25LZXlEb3duO1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbikge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgIGNhc2UgXCJFbnRlclwiOlxuICAgICAgICAgICAgX3RoaXMub25ZZWFyQ2xpY2soZSwgeSk7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24oX3RoaXMucHJvcHMuc2VsZWN0ZWQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVllYXJOYXZpZ2F0aW9uKHkgKyAxLCBhZGRZZWFycyhfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24sIDEpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVllYXJOYXZpZ2F0aW9uKHkgLSAxLCBzdWJZZWFycyhfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24sIDEpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBoYW5kbGVPbktleURvd24gJiYgaGFuZGxlT25LZXlEb3duKGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXRZZWFyQ2xhc3NOYW1lc1wiLCBmdW5jdGlvbiAoeSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNSA9IF90aGlzLnByb3BzLFxuICAgICAgICBkYXRlID0gX3RoaXMkcHJvcHM1LmRhdGUsXG4gICAgICAgIG1pbkRhdGUgPSBfdGhpcyRwcm9wczUubWluRGF0ZSxcbiAgICAgICAgbWF4RGF0ZSA9IF90aGlzJHByb3BzNS5tYXhEYXRlLFxuICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzNS5zZWxlY3RlZCxcbiAgICAgICAgZXhjbHVkZURhdGVzID0gX3RoaXMkcHJvcHM1LmV4Y2x1ZGVEYXRlcyxcbiAgICAgICAgaW5jbHVkZURhdGVzID0gX3RoaXMkcHJvcHM1LmluY2x1ZGVEYXRlcyxcbiAgICAgICAgZmlsdGVyRGF0ZSA9IF90aGlzJHByb3BzNS5maWx0ZXJEYXRlLFxuICAgICAgICB5ZWFyQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHM1LnllYXJDbGFzc05hbWU7XG4gICAgICByZXR1cm4gY2xzeChcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dFwiLCBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItXCIuY29uY2F0KHkpLCB5ZWFyQ2xhc3NOYW1lID8geWVhckNsYXNzTmFtZShzZXRZZWFyKGRhdGUsIHkpKSA6IHVuZGVmaW5lZCwge1xuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0tc2VsZWN0ZWRcIjogeSA9PT0gZ2V0WWVhcihzZWxlY3RlZCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1kaXNhYmxlZFwiOiAobWluRGF0ZSB8fCBtYXhEYXRlIHx8IGV4Y2x1ZGVEYXRlcyB8fCBpbmNsdWRlRGF0ZXMgfHwgZmlsdGVyRGF0ZSkgJiYgaXNZZWFyRGlzYWJsZWQoeSwgX3RoaXMucHJvcHMpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0ta2V5Ym9hcmQtc2VsZWN0ZWRcIjogX3RoaXMuaXNLZXlib2FyZFNlbGVjdGVkKHkpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0tcmFuZ2Utc3RhcnRcIjogX3RoaXMuaXNSYW5nZVN0YXJ0KHkpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0tcmFuZ2UtZW5kXCI6IF90aGlzLmlzUmFuZ2VFbmQoeSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1pbi1yYW5nZVwiOiBfdGhpcy5pc0luUmFuZ2UoeSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2VcIjogX3RoaXMuaXNJblNlbGVjdGluZ1JhbmdlKHkpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0tc2VsZWN0aW5nLXJhbmdlLXN0YXJ0XCI6IF90aGlzLmlzU2VsZWN0aW5nUmFuZ2VTdGFydCh5KSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLXNlbGVjdGluZy1yYW5nZS1lbmRcIjogX3RoaXMuaXNTZWxlY3RpbmdSYW5nZUVuZCh5KSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLXRvZGF5XCI6IF90aGlzLmlzQ3VycmVudFllYXIoeSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXRZZWFyVGFiSW5kZXhcIiwgZnVuY3Rpb24gKHkpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbikgcmV0dXJuIFwiLTFcIjtcbiAgICAgIHZhciBwcmVTZWxlY3RlZCA9IGdldFllYXIoX3RoaXMucHJvcHMucHJlU2VsZWN0aW9uKTtcbiAgICAgIHJldHVybiB5ID09PSBwcmVTZWxlY3RlZCA/IFwiMFwiIDogXCItMVwiO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXRZZWFyQ29udGFpbmVyQ2xhc3NOYW1lc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIHNlbGVjdGluZ0RhdGUgPSBfdGhpcyRwcm9wczYuc2VsZWN0aW5nRGF0ZSxcbiAgICAgICAgc2VsZWN0c1N0YXJ0ID0gX3RoaXMkcHJvcHM2LnNlbGVjdHNTdGFydCxcbiAgICAgICAgc2VsZWN0c0VuZCA9IF90aGlzJHByb3BzNi5zZWxlY3RzRW5kLFxuICAgICAgICBzZWxlY3RzUmFuZ2UgPSBfdGhpcyRwcm9wczYuc2VsZWN0c1JhbmdlO1xuICAgICAgcmV0dXJuIGNsc3goXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyXCIsIHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLS1zZWxlY3RpbmctcmFuZ2VcIjogc2VsZWN0aW5nRGF0ZSAmJiAoc2VsZWN0c1N0YXJ0IHx8IHNlbGVjdHNFbmQgfHwgc2VsZWN0c1JhbmdlKVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImdldFllYXJDb250ZW50XCIsIGZ1bmN0aW9uICh5KSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMucmVuZGVyWWVhckNvbnRlbnQgPyBfdGhpcy5wcm9wcy5yZW5kZXJZZWFyQ29udGVudCh5KSA6IHk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhZZWFyLCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhZZWFyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICB2YXIgeWVhcnNMaXN0ID0gW107XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzNy5kYXRlLFxuICAgICAgICB5ZWFySXRlbU51bWJlciA9IF90aGlzJHByb3BzNy55ZWFySXRlbU51bWJlcixcbiAgICAgICAgb25ZZWFyTW91c2VFbnRlciA9IF90aGlzJHByb3BzNy5vblllYXJNb3VzZUVudGVyLFxuICAgICAgICBvblllYXJNb3VzZUxlYXZlID0gX3RoaXMkcHJvcHM3Lm9uWWVhck1vdXNlTGVhdmU7XG4gICAgICB2YXIgX3V0aWxzJGdldFllYXJzUGVyaW9kMiA9IGdldFllYXJzUGVyaW9kKGRhdGUsIHllYXJJdGVtTnVtYmVyKSxcbiAgICAgICAgc3RhcnRQZXJpb2QgPSBfdXRpbHMkZ2V0WWVhcnNQZXJpb2QyLnN0YXJ0UGVyaW9kLFxuICAgICAgICBlbmRQZXJpb2QgPSBfdXRpbHMkZ2V0WWVhcnNQZXJpb2QyLmVuZFBlcmlvZDtcbiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKHkpIHtcbiAgICAgICAgeWVhcnNMaXN0LnB1c2goIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICByZWY6IF90aGlzMi5ZRUFSX1JFRlNbeSAtIHN0YXJ0UGVyaW9kXSxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2KSB7XG4gICAgICAgICAgICBfdGhpczIub25ZZWFyQ2xpY2soZXYsIHkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oZXYpIHtcbiAgICAgICAgICAgIGlmIChpc1NwYWNlS2V5RG93bihldikpIHtcbiAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgZXYua2V5ID0gXCJFbnRlclwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMyLm9uWWVhcktleURvd24oZXYsIHkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdGFiSW5kZXg6IF90aGlzMi5nZXRZZWFyVGFiSW5kZXgoeSksXG4gICAgICAgICAgY2xhc3NOYW1lOiBfdGhpczIuZ2V0WWVhckNsYXNzTmFtZXMoeSksXG4gICAgICAgICAgb25Nb3VzZUVudGVyOiAhX3RoaXMyLnByb3BzLnVzZVBvaW50ZXJFdmVudCA/IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgcmV0dXJuIG9uWWVhck1vdXNlRW50ZXIoZXYsIHkpO1xuICAgICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgb25Qb2ludGVyRW50ZXI6IF90aGlzMi5wcm9wcy51c2VQb2ludGVyRXZlbnQgPyBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHJldHVybiBvblllYXJNb3VzZUVudGVyKGV2LCB5KTtcbiAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZTogIV90aGlzMi5wcm9wcy51c2VQb2ludGVyRXZlbnQgPyBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHJldHVybiBvblllYXJNb3VzZUxlYXZlKGV2LCB5KTtcbiAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgIG9uUG9pbnRlckxlYXZlOiBfdGhpczIucHJvcHMudXNlUG9pbnRlckV2ZW50ID8gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICByZXR1cm4gb25ZZWFyTW91c2VMZWF2ZShldiwgeSk7XG4gICAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBrZXk6IHksXG4gICAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogX3RoaXMyLmlzQ3VycmVudFllYXIoeSkgPyBcImRhdGVcIiA6IHVuZGVmaW5lZFxuICAgICAgICB9LCBfdGhpczIuZ2V0WWVhckNvbnRlbnQoeSkpKTtcbiAgICAgIH07XG4gICAgICBmb3IgKHZhciB5ID0gc3RhcnRQZXJpb2Q7IHkgPD0gZW5kUGVyaW9kOyB5KyspIHtcbiAgICAgICAgX2xvb3AoeSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0WWVhckNvbnRhaW5lckNsYXNzTmFtZXMoKVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci13cmFwcGVyXCIsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogIXRoaXMucHJvcHMudXNlUG9pbnRlckV2ZW50ID8gdGhpcy5wcm9wcy5jbGVhclNlbGVjdGluZ0RhdGUgOiB1bmRlZmluZWQsXG4gICAgICAgIG9uUG9pbnRlckxlYXZlOiB0aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudCA/IHRoaXMucHJvcHMuY2xlYXJTZWxlY3RpbmdEYXRlIDogdW5kZWZpbmVkXG4gICAgICB9LCB5ZWFyc0xpc3QpKTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIGlucHV0VGltZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBpbnB1dFRpbWUocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGlucHV0VGltZSk7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIGlucHV0VGltZSwgW3Byb3BzXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIm9uVGltZUNoYW5nZVwiLCBmdW5jdGlvbiAodGltZSkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0aW1lOiB0aW1lXG4gICAgICB9KTtcbiAgICAgIHZhciBwcm9wRGF0ZSA9IF90aGlzLnByb3BzLmRhdGU7XG4gICAgICB2YXIgaXNQcm9wRGF0ZVZhbGlkID0gcHJvcERhdGUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTihwcm9wRGF0ZSk7XG4gICAgICB2YXIgZGF0ZSA9IGlzUHJvcERhdGVWYWxpZCA/IHByb3BEYXRlIDogbmV3IERhdGUoKTtcbiAgICAgIGRhdGUuc2V0SG91cnModGltZS5zcGxpdChcIjpcIilbMF0pO1xuICAgICAgZGF0ZS5zZXRNaW51dGVzKHRpbWUuc3BsaXQoXCI6XCIpWzFdKTtcbiAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKGRhdGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJUaW1lSW5wdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRpbWUgPSBfdGhpcy5zdGF0ZS50aW1lO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGRhdGUgPSBfdGhpcyRwcm9wcy5kYXRlLFxuICAgICAgICB0aW1lU3RyaW5nID0gX3RoaXMkcHJvcHMudGltZVN0cmluZyxcbiAgICAgICAgY3VzdG9tVGltZUlucHV0ID0gX3RoaXMkcHJvcHMuY3VzdG9tVGltZUlucHV0O1xuICAgICAgaWYgKGN1c3RvbVRpbWVJbnB1dCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjdXN0b21UaW1lSW5wdXQsIHtcbiAgICAgICAgICBkYXRlOiBkYXRlLFxuICAgICAgICAgIHZhbHVlOiB0aW1lLFxuICAgICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5vblRpbWVDaGFuZ2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgIHR5cGU6IFwidGltZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlci10aW1lX19pbnB1dFwiLFxuICAgICAgICBwbGFjZWhvbGRlcjogXCJUaW1lXCIsXG4gICAgICAgIG5hbWU6IFwidGltZS1pbnB1dFwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHRpbWUsXG4gICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShldikge1xuICAgICAgICAgIF90aGlzLm9uVGltZUNoYW5nZShldi50YXJnZXQudmFsdWUgfHwgdGltZVN0cmluZyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdGltZTogX3RoaXMucHJvcHMudGltZVN0cmluZ1xuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhpbnB1dFRpbWUsIF9SZWFjdCRDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKGlucHV0VGltZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19pbnB1dC10aW1lLWNvbnRhaW5lclwiXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyLXRpbWVfX2NhcHRpb25cIlxuICAgICAgfSwgdGhpcy5wcm9wcy50aW1lSW5wdXRMYWJlbCksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXQtY29udGFpbmVyXCJcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXRcIlxuICAgICAgfSwgdGhpcy5yZW5kZXJUaW1lSW5wdXQoKSkpKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgICAgaWYgKHByb3BzLnRpbWVTdHJpbmcgIT09IHN0YXRlLnRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0aW1lOiBwcm9wcy50aW1lU3RyaW5nXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBudWxsIHRvIGluZGljYXRlIG5vIGNoYW5nZSB0byBzdGF0ZS5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5mdW5jdGlvbiBDYWxlbmRhckNvbnRhaW5lcihfcmVmKSB7XG4gIHZhciBfcmVmJHNob3dUaW1lU2VsZWN0T24gPSBfcmVmLnNob3dUaW1lU2VsZWN0T25seSxcbiAgICBzaG93VGltZVNlbGVjdE9ubHkgPSBfcmVmJHNob3dUaW1lU2VsZWN0T24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRzaG93VGltZVNlbGVjdE9uLFxuICAgIF9yZWYkc2hvd1RpbWUgPSBfcmVmLnNob3dUaW1lLFxuICAgIHNob3dUaW1lID0gX3JlZiRzaG93VGltZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHNob3dUaW1lLFxuICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGFyaWFMYWJlbCA9IHNob3dUaW1lU2VsZWN0T25seSA/IFwiQ2hvb3NlIFRpbWVcIiA6IFwiQ2hvb3NlIERhdGVcIi5jb25jYXQoc2hvd1RpbWUgPyBcIiBhbmQgVGltZVwiIDogXCJcIik7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcm9sZTogXCJkaWFsb2dcIixcbiAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgIFwiYXJpYS1tb2RhbFwiOiBcInRydWVcIlxuICB9LCBjaGlsZHJlbik7XG59XG5cbnZhciBEUk9QRE9XTl9GT0NVU19DTEFTU05BTUVTID0gW1wicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1zZWxlY3RcIiwgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC1zZWxlY3RcIiwgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXNlbGVjdFwiXTtcbnZhciBpc0Ryb3Bkb3duU2VsZWN0ID0gZnVuY3Rpb24gaXNEcm9wZG93blNlbGVjdCgpIHtcbiAgdmFyIGVsZW1lbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgY2xhc3NOYW1lcyA9IChlbGVtZW50LmNsYXNzTmFtZSB8fCBcIlwiKS5zcGxpdCgvXFxzKy8pO1xuICByZXR1cm4gRFJPUERPV05fRk9DVVNfQ0xBU1NOQU1FUy5zb21lKGZ1bmN0aW9uICh0ZXN0Q2xhc3NuYW1lKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZXMuaW5kZXhPZih0ZXN0Q2xhc3NuYW1lKSA+PSAwO1xuICB9KTtcbn07XG52YXIgQ2FsZW5kYXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gQ2FsZW5kYXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbGVuZGFyKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgQ2FsZW5kYXIsIFtwcm9wc10pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVDbGlja091dHNpZGVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrT3V0c2lkZShldmVudCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInNldENsaWNrT3V0c2lkZVJlZlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuY29udGFpbmVyUmVmLmN1cnJlbnQ7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZURyb3Bkb3duRm9jdXNcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoaXNEcm9wZG93blNlbGVjdChldmVudC50YXJnZXQpKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRHJvcGRvd25Gb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXREYXRlSW5WaWV3XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICBwcmVTZWxlY3Rpb24gPSBfdGhpcyRwcm9wcy5wcmVTZWxlY3Rpb24sXG4gICAgICAgIHNlbGVjdGVkID0gX3RoaXMkcHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgIG9wZW5Ub0RhdGUgPSBfdGhpcyRwcm9wcy5vcGVuVG9EYXRlO1xuICAgICAgdmFyIG1pbkRhdGUgPSBnZXRFZmZlY3RpdmVNaW5EYXRlKF90aGlzLnByb3BzKTtcbiAgICAgIHZhciBtYXhEYXRlID0gZ2V0RWZmZWN0aXZlTWF4RGF0ZShfdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgY3VycmVudCA9IG5ld0RhdGUoKTtcbiAgICAgIHZhciBpbml0aWFsRGF0ZSA9IG9wZW5Ub0RhdGUgfHwgc2VsZWN0ZWQgfHwgcHJlU2VsZWN0aW9uO1xuICAgICAgaWYgKGluaXRpYWxEYXRlKSB7XG4gICAgICAgIHJldHVybiBpbml0aWFsRGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtaW5EYXRlICYmIGlzQmVmb3JlKGN1cnJlbnQsIG1pbkRhdGUpKSB7XG4gICAgICAgICAgcmV0dXJuIG1pbkRhdGU7XG4gICAgICAgIH0gZWxzZSBpZiAobWF4RGF0ZSAmJiBpc0FmdGVyKGN1cnJlbnQsIG1heERhdGUpKSB7XG4gICAgICAgICAgcmV0dXJuIG1heERhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJpbmNyZWFzZU1vbnRoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBkYXRlID0gX3JlZi5kYXRlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGU6IGFkZE1vbnRocyhkYXRlLCAxKVxuICAgICAgICB9O1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTW9udGhDaGFuZ2UoX3RoaXMuc3RhdGUuZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiZGVjcmVhc2VNb250aFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfcmVmMi5kYXRlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGU6IHN1Yk1vbnRocyhkYXRlLCAxKVxuICAgICAgICB9O1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTW9udGhDaGFuZ2UoX3RoaXMuc3RhdGUuZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlRGF5Q2xpY2tcIiwgZnVuY3Rpb24gKGRheSwgZXZlbnQsIG1vbnRoU2VsZWN0ZWRJbikge1xuICAgICAgX3RoaXMucHJvcHMub25TZWxlY3QoZGF5LCBldmVudCwgbW9udGhTZWxlY3RlZEluKTtcbiAgICAgIF90aGlzLnByb3BzLnNldFByZVNlbGVjdGlvbiAmJiBfdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24oZGF5KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlRGF5TW91c2VFbnRlclwiLCBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGluZ0RhdGU6IGRheVxuICAgICAgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vbkRheU1vdXNlRW50ZXIgJiYgX3RoaXMucHJvcHMub25EYXlNb3VzZUVudGVyKGRheSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZU1vbnRoTW91c2VMZWF2ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGluZ0RhdGU6IG51bGxcbiAgICAgIH0pO1xuICAgICAgX3RoaXMucHJvcHMub25Nb250aE1vdXNlTGVhdmUgJiYgX3RoaXMucHJvcHMub25Nb250aE1vdXNlTGVhdmUoKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlWWVhck1vdXNlRW50ZXJcIiwgZnVuY3Rpb24gKGV2ZW50LCB5ZWFyKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGluZ0RhdGU6IHNldFllYXIobmV3RGF0ZSgpLCB5ZWFyKVxuICAgICAgfSk7XG4gICAgICAhIV90aGlzLnByb3BzLm9uWWVhck1vdXNlRW50ZXIgJiYgX3RoaXMucHJvcHMub25ZZWFyTW91c2VFbnRlcihldmVudCwgeWVhcik7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZVllYXJNb3VzZUxlYXZlXCIsIGZ1bmN0aW9uIChldmVudCwgeWVhcikge1xuICAgICAgISFfdGhpcy5wcm9wcy5vblllYXJNb3VzZUxlYXZlICYmIF90aGlzLnByb3BzLm9uWWVhck1vdXNlTGVhdmUoZXZlbnQsIHllYXIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVZZWFyQ2hhbmdlXCIsIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25ZZWFyQ2hhbmdlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uWWVhckNoYW5nZShkYXRlKTtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzUmVuZGVyQXJpYUxpdmVNZXNzYWdlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLmFkanVzdERhdGVPbkNoYW5nZSkge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMub25TZWxlY3QpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vblNlbGVjdChkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMucHJvcHMuc2V0T3Blbikge1xuICAgICAgICAgIF90aGlzLnByb3BzLnNldE9wZW4odHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLnByb3BzLnNldFByZVNlbGVjdGlvbiAmJiBfdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24oZGF0ZSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZU1vbnRoQ2hhbmdlXCIsIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICBfdGhpcy5oYW5kbGVDdXN0b21Nb250aENoYW5nZShkYXRlKTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5hZGp1c3REYXRlT25DaGFuZ2UpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uU2VsZWN0KSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25TZWxlY3QoZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzLnByb3BzLnNldE9wZW4pIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5zZXRPcGVuKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24gJiYgX3RoaXMucHJvcHMuc2V0UHJlU2VsZWN0aW9uKGRhdGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVDdXN0b21Nb250aENoYW5nZVwiLCBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW9udGhDaGFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb250aENoYW5nZShkYXRlKTtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzUmVuZGVyQXJpYUxpdmVNZXNzYWdlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVNb250aFllYXJDaGFuZ2VcIiwgZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIF90aGlzLmhhbmRsZVllYXJDaGFuZ2UoZGF0ZSk7XG4gICAgICBfdGhpcy5oYW5kbGVNb250aENoYW5nZShkYXRlKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiY2hhbmdlWWVhclwiLCBmdW5jdGlvbiAoeWVhcikge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBkYXRlID0gX3JlZjMuZGF0ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRlOiBzZXRZZWFyKGRhdGUsIHllYXIpXG4gICAgICAgIH07XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVZZWFyQ2hhbmdlKF90aGlzLnN0YXRlLmRhdGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImNoYW5nZU1vbnRoXCIsIGZ1bmN0aW9uIChtb250aCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWY0KSB7XG4gICAgICAgIHZhciBkYXRlID0gX3JlZjQuZGF0ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRlOiBzZXRNb250aChkYXRlLCBtb250aClcbiAgICAgICAgfTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vbnRoQ2hhbmdlKF90aGlzLnN0YXRlLmRhdGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImNoYW5nZU1vbnRoWWVhclwiLCBmdW5jdGlvbiAobW9udGhZZWFyKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfcmVmNS5kYXRlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGU6IHNldFllYXIoc2V0TW9udGgoZGF0ZSwgZ2V0TW9udGgobW9udGhZZWFyKSksIGdldFllYXIobW9udGhZZWFyKSlcbiAgICAgICAgfTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vbnRoWWVhckNoYW5nZShfdGhpcy5zdGF0ZS5kYXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoZWFkZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IF90aGlzLnN0YXRlLmRhdGU7XG4gICAgICB2YXIgc3RhcnRPZldlZWsgPSBnZXRTdGFydE9mV2VlayhkYXRlLCBfdGhpcy5wcm9wcy5sb2NhbGUsIF90aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXkpO1xuICAgICAgdmFyIGRheU5hbWVzID0gW107XG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2hvd1dlZWtOdW1iZXJzKSB7XG4gICAgICAgIGRheU5hbWVzLnB1c2goIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBrZXk6IFwiV1wiLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZVwiXG4gICAgICAgIH0sIF90aGlzLnByb3BzLndlZWtMYWJlbCB8fCBcIiNcIikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRheU5hbWVzLmNvbmNhdChbMCwgMSwgMiwgMywgNCwgNSwgNl0ubWFwKGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgdmFyIGRheSA9IGFkZERheXMoc3RhcnRPZldlZWssIG9mZnNldCk7XG4gICAgICAgIHZhciB3ZWVrRGF5TmFtZSA9IF90aGlzLmZvcm1hdFdlZWtkYXkoZGF5LCBfdGhpcy5wcm9wcy5sb2NhbGUpO1xuICAgICAgICB2YXIgd2Vla0RheUNsYXNzTmFtZSA9IF90aGlzLnByb3BzLndlZWtEYXlDbGFzc05hbWUgPyBfdGhpcy5wcm9wcy53ZWVrRGF5Q2xhc3NOYW1lKGRheSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAga2V5OiBvZmZzZXQsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LW5hbWVcIiwgd2Vla0RheUNsYXNzTmFtZSlcbiAgICAgICAgfSwgd2Vla0RheU5hbWUpO1xuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJmb3JtYXRXZWVrZGF5XCIsIGZ1bmN0aW9uIChkYXksIGxvY2FsZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmZvcm1hdFdlZWtEYXkpIHtcbiAgICAgICAgcmV0dXJuIGdldEZvcm1hdHRlZFdlZWtkYXlJbkxvY2FsZShkYXksIF90aGlzLnByb3BzLmZvcm1hdFdlZWtEYXksIGxvY2FsZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMudXNlV2Vla2RheXNTaG9ydCA/IGdldFdlZWtkYXlTaG9ydEluTG9jYWxlKGRheSwgbG9jYWxlKSA6IGdldFdlZWtkYXlNaW5JbkxvY2FsZShkYXksIGxvY2FsZSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImRlY3JlYXNlWWVhclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoX3JlZjYpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfcmVmNi5kYXRlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGU6IHN1YlllYXJzKGRhdGUsIF90aGlzLnByb3BzLnNob3dZZWFyUGlja2VyID8gX3RoaXMucHJvcHMueWVhckl0ZW1OdW1iZXIgOiAxKVxuICAgICAgICB9O1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFuZGxlWWVhckNoYW5nZShfdGhpcy5zdGF0ZS5kYXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJjbGVhclNlbGVjdGluZ0RhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RpbmdEYXRlOiBudWxsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyUHJldmlvdXNCdXR0b25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnJlbmRlckN1c3RvbUhlYWRlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYWxsUHJldkRheXNEaXNhYmxlZDtcbiAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICBjYXNlIF90aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXI6XG4gICAgICAgICAgYWxsUHJldkRheXNEaXNhYmxlZCA9IHllYXJEaXNhYmxlZEJlZm9yZShfdGhpcy5zdGF0ZS5kYXRlLCBfdGhpcy5wcm9wcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgX3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXI6XG4gICAgICAgICAgYWxsUHJldkRheXNEaXNhYmxlZCA9IHllYXJzRGlzYWJsZWRCZWZvcmUoX3RoaXMuc3RhdGUuZGF0ZSwgX3RoaXMucHJvcHMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIF90aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlcjpcbiAgICAgICAgICBhbGxQcmV2RGF5c0Rpc2FibGVkID0gcXVhcnRlckRpc2FibGVkQmVmb3JlKF90aGlzLnN0YXRlLmRhdGUsIF90aGlzLnByb3BzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBhbGxQcmV2RGF5c0Rpc2FibGVkID0gbW9udGhEaXNhYmxlZEJlZm9yZShfdGhpcy5zdGF0ZS5kYXRlLCBfdGhpcy5wcm9wcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoIV90aGlzLnByb3BzLmZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbiAmJiAhX3RoaXMucHJvcHMuc2hvd0Rpc2FibGVkTW9udGhOYXZpZ2F0aW9uICYmIGFsbFByZXZEYXlzRGlzYWJsZWQgfHwgX3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpY29uQ2xhc3NlcyA9IFtcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24taWNvblwiLCBcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24taWNvbi0tcHJldmlvdXNcIl07XG4gICAgICB2YXIgY2xhc3NlcyA9IFtcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb25cIiwgXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91c1wiXTtcbiAgICAgIHZhciBjbGlja0hhbmRsZXIgPSBfdGhpcy5kZWNyZWFzZU1vbnRoO1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXIgfHwgX3RoaXMucHJvcHMuc2hvd1F1YXJ0ZXJZZWFyUGlja2VyIHx8IF90aGlzLnByb3BzLnNob3dZZWFyUGlja2VyKSB7XG4gICAgICAgIGNsaWNrSGFuZGxlciA9IF90aGlzLmRlY3JlYXNlWWVhcjtcbiAgICAgIH1cbiAgICAgIGlmIChhbGxQcmV2RGF5c0Rpc2FibGVkICYmIF90aGlzLnByb3BzLnNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbikge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91cy0tZGlzYWJsZWRcIik7XG4gICAgICAgIGNsaWNrSGFuZGxlciA9IG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgaXNGb3JZZWFyID0gX3RoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlciB8fCBfdGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXIgfHwgX3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXI7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbCA9IF90aGlzJHByb3BzMi5wcmV2aW91c01vbnRoQnV0dG9uTGFiZWwsXG4gICAgICAgIHByZXZpb3VzWWVhckJ1dHRvbkxhYmVsID0gX3RoaXMkcHJvcHMyLnByZXZpb3VzWWVhckJ1dHRvbkxhYmVsO1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczMkcHJldmlvdXMgPSBfdGhpcyRwcm9wczMucHJldmlvdXNNb250aEFyaWFMYWJlbCxcbiAgICAgICAgcHJldmlvdXNNb250aEFyaWFMYWJlbCA9IF90aGlzJHByb3BzMyRwcmV2aW91cyA9PT0gdm9pZCAwID8gdHlwZW9mIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbCA9PT0gXCJzdHJpbmdcIiA/IHByZXZpb3VzTW9udGhCdXR0b25MYWJlbCA6IFwiUHJldmlvdXMgTW9udGhcIiA6IF90aGlzJHByb3BzMyRwcmV2aW91cyxcbiAgICAgICAgX3RoaXMkcHJvcHMzJHByZXZpb3VzMiA9IF90aGlzJHByb3BzMy5wcmV2aW91c1llYXJBcmlhTGFiZWwsXG4gICAgICAgIHByZXZpb3VzWWVhckFyaWFMYWJlbCA9IF90aGlzJHByb3BzMyRwcmV2aW91czIgPT09IHZvaWQgMCA/IHR5cGVvZiBwcmV2aW91c1llYXJCdXR0b25MYWJlbCA9PT0gXCJzdHJpbmdcIiA/IHByZXZpb3VzWWVhckJ1dHRvbkxhYmVsIDogXCJQcmV2aW91cyBZZWFyXCIgOiBfdGhpcyRwcm9wczMkcHJldmlvdXMyO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmpvaW4oXCIgXCIpLFxuICAgICAgICBvbkNsaWNrOiBjbGlja0hhbmRsZXIsXG4gICAgICAgIG9uS2V5RG93bjogX3RoaXMucHJvcHMuaGFuZGxlT25LZXlEb3duLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogaXNGb3JZZWFyID8gcHJldmlvdXNZZWFyQXJpYUxhYmVsIDogcHJldmlvdXNNb250aEFyaWFMYWJlbFxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBpY29uQ2xhc3Nlcy5qb2luKFwiIFwiKVxuICAgICAgfSwgaXNGb3JZZWFyID8gX3RoaXMucHJvcHMucHJldmlvdXNZZWFyQnV0dG9uTGFiZWwgOiBfdGhpcy5wcm9wcy5wcmV2aW91c01vbnRoQnV0dG9uTGFiZWwpKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaW5jcmVhc2VZZWFyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmNykge1xuICAgICAgICB2YXIgZGF0ZSA9IF9yZWY3LmRhdGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0ZTogYWRkWWVhcnMoZGF0ZSwgX3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXIgPyBfdGhpcy5wcm9wcy55ZWFySXRlbU51bWJlciA6IDEpXG4gICAgICAgIH07XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVZZWFyQ2hhbmdlKF90aGlzLnN0YXRlLmRhdGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlck5leHRCdXR0b25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnJlbmRlckN1c3RvbUhlYWRlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYWxsTmV4dERheXNEaXNhYmxlZDtcbiAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICBjYXNlIF90aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXI6XG4gICAgICAgICAgYWxsTmV4dERheXNEaXNhYmxlZCA9IHllYXJEaXNhYmxlZEFmdGVyKF90aGlzLnN0YXRlLmRhdGUsIF90aGlzLnByb3BzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBfdGhpcy5wcm9wcy5zaG93WWVhclBpY2tlcjpcbiAgICAgICAgICBhbGxOZXh0RGF5c0Rpc2FibGVkID0geWVhcnNEaXNhYmxlZEFmdGVyKF90aGlzLnN0YXRlLmRhdGUsIF90aGlzLnByb3BzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBfdGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXI6XG4gICAgICAgICAgYWxsTmV4dERheXNEaXNhYmxlZCA9IHF1YXJ0ZXJEaXNhYmxlZEFmdGVyKF90aGlzLnN0YXRlLmRhdGUsIF90aGlzLnByb3BzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBhbGxOZXh0RGF5c0Rpc2FibGVkID0gbW9udGhEaXNhYmxlZEFmdGVyKF90aGlzLnN0YXRlLmRhdGUsIF90aGlzLnByb3BzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICghX3RoaXMucHJvcHMuZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uICYmICFfdGhpcy5wcm9wcy5zaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb24gJiYgYWxsTmV4dERheXNEaXNhYmxlZCB8fCBfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNsYXNzZXMgPSBbXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uXCIsIFwicmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dFwiXTtcbiAgICAgIHZhciBpY29uQ2xhc3NlcyA9IFtcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24taWNvblwiLCBcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24taWNvbi0tbmV4dFwiXTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdCkge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1uZXh0LS13aXRoLXRpbWVcIik7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMucHJvcHMudG9kYXlCdXR0b24pIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0td2l0aC10b2RheS1idXR0b25cIik7XG4gICAgICB9XG4gICAgICB2YXIgY2xpY2tIYW5kbGVyID0gX3RoaXMuaW5jcmVhc2VNb250aDtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyIHx8IF90aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlciB8fCBfdGhpcy5wcm9wcy5zaG93WWVhclBpY2tlcikge1xuICAgICAgICBjbGlja0hhbmRsZXIgPSBfdGhpcy5pbmNyZWFzZVllYXI7XG4gICAgICB9XG4gICAgICBpZiAoYWxsTmV4dERheXNEaXNhYmxlZCAmJiBfdGhpcy5wcm9wcy5zaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb24pIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0tZGlzYWJsZWRcIik7XG4gICAgICAgIGNsaWNrSGFuZGxlciA9IG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgaXNGb3JZZWFyID0gX3RoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlciB8fCBfdGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXIgfHwgX3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXI7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIG5leHRNb250aEJ1dHRvbkxhYmVsID0gX3RoaXMkcHJvcHM0Lm5leHRNb250aEJ1dHRvbkxhYmVsLFxuICAgICAgICBuZXh0WWVhckJ1dHRvbkxhYmVsID0gX3RoaXMkcHJvcHM0Lm5leHRZZWFyQnV0dG9uTGFiZWw7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzNSRuZXh0TW9udCA9IF90aGlzJHByb3BzNS5uZXh0TW9udGhBcmlhTGFiZWwsXG4gICAgICAgIG5leHRNb250aEFyaWFMYWJlbCA9IF90aGlzJHByb3BzNSRuZXh0TW9udCA9PT0gdm9pZCAwID8gdHlwZW9mIG5leHRNb250aEJ1dHRvbkxhYmVsID09PSBcInN0cmluZ1wiID8gbmV4dE1vbnRoQnV0dG9uTGFiZWwgOiBcIk5leHQgTW9udGhcIiA6IF90aGlzJHByb3BzNSRuZXh0TW9udCxcbiAgICAgICAgX3RoaXMkcHJvcHM1JG5leHRZZWFyID0gX3RoaXMkcHJvcHM1Lm5leHRZZWFyQXJpYUxhYmVsLFxuICAgICAgICBuZXh0WWVhckFyaWFMYWJlbCA9IF90aGlzJHByb3BzNSRuZXh0WWVhciA9PT0gdm9pZCAwID8gdHlwZW9mIG5leHRZZWFyQnV0dG9uTGFiZWwgPT09IFwic3RyaW5nXCIgPyBuZXh0WWVhckJ1dHRvbkxhYmVsIDogXCJOZXh0IFllYXJcIiA6IF90aGlzJHByb3BzNSRuZXh0WWVhcjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5qb2luKFwiIFwiKSxcbiAgICAgICAgb25DbGljazogY2xpY2tIYW5kbGVyLFxuICAgICAgICBvbktleURvd246IF90aGlzLnByb3BzLmhhbmRsZU9uS2V5RG93bixcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGlzRm9yWWVhciA/IG5leHRZZWFyQXJpYUxhYmVsIDogbmV4dE1vbnRoQXJpYUxhYmVsXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGljb25DbGFzc2VzLmpvaW4oXCIgXCIpXG4gICAgICB9LCBpc0ZvclllYXIgPyBfdGhpcy5wcm9wcy5uZXh0WWVhckJ1dHRvbkxhYmVsIDogX3RoaXMucHJvcHMubmV4dE1vbnRoQnV0dG9uTGFiZWwpKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyQ3VycmVudE1vbnRoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBfdGhpcy5zdGF0ZS5kYXRlO1xuICAgICAgdmFyIGNsYXNzZXMgPSBbXCJyZWFjdC1kYXRlcGlja2VyX19jdXJyZW50LW1vbnRoXCJdO1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dZZWFyRHJvcGRvd24pIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fY3VycmVudC1tb250aC0taGFzWWVhckRyb3Bkb3duXCIpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dNb250aERyb3Bkb3duKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX2N1cnJlbnQtbW9udGgtLWhhc01vbnRoRHJvcGRvd25cIik7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2hvd01vbnRoWWVhckRyb3Bkb3duKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX2N1cnJlbnQtbW9udGgtLWhhc01vbnRoWWVhckRyb3Bkb3duXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmpvaW4oXCIgXCIpXG4gICAgICB9LCBmb3JtYXREYXRlKGRhdGUsIF90aGlzLnByb3BzLmRhdGVGb3JtYXQsIF90aGlzLnByb3BzLmxvY2FsZSkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJZZWFyRHJvcGRvd25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG92ZXJyaWRlSGlkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLnNob3dZZWFyRHJvcGRvd24gfHwgb3ZlcnJpZGVIaWRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChZZWFyRHJvcGRvd24sIHtcbiAgICAgICAgYWRqdXN0RGF0ZU9uQ2hhbmdlOiBfdGhpcy5wcm9wcy5hZGp1c3REYXRlT25DaGFuZ2UsXG4gICAgICAgIGRhdGU6IF90aGlzLnN0YXRlLmRhdGUsXG4gICAgICAgIG9uU2VsZWN0OiBfdGhpcy5wcm9wcy5vblNlbGVjdCxcbiAgICAgICAgc2V0T3BlbjogX3RoaXMucHJvcHMuc2V0T3BlbixcbiAgICAgICAgZHJvcGRvd25Nb2RlOiBfdGhpcy5wcm9wcy5kcm9wZG93bk1vZGUsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5jaGFuZ2VZZWFyLFxuICAgICAgICBtaW5EYXRlOiBfdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiBfdGhpcy5wcm9wcy5tYXhEYXRlLFxuICAgICAgICB5ZWFyOiBnZXRZZWFyKF90aGlzLnN0YXRlLmRhdGUpLFxuICAgICAgICBzY3JvbGxhYmxlWWVhckRyb3Bkb3duOiBfdGhpcy5wcm9wcy5zY3JvbGxhYmxlWWVhckRyb3Bkb3duLFxuICAgICAgICB5ZWFyRHJvcGRvd25JdGVtTnVtYmVyOiBfdGhpcy5wcm9wcy55ZWFyRHJvcGRvd25JdGVtTnVtYmVyXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyTW9udGhEcm9wZG93blwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3ZlcnJpZGVIaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICAgIGlmICghX3RoaXMucHJvcHMuc2hvd01vbnRoRHJvcGRvd24gfHwgb3ZlcnJpZGVIaWRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb250aERyb3Bkb3duLCB7XG4gICAgICAgIGRyb3Bkb3duTW9kZTogX3RoaXMucHJvcHMuZHJvcGRvd25Nb2RlLFxuICAgICAgICBsb2NhbGU6IF90aGlzLnByb3BzLmxvY2FsZSxcbiAgICAgICAgb25DaGFuZ2U6IF90aGlzLmNoYW5nZU1vbnRoLFxuICAgICAgICBtb250aDogZ2V0TW9udGgoX3RoaXMuc3RhdGUuZGF0ZSksXG4gICAgICAgIHVzZVNob3J0TW9udGhJbkRyb3Bkb3duOiBfdGhpcy5wcm9wcy51c2VTaG9ydE1vbnRoSW5Ecm9wZG93blxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlck1vbnRoWWVhckRyb3Bkb3duXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvdmVycmlkZUhpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyRHJvcGRvd24gfHwgb3ZlcnJpZGVIaWRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb250aFllYXJEcm9wZG93biwge1xuICAgICAgICBkcm9wZG93bk1vZGU6IF90aGlzLnByb3BzLmRyb3Bkb3duTW9kZSxcbiAgICAgICAgbG9jYWxlOiBfdGhpcy5wcm9wcy5sb2NhbGUsXG4gICAgICAgIGRhdGVGb3JtYXQ6IF90aGlzLnByb3BzLmRhdGVGb3JtYXQsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5jaGFuZ2VNb250aFllYXIsXG4gICAgICAgIG1pbkRhdGU6IF90aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgIG1heERhdGU6IF90aGlzLnByb3BzLm1heERhdGUsXG4gICAgICAgIGRhdGU6IF90aGlzLnN0YXRlLmRhdGUsXG4gICAgICAgIHNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bjogX3RoaXMucHJvcHMuc2Nyb2xsYWJsZU1vbnRoWWVhckRyb3Bkb3duXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlVG9kYXlCdXR0b25DbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMucHJvcHMub25TZWxlY3QoZ2V0U3RhcnRPZlRvZGF5KCksIGUpO1xuICAgICAgX3RoaXMucHJvcHMuc2V0UHJlU2VsZWN0aW9uICYmIF90aGlzLnByb3BzLnNldFByZVNlbGVjdGlvbihnZXRTdGFydE9mVG9kYXkoKSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlclRvZGF5QnV0dG9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMucHJvcHMudG9kYXlCdXR0b24gfHwgX3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX190b2RheS1idXR0b25cIixcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZVRvZGF5QnV0dG9uQ2xpY2soZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIF90aGlzLnByb3BzLnRvZGF5QnV0dG9uKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyRGVmYXVsdEhlYWRlclwiLCBmdW5jdGlvbiAoX3JlZjgpIHtcbiAgICAgIHZhciBtb250aERhdGUgPSBfcmVmOC5tb250aERhdGUsXG4gICAgICAgIGkgPSBfcmVmOC5pO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlciBcIi5jb25jYXQoX3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3QgPyBcInJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlci0taGFzLXRpbWUtc2VsZWN0XCIgOiBcIlwiKVxuICAgICAgfSwgX3RoaXMucmVuZGVyQ3VycmVudE1vbnRoKG1vbnRoRGF0ZSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlcl9fZHJvcGRvd24gcmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyX19kcm9wZG93bi0tXCIuY29uY2F0KF90aGlzLnByb3BzLmRyb3Bkb3duTW9kZSksXG4gICAgICAgIG9uRm9jdXM6IF90aGlzLmhhbmRsZURyb3Bkb3duRm9jdXNcbiAgICAgIH0sIF90aGlzLnJlbmRlck1vbnRoRHJvcGRvd24oaSAhPT0gMCksIF90aGlzLnJlbmRlck1vbnRoWWVhckRyb3Bkb3duKGkgIT09IDApLCBfdGhpcy5yZW5kZXJZZWFyRHJvcGRvd24oaSAhPT0gMCkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZXNcIlxuICAgICAgfSwgX3RoaXMuaGVhZGVyKG1vbnRoRGF0ZSkpKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyQ3VzdG9tSGVhZGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBoZWFkZXJBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBtb250aERhdGUgPSBoZWFkZXJBcmdzLm1vbnRoRGF0ZSxcbiAgICAgICAgaSA9IGhlYWRlckFyZ3MuaTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdCAmJiAhX3RoaXMuc3RhdGUubW9udGhDb250YWluZXIgfHwgX3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHByZXZNb250aEJ1dHRvbkRpc2FibGVkID0gbW9udGhEaXNhYmxlZEJlZm9yZShfdGhpcy5zdGF0ZS5kYXRlLCBfdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgbmV4dE1vbnRoQnV0dG9uRGlzYWJsZWQgPSBtb250aERpc2FibGVkQWZ0ZXIoX3RoaXMuc3RhdGUuZGF0ZSwgX3RoaXMucHJvcHMpO1xuICAgICAgdmFyIHByZXZZZWFyQnV0dG9uRGlzYWJsZWQgPSB5ZWFyRGlzYWJsZWRCZWZvcmUoX3RoaXMuc3RhdGUuZGF0ZSwgX3RoaXMucHJvcHMpO1xuICAgICAgdmFyIG5leHRZZWFyQnV0dG9uRGlzYWJsZWQgPSB5ZWFyRGlzYWJsZWRBZnRlcihfdGhpcy5zdGF0ZS5kYXRlLCBfdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgc2hvd0RheU5hbWVzID0gIV90aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXIgJiYgIV90aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlciAmJiAhX3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXI7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyIHJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlci0tY3VzdG9tXCIsXG4gICAgICAgIG9uRm9jdXM6IF90aGlzLnByb3BzLm9uRHJvcGRvd25Gb2N1c1xuICAgICAgfSwgX3RoaXMucHJvcHMucmVuZGVyQ3VzdG9tSGVhZGVyKF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBfdGhpcy5zdGF0ZSksIHt9LCB7XG4gICAgICAgIGN1c3RvbUhlYWRlckNvdW50OiBpLFxuICAgICAgICBtb250aERhdGU6IG1vbnRoRGF0ZSxcbiAgICAgICAgY2hhbmdlTW9udGg6IF90aGlzLmNoYW5nZU1vbnRoLFxuICAgICAgICBjaGFuZ2VZZWFyOiBfdGhpcy5jaGFuZ2VZZWFyLFxuICAgICAgICBkZWNyZWFzZU1vbnRoOiBfdGhpcy5kZWNyZWFzZU1vbnRoLFxuICAgICAgICBpbmNyZWFzZU1vbnRoOiBfdGhpcy5pbmNyZWFzZU1vbnRoLFxuICAgICAgICBkZWNyZWFzZVllYXI6IF90aGlzLmRlY3JlYXNlWWVhcixcbiAgICAgICAgaW5jcmVhc2VZZWFyOiBfdGhpcy5pbmNyZWFzZVllYXIsXG4gICAgICAgIHByZXZNb250aEJ1dHRvbkRpc2FibGVkOiBwcmV2TW9udGhCdXR0b25EaXNhYmxlZCxcbiAgICAgICAgbmV4dE1vbnRoQnV0dG9uRGlzYWJsZWQ6IG5leHRNb250aEJ1dHRvbkRpc2FibGVkLFxuICAgICAgICBwcmV2WWVhckJ1dHRvbkRpc2FibGVkOiBwcmV2WWVhckJ1dHRvbkRpc2FibGVkLFxuICAgICAgICBuZXh0WWVhckJ1dHRvbkRpc2FibGVkOiBuZXh0WWVhckJ1dHRvbkRpc2FibGVkXG4gICAgICB9KSksIHNob3dEYXlOYW1lcyAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZXNcIlxuICAgICAgfSwgX3RoaXMuaGVhZGVyKG1vbnRoRGF0ZSkpKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyWWVhckhlYWRlclwiLCBmdW5jdGlvbiAoX3JlZjkpIHtcbiAgICAgIHZhciBtb250aERhdGUgPSBfcmVmOS5tb250aERhdGU7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIHNob3dZZWFyUGlja2VyID0gX3RoaXMkcHJvcHM2LnNob3dZZWFyUGlja2VyLFxuICAgICAgICB5ZWFySXRlbU51bWJlciA9IF90aGlzJHByb3BzNi55ZWFySXRlbU51bWJlcjtcbiAgICAgIHZhciBfZ2V0WWVhcnNQZXJpb2QgPSBnZXRZZWFyc1BlcmlvZChtb250aERhdGUsIHllYXJJdGVtTnVtYmVyKSxcbiAgICAgICAgc3RhcnRQZXJpb2QgPSBfZ2V0WWVhcnNQZXJpb2Quc3RhcnRQZXJpb2QsXG4gICAgICAgIGVuZFBlcmlvZCA9IF9nZXRZZWFyc1BlcmlvZC5lbmRQZXJpb2Q7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyIHJlYWN0LWRhdGVwaWNrZXIteWVhci1oZWFkZXJcIlxuICAgICAgfSwgc2hvd1llYXJQaWNrZXIgPyBcIlwiLmNvbmNhdChzdGFydFBlcmlvZCwgXCIgLSBcIikuY29uY2F0KGVuZFBlcmlvZCkgOiBnZXRZZWFyKG1vbnRoRGF0ZSkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJIZWFkZXJcIiwgZnVuY3Rpb24gKGhlYWRlckFyZ3MpIHtcbiAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICBjYXNlIF90aGlzLnByb3BzLnJlbmRlckN1c3RvbUhlYWRlciAhPT0gdW5kZWZpbmVkOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJDdXN0b21IZWFkZXIoaGVhZGVyQXJncyk7XG4gICAgICAgIGNhc2UgX3RoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlciB8fCBfdGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXIgfHwgX3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlclllYXJIZWFkZXIoaGVhZGVyQXJncyk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlckRlZmF1bHRIZWFkZXIoaGVhZGVyQXJncyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlck1vbnRoc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkbW9udGhTZWxlO1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSB8fCBfdGhpcy5wcm9wcy5zaG93WWVhclBpY2tlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbW9udGhMaXN0ID0gW107XG4gICAgICB2YXIgbW9udGhzVG9TdWJ0cmFjdCA9IF90aGlzLnByb3BzLnNob3dQcmV2aW91c01vbnRocyA/IF90aGlzLnByb3BzLm1vbnRoc1Nob3duIC0gMSA6IDA7XG4gICAgICB2YXIgZnJvbU1vbnRoRGF0ZSA9IF90aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXIgfHwgX3RoaXMucHJvcHMuc2hvd1F1YXJ0ZXJZZWFyUGlja2VyID8gYWRkWWVhcnMoX3RoaXMuc3RhdGUuZGF0ZSwgbW9udGhzVG9TdWJ0cmFjdCkgOiBzdWJNb250aHMoX3RoaXMuc3RhdGUuZGF0ZSwgbW9udGhzVG9TdWJ0cmFjdCk7XG4gICAgICB2YXIgbW9udGhTZWxlY3RlZEluID0gKF90aGlzJHByb3BzJG1vbnRoU2VsZSA9IF90aGlzLnByb3BzLm1vbnRoU2VsZWN0ZWRJbikgIT09IG51bGwgJiYgX3RoaXMkcHJvcHMkbW9udGhTZWxlICE9PSB2b2lkIDAgPyBfdGhpcyRwcm9wcyRtb250aFNlbGUgOiBtb250aHNUb1N1YnRyYWN0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy5wcm9wcy5tb250aHNTaG93bjsgKytpKSB7XG4gICAgICAgIHZhciBtb250aHNUb0FkZCA9IGkgLSBtb250aFNlbGVjdGVkSW4gKyBtb250aHNUb1N1YnRyYWN0O1xuICAgICAgICB2YXIgbW9udGhEYXRlID0gX3RoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlciB8fCBfdGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXIgPyBhZGRZZWFycyhmcm9tTW9udGhEYXRlLCBtb250aHNUb0FkZCkgOiBhZGRNb250aHMoZnJvbU1vbnRoRGF0ZSwgbW9udGhzVG9BZGQpO1xuICAgICAgICB2YXIgbW9udGhLZXkgPSBcIm1vbnRoLVwiLmNvbmNhdChpKTtcbiAgICAgICAgdmFyIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kID0gaSA8IF90aGlzLnByb3BzLm1vbnRoc1Nob3duIC0gMTtcbiAgICAgICAgdmFyIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQgPSBpID4gMDtcbiAgICAgICAgbW9udGhMaXN0LnB1c2goIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBrZXk6IG1vbnRoS2V5LFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGRpdikge1xuICAgICAgICAgICAgX3RoaXMubW9udGhDb250YWluZXIgPSBkaXY7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtY29udGFpbmVyXCJcbiAgICAgICAgfSwgX3RoaXMucmVuZGVySGVhZGVyKHtcbiAgICAgICAgICBtb250aERhdGU6IG1vbnRoRGF0ZSxcbiAgICAgICAgICBpOiBpXG4gICAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb250aCwge1xuICAgICAgICAgIGNob29zZURheUFyaWFMYWJlbFByZWZpeDogX3RoaXMucHJvcHMuY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4LFxuICAgICAgICAgIGRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4OiBfdGhpcy5wcm9wcy5kaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeCxcbiAgICAgICAgICB3ZWVrQXJpYUxhYmVsUHJlZml4OiBfdGhpcy5wcm9wcy53ZWVrQXJpYUxhYmVsUHJlZml4LFxuICAgICAgICAgIGFyaWFMYWJlbFByZWZpeDogX3RoaXMucHJvcHMubW9udGhBcmlhTGFiZWxQcmVmaXgsXG4gICAgICAgICAgb25DaGFuZ2U6IF90aGlzLmNoYW5nZU1vbnRoWWVhcixcbiAgICAgICAgICBkYXk6IG1vbnRoRGF0ZSxcbiAgICAgICAgICBkYXlDbGFzc05hbWU6IF90aGlzLnByb3BzLmRheUNsYXNzTmFtZSxcbiAgICAgICAgICBjYWxlbmRhclN0YXJ0RGF5OiBfdGhpcy5wcm9wcy5jYWxlbmRhclN0YXJ0RGF5LFxuICAgICAgICAgIG1vbnRoQ2xhc3NOYW1lOiBfdGhpcy5wcm9wcy5tb250aENsYXNzTmFtZSxcbiAgICAgICAgICBvbkRheUNsaWNrOiBfdGhpcy5oYW5kbGVEYXlDbGljayxcbiAgICAgICAgICBoYW5kbGVPbktleURvd246IF90aGlzLnByb3BzLmhhbmRsZU9uRGF5S2V5RG93bixcbiAgICAgICAgICBoYW5kbGVPbk1vbnRoS2V5RG93bjogX3RoaXMucHJvcHMuaGFuZGxlT25LZXlEb3duLFxuICAgICAgICAgIHVzZVBvaW50ZXJFdmVudDogX3RoaXMucHJvcHMudXNlUG9pbnRlckV2ZW50LFxuICAgICAgICAgIG9uRGF5TW91c2VFbnRlcjogX3RoaXMuaGFuZGxlRGF5TW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IF90aGlzLmhhbmRsZU1vbnRoTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbldlZWtTZWxlY3Q6IF90aGlzLnByb3BzLm9uV2Vla1NlbGVjdCxcbiAgICAgICAgICBvcmRlckluRGlzcGxheTogaSxcbiAgICAgICAgICBmb3JtYXRXZWVrTnVtYmVyOiBfdGhpcy5wcm9wcy5mb3JtYXRXZWVrTnVtYmVyLFxuICAgICAgICAgIGxvY2FsZTogX3RoaXMucHJvcHMubG9jYWxlLFxuICAgICAgICAgIG1pbkRhdGU6IF90aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgICAgbWF4RGF0ZTogX3RoaXMucHJvcHMubWF4RGF0ZSxcbiAgICAgICAgICBleGNsdWRlRGF0ZXM6IF90aGlzLnByb3BzLmV4Y2x1ZGVEYXRlcyxcbiAgICAgICAgICBleGNsdWRlRGF0ZUludGVydmFsczogX3RoaXMucHJvcHMuZXhjbHVkZURhdGVJbnRlcnZhbHMsXG4gICAgICAgICAgaGlnaGxpZ2h0RGF0ZXM6IF90aGlzLnByb3BzLmhpZ2hsaWdodERhdGVzLFxuICAgICAgICAgIGhvbGlkYXlzOiBfdGhpcy5wcm9wcy5ob2xpZGF5cyxcbiAgICAgICAgICBzZWxlY3RpbmdEYXRlOiBfdGhpcy5zdGF0ZS5zZWxlY3RpbmdEYXRlLFxuICAgICAgICAgIGluY2x1ZGVEYXRlczogX3RoaXMucHJvcHMuaW5jbHVkZURhdGVzLFxuICAgICAgICAgIGluY2x1ZGVEYXRlSW50ZXJ2YWxzOiBfdGhpcy5wcm9wcy5pbmNsdWRlRGF0ZUludGVydmFscyxcbiAgICAgICAgICBpbmxpbmU6IF90aGlzLnByb3BzLmlubGluZSxcbiAgICAgICAgICBzaG91bGRGb2N1c0RheUlubGluZTogX3RoaXMucHJvcHMuc2hvdWxkRm9jdXNEYXlJbmxpbmUsXG4gICAgICAgICAgZml4ZWRIZWlnaHQ6IF90aGlzLnByb3BzLmZpeGVkSGVpZ2h0LFxuICAgICAgICAgIGZpbHRlckRhdGU6IF90aGlzLnByb3BzLmZpbHRlckRhdGUsXG4gICAgICAgICAgcHJlU2VsZWN0aW9uOiBfdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24sXG4gICAgICAgICAgc2V0UHJlU2VsZWN0aW9uOiBfdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24sXG4gICAgICAgICAgc2VsZWN0ZWQ6IF90aGlzLnByb3BzLnNlbGVjdGVkLFxuICAgICAgICAgIHNlbGVjdHNTdGFydDogX3RoaXMucHJvcHMuc2VsZWN0c1N0YXJ0LFxuICAgICAgICAgIHNlbGVjdHNFbmQ6IF90aGlzLnByb3BzLnNlbGVjdHNFbmQsXG4gICAgICAgICAgc2VsZWN0c1JhbmdlOiBfdGhpcy5wcm9wcy5zZWxlY3RzUmFuZ2UsXG4gICAgICAgICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U6IF90aGlzLnByb3BzLnNlbGVjdHNEaXNhYmxlZERheXNJblJhbmdlLFxuICAgICAgICAgIHNlbGVjdHNNdWx0aXBsZTogX3RoaXMucHJvcHMuc2VsZWN0c011bHRpcGxlLFxuICAgICAgICAgIHNlbGVjdGVkRGF0ZXM6IF90aGlzLnByb3BzLnNlbGVjdGVkRGF0ZXMsXG4gICAgICAgICAgc2hvd1dlZWtOdW1iZXJzOiBfdGhpcy5wcm9wcy5zaG93V2Vla051bWJlcnMsXG4gICAgICAgICAgc3RhcnREYXRlOiBfdGhpcy5wcm9wcy5zdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogX3RoaXMucHJvcHMuZW5kRGF0ZSxcbiAgICAgICAgICBwZWVrTmV4dE1vbnRoOiBfdGhpcy5wcm9wcy5wZWVrTmV4dE1vbnRoLFxuICAgICAgICAgIHNldE9wZW46IF90aGlzLnByb3BzLnNldE9wZW4sXG4gICAgICAgICAgc2hvdWxkQ2xvc2VPblNlbGVjdDogX3RoaXMucHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdCxcbiAgICAgICAgICByZW5kZXJEYXlDb250ZW50czogX3RoaXMucHJvcHMucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgICAgcmVuZGVyTW9udGhDb250ZW50OiBfdGhpcy5wcm9wcy5yZW5kZXJNb250aENvbnRlbnQsXG4gICAgICAgICAgcmVuZGVyUXVhcnRlckNvbnRlbnQ6IF90aGlzLnByb3BzLnJlbmRlclF1YXJ0ZXJDb250ZW50LFxuICAgICAgICAgIHJlbmRlclllYXJDb250ZW50OiBfdGhpcy5wcm9wcy5yZW5kZXJZZWFyQ29udGVudCxcbiAgICAgICAgICBkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbjogX3RoaXMucHJvcHMuZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24sXG4gICAgICAgICAgc2hvd01vbnRoWWVhclBpY2tlcjogX3RoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlcixcbiAgICAgICAgICBzaG93RnVsbE1vbnRoWWVhclBpY2tlcjogX3RoaXMucHJvcHMuc2hvd0Z1bGxNb250aFllYXJQaWNrZXIsXG4gICAgICAgICAgc2hvd1R3b0NvbHVtbk1vbnRoWWVhclBpY2tlcjogX3RoaXMucHJvcHMuc2hvd1R3b0NvbHVtbk1vbnRoWWVhclBpY2tlcixcbiAgICAgICAgICBzaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlcjogX3RoaXMucHJvcHMuc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIsXG4gICAgICAgICAgc2hvd1llYXJQaWNrZXI6IF90aGlzLnByb3BzLnNob3dZZWFyUGlja2VyLFxuICAgICAgICAgIHNob3dRdWFydGVyWWVhclBpY2tlcjogX3RoaXMucHJvcHMuc2hvd1F1YXJ0ZXJZZWFyUGlja2VyLFxuICAgICAgICAgIHNob3dXZWVrUGlja2VyOiBfdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlcixcbiAgICAgICAgICBpc0lucHV0Rm9jdXNlZDogX3RoaXMucHJvcHMuaXNJbnB1dEZvY3VzZWQsXG4gICAgICAgICAgY29udGFpbmVyUmVmOiBfdGhpcy5jb250YWluZXJSZWYsXG4gICAgICAgICAgbW9udGhTaG93c0R1cGxpY2F0ZURheXNFbmQ6IG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kLFxuICAgICAgICAgIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQ6IG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnRcbiAgICAgICAgfSkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtb250aExpc3Q7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlclllYXJzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dZZWFyUGlja2VyKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItLWNvbnRhaW5lclwiXG4gICAgICAgIH0sIF90aGlzLnJlbmRlckhlYWRlcih7XG4gICAgICAgICAgbW9udGhEYXRlOiBfdGhpcy5zdGF0ZS5kYXRlXG4gICAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChZZWFyLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgb25EYXlDbGljazogX3RoaXMuaGFuZGxlRGF5Q2xpY2ssXG4gICAgICAgICAgc2VsZWN0aW5nRGF0ZTogX3RoaXMuc3RhdGUuc2VsZWN0aW5nRGF0ZSxcbiAgICAgICAgICBjbGVhclNlbGVjdGluZ0RhdGU6IF90aGlzLmNsZWFyU2VsZWN0aW5nRGF0ZSxcbiAgICAgICAgICBkYXRlOiBfdGhpcy5zdGF0ZS5kYXRlXG4gICAgICAgIH0sIF90aGlzLnByb3BzLCB7XG4gICAgICAgICAgb25ZZWFyTW91c2VFbnRlcjogX3RoaXMuaGFuZGxlWWVhck1vdXNlRW50ZXIsXG4gICAgICAgICAgb25ZZWFyTW91c2VMZWF2ZTogX3RoaXMuaGFuZGxlWWVhck1vdXNlTGVhdmVcbiAgICAgICAgfSkpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyVGltZVNlY3Rpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0ICYmIChfdGhpcy5zdGF0ZS5tb250aENvbnRhaW5lciB8fCBfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkpKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaW1lLCB7XG4gICAgICAgICAgc2VsZWN0ZWQ6IF90aGlzLnByb3BzLnNlbGVjdGVkLFxuICAgICAgICAgIG9wZW5Ub0RhdGU6IF90aGlzLnByb3BzLm9wZW5Ub0RhdGUsXG4gICAgICAgICAgb25DaGFuZ2U6IF90aGlzLnByb3BzLm9uVGltZUNoYW5nZSxcbiAgICAgICAgICB0aW1lQ2xhc3NOYW1lOiBfdGhpcy5wcm9wcy50aW1lQ2xhc3NOYW1lLFxuICAgICAgICAgIGZvcm1hdDogX3RoaXMucHJvcHMudGltZUZvcm1hdCxcbiAgICAgICAgICBpbmNsdWRlVGltZXM6IF90aGlzLnByb3BzLmluY2x1ZGVUaW1lcyxcbiAgICAgICAgICBpbnRlcnZhbHM6IF90aGlzLnByb3BzLnRpbWVJbnRlcnZhbHMsXG4gICAgICAgICAgbWluVGltZTogX3RoaXMucHJvcHMubWluVGltZSxcbiAgICAgICAgICBtYXhUaW1lOiBfdGhpcy5wcm9wcy5tYXhUaW1lLFxuICAgICAgICAgIGV4Y2x1ZGVUaW1lczogX3RoaXMucHJvcHMuZXhjbHVkZVRpbWVzLFxuICAgICAgICAgIGZpbHRlclRpbWU6IF90aGlzLnByb3BzLmZpbHRlclRpbWUsXG4gICAgICAgICAgdGltZUNhcHRpb246IF90aGlzLnByb3BzLnRpbWVDYXB0aW9uLFxuICAgICAgICAgIHRvZGF5QnV0dG9uOiBfdGhpcy5wcm9wcy50b2RheUJ1dHRvbixcbiAgICAgICAgICBzaG93TW9udGhEcm9wZG93bjogX3RoaXMucHJvcHMuc2hvd01vbnRoRHJvcGRvd24sXG4gICAgICAgICAgc2hvd01vbnRoWWVhckRyb3Bkb3duOiBfdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyRHJvcGRvd24sXG4gICAgICAgICAgc2hvd1llYXJEcm9wZG93bjogX3RoaXMucHJvcHMuc2hvd1llYXJEcm9wZG93bixcbiAgICAgICAgICB3aXRoUG9ydGFsOiBfdGhpcy5wcm9wcy53aXRoUG9ydGFsLFxuICAgICAgICAgIG1vbnRoUmVmOiBfdGhpcy5zdGF0ZS5tb250aENvbnRhaW5lcixcbiAgICAgICAgICBpbmplY3RUaW1lczogX3RoaXMucHJvcHMuaW5qZWN0VGltZXMsXG4gICAgICAgICAgbG9jYWxlOiBfdGhpcy5wcm9wcy5sb2NhbGUsXG4gICAgICAgICAgaGFuZGxlT25LZXlEb3duOiBfdGhpcy5wcm9wcy5oYW5kbGVPbktleURvd24sXG4gICAgICAgICAgc2hvd1RpbWVTZWxlY3RPbmx5OiBfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInJlbmRlcklucHV0VGltZVNlY3Rpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRpbWUgPSBuZXcgRGF0ZShfdGhpcy5wcm9wcy5zZWxlY3RlZCk7XG4gICAgICB2YXIgdGltZVZhbGlkID0gaXNWYWxpZCh0aW1lKSAmJiBCb29sZWFuKF90aGlzLnByb3BzLnNlbGVjdGVkKTtcbiAgICAgIHZhciB0aW1lU3RyaW5nID0gdGltZVZhbGlkID8gXCJcIi5jb25jYXQoYWRkWmVybyh0aW1lLmdldEhvdXJzKCkpLCBcIjpcIikuY29uY2F0KGFkZFplcm8odGltZS5nZXRNaW51dGVzKCkpKSA6IFwiXCI7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2hvd1RpbWVJbnB1dCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoaW5wdXRUaW1lLCB7XG4gICAgICAgICAgZGF0ZTogdGltZSxcbiAgICAgICAgICB0aW1lU3RyaW5nOiB0aW1lU3RyaW5nLFxuICAgICAgICAgIHRpbWVJbnB1dExhYmVsOiBfdGhpcy5wcm9wcy50aW1lSW5wdXRMYWJlbCxcbiAgICAgICAgICBvbkNoYW5nZTogX3RoaXMucHJvcHMub25UaW1lQ2hhbmdlLFxuICAgICAgICAgIGN1c3RvbVRpbWVJbnB1dDogX3RoaXMucHJvcHMuY3VzdG9tVGltZUlucHV0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJBcmlhTGl2ZVJlZ2lvblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2dldFllYXJzUGVyaW9kMiA9IGdldFllYXJzUGVyaW9kKF90aGlzLnN0YXRlLmRhdGUsIF90aGlzLnByb3BzLnllYXJJdGVtTnVtYmVyKSxcbiAgICAgICAgc3RhcnRQZXJpb2QgPSBfZ2V0WWVhcnNQZXJpb2QyLnN0YXJ0UGVyaW9kLFxuICAgICAgICBlbmRQZXJpb2QgPSBfZ2V0WWVhcnNQZXJpb2QyLmVuZFBlcmlvZDtcbiAgICAgIHZhciBhcmlhTGl2ZU1lc3NhZ2U7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXIpIHtcbiAgICAgICAgYXJpYUxpdmVNZXNzYWdlID0gXCJcIi5jb25jYXQoc3RhcnRQZXJpb2QsIFwiIC0gXCIpLmNvbmNhdChlbmRQZXJpb2QpO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyIHx8IF90aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlcikge1xuICAgICAgICBhcmlhTGl2ZU1lc3NhZ2UgPSBnZXRZZWFyKF90aGlzLnN0YXRlLmRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJpYUxpdmVNZXNzYWdlID0gXCJcIi5jb25jYXQoZ2V0TW9udGhJbkxvY2FsZShnZXRNb250aChfdGhpcy5zdGF0ZS5kYXRlKSwgX3RoaXMucHJvcHMubG9jYWxlKSwgXCIgXCIpLmNvbmNhdChnZXRZZWFyKF90aGlzLnN0YXRlLmRhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICByb2xlOiBcImFsZXJ0XCIsXG4gICAgICAgIFwiYXJpYS1saXZlXCI6IFwicG9saXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX19hcmlhLWxpdmVcIlxuICAgICAgfSwgX3RoaXMuc3RhdGUuaXNSZW5kZXJBcmlhTGl2ZU1lc3NhZ2UgJiYgYXJpYUxpdmVNZXNzYWdlKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwicmVuZGVyQ2hpbGRyZW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX2NoaWxkcmVuLWNvbnRhaW5lclwiXG4gICAgICAgIH0sIF90aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5jb250YWluZXJSZWYgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBkYXRlOiBfdGhpcy5nZXREYXRlSW5WaWV3KCksXG4gICAgICBzZWxlY3RpbmdEYXRlOiBudWxsLFxuICAgICAgbW9udGhDb250YWluZXI6IG51bGwsXG4gICAgICBpc1JlbmRlckFyaWFMaXZlTWVzc2FnZTogZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoQ2FsZW5kYXIsIF9SZWFjdCRDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENhbGVuZGFyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgLy8gbW9udGhDb250YWluZXIgaGVpZ2h0IGlzIG5lZWRlZCBpbiB0aW1lIGNvbXBvbmVudFxuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBoZWlnaHQgZm9yIHRoZSB1bCBpbiB0aGUgdGltZSBjb21wb25lbnRcbiAgICAgIC8vIHNldFN0YXRlIGhlcmUgc28gaGVpZ2h0IGlzIGdpdmVuIGFmdGVyIGZpbmFsIGNvbXBvbmVudFxuICAgICAgLy8gbGF5b3V0IGlzIHJlbmRlcmVkXG4gICAgICBpZiAodGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdCkge1xuICAgICAgICB0aGlzLmFzc2lnbk1vbnRoQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBtb250aENvbnRhaW5lcjogX3RoaXMyLm1vbnRoQ29udGFpbmVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgaWYgKHRoaXMucHJvcHMucHJlU2VsZWN0aW9uICYmICghaXNTYW1lRGF5KHRoaXMucHJvcHMucHJlU2VsZWN0aW9uLCBwcmV2UHJvcHMucHJlU2VsZWN0aW9uKSB8fCB0aGlzLnByb3BzLm1vbnRoU2VsZWN0ZWRJbiAhPT0gcHJldlByb3BzLm1vbnRoU2VsZWN0ZWRJbikpIHtcbiAgICAgICAgdmFyIGhhc01vbnRoQ2hhbmdlZCA9ICFpc1NhbWVNb250aCh0aGlzLnN0YXRlLmRhdGUsIHRoaXMucHJvcHMucHJlU2VsZWN0aW9uKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZGF0ZTogdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb25cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBoYXNNb250aENoYW5nZWQgJiYgX3RoaXMzLmhhbmRsZUN1c3RvbU1vbnRoQ2hhbmdlKF90aGlzMy5zdGF0ZS5kYXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMub3BlblRvRGF0ZSAmJiAhaXNTYW1lRGF5KHRoaXMucHJvcHMub3BlblRvRGF0ZSwgcHJldlByb3BzLm9wZW5Ub0RhdGUpKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGRhdGU6IHRoaXMucHJvcHMub3BlblRvRGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBDb250YWluZXIgPSB0aGlzLnByb3BzLmNvbnRhaW5lciB8fCBDYWxlbmRhckNvbnRhaW5lcjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZGlzcGxheTogXCJjb250ZW50c1wiXG4gICAgICAgIH0sXG4gICAgICAgIHJlZjogdGhpcy5jb250YWluZXJSZWZcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRhaW5lciwge1xuICAgICAgICBjbGFzc05hbWU6IGNsc3goXCJyZWFjdC1kYXRlcGlja2VyXCIsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyLS10aW1lLW9ubHlcIjogdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHlcbiAgICAgICAgfSksXG4gICAgICAgIHNob3dUaW1lOiB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0IHx8IHRoaXMucHJvcHMuc2hvd1RpbWVJbnB1dCxcbiAgICAgICAgc2hvd1RpbWVTZWxlY3RPbmx5OiB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seVxuICAgICAgfSwgdGhpcy5yZW5kZXJBcmlhTGl2ZVJlZ2lvbigpLCB0aGlzLnJlbmRlclByZXZpb3VzQnV0dG9uKCksIHRoaXMucmVuZGVyTmV4dEJ1dHRvbigpLCB0aGlzLnJlbmRlck1vbnRocygpLCB0aGlzLnJlbmRlclllYXJzKCksIHRoaXMucmVuZGVyVG9kYXlCdXR0b24oKSwgdGhpcy5yZW5kZXJUaW1lU2VjdGlvbigpLCB0aGlzLnJlbmRlcklucHV0VGltZVNlY3Rpb24oKSwgdGhpcy5yZW5kZXJDaGlsZHJlbigpKSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZGVmYXVsdFByb3BzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbkRyb3Bkb3duRm9jdXM6IGZ1bmN0aW9uIG9uRHJvcGRvd25Gb2N1cygpIHt9LFxuICAgICAgICBtb250aHNTaG93bjogMSxcbiAgICAgICAgZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uOiBmYWxzZSxcbiAgICAgICAgdGltZUNhcHRpb246IFwiVGltZVwiLFxuICAgICAgICBwcmV2aW91c1llYXJCdXR0b25MYWJlbDogXCJQcmV2aW91cyBZZWFyXCIsXG4gICAgICAgIG5leHRZZWFyQnV0dG9uTGFiZWw6IFwiTmV4dCBZZWFyXCIsXG4gICAgICAgIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbDogXCJQcmV2aW91cyBNb250aFwiLFxuICAgICAgICBuZXh0TW9udGhCdXR0b25MYWJlbDogXCJOZXh0IE1vbnRoXCIsXG4gICAgICAgIGN1c3RvbVRpbWVJbnB1dDogbnVsbCxcbiAgICAgICAgeWVhckl0ZW1OdW1iZXI6IERFRkFVTFRfWUVBUl9JVEVNX05VTUJFUlxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIENhbGVuZGFySWNvbiA9IGZ1bmN0aW9uIENhbGVuZGFySWNvbihfcmVmKSB7XG4gIHZhciBpY29uID0gX3JlZi5pY29uLFxuICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfcmVmJGNsYXNzTmFtZSxcbiAgICBfb25DbGljayA9IF9yZWYub25DbGljaztcbiAgdmFyIGRlZmF1bHRDbGFzcyA9IFwicmVhY3QtZGF0ZXBpY2tlcl9fY2FsZW5kYXItaWNvblwiO1xuICBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChpY29uKSkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGljb24sIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoaWNvbi5wcm9wcy5jbGFzc05hbWUgfHwgXCJcIiwgXCIgXCIpLmNvbmNhdChkZWZhdWx0Q2xhc3MsIFwiIFwiKS5jb25jYXQoY2xhc3NOYW1lKSxcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBpZiAodHlwZW9mIGljb24ucHJvcHMub25DbGljayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgaWNvbi5wcm9wcy5vbkNsaWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgX29uQ2xpY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIF9vbkNsaWNrKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBpY29uID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaVwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGRlZmF1bHRDbGFzcywgXCIgXCIpLmNvbmNhdChpY29uLCBcIiBcIikuY29uY2F0KGNsYXNzTmFtZSksXG4gICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgICAgb25DbGljazogX29uQ2xpY2tcbiAgICB9KTtcbiAgfVxuXG4gIC8vIERlZmF1bHQgU1ZHIEljb25cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGRlZmF1bHRDbGFzcywgXCIgXCIpLmNvbmNhdChjbGFzc05hbWUpLFxuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgdmlld0JveDogXCIwIDAgNDQ4IDUxMlwiLFxuICAgIG9uQ2xpY2s6IF9vbkNsaWNrXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNOTYgMzJWNjRINDhDMjEuNSA2NCAwIDg1LjUgMCAxMTJ2NDhINDQ4VjExMmMwLTI2LjUtMjEuNS00OC00OC00OEgzNTJWMzJjMC0xNy43LTE0LjMtMzItMzItMzJzLTMyIDE0LjMtMzIgMzJWNjRIMTYwVjMyYzAtMTcuNy0xNC4zLTMyLTMyLTMyUzk2IDE0LjMgOTYgMzJ6TTQ0OCAxOTJIMFY0NjRjMCAyNi41IDIxLjUgNDggNDggNDhINDAwYzI2LjUgMCA0OC0yMS41IDQ4LTQ4VjE5MnpcIlxuICB9KSk7XG59O1xudmFyIENhbGVuZGFySWNvbiQxID0gQ2FsZW5kYXJJY29uO1xuXG52YXIgUG9ydGFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFBvcnRhbChwcm9wcykge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgUG9ydGFsLCBbcHJvcHNdKTtcbiAgICBfdGhpcy5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFBvcnRhbCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnBvcnRhbFJvb3QgPSAodGhpcy5wcm9wcy5wb3J0YWxIb3N0IHx8IGRvY3VtZW50KS5nZXRFbGVtZW50QnlJZCh0aGlzLnByb3BzLnBvcnRhbElkKTtcbiAgICAgIGlmICghdGhpcy5wb3J0YWxSb290KSB7XG4gICAgICAgIHRoaXMucG9ydGFsUm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMucG9ydGFsUm9vdC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCB0aGlzLnByb3BzLnBvcnRhbElkKTtcbiAgICAgICAgKHRoaXMucHJvcHMucG9ydGFsSG9zdCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZCh0aGlzLnBvcnRhbFJvb3QpO1xuICAgICAgfVxuICAgICAgdGhpcy5wb3J0YWxSb290LmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMucG9ydGFsUm9vdC5yZW1vdmVDaGlsZCh0aGlzLmVsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKHRoaXMucHJvcHMuY2hpbGRyZW4sIHRoaXMuZWwpO1xuICAgIH1cbiAgfV0pO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vLyBUYWJMb29wIHByZXZlbnRzIHRoZSB1c2VyIGZyb20gdGFiYmluZyBvdXRzaWRlIG9mIHRoZSBwb3BwZXJcbi8vIEl0IGNyZWF0ZXMgYSB0YWJpbmRleCBsb29wIHNvIHRoYXQgXCJUYWJcIiBvbiB0aGUgbGFzdCBlbGVtZW50IHdpbGwgZm9jdXMgdGhlIGZpcnN0IGVsZW1lbnRcbi8vIGFuZCBcIlNoaWZ0IFRhYlwiIG9uIHRoZSBmaXJzdCBlbGVtZW50IHdpbGwgZm9jdXMgdGhlIGxhc3QgZWxlbWVudFxuXG52YXIgZm9jdXNhYmxlRWxlbWVudHNTZWxlY3RvciA9IFwiW3RhYmluZGV4XSwgYSwgYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVwiO1xudmFyIGZvY3VzYWJsZUZpbHRlciA9IGZ1bmN0aW9uIGZvY3VzYWJsZUZpbHRlcihub2RlKSB7XG4gIHJldHVybiAhbm9kZS5kaXNhYmxlZCAmJiBub2RlLnRhYkluZGV4ICE9PSAtMTtcbn07XG52YXIgVGFiTG9vcCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBUYWJMb29wKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJMb29wKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgVGFiTG9vcCwgW3Byb3BzXSk7XG4gICAgLy8gcXVlcnkgYWxsIGZvY3VzYWJsZSBlbGVtZW50c1xuICAgIC8vIHRyaW0gZmlyc3QgYW5kIGxhc3QgYmVjYXVzZSB0aGV5IGFyZSB0aGUgZm9jdXMgZ3VhcmRzXG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImdldFRhYkNoaWxkcmVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChfdGhpcy50YWJMb29wUmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvckFsbChmb2N1c2FibGVFbGVtZW50c1NlbGVjdG9yKSwgMSwgLTEpLmZpbHRlcihmb2N1c2FibGVGaWx0ZXIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVGb2N1c1N0YXJ0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0YWJDaGlsZHJlbiA9IF90aGlzLmdldFRhYkNoaWxkcmVuKCk7XG4gICAgICB0YWJDaGlsZHJlbiAmJiB0YWJDaGlsZHJlbi5sZW5ndGggPiAxICYmIHRhYkNoaWxkcmVuW3RhYkNoaWxkcmVuLmxlbmd0aCAtIDFdLmZvY3VzKCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZUZvY3VzRW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0YWJDaGlsZHJlbiA9IF90aGlzLmdldFRhYkNoaWxkcmVuKCk7XG4gICAgICB0YWJDaGlsZHJlbiAmJiB0YWJDaGlsZHJlbi5sZW5ndGggPiAxICYmIHRhYkNoaWxkcmVuWzBdLmZvY3VzKCk7XG4gICAgfSk7XG4gICAgX3RoaXMudGFiTG9vcFJlZiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVSZWYoKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKFRhYkxvb3AsIF9SZWFjdCRDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFRhYkxvb3AsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMuZW5hYmxlVGFiTG9vcCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1kYXRlcGlja2VyX190YWItbG9vcFwiLFxuICAgICAgICByZWY6IHRoaXMudGFiTG9vcFJlZlxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fdGFiLWxvb3BfX3N0YXJ0XCIsXG4gICAgICAgIHRhYkluZGV4OiBcIjBcIixcbiAgICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1c1N0YXJ0XG4gICAgICB9KSwgdGhpcy5wcm9wcy5jaGlsZHJlbiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9fdGFiLWxvb3BfX2VuZFwiLFxuICAgICAgICB0YWJJbmRleDogXCIwXCIsXG4gICAgICAgIG9uRm9jdXM6IHRoaXMuaGFuZGxlRm9jdXNFbmRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJkZWZhdWx0UHJvcHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVuYWJsZVRhYkxvb3A6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmZ1bmN0aW9uIHdpdGhGbG9hdGluZyhDb21wb25lbnQpIHtcbiAgdmFyIFdpdGhGbG9hdGluZyA9IGZ1bmN0aW9uIFdpdGhGbG9hdGluZyhwcm9wcykge1xuICAgIHZhciBhbHRfcHJvcHMgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgcHJvcHMpLCB7fSwge1xuICAgICAgcG9wcGVyTW9kaWZpZXJzOiBwcm9wcy5wb3BwZXJNb2RpZmllcnMgfHwgW10sXG4gICAgICBwb3BwZXJQcm9wczogcHJvcHMucG9wcGVyUHJvcHMgfHwge30sXG4gICAgICBoaWRlUG9wcGVyOiB0eXBlb2YgcHJvcHMuaGlkZVBvcHBlciA9PT0gXCJib29sZWFuXCIgPyBwcm9wcy5oaWRlUG9wcGVyIDogdHJ1ZVxuICAgIH0pO1xuICAgIHZhciBhcnJvd1JlZiA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBmbG9hdGluZ1Byb3BzID0gdXNlRmxvYXRpbmcoX29iamVjdFNwcmVhZDIoe1xuICAgICAgb3BlbjogIWFsdF9wcm9wcy5oaWRlUG9wcGVyLFxuICAgICAgd2hpbGVFbGVtZW50c01vdW50ZWQ6IGF1dG9VcGRhdGUsXG4gICAgICBwbGFjZW1lbnQ6IGFsdF9wcm9wcy5wb3BwZXJQbGFjZW1lbnQsXG4gICAgICBtaWRkbGV3YXJlOiBbZmxpcCh7XG4gICAgICAgIHBhZGRpbmc6IDE1XG4gICAgICB9KSwgb2Zmc2V0KDEwKSwgYXJyb3coe1xuICAgICAgICBlbGVtZW50OiBhcnJvd1JlZlxuICAgICAgfSldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWx0X3Byb3BzLnBvcHBlck1vZGlmaWVycykpXG4gICAgfSwgYWx0X3Byb3BzLnBvcHBlclByb3BzKSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFsdF9wcm9wcywge1xuICAgICAgcG9wcGVyUHJvcHM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBmbG9hdGluZ1Byb3BzKSwge30sIHtcbiAgICAgICAgYXJyb3dSZWY6IGFycm93UmVmXG4gICAgICB9KVxuICAgIH0pKTtcbiAgfTtcbiAgcmV0dXJuIFdpdGhGbG9hdGluZztcbn1cblxuLy8gRXhwb3J0ZWQgZm9yIHRlc3RpbmcgcHVycG9zZXNcbnZhciBQb3BwZXJDb21wb25lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gUG9wcGVyQ29tcG9uZW50KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXJDb21wb25lbnQpO1xuICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIFBvcHBlckNvbXBvbmVudCwgYXJndW1lbnRzKTtcbiAgfVxuICBfaW5oZXJpdHMoUG9wcGVyQ29tcG9uZW50LCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhQb3BwZXJDb21wb25lbnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHdyYXBwZXJDbGFzc05hbWUgPSBfdGhpcyRwcm9wcy53cmFwcGVyQ2xhc3NOYW1lLFxuICAgICAgICBoaWRlUG9wcGVyID0gX3RoaXMkcHJvcHMuaGlkZVBvcHBlcixcbiAgICAgICAgcG9wcGVyQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMucG9wcGVyQ29tcG9uZW50LFxuICAgICAgICB0YXJnZXRDb21wb25lbnQgPSBfdGhpcyRwcm9wcy50YXJnZXRDb21wb25lbnQsXG4gICAgICAgIGVuYWJsZVRhYkxvb3AgPSBfdGhpcyRwcm9wcy5lbmFibGVUYWJMb29wLFxuICAgICAgICBwb3BwZXJPbktleURvd24gPSBfdGhpcyRwcm9wcy5wb3BwZXJPbktleURvd24sXG4gICAgICAgIHBvcnRhbElkID0gX3RoaXMkcHJvcHMucG9ydGFsSWQsXG4gICAgICAgIHBvcnRhbEhvc3QgPSBfdGhpcyRwcm9wcy5wb3J0YWxIb3N0LFxuICAgICAgICBwb3BwZXJQcm9wcyA9IF90aGlzJHByb3BzLnBvcHBlclByb3BzLFxuICAgICAgICBzaG93QXJyb3cgPSBfdGhpcyRwcm9wcy5zaG93QXJyb3c7XG4gICAgICB2YXIgcG9wcGVyO1xuICAgICAgaWYgKCFoaWRlUG9wcGVyKSB7XG4gICAgICAgIHZhciBjbGFzc2VzID0gY2xzeChcInJlYWN0LWRhdGVwaWNrZXItcG9wcGVyXCIsIGNsYXNzTmFtZSk7XG4gICAgICAgIHBvcHBlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRhYkxvb3AsIHtcbiAgICAgICAgICBlbmFibGVUYWJMb29wOiBlbmFibGVUYWJMb29wXG4gICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICByZWY6IHBvcHBlclByb3BzLnJlZnMuc2V0RmxvYXRpbmcsXG4gICAgICAgICAgc3R5bGU6IHBvcHBlclByb3BzLmZsb2F0aW5nU3R5bGVzLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgICBcImRhdGEtcGxhY2VtZW50XCI6IHBvcHBlclByb3BzLnBsYWNlbWVudCxcbiAgICAgICAgICBvbktleURvd246IHBvcHBlck9uS2V5RG93blxuICAgICAgICB9LCBwb3BwZXJDb21wb25lbnQsIHNob3dBcnJvdyAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGbG9hdGluZ0Fycm93LCB7XG4gICAgICAgICAgcmVmOiBwb3BwZXJQcm9wcy5hcnJvd1JlZixcbiAgICAgICAgICBjb250ZXh0OiBwb3BwZXJQcm9wcy5jb250ZXh0LFxuICAgICAgICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IDEsXG4gICAgICAgICAgaGVpZ2h0OiA4LFxuICAgICAgICAgIHdpZHRoOiAxNixcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTFweClcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlXCJcbiAgICAgICAgfSkpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLnBvcHBlckNvbnRhaW5lcikge1xuICAgICAgICBwb3BwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLnBvcHBlckNvbnRhaW5lciwge30sIHBvcHBlcik7XG4gICAgICB9XG4gICAgICBpZiAocG9ydGFsSWQgJiYgIWhpZGVQb3BwZXIpIHtcbiAgICAgICAgcG9wcGVyID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9ydGFsLCB7XG4gICAgICAgICAgcG9ydGFsSWQ6IHBvcnRhbElkLFxuICAgICAgICAgIHBvcnRhbEhvc3Q6IHBvcnRhbEhvc3RcbiAgICAgICAgfSwgcG9wcGVyKTtcbiAgICAgIH1cbiAgICAgIHZhciB3cmFwcGVyQ2xhc3NlcyA9IGNsc3goXCJyZWFjdC1kYXRlcGlja2VyLXdyYXBwZXJcIiwgd3JhcHBlckNsYXNzTmFtZSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgcmVmOiBwb3BwZXJQcm9wcy5yZWZzLnNldFJlZmVyZW5jZSxcbiAgICAgICAgY2xhc3NOYW1lOiB3cmFwcGVyQ2xhc3Nlc1xuICAgICAgfSwgdGFyZ2V0Q29tcG9uZW50KSwgcG9wcGVyKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJkZWZhdWx0UHJvcHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhpZGVQb3BwZXI6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG52YXIgUG9wcGVyQ29tcG9uZW50JDEgPSB3aXRoRmxvYXRpbmcoUG9wcGVyQ29tcG9uZW50KTtcblxudmFyIG91dHNpZGVDbGlja0lnbm9yZUNsYXNzID0gXCJyZWFjdC1kYXRlcGlja2VyLWlnbm9yZS1vbmNsaWNrb3V0c2lkZVwiO1xudmFyIFdyYXBwZWRDYWxlbmRhciA9IG9uQ2xpY2tPdXRzaWRlKENhbGVuZGFyKTtcblxuLy8gQ29tcGFyZXMgZGF0ZXMgeWVhcittb250aCBjb21iaW5hdGlvbnNcbmZ1bmN0aW9uIGhhc1ByZVNlbGVjdGlvbkNoYW5nZWQoZGF0ZTEsIGRhdGUyKSB7XG4gIGlmIChkYXRlMSAmJiBkYXRlMikge1xuICAgIHJldHVybiBnZXRNb250aChkYXRlMSkgIT09IGdldE1vbnRoKGRhdGUyKSB8fCBnZXRZZWFyKGRhdGUxKSAhPT0gZ2V0WWVhcihkYXRlMik7XG4gIH1cbiAgcmV0dXJuIGRhdGUxICE9PSBkYXRlMjtcbn1cblxuLyoqXG4gKiBHZW5lcmFsIGRhdGVwaWNrZXIgY29tcG9uZW50LlxuICovXG52YXIgSU5QVVRfRVJSXzEgPSBcIkRhdGUgaW5wdXQgbm90IHZhbGlkLlwiO1xudmFyIERhdGVQaWNrZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gRGF0ZVBpY2tlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0ZVBpY2tlcik7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIERhdGVQaWNrZXIsIFtwcm9wc10pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJnZXRQcmVTZWxlY3Rpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9wZW5Ub0RhdGUgPyBfdGhpcy5wcm9wcy5vcGVuVG9EYXRlIDogX3RoaXMucHJvcHMuc2VsZWN0c0VuZCAmJiBfdGhpcy5wcm9wcy5zdGFydERhdGUgPyBfdGhpcy5wcm9wcy5zdGFydERhdGUgOiBfdGhpcy5wcm9wcy5zZWxlY3RzU3RhcnQgJiYgX3RoaXMucHJvcHMuZW5kRGF0ZSA/IF90aGlzLnByb3BzLmVuZERhdGUgOiBuZXdEYXRlKCk7XG4gICAgfSk7XG4gICAgLy8gQ29udmVydCB0aGUgZGF0ZSBmcm9tIHN0cmluZyBmb3JtYXQgdG8gc3RhbmRhcmQgRGF0ZSBmb3JtYXRcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwibW9kaWZ5SG9saWRheXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzJGhvbGlkYXlzO1xuICAgICAgcmV0dXJuIChfdGhpcyRwcm9wcyRob2xpZGF5cyA9IF90aGlzLnByb3BzLmhvbGlkYXlzKSA9PT0gbnVsbCB8fCBfdGhpcyRwcm9wcyRob2xpZGF5cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkaG9saWRheXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgaG9saWRheSkge1xuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGhvbGlkYXkuZGF0ZSk7XG4gICAgICAgIGlmICghaXNWYWxpZCQxKGRhdGUpKSB7XG4gICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFjY3VtdWxhdG9yKSwgW19vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBob2xpZGF5KSwge30sIHtcbiAgICAgICAgICBkYXRlOiBkYXRlXG4gICAgICAgIH0pXSk7XG4gICAgICB9LCBbXSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImNhbGNJbml0aWFsU3RhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWY7XG4gICAgICB2YXIgZGVmYXVsdFByZVNlbGVjdGlvbiA9IF90aGlzLmdldFByZVNlbGVjdGlvbigpO1xuICAgICAgdmFyIG1pbkRhdGUgPSBnZXRFZmZlY3RpdmVNaW5EYXRlKF90aGlzLnByb3BzKTtcbiAgICAgIHZhciBtYXhEYXRlID0gZ2V0RWZmZWN0aXZlTWF4RGF0ZShfdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgYm91bmRlZFByZVNlbGVjdGlvbiA9IG1pbkRhdGUgJiYgaXNCZWZvcmUoZGVmYXVsdFByZVNlbGVjdGlvbiwgc3RhcnRPZkRheShtaW5EYXRlKSkgPyBtaW5EYXRlIDogbWF4RGF0ZSAmJiBpc0FmdGVyKGRlZmF1bHRQcmVTZWxlY3Rpb24sIGVuZE9mRGF5KG1heERhdGUpKSA/IG1heERhdGUgOiBkZWZhdWx0UHJlU2VsZWN0aW9uO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3BlbjogX3RoaXMucHJvcHMuc3RhcnRPcGVuIHx8IGZhbHNlLFxuICAgICAgICBwcmV2ZW50Rm9jdXM6IGZhbHNlLFxuICAgICAgICBwcmVTZWxlY3Rpb246IChfcmVmID0gX3RoaXMucHJvcHMuc2VsZWN0c1JhbmdlID8gX3RoaXMucHJvcHMuc3RhcnREYXRlIDogX3RoaXMucHJvcHMuc2VsZWN0ZWQpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBib3VuZGVkUHJlU2VsZWN0aW9uLFxuICAgICAgICAvLyB0cmFuc2Zvcm1pbmcgaGlnaGxpZ2h0ZWQgZGF5cyAocGVyaGFwcyBuZXN0ZWQgYXJyYXkpXG4gICAgICAgIC8vIHRvIGZsYXQgTWFwIGZvciBmYXN0ZXIgYWNjZXNzIGluIGRheS5qc3hcbiAgICAgICAgaGlnaGxpZ2h0RGF0ZXM6IGdldEhpZ2h0TGlnaHREYXlzTWFwKF90aGlzLnByb3BzLmhpZ2hsaWdodERhdGVzKSxcbiAgICAgICAgZm9jdXNlZDogZmFsc2UsXG4gICAgICAgIC8vIHVzZWQgdG8gZm9jdXMgZGF5IGluIGlubGluZSB2ZXJzaW9uIGFmdGVyIG1vbnRoIGhhcyBjaGFuZ2VkLCBidXQgbm90IG9uXG4gICAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICAgIHNob3VsZEZvY3VzRGF5SW5saW5lOiBmYWxzZSxcbiAgICAgICAgaXNSZW5kZXJBcmlhTGl2ZU1lc3NhZ2U6IGZhbHNlXG4gICAgICB9O1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJjbGVhclByZXZlbnRGb2N1c1RpbWVvdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByZXZlbnRGb2N1c1RpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnByZXZlbnRGb2N1c1RpbWVvdXQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJzZXRGb2N1c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuaW5wdXQgJiYgX3RoaXMuaW5wdXQuZm9jdXMpIHtcbiAgICAgICAgX3RoaXMuaW5wdXQuZm9jdXMoe1xuICAgICAgICAgIHByZXZlbnRTY3JvbGw6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInNldEJsdXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmlucHV0ICYmIF90aGlzLmlucHV0LmJsdXIpIHtcbiAgICAgICAgX3RoaXMuaW5wdXQuYmx1cigpO1xuICAgICAgfVxuICAgICAgX3RoaXMuY2FuY2VsRm9jdXNJbnB1dCgpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJzZXRPcGVuXCIsIGZ1bmN0aW9uIChvcGVuKSB7XG4gICAgICB2YXIgc2tpcFNldEJsdXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBwcmVTZWxlY3Rpb246IG9wZW4gJiYgX3RoaXMuc3RhdGUub3BlbiA/IF90aGlzLnN0YXRlLnByZVNlbGVjdGlvbiA6IF90aGlzLmNhbGNJbml0aWFsU3RhdGUoKS5wcmVTZWxlY3Rpb24sXG4gICAgICAgIGxhc3RQcmVTZWxlY3RDaGFuZ2U6IFBSRVNFTEVDVF9DSEFOR0VfVklBX05BVklHQVRFXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghb3Blbikge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBmb2N1c2VkOiBza2lwU2V0Qmx1ciA/IHByZXYuZm9jdXNlZCA6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICFza2lwU2V0Qmx1ciAmJiBfdGhpcy5zZXRCbHVyKCk7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGlucHV0VmFsdWU6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaW5wdXRPa1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaXNEYXRlKF90aGlzLnN0YXRlLnByZVNlbGVjdGlvbik7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImlzQ2FsZW5kYXJPcGVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vcGVuID09PSB1bmRlZmluZWQgPyBfdGhpcy5zdGF0ZS5vcGVuICYmICFfdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiAhX3RoaXMucHJvcHMucmVhZE9ubHkgOiBfdGhpcy5wcm9wcy5vcGVuO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJoYW5kbGVGb2N1c1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMuc3RhdGUucHJldmVudEZvY3VzKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRm9jdXMoZXZlbnQpO1xuICAgICAgICBpZiAoIV90aGlzLnByb3BzLnByZXZlbnRPcGVuT25Gb2N1cyAmJiAhX3RoaXMucHJvcHMucmVhZE9ubHkpIHtcbiAgICAgICAgICBfdGhpcy5zZXRPcGVuKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJzZW5kRm9jdXNCYWNrVG9JbnB1dFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDbGVhciBwcmV2aW91cyB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuICAgICAgaWYgKF90aGlzLnByZXZlbnRGb2N1c1RpbWVvdXQpIHtcbiAgICAgICAgX3RoaXMuY2xlYXJQcmV2ZW50Rm9jdXNUaW1lb3V0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNsb3NlIHRoZSBwb3BwZXIgYW5kIHJlZm9jdXMgdGhlIGlucHV0XG4gICAgICAvLyBzdG9wIHRoZSBpbnB1dCBmcm9tIGF1dG8gb3BlbmluZyBvbkZvY3VzXG4gICAgICAvLyBzZXRGb2N1cyB0byB0aGUgaW5wdXRcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcHJldmVudEZvY3VzOiB0cnVlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnByZXZlbnRGb2N1c1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zZXRGb2N1cygpO1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHByZXZlbnRGb2N1czogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiY2FuY2VsRm9jdXNJbnB1dFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuaW5wdXRGb2N1c1RpbWVvdXQpO1xuICAgICAgX3RoaXMuaW5wdXRGb2N1c1RpbWVvdXQgPSBudWxsO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJkZWZlckZvY3VzSW5wdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FuY2VsRm9jdXNJbnB1dCgpO1xuICAgICAgX3RoaXMuaW5wdXRGb2N1c1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNldEZvY3VzKCk7XG4gICAgICB9LCAxKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlRHJvcGRvd25Gb2N1c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYW5jZWxGb2N1c0lucHV0KCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZUJsdXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLm9wZW4gfHwgX3RoaXMucHJvcHMud2l0aFBvcnRhbCB8fCBfdGhpcy5wcm9wcy5zaG93VGltZUlucHV0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQmx1cihldmVudCk7XG4gICAgICB9XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiaGFuZGxlQ2FsZW5kYXJDbGlja091dHNpZGVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLmlubGluZSkge1xuICAgICAgICBfdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2tPdXRzaWRlKGV2ZW50KTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy53aXRoUG9ydGFsKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZUNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYWxsQXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYWxsQXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIHZhciBldmVudCA9IGFsbEFyZ3NbMF07XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2VSYXcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2VSYXcuYXBwbHkoX3RoaXMsIGFsbEFyZ3MpO1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCAhPT0gXCJmdW5jdGlvblwiIHx8IGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlucHV0VmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgbGFzdFByZVNlbGVjdENoYW5nZTogUFJFU0VMRUNUX0NIQU5HRV9WSUFfSU5QVVRcbiAgICAgIH0pO1xuICAgICAgdmFyIGRhdGUgPSBwYXJzZURhdGUoZXZlbnQudGFyZ2V0LnZhbHVlLCBfdGhpcy5wcm9wcy5kYXRlRm9ybWF0LCBfdGhpcy5wcm9wcy5sb2NhbGUsIF90aGlzLnByb3BzLnN0cmljdFBhcnNpbmcsIF90aGlzLnByb3BzLm1pbkRhdGUpO1xuICAgICAgLy8gVXNlIGRhdGUgZnJvbSBgc2VsZWN0ZWRgIHByb3Agd2hlbiBtYW5pcHVsYXRpbmcgb25seSB0aW1lIGZvciBpbnB1dCB2YWx1ZVxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSAmJiBfdGhpcy5wcm9wcy5zZWxlY3RlZCAmJiBkYXRlICYmICFpc1NhbWVEYXkoZGF0ZSwgX3RoaXMucHJvcHMuc2VsZWN0ZWQpKSB7XG4gICAgICAgIGRhdGUgPSBzZXQoX3RoaXMucHJvcHMuc2VsZWN0ZWQsIHtcbiAgICAgICAgICBob3VyczogZ2V0SG91cnMoZGF0ZSksXG4gICAgICAgICAgbWludXRlczogZ2V0TWludXRlcyhkYXRlKSxcbiAgICAgICAgICBzZWNvbmRzOiBnZXRTZWNvbmRzKGRhdGUpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGUgfHwgIWV2ZW50LnRhcmdldC52YWx1ZSkge1xuICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZChkYXRlLCBldmVudCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZVNlbGVjdFwiLCBmdW5jdGlvbiAoZGF0ZSwgZXZlbnQsIG1vbnRoU2VsZWN0ZWRJbikge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3QgJiYgIV90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0KSB7XG4gICAgICAgIC8vIFByZXZlbnRpbmcgb25Gb2N1cyBldmVudCB0byBmaXggaXNzdWVcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0hhY2tlcjB4MDEvcmVhY3QtZGF0ZXBpY2tlci9pc3N1ZXMvNjI4XG4gICAgICAgIF90aGlzLnNlbmRGb2N1c0JhY2tUb0lucHV0KCk7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2VSYXcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2VSYXcoZXZlbnQpO1xuICAgICAgfVxuICAgICAgX3RoaXMuc2V0U2VsZWN0ZWQoZGF0ZSwgZXZlbnQsIGZhbHNlLCBtb250aFNlbGVjdGVkSW4pO1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dEYXRlU2VsZWN0KSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1JlbmRlckFyaWFMaXZlTWVzc2FnZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghX3RoaXMucHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdCB8fCBfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdCkge1xuICAgICAgICBfdGhpcy5zZXRQcmVTZWxlY3Rpb24oZGF0ZSk7XG4gICAgICB9IGVsc2UgaWYgKCFfdGhpcy5wcm9wcy5pbmxpbmUpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5zZWxlY3RzUmFuZ2UpIHtcbiAgICAgICAgICBfdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wcy5zdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzLmVuZERhdGU7XG4gICAgICAgIGlmIChzdGFydERhdGUgJiYgIWVuZERhdGUgJiYgIWlzRGF0ZUJlZm9yZShkYXRlLCBzdGFydERhdGUpKSB7XG4gICAgICAgICAgX3RoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwic2V0U2VsZWN0ZWRcIiwgZnVuY3Rpb24gKGRhdGUsIGV2ZW50LCBrZWVwSW5wdXQsIG1vbnRoU2VsZWN0ZWRJbikge1xuICAgICAgdmFyIGNoYW5nZWREYXRlID0gZGF0ZTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93WWVhclBpY2tlcikge1xuICAgICAgICBpZiAoY2hhbmdlZERhdGUgIT09IG51bGwgJiYgaXNZZWFyRGlzYWJsZWQoZ2V0WWVhcihjaGFuZ2VkRGF0ZSksIF90aGlzLnByb3BzKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyKSB7XG4gICAgICAgIGlmIChjaGFuZ2VkRGF0ZSAhPT0gbnVsbCAmJiBpc01vbnRoRGlzYWJsZWQoY2hhbmdlZERhdGUsIF90aGlzLnByb3BzKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNoYW5nZWREYXRlICE9PSBudWxsICYmIGlzRGF5RGlzYWJsZWQoY2hhbmdlZERhdGUsIF90aGlzLnByb3BzKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzMi5vbkNoYW5nZSxcbiAgICAgICAgc2VsZWN0c1JhbmdlID0gX3RoaXMkcHJvcHMyLnNlbGVjdHNSYW5nZSxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMyLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzMi5lbmREYXRlLFxuICAgICAgICBzZWxlY3RzTXVsdGlwbGUgPSBfdGhpcyRwcm9wczIuc2VsZWN0c011bHRpcGxlLFxuICAgICAgICBzZWxlY3RlZERhdGVzID0gX3RoaXMkcHJvcHMyLnNlbGVjdGVkRGF0ZXMsXG4gICAgICAgIG1pblRpbWUgPSBfdGhpcyRwcm9wczIubWluVGltZSxcbiAgICAgICAgc3dhcFJhbmdlID0gX3RoaXMkcHJvcHMyLnN3YXBSYW5nZTtcbiAgICAgIGlmICghaXNFcXVhbChfdGhpcy5wcm9wcy5zZWxlY3RlZCwgY2hhbmdlZERhdGUpIHx8IF90aGlzLnByb3BzLmFsbG93U2FtZURheSB8fCBzZWxlY3RzUmFuZ2UgfHwgc2VsZWN0c011bHRpcGxlKSB7XG4gICAgICAgIGlmIChjaGFuZ2VkRGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5zZWxlY3RlZCAmJiAoIWtlZXBJbnB1dCB8fCAhX3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3QgJiYgIV90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSAmJiAhX3RoaXMucHJvcHMuc2hvd1RpbWVJbnB1dCkpIHtcbiAgICAgICAgICAgIGNoYW5nZWREYXRlID0gc2V0VGltZShjaGFuZ2VkRGF0ZSwge1xuICAgICAgICAgICAgICBob3VyOiBnZXRIb3VycyhfdGhpcy5wcm9wcy5zZWxlY3RlZCksXG4gICAgICAgICAgICAgIG1pbnV0ZTogZ2V0TWludXRlcyhfdGhpcy5wcm9wcy5zZWxlY3RlZCksXG4gICAgICAgICAgICAgIHNlY29uZDogZ2V0U2Vjb25kcyhfdGhpcy5wcm9wcy5zZWxlY3RlZClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIG1pblRpbWUgaXMgcHJlc2VudCB0aGVuIHNldCB0aGUgdGltZSB0byBtaW5UaW1lXG4gICAgICAgICAgaWYgKCFrZWVwSW5wdXQgJiYgKF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0IHx8IF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSkpIHtcbiAgICAgICAgICAgIGlmIChtaW5UaW1lKSB7XG4gICAgICAgICAgICAgIGNoYW5nZWREYXRlID0gc2V0VGltZShjaGFuZ2VkRGF0ZSwge1xuICAgICAgICAgICAgICAgIGhvdXI6IG1pblRpbWUuZ2V0SG91cnMoKSxcbiAgICAgICAgICAgICAgICBtaW51dGU6IG1pblRpbWUuZ2V0TWludXRlcygpLFxuICAgICAgICAgICAgICAgIHNlY29uZDogbWluVGltZS5nZXRTZWNvbmRzKClcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghX3RoaXMucHJvcHMuaW5saW5lKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIHByZVNlbGVjdGlvbjogY2hhbmdlZERhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIV90aGlzLnByb3BzLmZvY3VzU2VsZWN0ZWRNb250aCkge1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBtb250aFNlbGVjdGVkSW46IG1vbnRoU2VsZWN0ZWRJblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RzUmFuZ2UpIHtcbiAgICAgICAgICB2YXIgbm9SYW5nZXMgPSAhc3RhcnREYXRlICYmICFlbmREYXRlO1xuICAgICAgICAgIHZhciBoYXNTdGFydFJhbmdlID0gc3RhcnREYXRlICYmICFlbmREYXRlO1xuICAgICAgICAgIHZhciBpc1JhbmdlRmlsbGVkID0gc3RhcnREYXRlICYmIGVuZERhdGU7XG4gICAgICAgICAgaWYgKG5vUmFuZ2VzKSB7XG4gICAgICAgICAgICBvbkNoYW5nZShbY2hhbmdlZERhdGUsIG51bGxdLCBldmVudCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNTdGFydFJhbmdlKSB7XG4gICAgICAgICAgICBpZiAoY2hhbmdlZERhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgb25DaGFuZ2UoW251bGwsIG51bGxdLCBldmVudCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZUJlZm9yZShjaGFuZ2VkRGF0ZSwgc3RhcnREYXRlKSkge1xuICAgICAgICAgICAgICBpZiAoc3dhcFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgb25DaGFuZ2UoW2NoYW5nZWREYXRlLCBzdGFydERhdGVdLCBldmVudCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb25DaGFuZ2UoW2NoYW5nZWREYXRlLCBudWxsXSwgZXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvbkNoYW5nZShbc3RhcnREYXRlLCBjaGFuZ2VkRGF0ZV0sIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzUmFuZ2VGaWxsZWQpIHtcbiAgICAgICAgICAgIG9uQ2hhbmdlKFtjaGFuZ2VkRGF0ZSwgbnVsbF0sIGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0c011bHRpcGxlKSB7XG4gICAgICAgICAgaWYgKCEoc2VsZWN0ZWREYXRlcyAhPT0gbnVsbCAmJiBzZWxlY3RlZERhdGVzICE9PSB2b2lkIDAgJiYgc2VsZWN0ZWREYXRlcy5sZW5ndGgpKSB7XG4gICAgICAgICAgICBvbkNoYW5nZShbY2hhbmdlZERhdGVdLCBldmVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpc0NoYW5nZWREYXRlQWxyZWFkeVNlbGVjdGVkID0gc2VsZWN0ZWREYXRlcy5zb21lKGZ1bmN0aW9uIChzZWxlY3RlZERhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGlzU2FtZURheShzZWxlY3RlZERhdGUsIGNoYW5nZWREYXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGlzQ2hhbmdlZERhdGVBbHJlYWR5U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgdmFyIG5leHREYXRlcyA9IHNlbGVjdGVkRGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChzZWxlY3RlZERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlzU2FtZURheShzZWxlY3RlZERhdGUsIGNoYW5nZWREYXRlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIG9uQ2hhbmdlKG5leHREYXRlcywgZXZlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb25DaGFuZ2UoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzZWxlY3RlZERhdGVzKSwgW2NoYW5nZWREYXRlXSksIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25DaGFuZ2UoY2hhbmdlZERhdGUsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFrZWVwSW5wdXQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25TZWxlY3QoY2hhbmdlZERhdGUsIGV2ZW50KTtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlucHV0VmFsdWU6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gV2hlbiBjaGVja2luZyBwcmVTZWxlY3Rpb24gdmlhIG1pbi9tYXhEYXRlLCB0aW1lcyBuZWVkIHRvIGJlIG1hbmlwdWxhdGVkIHZpYSBzdGFydE9mRGF5L2VuZE9mRGF5XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInNldFByZVNlbGVjdGlvblwiLCBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgdmFyIGhhc01pbkRhdGUgPSB0eXBlb2YgX3RoaXMucHJvcHMubWluRGF0ZSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIHZhciBoYXNNYXhEYXRlID0gdHlwZW9mIF90aGlzLnByb3BzLm1heERhdGUgIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICB2YXIgaXNWYWxpZERhdGVTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgdmFyIGRhdGVTdGFydE9mRGF5ID0gc3RhcnRPZkRheShkYXRlKTtcbiAgICAgICAgaWYgKGhhc01pbkRhdGUgJiYgaGFzTWF4RGF0ZSkge1xuICAgICAgICAgIC8vIGlzRGF5SW5SYW5nZSB1c2VzIHN0YXJ0T2ZEYXkgaW50ZXJuYWxseSwgc28gbm90IG5lY2Vzc2FyeSB0byBtYW5pcHVsYXRlIHRpbWVzIGhlcmVcbiAgICAgICAgICBpc1ZhbGlkRGF0ZVNlbGVjdGlvbiA9IGlzRGF5SW5SYW5nZShkYXRlLCBfdGhpcy5wcm9wcy5taW5EYXRlLCBfdGhpcy5wcm9wcy5tYXhEYXRlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYXNNaW5EYXRlKSB7XG4gICAgICAgICAgdmFyIG1pbkRhdGVTdGFydE9mRGF5ID0gc3RhcnRPZkRheShfdGhpcy5wcm9wcy5taW5EYXRlKTtcbiAgICAgICAgICBpc1ZhbGlkRGF0ZVNlbGVjdGlvbiA9IGlzQWZ0ZXIoZGF0ZSwgbWluRGF0ZVN0YXJ0T2ZEYXkpIHx8IGlzRXF1YWwoZGF0ZVN0YXJ0T2ZEYXksIG1pbkRhdGVTdGFydE9mRGF5KTtcbiAgICAgICAgfSBlbHNlIGlmIChoYXNNYXhEYXRlKSB7XG4gICAgICAgICAgdmFyIG1heERhdGVFbmRPZkRheSA9IGVuZE9mRGF5KF90aGlzLnByb3BzLm1heERhdGUpO1xuICAgICAgICAgIGlzVmFsaWREYXRlU2VsZWN0aW9uID0gaXNCZWZvcmUoZGF0ZSwgbWF4RGF0ZUVuZE9mRGF5KSB8fCBpc0VxdWFsKGRhdGVTdGFydE9mRGF5LCBtYXhEYXRlRW5kT2ZEYXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNWYWxpZERhdGVTZWxlY3Rpb24pIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHByZVNlbGVjdGlvbjogZGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwidG9nZ2xlQ2FsZW5kYXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0T3BlbighX3RoaXMuc3RhdGUub3Blbik7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcImhhbmRsZVRpbWVDaGFuZ2VcIiwgZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgIHZhciBzZWxlY3RlZCA9IF90aGlzLnByb3BzLnNlbGVjdGVkID8gX3RoaXMucHJvcHMuc2VsZWN0ZWQgOiBfdGhpcy5nZXRQcmVTZWxlY3Rpb24oKTtcbiAgICAgIHZhciBjaGFuZ2VkRGF0ZSA9IF90aGlzLnByb3BzLnNlbGVjdGVkID8gdGltZSA6IHNldFRpbWUoc2VsZWN0ZWQsIHtcbiAgICAgICAgaG91cjogZ2V0SG91cnModGltZSksXG4gICAgICAgIG1pbnV0ZTogZ2V0TWludXRlcyh0aW1lKVxuICAgICAgfSk7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHByZVNlbGVjdGlvbjogY2hhbmdlZERhdGVcbiAgICAgIH0pO1xuICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoY2hhbmdlZERhdGUpO1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3QpIHtcbiAgICAgICAgX3RoaXMuc2VuZEZvY3VzQmFja1RvSW5wdXQoKTtcbiAgICAgICAgX3RoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2hvd1RpbWVJbnB1dCkge1xuICAgICAgICBfdGhpcy5zZXRPcGVuKHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSB8fCBfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNSZW5kZXJBcmlhTGl2ZU1lc3NhZ2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlucHV0VmFsdWU6IG51bGxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvbklucHV0Q2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiAhX3RoaXMucHJvcHMucmVhZE9ubHkpIHtcbiAgICAgICAgX3RoaXMuc2V0T3Blbih0cnVlKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnByb3BzLm9uSW5wdXRDbGljaygpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvbklucHV0S2V5RG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7XG4gICAgICB2YXIgZXZlbnRLZXkgPSBldmVudC5rZXk7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLm9wZW4gJiYgIV90aGlzLnByb3BzLmlubGluZSAmJiAhX3RoaXMucHJvcHMucHJldmVudE9wZW5PbkZvY3VzKSB7XG4gICAgICAgIGlmIChldmVudEtleSA9PT0gXCJBcnJvd0Rvd25cIiB8fCBldmVudEtleSA9PT0gXCJBcnJvd1VwXCIgfHwgZXZlbnRLZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgIF90aGlzLm9uSW5wdXRDbGljaygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgY2FsZW5kYXIgaXMgb3BlbiwgdGhlc2Uga2V5cyB3aWxsIGZvY3VzIHRoZSBzZWxlY3RlZCBpdGVtXG4gICAgICBpZiAoX3RoaXMuc3RhdGUub3Blbikge1xuICAgICAgICBpZiAoZXZlbnRLZXkgPT09IFwiQXJyb3dEb3duXCIgfHwgZXZlbnRLZXkgPT09IFwiQXJyb3dVcFwiKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB2YXIgc2VsZWN0b3JTdHJpbmcgPSBfdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlciAmJiBfdGhpcy5wcm9wcy5zaG93V2Vla051bWJlcnMgPyAnLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyW3RhYmluZGV4PVwiMFwiXScgOiAnLnJlYWN0LWRhdGVwaWNrZXJfX2RheVt0YWJpbmRleD1cIjBcIl0nO1xuICAgICAgICAgIHZhciBzZWxlY3RlZEl0ZW0gPSBfdGhpcy5jYWxlbmRhci5jb21wb25lbnROb2RlICYmIF90aGlzLmNhbGVuZGFyLmNvbXBvbmVudE5vZGUucXVlcnlTZWxlY3RvcihzZWxlY3RvclN0cmluZyk7XG4gICAgICAgICAgc2VsZWN0ZWRJdGVtICYmIHNlbGVjdGVkSXRlbS5mb2N1cyh7XG4gICAgICAgICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb3B5ID0gbmV3RGF0ZShfdGhpcy5zdGF0ZS5wcmVTZWxlY3Rpb24pO1xuICAgICAgICBpZiAoZXZlbnRLZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKF90aGlzLmlucHV0T2soKSAmJiBfdGhpcy5zdGF0ZS5sYXN0UHJlU2VsZWN0Q2hhbmdlID09PSBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9OQVZJR0FURSkge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlU2VsZWN0KGNvcHksIGV2ZW50KTtcbiAgICAgICAgICAgICFfdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uU2VsZWN0ICYmIF90aGlzLnNldFByZVNlbGVjdGlvbihjb3B5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50S2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5zZW5kRm9jdXNCYWNrVG9JbnB1dCgpO1xuICAgICAgICAgIF90aGlzLnNldE9wZW4oZmFsc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50S2V5ID09PSBcIlRhYlwiKSB7XG4gICAgICAgICAgX3RoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfdGhpcy5pbnB1dE9rKCkpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbklucHV0RXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogMSxcbiAgICAgICAgICAgIG1zZzogSU5QVVRfRVJSXzFcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvblBvcnRhbEtleURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgZXZlbnRLZXkgPSBldmVudC5rZXk7XG4gICAgICBpZiAoZXZlbnRLZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHByZXZlbnRGb2N1czogdHJ1ZVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRGb2N1cygpO1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBwcmV2ZW50Rm9jdXM6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8ga2V5RG93biBldmVudHMgcGFzc2VkIGRvd24gdG8gZGF5LmpzeFxuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvbkRheUtleURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgdmFyIGV2ZW50S2V5ID0gZXZlbnQua2V5O1xuICAgICAgdmFyIGlzU2hpZnRLZXlBY3RpdmUgPSBldmVudC5zaGlmdEtleTtcbiAgICAgIHZhciBjb3B5ID0gbmV3RGF0ZShfdGhpcy5zdGF0ZS5wcmVTZWxlY3Rpb24pO1xuICAgICAgaWYgKGV2ZW50S2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlU2VsZWN0KGNvcHksIGV2ZW50KTtcbiAgICAgICAgIV90aGlzLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3QgJiYgX3RoaXMuc2V0UHJlU2VsZWN0aW9uKGNvcHkpO1xuICAgICAgfSBlbHNlIGlmIChldmVudEtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgICAgaWYgKCFfdGhpcy5pbnB1dE9rKCkpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbklucHV0RXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogMSxcbiAgICAgICAgICAgIG1zZzogSU5QVVRfRVJSXzFcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghX3RoaXMucHJvcHMuZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24pIHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGlvbjtcbiAgICAgICAgc3dpdGNoIChldmVudEtleSkge1xuICAgICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlcikge1xuICAgICAgICAgICAgICBuZXdTZWxlY3Rpb24gPSBzdWJXZWVrcyhjb3B5LCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IHN1YkRheXMoY29weSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dXZWVrUGlja2VyKSB7XG4gICAgICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IGFkZFdlZWtzKGNvcHksIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3U2VsZWN0aW9uID0gYWRkRGF5cyhjb3B5LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICAgICAgICBuZXdTZWxlY3Rpb24gPSBzdWJXZWVrcyhjb3B5LCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjpcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IGFkZFdlZWtzKGNvcHksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlBhZ2VVcFwiOlxuICAgICAgICAgICAgbmV3U2VsZWN0aW9uID0gaXNTaGlmdEtleUFjdGl2ZSA/IHN1YlllYXJzKGNvcHksIDEpIDogc3ViTW9udGhzKGNvcHksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlBhZ2VEb3duXCI6XG4gICAgICAgICAgICBuZXdTZWxlY3Rpb24gPSBpc1NoaWZ0S2V5QWN0aXZlID8gYWRkWWVhcnMoY29weSwgMSkgOiBhZGRNb250aHMoY29weSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiSG9tZVwiOlxuICAgICAgICAgICAgbmV3U2VsZWN0aW9uID0gZ2V0U3RhcnRPZldlZWsoY29weSwgX3RoaXMucHJvcHMubG9jYWxlLCBfdGhpcy5wcm9wcy5jYWxlbmRhclN0YXJ0RGF5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJFbmRcIjpcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IGdldEVuZE9mV2Vlayhjb3B5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuZXdTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFuZXdTZWxlY3Rpb24pIHtcbiAgICAgICAgICBpZiAoX3RoaXMucHJvcHMub25JbnB1dEVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vbklucHV0RXJyb3Ioe1xuICAgICAgICAgICAgICBjb2RlOiAxLFxuICAgICAgICAgICAgICBtc2c6IElOUFVUX0VSUl8xXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBsYXN0UHJlU2VsZWN0Q2hhbmdlOiBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9OQVZJR0FURVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmFkanVzdERhdGVPbkNoYW5nZSkge1xuICAgICAgICAgIF90aGlzLnNldFNlbGVjdGVkKG5ld1NlbGVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuc2V0UHJlU2VsZWN0aW9uKG5ld1NlbGVjdGlvbik7XG4gICAgICAgIC8vIG5lZWQgdG8gZmlndXJlIG91dCB3aGV0aGVyIG1vbnRoIGhhcyBjaGFuZ2VkIHRvIGZvY3VzIGRheSBpbiBpbmxpbmUgdmVyc2lvblxuICAgICAgICBpZiAoX3RoaXMucHJvcHMuaW5saW5lKSB7XG4gICAgICAgICAgdmFyIHByZXZNb250aCA9IGdldE1vbnRoKGNvcHkpO1xuICAgICAgICAgIHZhciBuZXdNb250aCA9IGdldE1vbnRoKG5ld1NlbGVjdGlvbik7XG4gICAgICAgICAgdmFyIHByZXZZZWFyID0gZ2V0WWVhcihjb3B5KTtcbiAgICAgICAgICB2YXIgbmV3WWVhciA9IGdldFllYXIobmV3U2VsZWN0aW9uKTtcbiAgICAgICAgICBpZiAocHJldk1vbnRoICE9PSBuZXdNb250aCB8fCBwcmV2WWVhciAhPT0gbmV3WWVhcikge1xuICAgICAgICAgICAgLy8gbW9udGggaGFzIGNoYW5nZWRcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgc2hvdWxkRm9jdXNEYXlJbmxpbmU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBtb250aCBoYXNuJ3QgY2hhbmdlZFxuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBzaG91bGRGb2N1c0RheUlubGluZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGhhbmRsZSBnZW5lcmljIGtleSBkb3duIGV2ZW50cyBpbiB0aGUgcG9wcGVyIHRoYXQgZG8gbm90IGFkanVzdCBvciBzZWxlY3QgZGF0ZXNcbiAgICAvLyBleDogd2hpbGUgZm9jdXNpbmcgcHJldiBhbmQgbmV4dCBtb250aCBidXR0b25zXG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIm9uUG9wcGVyS2V5RG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBldmVudEtleSA9IGV2ZW50LmtleTtcbiAgICAgIGlmIChldmVudEtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5zZW5kRm9jdXNCYWNrVG9JbnB1dCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJvbkNsZWFyQ2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3RoaXMuc2VuZEZvY3VzQmFja1RvSW5wdXQoKTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zZWxlY3RzUmFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoW251bGwsIG51bGxdLCBldmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZShudWxsLCBldmVudCk7XG4gICAgICB9XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlucHV0VmFsdWU6IG51bGxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJjbGVhclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5vbkNsZWFyQ2xpY2soKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwib25TY3JvbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodHlwZW9mIF90aGlzLnByb3BzLmNsb3NlT25TY3JvbGwgPT09IFwiYm9vbGVhblwiICYmIF90aGlzLnByb3BzLmNsb3NlT25TY3JvbGwpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZG9jdW1lbnQgfHwgZXZlbnQudGFyZ2V0ID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgZXZlbnQudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgX3RoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGlzLnByb3BzLmNsb3NlT25TY3JvbGwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuY2xvc2VPblNjcm9sbChldmVudCkpIHtcbiAgICAgICAgICBfdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJDYWxlbmRhclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLmlubGluZSAmJiAhX3RoaXMuaXNDYWxlbmRhck9wZW4oKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ2FsZW5kYXIsIHtcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZWxlbSkge1xuICAgICAgICAgIF90aGlzLmNhbGVuZGFyID0gZWxlbTtcbiAgICAgICAgfSxcbiAgICAgICAgbG9jYWxlOiBfdGhpcy5wcm9wcy5sb2NhbGUsXG4gICAgICAgIGNhbGVuZGFyU3RhcnREYXk6IF90aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXksXG4gICAgICAgIGNob29zZURheUFyaWFMYWJlbFByZWZpeDogX3RoaXMucHJvcHMuY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4LFxuICAgICAgICBkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeDogX3RoaXMucHJvcHMuZGlzYWJsZWREYXlBcmlhTGFiZWxQcmVmaXgsXG4gICAgICAgIHdlZWtBcmlhTGFiZWxQcmVmaXg6IF90aGlzLnByb3BzLndlZWtBcmlhTGFiZWxQcmVmaXgsXG4gICAgICAgIG1vbnRoQXJpYUxhYmVsUHJlZml4OiBfdGhpcy5wcm9wcy5tb250aEFyaWFMYWJlbFByZWZpeCxcbiAgICAgICAgYWRqdXN0RGF0ZU9uQ2hhbmdlOiBfdGhpcy5wcm9wcy5hZGp1c3REYXRlT25DaGFuZ2UsXG4gICAgICAgIHNldE9wZW46IF90aGlzLnNldE9wZW4sXG4gICAgICAgIHNob3VsZENsb3NlT25TZWxlY3Q6IF90aGlzLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3QsXG4gICAgICAgIGRhdGVGb3JtYXQ6IF90aGlzLnByb3BzLmRhdGVGb3JtYXRDYWxlbmRhcixcbiAgICAgICAgdXNlV2Vla2RheXNTaG9ydDogX3RoaXMucHJvcHMudXNlV2Vla2RheXNTaG9ydCxcbiAgICAgICAgZm9ybWF0V2Vla0RheTogX3RoaXMucHJvcHMuZm9ybWF0V2Vla0RheSxcbiAgICAgICAgZHJvcGRvd25Nb2RlOiBfdGhpcy5wcm9wcy5kcm9wZG93bk1vZGUsXG4gICAgICAgIHNlbGVjdGVkOiBfdGhpcy5wcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgcHJlU2VsZWN0aW9uOiBfdGhpcy5zdGF0ZS5wcmVTZWxlY3Rpb24sXG4gICAgICAgIG9uU2VsZWN0OiBfdGhpcy5oYW5kbGVTZWxlY3QsXG4gICAgICAgIG9uV2Vla1NlbGVjdDogX3RoaXMucHJvcHMub25XZWVrU2VsZWN0LFxuICAgICAgICBvcGVuVG9EYXRlOiBfdGhpcy5wcm9wcy5vcGVuVG9EYXRlLFxuICAgICAgICBtaW5EYXRlOiBfdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiBfdGhpcy5wcm9wcy5tYXhEYXRlLFxuICAgICAgICBzZWxlY3RzU3RhcnQ6IF90aGlzLnByb3BzLnNlbGVjdHNTdGFydCxcbiAgICAgICAgc2VsZWN0c0VuZDogX3RoaXMucHJvcHMuc2VsZWN0c0VuZCxcbiAgICAgICAgc2VsZWN0c1JhbmdlOiBfdGhpcy5wcm9wcy5zZWxlY3RzUmFuZ2UsXG4gICAgICAgIHNlbGVjdHNNdWx0aXBsZTogX3RoaXMucHJvcHMuc2VsZWN0c011bHRpcGxlLFxuICAgICAgICBzZWxlY3RlZERhdGVzOiBfdGhpcy5wcm9wcy5zZWxlY3RlZERhdGVzLFxuICAgICAgICBzdGFydERhdGU6IF90aGlzLnByb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogX3RoaXMucHJvcHMuZW5kRGF0ZSxcbiAgICAgICAgZXhjbHVkZURhdGVzOiBfdGhpcy5wcm9wcy5leGNsdWRlRGF0ZXMsXG4gICAgICAgIGV4Y2x1ZGVEYXRlSW50ZXJ2YWxzOiBfdGhpcy5wcm9wcy5leGNsdWRlRGF0ZUludGVydmFscyxcbiAgICAgICAgZmlsdGVyRGF0ZTogX3RoaXMucHJvcHMuZmlsdGVyRGF0ZSxcbiAgICAgICAgb25DbGlja091dHNpZGU6IF90aGlzLmhhbmRsZUNhbGVuZGFyQ2xpY2tPdXRzaWRlLFxuICAgICAgICBmb3JtYXRXZWVrTnVtYmVyOiBfdGhpcy5wcm9wcy5mb3JtYXRXZWVrTnVtYmVyLFxuICAgICAgICBoaWdobGlnaHREYXRlczogX3RoaXMuc3RhdGUuaGlnaGxpZ2h0RGF0ZXMsXG4gICAgICAgIGhvbGlkYXlzOiBnZXRIb2xpZGF5c01hcChfdGhpcy5tb2RpZnlIb2xpZGF5cygpKSxcbiAgICAgICAgaW5jbHVkZURhdGVzOiBfdGhpcy5wcm9wcy5pbmNsdWRlRGF0ZXMsXG4gICAgICAgIGluY2x1ZGVEYXRlSW50ZXJ2YWxzOiBfdGhpcy5wcm9wcy5pbmNsdWRlRGF0ZUludGVydmFscyxcbiAgICAgICAgaW5jbHVkZVRpbWVzOiBfdGhpcy5wcm9wcy5pbmNsdWRlVGltZXMsXG4gICAgICAgIGluamVjdFRpbWVzOiBfdGhpcy5wcm9wcy5pbmplY3RUaW1lcyxcbiAgICAgICAgaW5saW5lOiBfdGhpcy5wcm9wcy5pbmxpbmUsXG4gICAgICAgIHNob3VsZEZvY3VzRGF5SW5saW5lOiBfdGhpcy5zdGF0ZS5zaG91bGRGb2N1c0RheUlubGluZSxcbiAgICAgICAgcGVla05leHRNb250aDogX3RoaXMucHJvcHMucGVla05leHRNb250aCxcbiAgICAgICAgc2hvd01vbnRoRHJvcGRvd246IF90aGlzLnByb3BzLnNob3dNb250aERyb3Bkb3duLFxuICAgICAgICBzaG93UHJldmlvdXNNb250aHM6IF90aGlzLnByb3BzLnNob3dQcmV2aW91c01vbnRocyxcbiAgICAgICAgdXNlU2hvcnRNb250aEluRHJvcGRvd246IF90aGlzLnByb3BzLnVzZVNob3J0TW9udGhJbkRyb3Bkb3duLFxuICAgICAgICBzaG93TW9udGhZZWFyRHJvcGRvd246IF90aGlzLnByb3BzLnNob3dNb250aFllYXJEcm9wZG93bixcbiAgICAgICAgc2hvd1dlZWtOdW1iZXJzOiBfdGhpcy5wcm9wcy5zaG93V2Vla051bWJlcnMsXG4gICAgICAgIHNob3dZZWFyRHJvcGRvd246IF90aGlzLnByb3BzLnNob3dZZWFyRHJvcGRvd24sXG4gICAgICAgIHdpdGhQb3J0YWw6IF90aGlzLnByb3BzLndpdGhQb3J0YWwsXG4gICAgICAgIGZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbjogX3RoaXMucHJvcHMuZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uLFxuICAgICAgICBzaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb246IF90aGlzLnByb3BzLnNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbixcbiAgICAgICAgc2Nyb2xsYWJsZVllYXJEcm9wZG93bjogX3RoaXMucHJvcHMuc2Nyb2xsYWJsZVllYXJEcm9wZG93bixcbiAgICAgICAgc2Nyb2xsYWJsZU1vbnRoWWVhckRyb3Bkb3duOiBfdGhpcy5wcm9wcy5zY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd24sXG4gICAgICAgIHRvZGF5QnV0dG9uOiBfdGhpcy5wcm9wcy50b2RheUJ1dHRvbixcbiAgICAgICAgd2Vla0xhYmVsOiBfdGhpcy5wcm9wcy53ZWVrTGFiZWwsXG4gICAgICAgIG91dHNpZGVDbGlja0lnbm9yZUNsYXNzOiBvdXRzaWRlQ2xpY2tJZ25vcmVDbGFzcyxcbiAgICAgICAgZml4ZWRIZWlnaHQ6IF90aGlzLnByb3BzLmZpeGVkSGVpZ2h0LFxuICAgICAgICBtb250aHNTaG93bjogX3RoaXMucHJvcHMubW9udGhzU2hvd24sXG4gICAgICAgIG1vbnRoU2VsZWN0ZWRJbjogX3RoaXMuc3RhdGUubW9udGhTZWxlY3RlZEluLFxuICAgICAgICBvbkRyb3Bkb3duRm9jdXM6IF90aGlzLmhhbmRsZURyb3Bkb3duRm9jdXMsXG4gICAgICAgIG9uTW9udGhDaGFuZ2U6IF90aGlzLnByb3BzLm9uTW9udGhDaGFuZ2UsXG4gICAgICAgIG9uWWVhckNoYW5nZTogX3RoaXMucHJvcHMub25ZZWFyQ2hhbmdlLFxuICAgICAgICBkYXlDbGFzc05hbWU6IF90aGlzLnByb3BzLmRheUNsYXNzTmFtZSxcbiAgICAgICAgd2Vla0RheUNsYXNzTmFtZTogX3RoaXMucHJvcHMud2Vla0RheUNsYXNzTmFtZSxcbiAgICAgICAgbW9udGhDbGFzc05hbWU6IF90aGlzLnByb3BzLm1vbnRoQ2xhc3NOYW1lLFxuICAgICAgICB0aW1lQ2xhc3NOYW1lOiBfdGhpcy5wcm9wcy50aW1lQ2xhc3NOYW1lLFxuICAgICAgICBzaG93RGF0ZVNlbGVjdDogX3RoaXMucHJvcHMuc2hvd0RhdGVTZWxlY3QsXG4gICAgICAgIHNob3dUaW1lU2VsZWN0OiBfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdCxcbiAgICAgICAgc2hvd1RpbWVTZWxlY3RPbmx5OiBfdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHksXG4gICAgICAgIG9uVGltZUNoYW5nZTogX3RoaXMuaGFuZGxlVGltZUNoYW5nZSxcbiAgICAgICAgdGltZUZvcm1hdDogX3RoaXMucHJvcHMudGltZUZvcm1hdCxcbiAgICAgICAgdGltZUludGVydmFsczogX3RoaXMucHJvcHMudGltZUludGVydmFscyxcbiAgICAgICAgbWluVGltZTogX3RoaXMucHJvcHMubWluVGltZSxcbiAgICAgICAgbWF4VGltZTogX3RoaXMucHJvcHMubWF4VGltZSxcbiAgICAgICAgZXhjbHVkZVRpbWVzOiBfdGhpcy5wcm9wcy5leGNsdWRlVGltZXMsXG4gICAgICAgIGZpbHRlclRpbWU6IF90aGlzLnByb3BzLmZpbHRlclRpbWUsXG4gICAgICAgIHRpbWVDYXB0aW9uOiBfdGhpcy5wcm9wcy50aW1lQ2FwdGlvbixcbiAgICAgICAgY2xhc3NOYW1lOiBfdGhpcy5wcm9wcy5jYWxlbmRhckNsYXNzTmFtZSxcbiAgICAgICAgY29udGFpbmVyOiBfdGhpcy5wcm9wcy5jYWxlbmRhckNvbnRhaW5lcixcbiAgICAgICAgeWVhckl0ZW1OdW1iZXI6IF90aGlzLnByb3BzLnllYXJJdGVtTnVtYmVyLFxuICAgICAgICB5ZWFyRHJvcGRvd25JdGVtTnVtYmVyOiBfdGhpcy5wcm9wcy55ZWFyRHJvcGRvd25JdGVtTnVtYmVyLFxuICAgICAgICBwcmV2aW91c01vbnRoQXJpYUxhYmVsOiBfdGhpcy5wcm9wcy5wcmV2aW91c01vbnRoQXJpYUxhYmVsLFxuICAgICAgICBwcmV2aW91c01vbnRoQnV0dG9uTGFiZWw6IF90aGlzLnByb3BzLnByZXZpb3VzTW9udGhCdXR0b25MYWJlbCxcbiAgICAgICAgbmV4dE1vbnRoQXJpYUxhYmVsOiBfdGhpcy5wcm9wcy5uZXh0TW9udGhBcmlhTGFiZWwsXG4gICAgICAgIG5leHRNb250aEJ1dHRvbkxhYmVsOiBfdGhpcy5wcm9wcy5uZXh0TW9udGhCdXR0b25MYWJlbCxcbiAgICAgICAgcHJldmlvdXNZZWFyQXJpYUxhYmVsOiBfdGhpcy5wcm9wcy5wcmV2aW91c1llYXJBcmlhTGFiZWwsXG4gICAgICAgIHByZXZpb3VzWWVhckJ1dHRvbkxhYmVsOiBfdGhpcy5wcm9wcy5wcmV2aW91c1llYXJCdXR0b25MYWJlbCxcbiAgICAgICAgbmV4dFllYXJBcmlhTGFiZWw6IF90aGlzLnByb3BzLm5leHRZZWFyQXJpYUxhYmVsLFxuICAgICAgICBuZXh0WWVhckJ1dHRvbkxhYmVsOiBfdGhpcy5wcm9wcy5uZXh0WWVhckJ1dHRvbkxhYmVsLFxuICAgICAgICB0aW1lSW5wdXRMYWJlbDogX3RoaXMucHJvcHMudGltZUlucHV0TGFiZWwsXG4gICAgICAgIGRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uOiBfdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbixcbiAgICAgICAgcmVuZGVyQ3VzdG9tSGVhZGVyOiBfdGhpcy5wcm9wcy5yZW5kZXJDdXN0b21IZWFkZXIsXG4gICAgICAgIHBvcHBlclByb3BzOiBfdGhpcy5wcm9wcy5wb3BwZXJQcm9wcyxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHM6IF90aGlzLnByb3BzLnJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgICByZW5kZXJNb250aENvbnRlbnQ6IF90aGlzLnByb3BzLnJlbmRlck1vbnRoQ29udGVudCxcbiAgICAgICAgcmVuZGVyUXVhcnRlckNvbnRlbnQ6IF90aGlzLnByb3BzLnJlbmRlclF1YXJ0ZXJDb250ZW50LFxuICAgICAgICByZW5kZXJZZWFyQ29udGVudDogX3RoaXMucHJvcHMucmVuZGVyWWVhckNvbnRlbnQsXG4gICAgICAgIG9uRGF5TW91c2VFbnRlcjogX3RoaXMucHJvcHMub25EYXlNb3VzZUVudGVyLFxuICAgICAgICBvbk1vbnRoTW91c2VMZWF2ZTogX3RoaXMucHJvcHMub25Nb250aE1vdXNlTGVhdmUsXG4gICAgICAgIG9uWWVhck1vdXNlRW50ZXI6IF90aGlzLnByb3BzLm9uWWVhck1vdXNlRW50ZXIsXG4gICAgICAgIG9uWWVhck1vdXNlTGVhdmU6IF90aGlzLnByb3BzLm9uWWVhck1vdXNlTGVhdmUsXG4gICAgICAgIHNlbGVjdHNEaXNhYmxlZERheXNJblJhbmdlOiBfdGhpcy5wcm9wcy5zZWxlY3RzRGlzYWJsZWREYXlzSW5SYW5nZSxcbiAgICAgICAgc2hvd1RpbWVJbnB1dDogX3RoaXMucHJvcHMuc2hvd1RpbWVJbnB1dCxcbiAgICAgICAgc2hvd01vbnRoWWVhclBpY2tlcjogX3RoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlcixcbiAgICAgICAgc2hvd0Z1bGxNb250aFllYXJQaWNrZXI6IF90aGlzLnByb3BzLnNob3dGdWxsTW9udGhZZWFyUGlja2VyLFxuICAgICAgICBzaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyOiBfdGhpcy5wcm9wcy5zaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyLFxuICAgICAgICBzaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlcjogX3RoaXMucHJvcHMuc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIsXG4gICAgICAgIHNob3dZZWFyUGlja2VyOiBfdGhpcy5wcm9wcy5zaG93WWVhclBpY2tlcixcbiAgICAgICAgc2hvd1F1YXJ0ZXJZZWFyUGlja2VyOiBfdGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXIsXG4gICAgICAgIHNob3dXZWVrUGlja2VyOiBfdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlcixcbiAgICAgICAgZXhjbHVkZVNjcm9sbGJhcjogX3RoaXMucHJvcHMuZXhjbHVkZVNjcm9sbGJhcixcbiAgICAgICAgaGFuZGxlT25LZXlEb3duOiBfdGhpcy5wcm9wcy5vbktleURvd24sXG4gICAgICAgIGhhbmRsZU9uRGF5S2V5RG93bjogX3RoaXMub25EYXlLZXlEb3duLFxuICAgICAgICBpc0lucHV0Rm9jdXNlZDogX3RoaXMuc3RhdGUuZm9jdXNlZCxcbiAgICAgICAgY3VzdG9tVGltZUlucHV0OiBfdGhpcy5wcm9wcy5jdXN0b21UaW1lSW5wdXQsXG4gICAgICAgIHNldFByZVNlbGVjdGlvbjogX3RoaXMuc2V0UHJlU2VsZWN0aW9uLFxuICAgICAgICB1c2VQb2ludGVyRXZlbnQ6IF90aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudCxcbiAgICAgICAgeWVhckNsYXNzTmFtZTogX3RoaXMucHJvcHMueWVhckNsYXNzTmFtZVxuICAgICAgfSwgX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJBcmlhTGl2ZVJlZ2lvblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGRhdGVGb3JtYXQgPSBfdGhpcyRwcm9wczMuZGF0ZUZvcm1hdCxcbiAgICAgICAgbG9jYWxlID0gX3RoaXMkcHJvcHMzLmxvY2FsZTtcbiAgICAgIHZhciBpc0NvbnRhaW5zVGltZSA9IF90aGlzLnByb3BzLnNob3dUaW1lSW5wdXQgfHwgX3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3Q7XG4gICAgICB2YXIgbG9uZ0RhdGVGb3JtYXQgPSBpc0NvbnRhaW5zVGltZSA/IFwiUFBQUHBcIiA6IFwiUFBQUFwiO1xuICAgICAgdmFyIGFyaWFMaXZlTWVzc2FnZTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zZWxlY3RzUmFuZ2UpIHtcbiAgICAgICAgYXJpYUxpdmVNZXNzYWdlID0gXCJTZWxlY3RlZCBzdGFydCBkYXRlOiBcIi5jb25jYXQoc2FmZURhdGVGb3JtYXQoX3RoaXMucHJvcHMuc3RhcnREYXRlLCB7XG4gICAgICAgICAgZGF0ZUZvcm1hdDogbG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgICAgbG9jYWxlOiBsb2NhbGVcbiAgICAgICAgfSksIFwiLiBcIikuY29uY2F0KF90aGlzLnByb3BzLmVuZERhdGUgPyBcIkVuZCBkYXRlOiBcIiArIHNhZmVEYXRlRm9ybWF0KF90aGlzLnByb3BzLmVuZERhdGUsIHtcbiAgICAgICAgICBkYXRlRm9ybWF0OiBsb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgICBsb2NhbGU6IGxvY2FsZVxuICAgICAgICB9KSA6IFwiXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSkge1xuICAgICAgICAgIGFyaWFMaXZlTWVzc2FnZSA9IFwiU2VsZWN0ZWQgdGltZTogXCIuY29uY2F0KHNhZmVEYXRlRm9ybWF0KF90aGlzLnByb3BzLnNlbGVjdGVkLCB7XG4gICAgICAgICAgICBkYXRlRm9ybWF0OiBkYXRlRm9ybWF0LFxuICAgICAgICAgICAgbG9jYWxlOiBsb2NhbGVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXIpIHtcbiAgICAgICAgICBhcmlhTGl2ZU1lc3NhZ2UgPSBcIlNlbGVjdGVkIHllYXI6IFwiLmNvbmNhdChzYWZlRGF0ZUZvcm1hdChfdGhpcy5wcm9wcy5zZWxlY3RlZCwge1xuICAgICAgICAgICAgZGF0ZUZvcm1hdDogXCJ5eXl5XCIsXG4gICAgICAgICAgICBsb2NhbGU6IGxvY2FsZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyKSB7XG4gICAgICAgICAgYXJpYUxpdmVNZXNzYWdlID0gXCJTZWxlY3RlZCBtb250aDogXCIuY29uY2F0KHNhZmVEYXRlRm9ybWF0KF90aGlzLnByb3BzLnNlbGVjdGVkLCB7XG4gICAgICAgICAgICBkYXRlRm9ybWF0OiBcIk1NTU0geXl5eVwiLFxuICAgICAgICAgICAgbG9jYWxlOiBsb2NhbGVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJvcHMuc2hvd1F1YXJ0ZXJZZWFyUGlja2VyKSB7XG4gICAgICAgICAgYXJpYUxpdmVNZXNzYWdlID0gXCJTZWxlY3RlZCBxdWFydGVyOiBcIi5jb25jYXQoc2FmZURhdGVGb3JtYXQoX3RoaXMucHJvcHMuc2VsZWN0ZWQsIHtcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwieXl5eSwgUVFRXCIsXG4gICAgICAgICAgICBsb2NhbGU6IGxvY2FsZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcmlhTGl2ZU1lc3NhZ2UgPSBcIlNlbGVjdGVkIGRhdGU6IFwiLmNvbmNhdChzYWZlRGF0ZUZvcm1hdChfdGhpcy5wcm9wcy5zZWxlY3RlZCwge1xuICAgICAgICAgICAgZGF0ZUZvcm1hdDogbG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgICAgICBsb2NhbGU6IGxvY2FsZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIHJvbGU6IFwiYWxlcnRcIixcbiAgICAgICAgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX2FyaWEtbGl2ZVwiXG4gICAgICB9LCBhcmlhTGl2ZU1lc3NhZ2UpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJEYXRlSW5wdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9SZWFjdCRjbG9uZUVsZW1lbnQ7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gY2xzeChfdGhpcy5wcm9wcy5jbGFzc05hbWUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgb3V0c2lkZUNsaWNrSWdub3JlQ2xhc3MsIF90aGlzLnN0YXRlLm9wZW4pKTtcbiAgICAgIHZhciBjdXN0b21JbnB1dCA9IF90aGlzLnByb3BzLmN1c3RvbUlucHV0IHx8IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICB0eXBlOiBcInRleHRcIlxuICAgICAgfSk7XG4gICAgICB2YXIgY3VzdG9tSW5wdXRSZWYgPSBfdGhpcy5wcm9wcy5jdXN0b21JbnB1dFJlZiB8fCBcInJlZlwiO1xuICAgICAgdmFyIGlucHV0VmFsdWUgPSB0eXBlb2YgX3RoaXMucHJvcHMudmFsdWUgPT09IFwic3RyaW5nXCIgPyBfdGhpcy5wcm9wcy52YWx1ZSA6IHR5cGVvZiBfdGhpcy5zdGF0ZS5pbnB1dFZhbHVlID09PSBcInN0cmluZ1wiID8gX3RoaXMuc3RhdGUuaW5wdXRWYWx1ZSA6IF90aGlzLnByb3BzLnNlbGVjdHNSYW5nZSA/IHNhZmVEYXRlUmFuZ2VGb3JtYXQoX3RoaXMucHJvcHMuc3RhcnREYXRlLCBfdGhpcy5wcm9wcy5lbmREYXRlLCBfdGhpcy5wcm9wcykgOiBfdGhpcy5wcm9wcy5zZWxlY3RzTXVsdGlwbGUgPyBzYWZlTXVsdGlwbGVEYXRlc0Zvcm1hdChfdGhpcy5wcm9wcy5zZWxlY3RlZERhdGVzLCBfdGhpcy5wcm9wcykgOiBzYWZlRGF0ZUZvcm1hdChfdGhpcy5wcm9wcy5zZWxlY3RlZCwgX3RoaXMucHJvcHMpO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY3VzdG9tSW5wdXQsIChfUmVhY3QkY2xvbmVFbGVtZW50ID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfUmVhY3QkY2xvbmVFbGVtZW50LCBjdXN0b21JbnB1dFJlZiwgZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIF90aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICB9KSwgXCJ2YWx1ZVwiLCBpbnB1dFZhbHVlKSwgXCJvbkJsdXJcIiwgX3RoaXMuaGFuZGxlQmx1ciksIFwib25DaGFuZ2VcIiwgX3RoaXMuaGFuZGxlQ2hhbmdlKSwgXCJvbkNsaWNrXCIsIF90aGlzLm9uSW5wdXRDbGljayksIFwib25Gb2N1c1wiLCBfdGhpcy5oYW5kbGVGb2N1cyksIFwib25LZXlEb3duXCIsIF90aGlzLm9uSW5wdXRLZXlEb3duKSwgXCJpZFwiLCBfdGhpcy5wcm9wcy5pZCksIFwibmFtZVwiLCBfdGhpcy5wcm9wcy5uYW1lKSwgXCJmb3JtXCIsIF90aGlzLnByb3BzLmZvcm0pLCBfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX1JlYWN0JGNsb25lRWxlbWVudCwgXCJhdXRvRm9jdXNcIiwgX3RoaXMucHJvcHMuYXV0b0ZvY3VzKSwgXCJwbGFjZWhvbGRlclwiLCBfdGhpcy5wcm9wcy5wbGFjZWhvbGRlclRleHQpLCBcImRpc2FibGVkXCIsIF90aGlzLnByb3BzLmRpc2FibGVkKSwgXCJhdXRvQ29tcGxldGVcIiwgX3RoaXMucHJvcHMuYXV0b0NvbXBsZXRlKSwgXCJjbGFzc05hbWVcIiwgY2xzeChjdXN0b21JbnB1dC5wcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSkpLCBcInRpdGxlXCIsIF90aGlzLnByb3BzLnRpdGxlKSwgXCJyZWFkT25seVwiLCBfdGhpcy5wcm9wcy5yZWFkT25seSksIFwicmVxdWlyZWRcIiwgX3RoaXMucHJvcHMucmVxdWlyZWQpLCBcInRhYkluZGV4XCIsIF90aGlzLnByb3BzLnRhYkluZGV4KSwgXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIF90aGlzLnByb3BzLmFyaWFEZXNjcmliZWRCeSksIF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9SZWFjdCRjbG9uZUVsZW1lbnQsIFwiYXJpYS1pbnZhbGlkXCIsIF90aGlzLnByb3BzLmFyaWFJbnZhbGlkKSwgXCJhcmlhLWxhYmVsbGVkYnlcIiwgX3RoaXMucHJvcHMuYXJpYUxhYmVsbGVkQnkpLCBcImFyaWEtcmVxdWlyZWRcIiwgX3RoaXMucHJvcHMuYXJpYVJlcXVpcmVkKSkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJyZW5kZXJDbGVhckJ1dHRvblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGlzQ2xlYXJhYmxlID0gX3RoaXMkcHJvcHM0LmlzQ2xlYXJhYmxlLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzNC5kaXNhYmxlZCxcbiAgICAgICAgc2VsZWN0ZWQgPSBfdGhpcyRwcm9wczQuc2VsZWN0ZWQsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzNC5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczQuZW5kRGF0ZSxcbiAgICAgICAgY2xlYXJCdXR0b25UaXRsZSA9IF90aGlzJHByb3BzNC5jbGVhckJ1dHRvblRpdGxlLFxuICAgICAgICBfdGhpcyRwcm9wczQkY2xlYXJCdXQgPSBfdGhpcyRwcm9wczQuY2xlYXJCdXR0b25DbGFzc05hbWUsXG4gICAgICAgIGNsZWFyQnV0dG9uQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0JGNsZWFyQnV0ID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHM0JGNsZWFyQnV0LFxuICAgICAgICBfdGhpcyRwcm9wczQkYXJpYUxhYmUgPSBfdGhpcyRwcm9wczQuYXJpYUxhYmVsQ2xvc2UsXG4gICAgICAgIGFyaWFMYWJlbENsb3NlID0gX3RoaXMkcHJvcHM0JGFyaWFMYWJlID09PSB2b2lkIDAgPyBcIkNsb3NlXCIgOiBfdGhpcyRwcm9wczQkYXJpYUxhYmUsXG4gICAgICAgIHNlbGVjdGVkRGF0ZXMgPSBfdGhpcyRwcm9wczQuc2VsZWN0ZWREYXRlcztcbiAgICAgIGlmIChpc0NsZWFyYWJsZSAmJiAoc2VsZWN0ZWQgIT0gbnVsbCB8fCBzdGFydERhdGUgIT0gbnVsbCB8fCBlbmREYXRlICE9IG51bGwgfHwgc2VsZWN0ZWREYXRlcyAhPT0gbnVsbCAmJiBzZWxlY3RlZERhdGVzICE9PSB2b2lkIDAgJiYgc2VsZWN0ZWREYXRlcy5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goXCJyZWFjdC1kYXRlcGlja2VyX19jbG9zZS1pY29uXCIsIGNsZWFyQnV0dG9uQ2xhc3NOYW1lLCB7XG4gICAgICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2Nsb3NlLWljb24tLWRpc2FibGVkXCI6IGRpc2FibGVkXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWxDbG9zZSxcbiAgICAgICAgICBvbkNsaWNrOiBfdGhpcy5vbkNsZWFyQ2xpY2ssXG4gICAgICAgICAgdGl0bGU6IGNsZWFyQnV0dG9uVGl0bGUsXG4gICAgICAgICAgdGFiSW5kZXg6IC0xXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX3RoaXMuc3RhdGUgPSBfdGhpcy5jYWxjSW5pdGlhbFN0YXRlKCk7XG4gICAgX3RoaXMucHJldmVudEZvY3VzVGltZW91dCA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhEYXRlUGlja2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhEYXRlUGlja2VyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAocHJldlByb3BzLmlubGluZSAmJiBoYXNQcmVTZWxlY3Rpb25DaGFuZ2VkKHByZXZQcm9wcy5zZWxlY3RlZCwgdGhpcy5wcm9wcy5zZWxlY3RlZCkpIHtcbiAgICAgICAgdGhpcy5zZXRQcmVTZWxlY3Rpb24odGhpcy5wcm9wcy5zZWxlY3RlZCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZS5tb250aFNlbGVjdGVkSW4gIT09IHVuZGVmaW5lZCAmJiBwcmV2UHJvcHMubW9udGhzU2hvd24gIT09IHRoaXMucHJvcHMubW9udGhzU2hvd24pIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbW9udGhTZWxlY3RlZEluOiAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZQcm9wcy5oaWdobGlnaHREYXRlcyAhPT0gdGhpcy5wcm9wcy5oaWdobGlnaHREYXRlcykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBoaWdobGlnaHREYXRlczogZ2V0SGlnaHRMaWdodERheXNNYXAodGhpcy5wcm9wcy5oaWdobGlnaHREYXRlcylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXByZXZTdGF0ZS5mb2N1c2VkICYmICFpc0VxdWFsKHByZXZQcm9wcy5zZWxlY3RlZCwgdGhpcy5wcm9wcy5zZWxlY3RlZCkpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaW5wdXRWYWx1ZTogbnVsbFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2U3RhdGUub3BlbiAhPT0gdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgIGlmIChwcmV2U3RhdGUub3BlbiA9PT0gZmFsc2UgJiYgdGhpcy5zdGF0ZS5vcGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkNhbGVuZGFyT3BlbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2U3RhdGUub3BlbiA9PT0gdHJ1ZSAmJiB0aGlzLnN0YXRlLm9wZW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkNhbGVuZGFyQ2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuY2xlYXJQcmV2ZW50Rm9jdXNUaW1lb3V0KCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVySW5wdXRDb250YWluZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySW5wdXRDb250YWluZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc2hvd0ljb24gPSBfdGhpcyRwcm9wczUuc2hvd0ljb24sXG4gICAgICAgIGljb24gPSBfdGhpcyRwcm9wczUuaWNvbixcbiAgICAgICAgY2FsZW5kYXJJY29uQ2xhc3NuYW1lID0gX3RoaXMkcHJvcHM1LmNhbGVuZGFySWNvbkNsYXNzbmFtZSxcbiAgICAgICAgdG9nZ2xlQ2FsZW5kYXJPbkljb25DbGljayA9IF90aGlzJHByb3BzNS50b2dnbGVDYWxlbmRhck9uSWNvbkNsaWNrO1xuICAgICAgdmFyIG9wZW4gPSB0aGlzLnN0YXRlLm9wZW47XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtZGF0ZXBpY2tlcl9faW5wdXQtY29udGFpbmVyXCIuY29uY2F0KHNob3dJY29uID8gXCIgcmVhY3QtZGF0ZXBpY2tlcl9fdmlldy1jYWxlbmRhci1pY29uXCIgOiBcIlwiKVxuICAgICAgfSwgc2hvd0ljb24gJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FsZW5kYXJJY29uJDEsIF9leHRlbmRzKHtcbiAgICAgICAgaWNvbjogaWNvbixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChjYWxlbmRhckljb25DbGFzc25hbWUsIFwiIFwiKS5jb25jYXQob3BlbiAmJiBcInJlYWN0LWRhdGVwaWNrZXItaWdub3JlLW9uY2xpY2tvdXRzaWRlXCIpXG4gICAgICB9LCB0b2dnbGVDYWxlbmRhck9uSWNvbkNsaWNrID8ge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLnRvZ2dsZUNhbGVuZGFyXG4gICAgICB9IDogbnVsbCkpLCB0aGlzLnN0YXRlLmlzUmVuZGVyQXJpYUxpdmVNZXNzYWdlICYmIHRoaXMucmVuZGVyQXJpYUxpdmVSZWdpb24oKSwgdGhpcy5yZW5kZXJEYXRlSW5wdXQoKSwgdGhpcy5yZW5kZXJDbGVhckJ1dHRvbigpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMucmVuZGVyQ2FsZW5kYXIoKTtcbiAgICAgIGlmICh0aGlzLnByb3BzLmlubGluZSkgcmV0dXJuIGNhbGVuZGFyO1xuICAgICAgaWYgKHRoaXMucHJvcHMud2l0aFBvcnRhbCkge1xuICAgICAgICB2YXIgcG9ydGFsQ29udGFpbmVyID0gdGhpcy5zdGF0ZS5vcGVuID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFiTG9vcCwge1xuICAgICAgICAgIGVuYWJsZVRhYkxvb3A6IHRoaXMucHJvcHMuZW5hYmxlVGFiTG9vcFxuICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LWRhdGVwaWNrZXJfX3BvcnRhbFwiLFxuICAgICAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgICAgICBvbktleURvd246IHRoaXMub25Qb3J0YWxLZXlEb3duXG4gICAgICAgIH0sIGNhbGVuZGFyKSkgOiBudWxsO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5vcGVuICYmIHRoaXMucHJvcHMucG9ydGFsSWQpIHtcbiAgICAgICAgICBwb3J0YWxDb250YWluZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQb3J0YWwsIHtcbiAgICAgICAgICAgIHBvcnRhbElkOiB0aGlzLnByb3BzLnBvcnRhbElkLFxuICAgICAgICAgICAgcG9ydGFsSG9zdDogdGhpcy5wcm9wcy5wb3J0YWxIb3N0XG4gICAgICAgICAgfSwgcG9ydGFsQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgdGhpcy5yZW5kZXJJbnB1dENvbnRhaW5lcigpLCBwb3J0YWxDb250YWluZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBvcHBlckNvbXBvbmVudCQxLCB7XG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5wb3BwZXJDbGFzc05hbWUsXG4gICAgICAgIHdyYXBwZXJDbGFzc05hbWU6IHRoaXMucHJvcHMud3JhcHBlckNsYXNzTmFtZSxcbiAgICAgICAgaGlkZVBvcHBlcjogIXRoaXMuaXNDYWxlbmRhck9wZW4oKSxcbiAgICAgICAgcG9ydGFsSWQ6IHRoaXMucHJvcHMucG9ydGFsSWQsXG4gICAgICAgIHBvcnRhbEhvc3Q6IHRoaXMucHJvcHMucG9ydGFsSG9zdCxcbiAgICAgICAgcG9wcGVyTW9kaWZpZXJzOiB0aGlzLnByb3BzLnBvcHBlck1vZGlmaWVycyxcbiAgICAgICAgdGFyZ2V0Q29tcG9uZW50OiB0aGlzLnJlbmRlcklucHV0Q29udGFpbmVyKCksXG4gICAgICAgIHBvcHBlckNvbnRhaW5lcjogdGhpcy5wcm9wcy5wb3BwZXJDb250YWluZXIsXG4gICAgICAgIHBvcHBlckNvbXBvbmVudDogY2FsZW5kYXIsXG4gICAgICAgIHBvcHBlclBsYWNlbWVudDogdGhpcy5wcm9wcy5wb3BwZXJQbGFjZW1lbnQsXG4gICAgICAgIHBvcHBlclByb3BzOiB0aGlzLnByb3BzLnBvcHBlclByb3BzLFxuICAgICAgICBwb3BwZXJPbktleURvd246IHRoaXMub25Qb3BwZXJLZXlEb3duLFxuICAgICAgICBlbmFibGVUYWJMb29wOiB0aGlzLnByb3BzLmVuYWJsZVRhYkxvb3AsXG4gICAgICAgIHNob3dBcnJvdzogdGhpcy5wcm9wcy5zaG93UG9wcGVyQXJyb3dcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImRlZmF1bHRQcm9wc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWxsb3dTYW1lRGF5OiBmYWxzZSxcbiAgICAgICAgZGF0ZUZvcm1hdDogXCJNTS9kZC95eXl5XCIsXG4gICAgICAgIGRhdGVGb3JtYXRDYWxlbmRhcjogXCJMTExMIHl5eXlcIixcbiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKCkge30sXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb246IGZhbHNlLFxuICAgICAgICBkcm9wZG93bk1vZGU6IFwic2Nyb2xsXCIsXG4gICAgICAgIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7fSxcbiAgICAgICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7fSxcbiAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oKSB7fSxcbiAgICAgICAgb25JbnB1dENsaWNrOiBmdW5jdGlvbiBvbklucHV0Q2xpY2soKSB7fSxcbiAgICAgICAgb25TZWxlY3Q6IGZ1bmN0aW9uIG9uU2VsZWN0KCkge30sXG4gICAgICAgIG9uQ2xpY2tPdXRzaWRlOiBmdW5jdGlvbiBvbkNsaWNrT3V0c2lkZSgpIHt9LFxuICAgICAgICBvbk1vbnRoQ2hhbmdlOiBmdW5jdGlvbiBvbk1vbnRoQ2hhbmdlKCkge30sXG4gICAgICAgIG9uQ2FsZW5kYXJPcGVuOiBmdW5jdGlvbiBvbkNhbGVuZGFyT3BlbigpIHt9LFxuICAgICAgICBvbkNhbGVuZGFyQ2xvc2U6IGZ1bmN0aW9uIG9uQ2FsZW5kYXJDbG9zZSgpIHt9LFxuICAgICAgICBwcmV2ZW50T3Blbk9uRm9jdXM6IGZhbHNlLFxuICAgICAgICBvblllYXJDaGFuZ2U6IGZ1bmN0aW9uIG9uWWVhckNoYW5nZSgpIHt9LFxuICAgICAgICBvbklucHV0RXJyb3I6IGZ1bmN0aW9uIG9uSW5wdXRFcnJvcigpIHt9LFxuICAgICAgICBtb250aHNTaG93bjogMSxcbiAgICAgICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgICAgICB3aXRoUG9ydGFsOiBmYWxzZSxcbiAgICAgICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U6IGZhbHNlLFxuICAgICAgICBzaG91bGRDbG9zZU9uU2VsZWN0OiB0cnVlLFxuICAgICAgICBzaG93VGltZVNlbGVjdDogZmFsc2UsXG4gICAgICAgIHNob3dUaW1lSW5wdXQ6IGZhbHNlLFxuICAgICAgICBzaG93UHJldmlvdXNNb250aHM6IGZhbHNlLFxuICAgICAgICBzaG93TW9udGhZZWFyUGlja2VyOiBmYWxzZSxcbiAgICAgICAgc2hvd0Z1bGxNb250aFllYXJQaWNrZXI6IGZhbHNlLFxuICAgICAgICBzaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyOiBmYWxzZSxcbiAgICAgICAgc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXI6IGZhbHNlLFxuICAgICAgICBzaG93WWVhclBpY2tlcjogZmFsc2UsXG4gICAgICAgIHNob3dRdWFydGVyWWVhclBpY2tlcjogZmFsc2UsXG4gICAgICAgIHNob3dXZWVrUGlja2VyOiBmYWxzZSxcbiAgICAgICAgc3RyaWN0UGFyc2luZzogZmFsc2UsXG4gICAgICAgIHN3YXBSYW5nZTogZmFsc2UsXG4gICAgICAgIHRpbWVJbnRlcnZhbHM6IDMwLFxuICAgICAgICB0aW1lQ2FwdGlvbjogXCJUaW1lXCIsXG4gICAgICAgIHByZXZpb3VzTW9udGhBcmlhTGFiZWw6IFwiUHJldmlvdXMgTW9udGhcIixcbiAgICAgICAgcHJldmlvdXNNb250aEJ1dHRvbkxhYmVsOiBcIlByZXZpb3VzIE1vbnRoXCIsXG4gICAgICAgIG5leHRNb250aEFyaWFMYWJlbDogXCJOZXh0IE1vbnRoXCIsXG4gICAgICAgIG5leHRNb250aEJ1dHRvbkxhYmVsOiBcIk5leHQgTW9udGhcIixcbiAgICAgICAgcHJldmlvdXNZZWFyQXJpYUxhYmVsOiBcIlByZXZpb3VzIFllYXJcIixcbiAgICAgICAgcHJldmlvdXNZZWFyQnV0dG9uTGFiZWw6IFwiUHJldmlvdXMgWWVhclwiLFxuICAgICAgICBuZXh0WWVhckFyaWFMYWJlbDogXCJOZXh0IFllYXJcIixcbiAgICAgICAgbmV4dFllYXJCdXR0b25MYWJlbDogXCJOZXh0IFllYXJcIixcbiAgICAgICAgdGltZUlucHV0TGFiZWw6IFwiVGltZVwiLFxuICAgICAgICBlbmFibGVUYWJMb29wOiB0cnVlLFxuICAgICAgICB5ZWFySXRlbU51bWJlcjogREVGQVVMVF9ZRUFSX0lURU1fTlVNQkVSLFxuICAgICAgICBmb2N1c1NlbGVjdGVkTW9udGg6IGZhbHNlLFxuICAgICAgICBzaG93UG9wcGVyQXJyb3c6IHRydWUsXG4gICAgICAgIGV4Y2x1ZGVTY3JvbGxiYXI6IHRydWUsXG4gICAgICAgIGN1c3RvbVRpbWVJbnB1dDogbnVsbCxcbiAgICAgICAgY2FsZW5kYXJTdGFydERheTogdW5kZWZpbmVkLFxuICAgICAgICB0b2dnbGVDYWxlbmRhck9uSWNvbkNsaWNrOiBmYWxzZSxcbiAgICAgICAgdXNlUG9pbnRlckV2ZW50OiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcbnZhciBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9JTlBVVCA9IFwiaW5wdXRcIjtcbnZhciBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9OQVZJR0FURSA9IFwibmF2aWdhdGVcIjtcblxuZXhwb3J0IHsgQ2FsZW5kYXJDb250YWluZXIsIERhdGVQaWNrZXIgYXMgZGVmYXVsdCwgZ2V0RGVmYXVsdExvY2FsZSwgcmVnaXN0ZXJMb2NhbGUsIHNldERlZmF1bHRMb2NhbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OWtZWFJsWDNWMGFXeHpMbXB6SWl3aUxpNHZMaTR2YzNKakwzbGxZWEpmWkhKdmNHUnZkMjVmYjNCMGFXOXVjeTVxYzNnaUxDSXVMaTh1TGk5emNtTXZlV1ZoY2w5a2NtOXdaRzkzYmk1cWMzZ2lMQ0l1TGk4dUxpOXpjbU12Ylc5dWRHaGZaSEp2Y0dSdmQyNWZiM0IwYVc5dWN5NXFjM2dpTENJdUxpOHVMaTl6Y21NdmJXOXVkR2hmWkhKdmNHUnZkMjR1YW5ONElpd2lMaTR2TGk0dmMzSmpMMjF2Ym5Sb1gzbGxZWEpmWkhKdmNHUnZkMjVmYjNCMGFXOXVjeTVxYzNnaUxDSXVMaTh1TGk5emNtTXZiVzl1ZEdoZmVXVmhjbDlrY205d1pHOTNiaTVxYzNnaUxDSXVMaTh1TGk5emNtTXZaR0Y1TG1wemVDSXNJaTR1THk0dUwzTnlZeTkzWldWclgyNTFiV0psY2k1cWMzZ2lMQ0l1TGk4dUxpOXpjbU12ZDJWbGF5NXFjM2dpTENJdUxpOHVMaTl6Y21NdmJXOXVkR2d1YW5ONElpd2lMaTR2TGk0dmMzSmpMM1JwYldVdWFuTjRJaXdpTGk0dkxpNHZjM0pqTDNsbFlYSXVhbk40SWl3aUxpNHZMaTR2YzNKakwybHVjSFYwVkdsdFpTNXFjM2dpTENJdUxpOHVMaTl6Y21NdlkyRnNaVzVrWVhKZlkyOXVkR0ZwYm1WeUxtcHplQ0lzSWk0dUx5NHVMM055WXk5allXeGxibVJoY2k1cWMzZ2lMQ0l1TGk4dUxpOXpjbU12WTJGc1pXNWtZWEpmYVdOdmJpNXFjM2dpTENJdUxpOHVMaTl6Y21NdmNHOXlkR0ZzTG1wemVDSXNJaTR1THk0dUwzTnlZeTkwWVdKZmJHOXZjQzVxYzNnaUxDSXVMaTh1TGk5emNtTXZkMmwwYUY5bWJHOWhkR2x1Wnk1cWMzZ2lMQ0l1TGk4dUxpOXpjbU12Y0c5d2NHVnlYMk52YlhCdmJtVnVkQzVxYzNnaUxDSXVMaTh1TGk5emNtTXZhVzVrWlhndWFuTjRJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUdselJHRjBaU0I5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTlwYzBSaGRHVmNJanRjYm1sdGNHOXlkQ0I3SUdselZtRnNhV1FnWVhNZ2FYTldZV3hwWkVSaGRHVWdmU0JtY205dElGd2laR0YwWlMxbWJuTXZhWE5XWVd4cFpGd2lPMXh1YVcxd2IzSjBJSHNnWm05eWJXRjBMQ0JzYjI1blJtOXliV0YwZEdWeWN5QjlJR1p5YjIwZ1hDSmtZWFJsTFdadWN5OW1iM0p0WVhSY0lqdGNibWx0Y0c5eWRDQjdJR0ZrWkUxcGJuVjBaWE1nZlNCbWNtOXRJRndpWkdGMFpTMW1ibk12WVdSa1RXbHVkWFJsYzF3aU8xeHVhVzF3YjNKMElIc2dZV1JrU0c5MWNuTWdmU0JtY205dElGd2laR0YwWlMxbWJuTXZZV1JrU0c5MWNuTmNJanRjYm1sdGNHOXlkQ0I3SUdGa1pFUmhlWE1nZlNCbWNtOXRJRndpWkdGMFpTMW1ibk12WVdSa1JHRjVjMXdpTzF4dWFXMXdiM0owSUhzZ1lXUmtWMlZsYTNNZ2ZTQm1jbTl0SUZ3aVpHRjBaUzFtYm5NdllXUmtWMlZsYTNOY0lqdGNibWx0Y0c5eWRDQjdJR0ZrWkUxdmJuUm9jeUI5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTloWkdSTmIyNTBhSE5jSWp0Y2JtbHRjRzl5ZENCN0lHRmtaRkYxWVhKMFpYSnpJSDBnWm5KdmJTQmNJbVJoZEdVdFptNXpMMkZrWkZGMVlYSjBaWEp6WENJN1hHNXBiWEJ2Y25RZ2V5QmhaR1JaWldGeWN5QjlJR1p5YjIwZ1hDSmtZWFJsTFdadWN5OWhaR1JaWldGeWMxd2lPMXh1YVcxd2IzSjBJSHNnYzNWaVJHRjVjeUI5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTl6ZFdKRVlYbHpYQ0k3WEc1cGJYQnZjblFnZXlCemRXSlhaV1ZyY3lCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5emRXSlhaV1ZyYzF3aU8xeHVhVzF3YjNKMElIc2djM1ZpVFc5dWRHaHpJSDBnWm5KdmJTQmNJbVJoZEdVdFptNXpMM04xWWsxdmJuUm9jMXdpTzF4dWFXMXdiM0owSUhzZ2MzVmlVWFZoY25SbGNuTWdmU0JtY205dElGd2laR0YwWlMxbWJuTXZjM1ZpVVhWaGNuUmxjbk5jSWp0Y2JtbHRjRzl5ZENCN0lITjFZbGxsWVhKeklIMGdabkp2YlNCY0ltUmhkR1V0Wm01ekwzTjFZbGxsWVhKelhDSTdYRzVwYlhCdmNuUWdleUJuWlhSVFpXTnZibVJ6SUgwZ1puSnZiU0JjSW1SaGRHVXRabTV6TDJkbGRGTmxZMjl1WkhOY0lqdGNibWx0Y0c5eWRDQjdJR2RsZEUxcGJuVjBaWE1nZlNCbWNtOXRJRndpWkdGMFpTMW1ibk12WjJWMFRXbHVkWFJsYzF3aU8xeHVhVzF3YjNKMElIc2daMlYwU0c5MWNuTWdmU0JtY205dElGd2laR0YwWlMxbWJuTXZaMlYwU0c5MWNuTmNJanRjYm1sdGNHOXlkQ0I3SUdkbGRFUmhlU0I5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTluWlhSRVlYbGNJanRjYm1sdGNHOXlkQ0I3SUdkbGRFUmhkR1VnZlNCbWNtOXRJRndpWkdGMFpTMW1ibk12WjJWMFJHRjBaVndpTzF4dWFXMXdiM0owSUhzZ1oyVjBTVk5QVjJWbGF5QjlJR1p5YjIwZ1hDSmtZWFJsTFdadWN5OW5aWFJKVTA5WFpXVnJYQ0k3WEc1cGJYQnZjblFnZXlCblpYUk5iMjUwYUNCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5blpYUk5iMjUwYUZ3aU8xeHVhVzF3YjNKMElIc2daMlYwVVhWaGNuUmxjaUI5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTluWlhSUmRXRnlkR1Z5WENJN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJaWldGeUlIMGdabkp2YlNCY0ltUmhkR1V0Wm01ekwyZGxkRmxsWVhKY0lqdGNibWx0Y0c5eWRDQjdJR2RsZEZScGJXVWdmU0JtY205dElGd2laR0YwWlMxbWJuTXZaMlYwVkdsdFpWd2lPMXh1YVcxd2IzSjBJSHNnYzJWMFUyVmpiMjVrY3lCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5elpYUlRaV052Ym1SelhDSTdYRzVwYlhCdmNuUWdleUJ6WlhSTmFXNTFkR1Z6SUgwZ1puSnZiU0JjSW1SaGRHVXRabTV6TDNObGRFMXBiblYwWlhOY0lqdGNibWx0Y0c5eWRDQjdJSE5sZEVodmRYSnpJSDBnWm5KdmJTQmNJbVJoZEdVdFptNXpMM05sZEVodmRYSnpYQ0k3WEc1cGJYQnZjblFnZXlCelpYUk5iMjUwYUNCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5elpYUk5iMjUwYUZ3aU8xeHVhVzF3YjNKMElIc2djMlYwVVhWaGNuUmxjaUI5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTl6WlhSUmRXRnlkR1Z5WENJN1hHNXBiWEJ2Y25RZ2V5QnpaWFJaWldGeUlIMGdabkp2YlNCY0ltUmhkR1V0Wm01ekwzTmxkRmxsWVhKY0lqdGNibWx0Y0c5eWRDQjdJRzFwYmlCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5dGFXNWNJanRjYm1sdGNHOXlkQ0I3SUcxaGVDQjlJR1p5YjIwZ1hDSmtZWFJsTFdadWN5OXRZWGhjSWp0Y2JtbHRjRzl5ZENCN0lHUnBabVpsY21WdVkyVkpia05oYkdWdVpHRnlSR0Y1Y3lCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5a2FXWm1aWEpsYm1ObFNXNURZV3hsYm1SaGNrUmhlWE5jSWp0Y2JtbHRjRzl5ZENCN0lHUnBabVpsY21WdVkyVkpia05oYkdWdVpHRnlUVzl1ZEdoeklIMGdabkp2YlNCY0ltUmhkR1V0Wm01ekwyUnBabVpsY21WdVkyVkpia05oYkdWdVpHRnlUVzl1ZEdoelhDSTdYRzVwYlhCdmNuUWdleUJrYVdabVpYSmxibU5sU1c1RFlXeGxibVJoY2xsbFlYSnpJSDBnWm5KdmJTQmNJbVJoZEdVdFptNXpMMlJwWm1abGNtVnVZMlZKYmtOaGJHVnVaR0Z5V1dWaGNuTmNJanRjYm1sdGNHOXlkQ0I3SUdScFptWmxjbVZ1WTJWSmJrTmhiR1Z1WkdGeVVYVmhjblJsY25NZ2ZTQm1jbTl0SUZ3aVpHRjBaUzFtYm5NdlpHbG1abVZ5Wlc1alpVbHVRMkZzWlc1a1lYSlJkV0Z5ZEdWeWMxd2lPMXh1YVcxd2IzSjBJSHNnYzNSaGNuUlBaa1JoZVNCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5emRHRnlkRTltUkdGNVhDSTdYRzVwYlhCdmNuUWdleUJ6ZEdGeWRFOW1WMlZsYXlCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5emRHRnlkRTltVjJWbGExd2lPMXh1YVcxd2IzSjBJSHNnYzNSaGNuUlBaazF2Ym5Sb0lIMGdabkp2YlNCY0ltUmhkR1V0Wm01ekwzTjBZWEowVDJaTmIyNTBhRndpTzF4dWFXMXdiM0owSUhzZ2MzUmhjblJQWmxGMVlYSjBaWElnZlNCbWNtOXRJRndpWkdGMFpTMW1ibk12YzNSaGNuUlBabEYxWVhKMFpYSmNJanRjYm1sdGNHOXlkQ0I3SUhOMFlYSjBUMlpaWldGeUlIMGdabkp2YlNCY0ltUmhkR1V0Wm01ekwzTjBZWEowVDJaWlpXRnlYQ0k3WEc1cGJYQnZjblFnZXlCbGJtUlBaa1JoZVNCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5bGJtUlBaa1JoZVZ3aU8xeHVhVzF3YjNKMElIc2daVzVrVDJaWFpXVnJJSDBnWm5KdmJTQmNJbVJoZEdVdFptNXpMMlZ1WkU5bVYyVmxhMXdpTzF4dWFXMXdiM0owSUhzZ1pXNWtUMlpOYjI1MGFDQjlJR1p5YjIwZ1hDSmtZWFJsTFdadWN5OWxibVJQWmsxdmJuUm9YQ0k3WEc1cGJYQnZjblFnZXlCbGJtUlBabGxsWVhJZ2ZTQm1jbTl0SUZ3aVpHRjBaUzFtYm5NdlpXNWtUMlpaWldGeVhDSTdYRzVwYlhCdmNuUWdleUJwYzBWeGRXRnNJR0Z6SUdSbVNYTkZjWFZoYkNCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5cGMwVnhkV0ZzWENJN1hHNXBiWEJ2Y25RZ2V5QnBjMU5oYldWRVlYa2dZWE1nWkdaSmMxTmhiV1ZFWVhrZ2ZTQm1jbTl0SUZ3aVpHRjBaUzFtYm5NdmFYTlRZVzFsUkdGNVhDSTdYRzVwYlhCdmNuUWdleUJwYzFOaGJXVk5iMjUwYUNCaGN5Qmtaa2x6VTJGdFpVMXZiblJvSUgwZ1puSnZiU0JjSW1SaGRHVXRabTV6TDJselUyRnRaVTF2Ym5Sb1hDSTdYRzVwYlhCdmNuUWdleUJwYzFOaGJXVlpaV0Z5SUdGeklHUm1TWE5UWVcxbFdXVmhjaUI5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTlwYzFOaGJXVlpaV0Z5WENJN1hHNXBiWEJ2Y25RZ2V5QnBjMU5oYldWUmRXRnlkR1Z5SUdGeklHUm1TWE5UWVcxbFVYVmhjblJsY2lCOUlHWnliMjBnWENKa1lYUmxMV1p1Y3k5cGMxTmhiV1ZSZFdGeWRHVnlYQ0k3WEc1cGJYQnZjblFnZXlCcGMwRm1kR1Z5SUgwZ1puSnZiU0JjSW1SaGRHVXRabTV6TDJselFXWjBaWEpjSWp0Y2JtbHRjRzl5ZENCN0lHbHpRbVZtYjNKbElIMGdabkp2YlNCY0ltUmhkR1V0Wm01ekwybHpRbVZtYjNKbFhDSTdYRzVwYlhCdmNuUWdleUJwYzFkcGRHaHBia2x1ZEdWeWRtRnNJSDBnWm5KdmJTQmNJbVJoZEdVdFptNXpMMmx6VjJsMGFHbHVTVzUwWlhKMllXeGNJanRjYm1sdGNHOXlkQ0I3SUhSdlJHRjBaU0I5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTkwYjBSaGRHVmNJanRjYm1sdGNHOXlkQ0I3SUhCaGNuTmxJSDBnWm5KdmJTQmNJbVJoZEdVdFptNXpMM0JoY25ObFhDSTdYRzVwYlhCdmNuUWdleUJ3WVhKelpVbFRUeUI5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTl3WVhKelpVbFRUMXdpTzF4dWFXMXdiM0owSUhzZ1lXUmtVMlZqYjI1a2N5QjlJR1p5YjIwZ1hDSmtZWFJsTFdadWMxd2lPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdSRVZHUVZWTVZGOVpSVUZTWDBsVVJVMWZUbFZOUWtWU0lEMGdNVEk3WEc1Y2JpOHZJRlJvYVhNZ1VtVm5SWGh3SUdOaGRHTm9aWE1nYzNsdFltOXNjeUJsYzJOaGNHVmtJR0o1SUhGMWIzUmxjeXdnWVc1a0lHRnNjMjljYmk4dklITmxjWFZsYm1ObGN5QnZaaUJ6ZVcxaWIyeHpJRkFzSUhBc0lHRnVaQ0IwYUdVZ1kyOXRZbWx1WVhScGIyNXpJR3hwYTJVZ1lGQlFVRkJRVUZCd2NIQndjR0JjYm1OdmJuTjBJR3h2Ym1kR2IzSnRZWFIwYVc1blZHOXJaVzV6VW1WblJYaHdJRDBnTDFBcmNDdDhVQ3Q4Y0N0OEp5ZDhKeWduSjN4YlhpZGRLU3NvSjN3a0tYd3VMMmM3WEc1Y2JpOHZJQ29xSUVSaGRHVWdRMjl1YzNSeWRXTjBiM0p6SUNvcVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnVaWGRFWVhSbEtIWmhiSFZsS1NCN1hHNGdJR052Ym5OMElHUWdQU0IyWVd4MVpWeHVJQ0FnSUQ4Z2RIbHdaVzltSUhaaGJIVmxJRDA5UFNCY0luTjBjbWx1WjF3aUlIeDhJSFpoYkhWbElHbHVjM1JoYm1ObGIyWWdVM1J5YVc1blhHNGdJQ0FnSUNBL0lIQmhjbk5sU1ZOUEtIWmhiSFZsS1Z4dUlDQWdJQ0FnT2lCMGIwUmhkR1VvZG1Gc2RXVXBYRzRnSUNBZ09pQnVaWGNnUkdGMFpTZ3BPMXh1SUNCeVpYUjFjbTRnYVhOV1lXeHBaQ2hrS1NBL0lHUWdPaUJ1ZFd4c08xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY0dGeWMyVkVZWFJsS0haaGJIVmxMQ0JrWVhSbFJtOXliV0YwTENCc2IyTmhiR1VzSUhOMGNtbGpkRkJoY25OcGJtY3NJRzFwYmtSaGRHVXBJSHRjYmlBZ2JHVjBJSEJoY25ObFpFUmhkR1VnUFNCdWRXeHNPMXh1SUNCc1pYUWdiRzlqWVd4bFQySnFaV04wSUQxY2JpQWdJQ0JuWlhSTWIyTmhiR1ZQWW1wbFkzUW9iRzlqWVd4bEtTQjhmQ0JuWlhSTWIyTmhiR1ZQWW1wbFkzUW9aMlYwUkdWbVlYVnNkRXh2WTJGc1pTZ3BLVHRjYmlBZ2JHVjBJSE4wY21samRGQmhjbk5wYm1kV1lXeDFaVTFoZEdOb0lEMGdkSEoxWlR0Y2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aR0YwWlVadmNtMWhkQ2twSUh0Y2JpQWdJQ0JrWVhSbFJtOXliV0YwTG1admNrVmhZMmdvS0dSbUtTQTlQaUI3WEc0Z0lDQWdJQ0JzWlhRZ2RISjVVR0Z5YzJWRVlYUmxJRDBnY0dGeWMyVW9kbUZzZFdVc0lHUm1MQ0J1WlhjZ1JHRjBaU2dwTENCN1hHNGdJQ0FnSUNBZ0lHeHZZMkZzWlRvZ2JHOWpZV3hsVDJKcVpXTjBMRnh1SUNBZ0lDQWdJQ0IxYzJWQlpHUnBkR2x2Ym1Gc1YyVmxhMWxsWVhKVWIydGxibk02SUhSeWRXVXNYRzRnSUNBZ0lDQWdJSFZ6WlVGa1pHbDBhVzl1WVd4RVlYbFBabGxsWVhKVWIydGxibk02SUhSeWRXVXNYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJR2xtSUNoemRISnBZM1JRWVhKemFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhOMGNtbGpkRkJoY25OcGJtZFdZV3gxWlUxaGRHTm9JRDFjYmlBZ0lDQWdJQ0FnSUNCcGMxWmhiR2xrS0hSeWVWQmhjbk5sUkdGMFpTd2diV2x1UkdGMFpTa2dKaVpjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5UFQwZ1ptOXliV0YwUkdGMFpTaDBjbmxRWVhKelpVUmhkR1VzSUdSbUxDQnNiMk5oYkdVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR2x6Vm1Gc2FXUW9kSEo1VUdGeWMyVkVZWFJsTENCdGFXNUVZWFJsS1NBbUppQnpkSEpwWTNSUVlYSnphVzVuVm1Gc2RXVk5ZWFJqYUNrZ2UxeHVJQ0FnSUNBZ0lDQndZWEp6WldSRVlYUmxJRDBnZEhKNVVHRnljMlZFWVhSbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0FnSUhKbGRIVnliaUJ3WVhKelpXUkVZWFJsTzF4dUlDQjlYRzVjYmlBZ2NHRnljMlZrUkdGMFpTQTlJSEJoY25ObEtIWmhiSFZsTENCa1lYUmxSbTl5YldGMExDQnVaWGNnUkdGMFpTZ3BMQ0I3WEc0Z0lDQWdiRzlqWVd4bE9pQnNiMk5oYkdWUFltcGxZM1FzWEc0Z0lDQWdkWE5sUVdSa2FYUnBiMjVoYkZkbFpXdFpaV0Z5Vkc5clpXNXpPaUIwY25WbExGeHVJQ0FnSUhWelpVRmtaR2wwYVc5dVlXeEVZWGxQWmxsbFlYSlViMnRsYm5NNklIUnlkV1VzWEc0Z0lIMHBPMXh1WEc0Z0lHbG1JQ2h6ZEhKcFkzUlFZWEp6YVc1bktTQjdYRzRnSUNBZ2MzUnlhV04wVUdGeWMybHVaMVpoYkhWbFRXRjBZMmdnUFZ4dUlDQWdJQ0FnYVhOV1lXeHBaQ2h3WVhKelpXUkVZWFJsS1NBbUpseHVJQ0FnSUNBZ2RtRnNkV1VnUFQwOUlHWnZjbTFoZEVSaGRHVW9jR0Z5YzJWa1JHRjBaU3dnWkdGMFpVWnZjbTFoZEN3Z2JHOWpZV3hsS1R0Y2JpQWdmU0JsYkhObElHbG1JQ2doYVhOV1lXeHBaQ2h3WVhKelpXUkVZWFJsS1NrZ2UxeHVJQ0FnSUdSaGRHVkdiM0p0WVhRZ1BTQmtZWFJsUm05eWJXRjBYRzRnSUNBZ0lDQXViV0YwWTJnb2JHOXVaMFp2Y20xaGRIUnBibWRVYjJ0bGJuTlNaV2RGZUhBcFhHNGdJQ0FnSUNBdWJXRndLR1oxYm1OMGFXOXVJQ2h6ZFdKemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWm1seWMzUkRhR0Z5WVdOMFpYSWdQU0J6ZFdKemRISnBibWRiTUYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2htYVhKemRFTm9ZWEpoWTNSbGNpQTlQVDBnWENKd1hDSWdmSHdnWm1seWMzUkRhR0Z5WVdOMFpYSWdQVDA5SUZ3aVVGd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYkc5dVowWnZjbTFoZEhSbGNpQTlJR3h2Ym1kR2IzSnRZWFIwWlhKelcyWnBjbk4wUTJoaGNtRmpkR1Z5WFR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JHOWpZV3hsVDJKcVpXTjBYRzRnSUNBZ0lDQWdJQ0FnSUNBL0lHeHZibWRHYjNKdFlYUjBaWElvYzNWaWMzUnlhVzVuTENCc2IyTmhiR1ZQWW1wbFkzUXVabTl5YldGMFRHOXVaeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2dabWx5YzNSRGFHRnlZV04wWlhJN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFZbk4wY21sdVp6dGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQXVhbTlwYmloY0lsd2lLVHRjYmx4dUlDQWdJR2xtSUNoMllXeDFaUzVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNCd1lYSnpaV1JFWVhSbElEMGdjR0Z5YzJVb2RtRnNkV1VzSUdSaGRHVkdiM0p0WVhRdWMyeHBZMlVvTUN3Z2RtRnNkV1V1YkdWdVozUm9LU3dnYm1WM0lFUmhkR1VvS1N3Z2UxeHVJQ0FnSUNBZ0lDQjFjMlZCWkdScGRHbHZibUZzVjJWbGExbGxZWEpVYjJ0bGJuTTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIVnpaVUZrWkdsMGFXOXVZV3hFWVhsUFpsbGxZWEpVYjJ0bGJuTTZJSFJ5ZFdVc1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9JV2x6Vm1Gc2FXUW9jR0Z5YzJWa1JHRjBaU2twSUh0Y2JpQWdJQ0FnSUhCaGNuTmxaRVJoZEdVZ1BTQnVaWGNnUkdGMFpTaDJZV3gxWlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdselZtRnNhV1FvY0dGeWMyVmtSR0YwWlNrZ0ppWWdjM1J5YVdOMFVHRnljMmx1WjFaaGJIVmxUV0YwWTJnZ1B5QndZWEp6WldSRVlYUmxJRG9nYm5Wc2JEdGNibjFjYmx4dUx5OGdLaW9nUkdGMFpTQmNJbEpsWm14bFkzUnBiMjVjSWlBcUtseHVYRzVsZUhCdmNuUWdleUJwYzBSaGRHVWdmVHRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdselZtRnNhV1FvWkdGMFpTd2diV2x1UkdGMFpTa2dlMXh1SUNCdGFXNUVZWFJsSUQwZ2JXbHVSR0YwWlNBL0lHMXBia1JoZEdVZ09pQnVaWGNnUkdGMFpTaGNJakV2TVM4eE1EQXdYQ0lwTzF4dUlDQnlaWFIxY200Z2FYTldZV3hwWkVSaGRHVW9aR0YwWlNrZ0ppWWdJV2x6UW1WbWIzSmxLR1JoZEdVc0lHMXBia1JoZEdVcE8xeHVmVnh1WEc0dkx5QXFLaUJFWVhSbElFWnZjbTFoZEhScGJtY2dLaXBjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdadmNtMWhkRVJoZEdVb1pHRjBaU3dnWm05eWJXRjBVM1J5TENCc2IyTmhiR1VwSUh0Y2JpQWdhV1lnS0d4dlkyRnNaU0E5UFQwZ1hDSmxibHdpS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p2Y20xaGRDaGtZWFJsTENCbWIzSnRZWFJUZEhJc0lIdGNiaUFnSUNBZ0lIVnpaVUZrWkdsMGFXOXVZV3hYWldWcldXVmhjbFJ2YTJWdWN6b2dkSEoxWlN4Y2JpQWdJQ0FnSUhWelpVRmtaR2wwYVc5dVlXeEVZWGxQWmxsbFlYSlViMnRsYm5NNklIUnlkV1VzWEc0Z0lDQWdmU2s3WEc0Z0lIMWNiaUFnYkdWMElHeHZZMkZzWlU5aWFpQTlJR2RsZEV4dlkyRnNaVTlpYW1WamRDaHNiMk5oYkdVcE8xeHVJQ0JwWmlBb2JHOWpZV3hsSUNZbUlDRnNiMk5oYkdWUFltb3BJSHRjYmlBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWEc0Z0lDQWdJQ0JnUVNCc2IyTmhiR1VnYjJKcVpXTjBJSGRoY3lCdWIzUWdabTkxYm1RZ1ptOXlJSFJvWlNCd2NtOTJhV1JsWkNCemRISnBibWNnVzF3aUpIdHNiMk5oYkdWOVhDSmRMbUFzWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVJQ0JwWmlBb1hHNGdJQ0FnSVd4dlkyRnNaVTlpYWlBbUpseHVJQ0FnSUNFaFoyVjBSR1ZtWVhWc2RFeHZZMkZzWlNncElDWW1YRzRnSUNBZ0lTRm5aWFJNYjJOaGJHVlBZbXBsWTNRb1oyVjBSR1ZtWVhWc2RFeHZZMkZzWlNncEtWeHVJQ0FwSUh0Y2JpQWdJQ0JzYjJOaGJHVlBZbW9nUFNCblpYUk1iMk5oYkdWUFltcGxZM1FvWjJWMFJHVm1ZWFZzZEV4dlkyRnNaU2dwS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnWm05eWJXRjBLR1JoZEdVc0lHWnZjbTFoZEZOMGNpd2dlMXh1SUNBZ0lHeHZZMkZzWlRvZ2JHOWpZV3hsVDJKcUlEOGdiRzlqWVd4bFQySnFJRG9nYm5Wc2JDeGNiaUFnSUNCMWMyVkJaR1JwZEdsdmJtRnNWMlZsYTFsbFlYSlViMnRsYm5NNklIUnlkV1VzWEc0Z0lDQWdkWE5sUVdSa2FYUnBiMjVoYkVSaGVVOW1XV1ZoY2xSdmEyVnVjem9nZEhKMVpTeGNiaUFnZlNrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ6WVdabFJHRjBaVVp2Y20xaGRDaGtZWFJsTENCN0lHUmhkR1ZHYjNKdFlYUXNJR3h2WTJGc1pTQjlLU0I3WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnS0dSaGRHVWdKaVpjYmlBZ0lDQWdJR1p2Y20xaGRFUmhkR1VvWEc0Z0lDQWdJQ0FnSUdSaGRHVXNYRzRnSUNBZ0lDQWdJRUZ5Y21GNUxtbHpRWEp5WVhrb1pHRjBaVVp2Y20xaGRDa2dQeUJrWVhSbFJtOXliV0YwV3pCZElEb2daR0YwWlVadmNtMWhkQ3hjYmlBZ0lDQWdJQ0FnYkc5allXeGxMRnh1SUNBZ0lDQWdLU2tnZkh4Y2JpQWdJQ0JjSWx3aVhHNGdJQ2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnpZV1psUkdGMFpWSmhibWRsUm05eWJXRjBLSE4wWVhKMFJHRjBaU3dnWlc1a1JHRjBaU3dnY0hKdmNITXBJSHRjYmlBZ2FXWWdLQ0Z6ZEdGeWRFUmhkR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdYQ0pjSWp0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wSUdadmNtMWhkSFJsWkZOMFlYSjBSR0YwWlNBOUlITmhabVZFWVhSbFJtOXliV0YwS0hOMFlYSjBSR0YwWlN3Z2NISnZjSE1wTzF4dUlDQmpiMjV6ZENCbWIzSnRZWFIwWldSRmJtUkVZWFJsSUQwZ1pXNWtSR0YwWlNBL0lITmhabVZFWVhSbFJtOXliV0YwS0dWdVpFUmhkR1VzSUhCeWIzQnpLU0E2SUZ3aVhDSTdYRzVjYmlBZ2NtVjBkWEp1SUdBa2UyWnZjbTFoZEhSbFpGTjBZWEowUkdGMFpYMGdMU0FrZTJadmNtMWhkSFJsWkVWdVpFUmhkR1Y5WUR0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSE5oWm1WTmRXeDBhWEJzWlVSaGRHVnpSbTl5YldGMEtHUmhkR1Z6TENCd2NtOXdjeWtnZTF4dUlDQnBaaUFvSVdSaGRHVnpQeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1hDSmNJanRjYmlBZ2ZWeHVJQ0JqYjI1emRDQm1iM0p0WVhSMFpXUkdhWEp6ZEVSaGRHVWdQU0J6WVdabFJHRjBaVVp2Y20xaGRDaGtZWFJsYzFzd1hTd2djSEp2Y0hNcE8xeHVJQ0JwWmlBb1pHRjBaWE11YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdadmNtMWhkSFJsWkVacGNuTjBSR0YwWlR0Y2JpQWdmVnh1SUNCcFppQW9aR0YwWlhNdWJHVnVaM1JvSUQwOVBTQXlLU0I3WEc0Z0lDQWdZMjl1YzNRZ1ptOXliV0YwZEdWa1UyVmpiMjVrUkdGMFpTQTlJSE5oWm1WRVlYUmxSbTl5YldGMEtHUmhkR1Z6V3pGZExDQndjbTl3Y3lrN1hHNGdJQ0FnY21WMGRYSnVJR0FrZTJadmNtMWhkSFJsWkVacGNuTjBSR0YwWlgwc0lDUjdabTl5YldGMGRHVmtVMlZqYjI1a1JHRjBaWDFnTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnWlhoMGNtRkVZWFJsYzBOdmRXNTBJRDBnWkdGMFpYTXViR1Z1WjNSb0lDMGdNVHRjYmlBZ2NtVjBkWEp1SUdBa2UyWnZjbTFoZEhSbFpFWnBjbk4wUkdGMFpYMGdLQ3NrZTJWNGRISmhSR0YwWlhORGIzVnVkSDBwWUR0Y2JuMWNibHh1THk4Z0tpb2dSR0YwWlNCVFpYUjBaWEp6SUNvcVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnpaWFJVYVcxbEtHUmhkR1VzSUhzZ2FHOTFjaUE5SURBc0lHMXBiblYwWlNBOUlEQXNJSE5sWTI5dVpDQTlJREFnZlNrZ2UxeHVJQ0J5WlhSMWNtNGdjMlYwU0c5MWNuTW9jMlYwVFdsdWRYUmxjeWh6WlhSVFpXTnZibVJ6S0dSaGRHVXNJSE5sWTI5dVpDa3NJRzFwYm5WMFpTa3NJR2h2ZFhJcE8xeHVmVnh1WEc1bGVIQnZjblFnZXlCelpYUk5hVzUxZEdWekxDQnpaWFJJYjNWeWN5d2djMlYwVFc5dWRHZ3NJSE5sZEZGMVlYSjBaWElzSUhObGRGbGxZWElnZlR0Y2JseHVMeThnS2lvZ1JHRjBaU0JIWlhSMFpYSnpJQ29xWEc1Y2JpOHZJR2RsZEVSaGVTQlNaWFIxY201eklHUmhlU0J2WmlCM1pXVnJMQ0JuWlhSRVlYUmxJSEpsZEhWeWJuTWdaR0Y1SUc5bUlHMXZiblJvWEc1bGVIQnZjblFnZTF4dUlDQm5aWFJUWldOdmJtUnpMRnh1SUNCblpYUk5hVzUxZEdWekxGeHVJQ0JuWlhSSWIzVnljeXhjYmlBZ1oyVjBUVzl1ZEdnc1hHNGdJR2RsZEZGMVlYSjBaWElzWEc0Z0lHZGxkRmxsWVhJc1hHNGdJR2RsZEVSaGVTeGNiaUFnWjJWMFJHRjBaU3hjYmlBZ1oyVjBWR2x0WlN4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSWFpXVnJLR1JoZEdVc0lHeHZZMkZzWlNrZ2UxeHVJQ0JzWlhRZ2JHOWpZV3hsVDJKcUlEMWNiaUFnSUNBb2JHOWpZV3hsSUNZbUlHZGxkRXh2WTJGc1pVOWlhbVZqZENoc2IyTmhiR1VwS1NCOGZGeHVJQ0FnSUNoblpYUkVaV1poZFd4MFRHOWpZV3hsS0NrZ0ppWWdaMlYwVEc5allXeGxUMkpxWldOMEtHZGxkRVJsWm1GMWJIUk1iMk5oYkdVb0tTa3BPMXh1SUNCeVpYUjFjbTRnWjJWMFNWTlBWMlZsYXloa1lYUmxMQ0JzYjJOaGJHVlBZbW9nUHlCN0lHeHZZMkZzWlRvZ2JHOWpZV3hsVDJKcUlIMGdPaUJ1ZFd4c0tUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRFUmhlVTltVjJWbGEwTnZaR1VvWkdGNUxDQnNiMk5oYkdVcElIdGNiaUFnY21WMGRYSnVJR1p2Y20xaGRFUmhkR1VvWkdGNUxDQmNJbVJrWkZ3aUxDQnNiMk5oYkdVcE8xeHVmVnh1WEc0dkx5QXFLaW9nVTNSaGNuUWdiMllnS2lvcVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJUZEdGeWRFOW1SR0Y1S0dSaGRHVXBJSHRjYmlBZ2NtVjBkWEp1SUhOMFlYSjBUMlpFWVhrb1pHRjBaU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJUZEdGeWRFOW1WMlZsYXloa1lYUmxMQ0JzYjJOaGJHVXNJR05oYkdWdVpHRnlVM1JoY25SRVlYa3BJSHRjYmlBZ2JHVjBJR3h2WTJGc1pVOWlhaUE5SUd4dlkyRnNaVnh1SUNBZ0lEOGdaMlYwVEc5allXeGxUMkpxWldOMEtHeHZZMkZzWlNsY2JpQWdJQ0E2SUdkbGRFeHZZMkZzWlU5aWFtVmpkQ2huWlhSRVpXWmhkV3gwVEc5allXeGxLQ2twTzF4dUlDQnlaWFIxY200Z2MzUmhjblJQWmxkbFpXc29aR0YwWlN3Z2UxeHVJQ0FnSUd4dlkyRnNaVG9nYkc5allXeGxUMkpxTEZ4dUlDQWdJSGRsWld0VGRHRnlkSE5QYmpvZ1kyRnNaVzVrWVhKVGRHRnlkRVJoZVN4Y2JpQWdmU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJUZEdGeWRFOW1UVzl1ZEdnb1pHRjBaU2tnZTF4dUlDQnlaWFIxY200Z2MzUmhjblJQWmsxdmJuUm9LR1JoZEdVcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFUzUmhjblJQWmxsbFlYSW9aR0YwWlNrZ2UxeHVJQ0J5WlhSMWNtNGdjM1JoY25SUFpsbGxZWElvWkdGMFpTazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCblpYUlRkR0Z5ZEU5bVVYVmhjblJsY2loa1lYUmxLU0I3WEc0Z0lISmxkSFZ5YmlCemRHRnlkRTltVVhWaGNuUmxjaWhrWVhSbEtUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRGTjBZWEowVDJaVWIyUmhlU2dwSUh0Y2JpQWdjbVYwZFhKdUlITjBZWEowVDJaRVlYa29ibVYzUkdGMFpTZ3BLVHRjYm4xY2JseHVMeThnS2lvcUlFVnVaQ0J2WmlBcUtpcGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEVWdVpFOW1WMlZsYXloa1lYUmxLU0I3WEc0Z0lISmxkSFZ5YmlCbGJtUlBabGRsWldzb1pHRjBaU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJGYm1SUFprMXZiblJvS0dSaGRHVXBJSHRjYmlBZ2NtVjBkWEp1SUdWdVpFOW1UVzl1ZEdnb1pHRjBaU2s3WEc1OVhHNWNiaTh2SUNvcUlFUmhkR1VnVFdGMGFDQXFLbHh1WEc0dkx5QXFLaW9nUVdSa2FYUnBiMjRnS2lvcVhHNWNibVY0Y0c5eWRDQjdYRzRnSUdGa1pGTmxZMjl1WkhNc1hHNGdJR0ZrWkUxcGJuVjBaWE1zWEc0Z0lHRmtaRVJoZVhNc1hHNGdJR0ZrWkZkbFpXdHpMRnh1SUNCaFpHUk5iMjUwYUhNc1hHNGdJR0ZrWkZGMVlYSjBaWEp6TEZ4dUlDQmhaR1JaWldGeWN5eGNibjA3WEc1Y2JpOHZJQ29xS2lCVGRXSjBjbUZqZEdsdmJpQXFLaXBjYmx4dVpYaHdiM0owSUhzZ1lXUmtTRzkxY25Nc0lITjFZa1JoZVhNc0lITjFZbGRsWld0ekxDQnpkV0pOYjI1MGFITXNJSE4xWWxGMVlYSjBaWEp6TENCemRXSlpaV0Z5Y3lCOU8xeHVYRzR2THlBcUtpQkVZWFJsSUVOdmJYQmhjbWx6YjI0Z0tpcGNibHh1Wlhod2IzSjBJSHNnYVhOQ1pXWnZjbVVzSUdselFXWjBaWElnZlR0Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHpVMkZ0WlZsbFlYSW9aR0YwWlRFc0lHUmhkR1V5S1NCN1hHNGdJR2xtSUNoa1lYUmxNU0FtSmlCa1lYUmxNaWtnZTF4dUlDQWdJSEpsZEhWeWJpQmtaa2x6VTJGdFpWbGxZWElvWkdGMFpURXNJR1JoZEdVeUtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z0lXUmhkR1V4SUNZbUlDRmtZWFJsTWp0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FYTlRZVzFsVFc5dWRHZ29aR0YwWlRFc0lHUmhkR1V5S1NCN1hHNGdJR2xtSUNoa1lYUmxNU0FtSmlCa1lYUmxNaWtnZTF4dUlDQWdJSEpsZEhWeWJpQmtaa2x6VTJGdFpVMXZiblJvS0dSaGRHVXhMQ0JrWVhSbE1pazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlDRmtZWFJsTVNBbUppQWhaR0YwWlRJN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHpVMkZ0WlZGMVlYSjBaWElvWkdGMFpURXNJR1JoZEdVeUtTQjdYRzRnSUdsbUlDaGtZWFJsTVNBbUppQmtZWFJsTWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJrWmtselUyRnRaVkYxWVhKMFpYSW9aR0YwWlRFc0lHUmhkR1V5S1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnSVdSaGRHVXhJQ1ltSUNGa1lYUmxNanRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVhOVFlXMWxSR0Y1S0dSaGRHVXhMQ0JrWVhSbE1pa2dlMXh1SUNCcFppQW9aR0YwWlRFZ0ppWWdaR0YwWlRJcElIdGNiaUFnSUNCeVpYUjFjbTRnWkdaSmMxTmhiV1ZFWVhrb1pHRjBaVEVzSUdSaGRHVXlLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdJV1JoZEdVeElDWW1JQ0ZrWVhSbE1qdGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhWE5GY1hWaGJDaGtZWFJsTVN3Z1pHRjBaVElwSUh0Y2JpQWdhV1lnS0dSaGRHVXhJQ1ltSUdSaGRHVXlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHUm1TWE5GY1hWaGJDaGtZWFJsTVN3Z1pHRjBaVElwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUFoWkdGMFpURWdKaVlnSVdSaGRHVXlPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYzBSaGVVbHVVbUZ1WjJVb1pHRjVMQ0J6ZEdGeWRFUmhkR1VzSUdWdVpFUmhkR1VwSUh0Y2JpQWdiR1YwSUhaaGJHbGtPMXh1SUNCamIyNXpkQ0J6ZEdGeWRDQTlJSE4wWVhKMFQyWkVZWGtvYzNSaGNuUkVZWFJsS1R0Y2JpQWdZMjl1YzNRZ1pXNWtJRDBnWlc1a1QyWkVZWGtvWlc1a1JHRjBaU2s3WEc1Y2JpQWdkSEo1SUh0Y2JpQWdJQ0IyWVd4cFpDQTlJR2x6VjJsMGFHbHVTVzUwWlhKMllXd29aR0Y1TENCN0lITjBZWEowTENCbGJtUWdmU2s3WEc0Z0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJSFpoYkdsa0lEMGdabUZzYzJVN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhaaGJHbGtPMXh1ZlZ4dVhHNHZMeUFxS2lvZ1JHbG1abWx1WnlBcUtpcGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEVSaGVYTkVhV1ptS0dSaGRHVXhMQ0JrWVhSbE1pa2dlMXh1SUNCeVpYUjFjbTRnWkdsbVptVnlaVzVqWlVsdVEyRnNaVzVrWVhKRVlYbHpLR1JoZEdVeExDQmtZWFJsTWlrN1hHNTlYRzVjYmk4dklDb3FJRVJoZEdVZ1RHOWpZV3hwZW1GMGFXOXVJQ29xWEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCeVpXZHBjM1JsY2t4dlkyRnNaU2hzYjJOaGJHVk9ZVzFsTENCc2IyTmhiR1ZFWVhSaEtTQjdYRzRnSUdOdmJuTjBJSE5qYjNCbElEMGdkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBL0lIZHBibVJ2ZHlBNklHZHNiMkpoYkZSb2FYTTdYRzVjYmlBZ2FXWWdLQ0Z6WTI5d1pTNWZYMnh2WTJGc1pVUmhkR0ZmWHlrZ2UxeHVJQ0FnSUhOamIzQmxMbDlmYkc5allXeGxSR0YwWVY5ZklEMGdlMzA3WEc0Z0lIMWNiaUFnYzJOdmNHVXVYMTlzYjJOaGJHVkVZWFJoWDE5YmJHOWpZV3hsVG1GdFpWMGdQU0JzYjJOaGJHVkVZWFJoTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjMlYwUkdWbVlYVnNkRXh2WTJGc1pTaHNiMk5oYkdWT1lXMWxLU0I3WEc0Z0lHTnZibk4wSUhOamIzQmxJRDBnZEhsd1pXOW1JSGRwYm1SdmR5QWhQVDBnWENKMWJtUmxabWx1WldSY0lpQS9JSGRwYm1SdmR5QTZJR2RzYjJKaGJGUm9hWE03WEc1Y2JpQWdjMk52Y0dVdVgxOXNiMk5oYkdWSlpGOWZJRDBnYkc5allXeGxUbUZ0WlR0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEVSbFptRjFiSFJNYjJOaGJHVW9LU0I3WEc0Z0lHTnZibk4wSUhOamIzQmxJRDBnZEhsd1pXOW1JSGRwYm1SdmR5QWhQVDBnWENKMWJtUmxabWx1WldSY0lpQS9JSGRwYm1SdmR5QTZJR2RzYjJKaGJGUm9hWE03WEc1Y2JpQWdjbVYwZFhKdUlITmpiM0JsTGw5ZmJHOWpZV3hsU1dSZlh6dGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRFeHZZMkZzWlU5aWFtVmpkQ2hzYjJOaGJHVlRjR1ZqS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYkc5allXeGxVM0JsWXlBOVBUMGdYQ0p6ZEhKcGJtZGNJaWtnZTF4dUlDQWdJQzh2SUZSeVpXRjBJR2wwSUdGeklHRWdiRzlqWVd4bElHNWhiV1VnY21WbmFYTjBaWEpsWkNCaWVTQnlaV2RwYzNSbGNreHZZMkZzWlZ4dUlDQWdJR052Ym5OMElITmpiM0JsSUQwZ2RIbHdaVzltSUhkcGJtUnZkeUFoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUEvSUhkcGJtUnZkeUE2SUdkc2IySmhiRlJvYVhNN1hHNGdJQ0FnY21WMGRYSnVJSE5qYjNCbExsOWZiRzlqWVd4bFJHRjBZVjlmSUQ4Z2MyTnZjR1V1WDE5c2IyTmhiR1ZFWVhSaFgxOWJiRzlqWVd4bFUzQmxZMTBnT2lCdWRXeHNPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJQzh2SUZSeVpXRjBJR2wwSUdGeklHRWdjbUYzSUdSaGRHVXRabTV6SUd4dlkyRnNaU0J2WW1wbFkzUmNiaUFnSUNCeVpYUjFjbTRnYkc5allXeGxVM0JsWXp0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBSbTl5YldGMGRHVmtWMlZsYTJSaGVVbHVURzlqWVd4bEtHUmhkR1VzSUdadmNtMWhkRVoxYm1Nc0lHeHZZMkZzWlNrZ2UxeHVJQ0J5WlhSMWNtNGdabTl5YldGMFJuVnVZeWhtYjNKdFlYUkVZWFJsS0dSaGRHVXNJRndpUlVWRlJWd2lMQ0JzYjJOaGJHVXBLVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRmRsWld0a1lYbE5hVzVKYmt4dlkyRnNaU2hrWVhSbExDQnNiMk5oYkdVcElIdGNiaUFnY21WMGRYSnVJR1p2Y20xaGRFUmhkR1VvWkdGMFpTd2dYQ0pGUlVWRlJVVmNJaXdnYkc5allXeGxLVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRmRsWld0a1lYbFRhRzl5ZEVsdVRHOWpZV3hsS0dSaGRHVXNJR3h2WTJGc1pTa2dlMXh1SUNCeVpYUjFjbTRnWm05eWJXRjBSR0YwWlNoa1lYUmxMQ0JjSWtWRlJWd2lMQ0JzYjJOaGJHVXBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBUVzl1ZEdoSmJreHZZMkZzWlNodGIyNTBhQ3dnYkc5allXeGxLU0I3WEc0Z0lISmxkSFZ5YmlCbWIzSnRZWFJFWVhSbEtITmxkRTF2Ym5Sb0tHNWxkMFJoZEdVb0tTd2diVzl1ZEdncExDQmNJa3hNVEV4Y0lpd2diRzlqWVd4bEtUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRFMXZiblJvVTJodmNuUkpia3h2WTJGc1pTaHRiMjUwYUN3Z2JHOWpZV3hsS1NCN1hHNGdJSEpsZEhWeWJpQm1iM0p0WVhSRVlYUmxLSE5sZEUxdmJuUm9LRzVsZDBSaGRHVW9LU3dnYlc5dWRHZ3BMQ0JjSWt4TVRGd2lMQ0JzYjJOaGJHVXBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBVWFZoY25SbGNsTm9iM0owU1c1TWIyTmhiR1VvY1hWaGNuUmxjaXdnYkc5allXeGxLU0I3WEc0Z0lISmxkSFZ5YmlCbWIzSnRZWFJFWVhSbEtITmxkRkYxWVhKMFpYSW9ibVYzUkdGMFpTZ3BMQ0J4ZFdGeWRHVnlLU3dnWENKUlVWRmNJaXdnYkc5allXeGxLVHRjYm4xY2JseHVMeThnS2lvZ1ZYUnBiSE1nWm05eUlITnZiV1VnWTI5dGNHOXVaVzUwY3lBcUtseHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhWE5FWVhsRWFYTmhZbXhsWkNoY2JpQWdaR0Y1TEZ4dUlDQjdYRzRnSUNBZ2JXbHVSR0YwWlN4Y2JpQWdJQ0J0WVhoRVlYUmxMRnh1SUNBZ0lHVjRZMngxWkdWRVlYUmxjeXhjYmlBZ0lDQmxlR05zZFdSbFJHRjBaVWx1ZEdWeWRtRnNjeXhjYmlBZ0lDQnBibU5zZFdSbFJHRjBaWE1zWEc0Z0lDQWdhVzVqYkhWa1pVUmhkR1ZKYm5SbGNuWmhiSE1zWEc0Z0lDQWdabWxzZEdWeVJHRjBaU3hjYmlBZ2ZTQTlJSHQ5TEZ4dUtTQjdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdhWE5QZFhSUFprSnZkVzVrY3loa1lYa3NJSHNnYldsdVJHRjBaU3dnYldGNFJHRjBaU0I5S1NCOGZGeHVJQ0FnSUNobGVHTnNkV1JsUkdGMFpYTWdKaVpjYmlBZ0lDQWdJR1Y0WTJ4MVpHVkVZWFJsY3k1emIyMWxLQ2hsZUdOc2RXUmxSR0YwWlNrZ1BUNWNiaUFnSUNBZ0lDQWdhWE5UWVcxbFJHRjVLR1JoZVN3Z1pYaGpiSFZrWlVSaGRHVXVaR0YwWlNBL0lHVjRZMngxWkdWRVlYUmxMbVJoZEdVZ09pQmxlR05zZFdSbFJHRjBaU2tzWEc0Z0lDQWdJQ0FwS1NCOGZGeHVJQ0FnSUNobGVHTnNkV1JsUkdGMFpVbHVkR1Z5ZG1Gc2N5QW1KbHh1SUNBZ0lDQWdaWGhqYkhWa1pVUmhkR1ZKYm5SbGNuWmhiSE11YzI5dFpTZ29leUJ6ZEdGeWRDd2daVzVrSUgwcElEMCtYRzRnSUNBZ0lDQWdJR2x6VjJsMGFHbHVTVzUwWlhKMllXd29aR0Y1TENCN0lITjBZWEowTENCbGJtUWdmU2tzWEc0Z0lDQWdJQ0FwS1NCOGZGeHVJQ0FnSUNocGJtTnNkV1JsUkdGMFpYTWdKaVpjYmlBZ0lDQWdJQ0ZwYm1Oc2RXUmxSR0YwWlhNdWMyOXRaU2dvYVc1amJIVmtaVVJoZEdVcElEMCtJR2x6VTJGdFpVUmhlU2hrWVhrc0lHbHVZMngxWkdWRVlYUmxLU2twSUh4OFhHNGdJQ0FnS0dsdVkyeDFaR1ZFWVhSbFNXNTBaWEoyWVd4eklDWW1YRzRnSUNBZ0lDQWhhVzVqYkhWa1pVUmhkR1ZKYm5SbGNuWmhiSE11YzI5dFpTZ29leUJ6ZEdGeWRDd2daVzVrSUgwcElEMCtYRzRnSUNBZ0lDQWdJR2x6VjJsMGFHbHVTVzUwWlhKMllXd29aR0Y1TENCN0lITjBZWEowTENCbGJtUWdmU2tzWEc0Z0lDQWdJQ0FwS1NCOGZGeHVJQ0FnSUNobWFXeDBaWEpFWVhSbElDWW1JQ0ZtYVd4MFpYSkVZWFJsS0c1bGQwUmhkR1VvWkdGNUtTa3BJSHg4WEc0Z0lDQWdabUZzYzJWY2JpQWdLVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHpSR0Y1UlhoamJIVmtaV1FvWEc0Z0lHUmhlU3hjYmlBZ2V5QmxlR05zZFdSbFJHRjBaWE1zSUdWNFkyeDFaR1ZFWVhSbFNXNTBaWEoyWVd4eklIMGdQU0I3ZlN4Y2Jpa2dlMXh1SUNCcFppQW9aWGhqYkhWa1pVUmhkR1ZKYm5SbGNuWmhiSE1nSmlZZ1pYaGpiSFZrWlVSaGRHVkpiblJsY25aaGJITXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmxlR05zZFdSbFJHRjBaVWx1ZEdWeWRtRnNjeTV6YjIxbEtDaDdJSE4wWVhKMExDQmxibVFnZlNrZ1BUNWNiaUFnSUNBZ0lHbHpWMmwwYUdsdVNXNTBaWEoyWVd3b1pHRjVMQ0I3SUhOMFlYSjBMQ0JsYm1RZ2ZTa3NYRzRnSUNBZ0tUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUNobGVHTnNkV1JsUkdGMFpYTWdKaVpjYmlBZ0lDQWdJR1Y0WTJ4MVpHVkVZWFJsY3k1emIyMWxLQ2hsZUdOc2RXUmxSR0YwWlNrZ1BUNWNiaUFnSUNBZ0lDQWdhWE5UWVcxbFJHRjVLR1JoZVN3Z1pYaGpiSFZrWlVSaGRHVXVaR0YwWlNBL0lHVjRZMngxWkdWRVlYUmxMbVJoZEdVZ09pQmxlR05zZFdSbFJHRjBaU2tzWEc0Z0lDQWdJQ0FwS1NCOGZGeHVJQ0FnSUdaaGJITmxYRzRnSUNrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYzAxdmJuUm9SR2x6WVdKc1pXUW9YRzRnSUcxdmJuUm9MRnh1SUNCN0lHMXBia1JoZEdVc0lHMWhlRVJoZEdVc0lHVjRZMngxWkdWRVlYUmxjeXdnYVc1amJIVmtaVVJoZEdWekxDQm1hV3gwWlhKRVlYUmxJSDBnUFNCN2ZTeGNiaWtnZTF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUdselQzVjBUMlpDYjNWdVpITW9iVzl1ZEdnc0lIdGNiaUFnSUNBZ0lHMXBia1JoZEdVNklITjBZWEowVDJaTmIyNTBhQ2h0YVc1RVlYUmxLU3hjYmlBZ0lDQWdJRzFoZUVSaGRHVTZJR1Z1WkU5bVRXOXVkR2dvYldGNFJHRjBaU2tzWEc0Z0lDQWdmU2tnZkh4Y2JpQWdJQ0FvWlhoamJIVmtaVVJoZEdWeklDWW1YRzRnSUNBZ0lDQmxlR05zZFdSbFJHRjBaWE11YzI5dFpTZ29aWGhqYkhWa1pVUmhkR1VwSUQwK0lHbHpVMkZ0WlUxdmJuUm9LRzF2Ym5Sb0xDQmxlR05zZFdSbFJHRjBaU2twS1NCOGZGeHVJQ0FnSUNocGJtTnNkV1JsUkdGMFpYTWdKaVpjYmlBZ0lDQWdJQ0ZwYm1Oc2RXUmxSR0YwWlhNdWMyOXRaU2dvYVc1amJIVmtaVVJoZEdVcElEMCtJR2x6VTJGdFpVMXZiblJvS0cxdmJuUm9MQ0JwYm1Oc2RXUmxSR0YwWlNrcEtTQjhmRnh1SUNBZ0lDaG1hV3gwWlhKRVlYUmxJQ1ltSUNGbWFXeDBaWEpFWVhSbEtHNWxkMFJoZEdVb2JXOXVkR2dwS1NrZ2ZIeGNiaUFnSUNCbVlXeHpaVnh1SUNBcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVhOTmIyNTBhRWx1VW1GdVoyVW9jM1JoY25SRVlYUmxMQ0JsYm1SRVlYUmxMQ0J0TENCa1lYa3BJSHRjYmlBZ1kyOXVjM1FnYzNSaGNuUkVZWFJsV1dWaGNpQTlJR2RsZEZsbFlYSW9jM1JoY25SRVlYUmxLVHRjYmlBZ1kyOXVjM1FnYzNSaGNuUkVZWFJsVFc5dWRHZ2dQU0JuWlhSTmIyNTBhQ2h6ZEdGeWRFUmhkR1VwTzF4dUlDQmpiMjV6ZENCbGJtUkVZWFJsV1dWaGNpQTlJR2RsZEZsbFlYSW9aVzVrUkdGMFpTazdYRzRnSUdOdmJuTjBJR1Z1WkVSaGRHVk5iMjUwYUNBOUlHZGxkRTF2Ym5Sb0tHVnVaRVJoZEdVcE8xeHVJQ0JqYjI1emRDQmtZWGxaWldGeUlEMGdaMlYwV1dWaGNpaGtZWGtwTzF4dUlDQnBaaUFvYzNSaGNuUkVZWFJsV1dWaGNpQTlQVDBnWlc1a1JHRjBaVmxsWVhJZ0ppWWdjM1JoY25SRVlYUmxXV1ZoY2lBOVBUMGdaR0Y1V1dWaGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCemRHRnlkRVJoZEdWTmIyNTBhQ0E4UFNCdElDWW1JRzBnUEQwZ1pXNWtSR0YwWlUxdmJuUm9PMXh1SUNCOUlHVnNjMlVnYVdZZ0tITjBZWEowUkdGMFpWbGxZWElnUENCbGJtUkVZWFJsV1dWaGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBb1pHRjVXV1ZoY2lBOVBUMGdjM1JoY25SRVlYUmxXV1ZoY2lBbUppQnpkR0Z5ZEVSaGRHVk5iMjUwYUNBOFBTQnRLU0I4ZkZ4dUlDQWdJQ0FnS0dSaGVWbGxZWElnUFQwOUlHVnVaRVJoZEdWWlpXRnlJQ1ltSUdWdVpFUmhkR1ZOYjI1MGFDQStQU0J0S1NCOGZGeHVJQ0FnSUNBZ0tHUmhlVmxsWVhJZ1BDQmxibVJFWVhSbFdXVmhjaUFtSmlCa1lYbFpaV0Z5SUQ0Z2MzUmhjblJFWVhSbFdXVmhjaWxjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYzFGMVlYSjBaWEpFYVhOaFlteGxaQ2hjYmlBZ2NYVmhjblJsY2l4Y2JpQWdleUJ0YVc1RVlYUmxMQ0J0WVhoRVlYUmxMQ0JsZUdOc2RXUmxSR0YwWlhNc0lHbHVZMngxWkdWRVlYUmxjeXdnWm1sc2RHVnlSR0YwWlNCOUlEMGdlMzBzWEc0cElIdGNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQnBjMDkxZEU5bVFtOTFibVJ6S0hGMVlYSjBaWElzSUhzZ2JXbHVSR0YwWlN3Z2JXRjRSR0YwWlNCOUtTQjhmRnh1SUNBZ0lDaGxlR05zZFdSbFJHRjBaWE1nSmlaY2JpQWdJQ0FnSUdWNFkyeDFaR1ZFWVhSbGN5NXpiMjFsS0NobGVHTnNkV1JsUkdGMFpTa2dQVDVjYmlBZ0lDQWdJQ0FnYVhOVFlXMWxVWFZoY25SbGNpaHhkV0Z5ZEdWeUxDQmxlR05zZFdSbFJHRjBaU2tzWEc0Z0lDQWdJQ0FwS1NCOGZGeHVJQ0FnSUNocGJtTnNkV1JsUkdGMFpYTWdKaVpjYmlBZ0lDQWdJQ0ZwYm1Oc2RXUmxSR0YwWlhNdWMyOXRaU2dvYVc1amJIVmtaVVJoZEdVcElEMCtYRzRnSUNBZ0lDQWdJR2x6VTJGdFpWRjFZWEowWlhJb2NYVmhjblJsY2l3Z2FXNWpiSFZrWlVSaGRHVXBMRnh1SUNBZ0lDQWdLU2tnZkh4Y2JpQWdJQ0FvWm1sc2RHVnlSR0YwWlNBbUppQWhabWxzZEdWeVJHRjBaU2h1WlhkRVlYUmxLSEYxWVhKMFpYSXBLU2tnZkh4Y2JpQWdJQ0JtWVd4elpWeHVJQ0FwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjVaV0Z5WEc0Z0tpQkFjR0Z5WVcwZ2UwUmhkR1Y5SUhOMFlYSjBYRzRnS2lCQWNHRnlZVzBnZTBSaGRHVjlJR1Z1WkZ4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMxbGxZWEpKYmxKaGJtZGxLSGxsWVhJc0lITjBZWEowTENCbGJtUXBJSHRjYmlBZ2FXWWdLQ0ZwYzFaaGJHbGtSR0YwWlNoemRHRnlkQ2tnZkh3Z0lXbHpWbUZzYVdSRVlYUmxLR1Z1WkNrcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ1kyOXVjM1FnYzNSaGNuUlpaV0Z5SUQwZ1oyVjBXV1ZoY2loemRHRnlkQ2s3WEc0Z0lHTnZibk4wSUdWdVpGbGxZWElnUFNCblpYUlpaV0Z5S0dWdVpDazdYRzVjYmlBZ2NtVjBkWEp1SUhOMFlYSjBXV1ZoY2lBOFBTQjVaV0Z5SUNZbUlHVnVaRmxsWVhJZ1BqMGdlV1ZoY2p0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2x6V1dWaGNrUnBjMkZpYkdWa0tGeHVJQ0I1WldGeUxGeHVJQ0I3SUcxcGJrUmhkR1VzSUcxaGVFUmhkR1VzSUdWNFkyeDFaR1ZFWVhSbGN5d2dhVzVqYkhWa1pVUmhkR1Z6TENCbWFXeDBaWEpFWVhSbElIMGdQU0I3ZlN4Y2Jpa2dlMXh1SUNCamIyNXpkQ0JrWVhSbElEMGdibVYzSUVSaGRHVW9lV1ZoY2l3Z01Dd2dNU2s3WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnYVhOUGRYUlBaa0p2ZFc1a2N5aGtZWFJsTENCN1hHNGdJQ0FnSUNCdGFXNUVZWFJsT2lCemRHRnlkRTltV1dWaGNpaHRhVzVFWVhSbEtTeGNiaUFnSUNBZ0lHMWhlRVJoZEdVNklHVnVaRTltV1dWaGNpaHRZWGhFWVhSbEtTeGNiaUFnSUNCOUtTQjhmRnh1SUNBZ0lDaGxlR05zZFdSbFJHRjBaWE1nSmlaY2JpQWdJQ0FnSUdWNFkyeDFaR1ZFWVhSbGN5NXpiMjFsS0NobGVHTnNkV1JsUkdGMFpTa2dQVDRnYVhOVFlXMWxXV1ZoY2loa1lYUmxMQ0JsZUdOc2RXUmxSR0YwWlNrcEtTQjhmRnh1SUNBZ0lDaHBibU5zZFdSbFJHRjBaWE1nSmlaY2JpQWdJQ0FnSUNGcGJtTnNkV1JsUkdGMFpYTXVjMjl0WlNnb2FXNWpiSFZrWlVSaGRHVXBJRDArSUdselUyRnRaVmxsWVhJb1pHRjBaU3dnYVc1amJIVmtaVVJoZEdVcEtTa2dmSHhjYmlBZ0lDQW9abWxzZEdWeVJHRjBaU0FtSmlBaFptbHNkR1Z5UkdGMFpTaHVaWGRFWVhSbEtHUmhkR1VwS1NrZ2ZIeGNiaUFnSUNCbVlXeHpaVnh1SUNBcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVhOUmRXRnlkR1Z5U1c1U1lXNW5aU2h6ZEdGeWRFUmhkR1VzSUdWdVpFUmhkR1VzSUhFc0lHUmhlU2tnZTF4dUlDQmpiMjV6ZENCemRHRnlkRVJoZEdWWlpXRnlJRDBnWjJWMFdXVmhjaWh6ZEdGeWRFUmhkR1VwTzF4dUlDQmpiMjV6ZENCemRHRnlkRVJoZEdWUmRXRnlkR1Z5SUQwZ1oyVjBVWFZoY25SbGNpaHpkR0Z5ZEVSaGRHVXBPMXh1SUNCamIyNXpkQ0JsYm1SRVlYUmxXV1ZoY2lBOUlHZGxkRmxsWVhJb1pXNWtSR0YwWlNrN1hHNGdJR052Ym5OMElHVnVaRVJoZEdWUmRXRnlkR1Z5SUQwZ1oyVjBVWFZoY25SbGNpaGxibVJFWVhSbEtUdGNiaUFnWTI5dWMzUWdaR0Y1V1dWaGNpQTlJR2RsZEZsbFlYSW9aR0Y1S1R0Y2JpQWdhV1lnS0hOMFlYSjBSR0YwWlZsbFlYSWdQVDA5SUdWdVpFUmhkR1ZaWldGeUlDWW1JSE4wWVhKMFJHRjBaVmxsWVhJZ1BUMDlJR1JoZVZsbFlYSXBJSHRjYmlBZ0lDQnlaWFIxY200Z2MzUmhjblJFWVhSbFVYVmhjblJsY2lBOFBTQnhJQ1ltSUhFZ1BEMGdaVzVrUkdGMFpWRjFZWEowWlhJN1hHNGdJSDBnWld4elpTQnBaaUFvYzNSaGNuUkVZWFJsV1dWaGNpQThJR1Z1WkVSaGRHVlpaV0Z5S1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJQ2hrWVhsWlpXRnlJRDA5UFNCemRHRnlkRVJoZEdWWlpXRnlJQ1ltSUhOMFlYSjBSR0YwWlZGMVlYSjBaWElnUEQwZ2NTa2dmSHhjYmlBZ0lDQWdJQ2hrWVhsWlpXRnlJRDA5UFNCbGJtUkVZWFJsV1dWaGNpQW1KaUJsYm1SRVlYUmxVWFZoY25SbGNpQStQU0J4S1NCOGZGeHVJQ0FnSUNBZ0tHUmhlVmxsWVhJZ1BDQmxibVJFWVhSbFdXVmhjaUFtSmlCa1lYbFpaV0Z5SUQ0Z2MzUmhjblJFWVhSbFdXVmhjaWxjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYzA5MWRFOW1RbTkxYm1SektHUmhlU3dnZXlCdGFXNUVZWFJsTENCdFlYaEVZWFJsSUgwZ1BTQjdmU2tnZTF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUNodGFXNUVZWFJsSUNZbUlHUnBabVpsY21WdVkyVkpia05oYkdWdVpHRnlSR0Y1Y3loa1lYa3NJRzFwYmtSaGRHVXBJRHdnTUNrZ2ZIeGNiaUFnSUNBb2JXRjRSR0YwWlNBbUppQmthV1ptWlhKbGJtTmxTVzVEWVd4bGJtUmhja1JoZVhNb1pHRjVMQ0J0WVhoRVlYUmxLU0ErSURBcFhHNGdJQ2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMVJwYldWSmJreHBjM1FvZEdsdFpTd2dkR2x0WlhNcElIdGNiaUFnY21WMGRYSnVJSFJwYldWekxuTnZiV1VvWEc0Z0lDQWdLR3hwYzNSVWFXMWxLU0E5UGx4dUlDQWdJQ0FnWjJWMFNHOTFjbk1vYkdsemRGUnBiV1VwSUQwOVBTQm5aWFJJYjNWeWN5aDBhVzFsS1NBbUpseHVJQ0FnSUNBZ1oyVjBUV2x1ZFhSbGN5aHNhWE4wVkdsdFpTa2dQVDA5SUdkbGRFMXBiblYwWlhNb2RHbHRaU2tzWEc0Z0lDazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMxUnBiV1ZFYVhOaFlteGxaQ2hjYmlBZ2RHbHRaU3hjYmlBZ2V5QmxlR05zZFdSbFZHbHRaWE1zSUdsdVkyeDFaR1ZVYVcxbGN5d2dabWxzZEdWeVZHbHRaU0I5SUQwZ2UzMHNYRzRwSUh0Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBb1pYaGpiSFZrWlZScGJXVnpJQ1ltSUdselZHbHRaVWx1VEdsemRDaDBhVzFsTENCbGVHTnNkV1JsVkdsdFpYTXBLU0I4ZkZ4dUlDQWdJQ2hwYm1Oc2RXUmxWR2x0WlhNZ0ppWWdJV2x6VkdsdFpVbHVUR2x6ZENoMGFXMWxMQ0JwYm1Oc2RXUmxWR2x0WlhNcEtTQjhmRnh1SUNBZ0lDaG1hV3gwWlhKVWFXMWxJQ1ltSUNGbWFXeDBaWEpVYVcxbEtIUnBiV1VwS1NCOGZGeHVJQ0FnSUdaaGJITmxYRzRnSUNrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYzFScGJXVkpia1JwYzJGaWJHVmtVbUZ1WjJVb2RHbHRaU3dnZXlCdGFXNVVhVzFsTENCdFlYaFVhVzFsSUgwcElIdGNiaUFnYVdZZ0tDRnRhVzVVYVcxbElIeDhJQ0Z0WVhoVWFXMWxLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lRbTkwYUNCdGFXNVVhVzFsSUdGdVpDQnRZWGhVYVcxbElIQnliM0J6SUhKbGNYVnBjbVZrWENJcE8xeHVJQ0I5WEc0Z0lHTnZibk4wSUdKaGMyVWdQU0J1WlhkRVlYUmxLQ2s3WEc0Z0lHTnZibk4wSUdKaGMyVlVhVzFsSUQwZ2MyVjBTRzkxY25Nb2MyVjBUV2x1ZFhSbGN5aGlZWE5sTENCblpYUk5hVzUxZEdWektIUnBiV1VwS1N3Z1oyVjBTRzkxY25Nb2RHbHRaU2twTzF4dUlDQmpiMjV6ZENCdGFXNGdQU0J6WlhSSWIzVnljeWhjYmlBZ0lDQnpaWFJOYVc1MWRHVnpLR0poYzJVc0lHZGxkRTFwYm5WMFpYTW9iV2x1VkdsdFpTa3BMRnh1SUNBZ0lHZGxkRWh2ZFhKektHMXBibFJwYldVcExGeHVJQ0FwTzF4dUlDQmpiMjV6ZENCdFlYZ2dQU0J6WlhSSWIzVnljeWhjYmlBZ0lDQnpaWFJOYVc1MWRHVnpLR0poYzJVc0lHZGxkRTFwYm5WMFpYTW9iV0Y0VkdsdFpTa3BMRnh1SUNBZ0lHZGxkRWh2ZFhKektHMWhlRlJwYldVcExGeHVJQ0FwTzF4dVhHNGdJR3hsZENCMllXeHBaRHRjYmlBZ2RISjVJSHRjYmlBZ0lDQjJZV3hwWkNBOUlDRnBjMWRwZEdocGJrbHVkR1Z5ZG1Gc0tHSmhjMlZVYVcxbExDQjdJSE4wWVhKME9pQnRhVzRzSUdWdVpEb2diV0Y0SUgwcE8xeHVJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNCMllXeHBaQ0E5SUdaaGJITmxPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQjJZV3hwWkR0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRzF2Ym5Sb1JHbHpZV0pzWldSQ1pXWnZjbVVvWkdGNUxDQjdJRzFwYmtSaGRHVXNJR2x1WTJ4MVpHVkVZWFJsY3lCOUlEMGdlMzBwSUh0Y2JpQWdZMjl1YzNRZ2NISmxkbWx2ZFhOTmIyNTBhQ0E5SUhOMVlrMXZiblJvY3loa1lYa3NJREVwTzF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUNodGFXNUVZWFJsSUNZbUlHUnBabVpsY21WdVkyVkpia05oYkdWdVpHRnlUVzl1ZEdoektHMXBia1JoZEdVc0lIQnlaWFpwYjNWelRXOXVkR2dwSUQ0Z01Da2dmSHhjYmlBZ0lDQW9hVzVqYkhWa1pVUmhkR1Z6SUNZbVhHNGdJQ0FnSUNCcGJtTnNkV1JsUkdGMFpYTXVaWFpsY25rb1hHNGdJQ0FnSUNBZ0lDaHBibU5zZFdSbFJHRjBaU2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQmthV1ptWlhKbGJtTmxTVzVEWVd4bGJtUmhjazF2Ym5Sb2N5aHBibU5zZFdSbFJHRjBaU3dnY0hKbGRtbHZkWE5OYjI1MGFDa2dQaUF3TEZ4dUlDQWdJQ0FnS1NrZ2ZIeGNiaUFnSUNCbVlXeHpaVnh1SUNBcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYlc5dWRHaEVhWE5oWW14bFpFRm1kR1Z5S0dSaGVTd2dleUJ0WVhoRVlYUmxMQ0JwYm1Oc2RXUmxSR0YwWlhNZ2ZTQTlJSHQ5S1NCN1hHNGdJR052Ym5OMElHNWxlSFJOYjI1MGFDQTlJR0ZrWkUxdmJuUm9jeWhrWVhrc0lERXBPMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ2h0WVhoRVlYUmxJQ1ltSUdScFptWmxjbVZ1WTJWSmJrTmhiR1Z1WkdGeVRXOXVkR2h6S0c1bGVIUk5iMjUwYUN3Z2JXRjRSR0YwWlNrZ1BpQXdLU0I4ZkZ4dUlDQWdJQ2hwYm1Oc2RXUmxSR0YwWlhNZ0ppWmNiaUFnSUNBZ0lHbHVZMngxWkdWRVlYUmxjeTVsZG1WeWVTaGNiaUFnSUNBZ0lDQWdLR2x1WTJ4MVpHVkVZWFJsS1NBOVBpQmthV1ptWlhKbGJtTmxTVzVEWVd4bGJtUmhjazF2Ym5Sb2N5aHVaWGgwVFc5dWRHZ3NJR2x1WTJ4MVpHVkVZWFJsS1NBK0lEQXNYRzRnSUNBZ0lDQXBLU0I4ZkZ4dUlDQWdJR1poYkhObFhHNGdJQ2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnhkV0Z5ZEdWeVJHbHpZV0pzWldSQ1pXWnZjbVVvWkdGMFpTd2dleUJ0YVc1RVlYUmxMQ0JwYm1Oc2RXUmxSR0YwWlhNZ2ZTQTlJSHQ5S1NCN1hHNGdJR052Ym5OMElHWnBjbk4wUkdGMFpVOW1XV1ZoY2lBOUlITjBZWEowVDJaWlpXRnlLR1JoZEdVcE8xeHVJQ0JqYjI1emRDQndjbVYyYVc5MWMxRjFZWEowWlhJZ1BTQnpkV0pSZFdGeWRHVnljeWhtYVhKemRFUmhkR1ZQWmxsbFlYSXNJREVwTzF4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ0tHMXBia1JoZEdVZ0ppWWdaR2xtWm1WeVpXNWpaVWx1UTJGc1pXNWtZWEpSZFdGeWRHVnljeWh0YVc1RVlYUmxMQ0J3Y21WMmFXOTFjMUYxWVhKMFpYSXBJRDRnTUNrZ2ZIeGNiaUFnSUNBb2FXNWpiSFZrWlVSaGRHVnpJQ1ltWEc0Z0lDQWdJQ0JwYm1Oc2RXUmxSR0YwWlhNdVpYWmxjbmtvWEc0Z0lDQWdJQ0FnSUNocGJtTnNkV1JsUkdGMFpTa2dQVDVjYmlBZ0lDQWdJQ0FnSUNCa2FXWm1aWEpsYm1ObFNXNURZV3hsYm1SaGNsRjFZWEowWlhKektHbHVZMngxWkdWRVlYUmxMQ0J3Y21WMmFXOTFjMUYxWVhKMFpYSXBJRDRnTUN4Y2JpQWdJQ0FnSUNrcElIeDhYRzRnSUNBZ1ptRnNjMlZjYmlBZ0tUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhGMVlYSjBaWEpFYVhOaFlteGxaRUZtZEdWeUtHUmhkR1VzSUhzZ2JXRjRSR0YwWlN3Z2FXNWpiSFZrWlVSaGRHVnpJSDBnUFNCN2ZTa2dlMXh1SUNCamIyNXpkQ0JzWVhOMFJHRjBaVTltV1dWaGNpQTlJR1Z1WkU5bVdXVmhjaWhrWVhSbEtUdGNiaUFnWTI5dWMzUWdibVY0ZEZGMVlYSjBaWElnUFNCaFpHUlJkV0Z5ZEdWeWN5aHNZWE4wUkdGMFpVOW1XV1ZoY2l3Z01TazdYRzVjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FvYldGNFJHRjBaU0FtSmlCa2FXWm1aWEpsYm1ObFNXNURZV3hsYm1SaGNsRjFZWEowWlhKektHNWxlSFJSZFdGeWRHVnlMQ0J0WVhoRVlYUmxLU0ErSURBcElIeDhYRzRnSUNBZ0tHbHVZMngxWkdWRVlYUmxjeUFtSmx4dUlDQWdJQ0FnYVc1amJIVmtaVVJoZEdWekxtVjJaWEo1S0Z4dUlDQWdJQ0FnSUNBb2FXNWpiSFZrWlVSaGRHVXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ1pHbG1abVZ5Wlc1alpVbHVRMkZzWlc1a1lYSlJkV0Z5ZEdWeWN5aHVaWGgwVVhWaGNuUmxjaXdnYVc1amJIVmtaVVJoZEdVcElENGdNQ3hjYmlBZ0lDQWdJQ2twSUh4OFhHNGdJQ0FnWm1Gc2MyVmNiaUFnS1R0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSGxsWVhKRWFYTmhZbXhsWkVKbFptOXlaU2hrWVhrc0lIc2diV2x1UkdGMFpTd2dhVzVqYkhWa1pVUmhkR1Z6SUgwZ1BTQjdmU2tnZTF4dUlDQmpiMjV6ZENCd2NtVjJhVzkxYzFsbFlYSWdQU0J6ZFdKWlpXRnljeWhrWVhrc0lERXBPMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ2h0YVc1RVlYUmxJQ1ltSUdScFptWmxjbVZ1WTJWSmJrTmhiR1Z1WkdGeVdXVmhjbk1vYldsdVJHRjBaU3dnY0hKbGRtbHZkWE5aWldGeUtTQStJREFwSUh4OFhHNGdJQ0FnS0dsdVkyeDFaR1ZFWVhSbGN5QW1KbHh1SUNBZ0lDQWdhVzVqYkhWa1pVUmhkR1Z6TG1WMlpYSjVLRnh1SUNBZ0lDQWdJQ0FvYVc1amJIVmtaVVJoZEdVcElEMCtYRzRnSUNBZ0lDQWdJQ0FnWkdsbVptVnlaVzVqWlVsdVEyRnNaVzVrWVhKWlpXRnljeWhwYm1Oc2RXUmxSR0YwWlN3Z2NISmxkbWx2ZFhOWlpXRnlLU0ErSURBc1hHNGdJQ0FnSUNBcEtTQjhmRnh1SUNBZ0lHWmhiSE5sWEc0Z0lDazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCNVpXRnljMFJwYzJGaWJHVmtRbVZtYjNKbEtGeHVJQ0JrWVhrc1hHNGdJSHNnYldsdVJHRjBaU3dnZVdWaGNrbDBaVzFPZFcxaVpYSWdQU0JFUlVaQlZVeFVYMWxGUVZKZlNWUkZUVjlPVlUxQ1JWSWdmU0E5SUh0OUxGeHVLU0I3WEc0Z0lHTnZibk4wSUhCeVpYWnBiM1Z6V1dWaGNpQTlJR2RsZEZOMFlYSjBUMlpaWldGeUtITjFZbGxsWVhKektHUmhlU3dnZVdWaGNrbDBaVzFPZFcxaVpYSXBLVHRjYmlBZ1kyOXVjM1FnZXlCbGJtUlFaWEpwYjJRZ2ZTQTlJR2RsZEZsbFlYSnpVR1Z5YVc5a0tIQnlaWFpwYjNWeldXVmhjaXdnZVdWaGNrbDBaVzFPZFcxaVpYSXBPMXh1SUNCamIyNXpkQ0J0YVc1RVlYUmxXV1ZoY2lBOUlHMXBia1JoZEdVZ0ppWWdaMlYwV1dWaGNpaHRhVzVFWVhSbEtUdGNiaUFnY21WMGRYSnVJQ2h0YVc1RVlYUmxXV1ZoY2lBbUppQnRhVzVFWVhSbFdXVmhjaUErSUdWdVpGQmxjbWx2WkNrZ2ZId2dabUZzYzJVN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUI1WldGeVJHbHpZV0pzWldSQlpuUmxjaWhrWVhrc0lIc2diV0Y0UkdGMFpTd2dhVzVqYkhWa1pVUmhkR1Z6SUgwZ1BTQjdmU2tnZTF4dUlDQmpiMjV6ZENCdVpYaDBXV1ZoY2lBOUlHRmtaRmxsWVhKektHUmhlU3dnTVNrN1hHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ0tHMWhlRVJoZEdVZ0ppWWdaR2xtWm1WeVpXNWpaVWx1UTJGc1pXNWtZWEpaWldGeWN5aHVaWGgwV1dWaGNpd2diV0Y0UkdGMFpTa2dQaUF3S1NCOGZGeHVJQ0FnSUNocGJtTnNkV1JsUkdGMFpYTWdKaVpjYmlBZ0lDQWdJR2x1WTJ4MVpHVkVZWFJsY3k1bGRtVnllU2hjYmlBZ0lDQWdJQ0FnS0dsdVkyeDFaR1ZFWVhSbEtTQTlQaUJrYVdabVpYSmxibU5sU1c1RFlXeGxibVJoY2xsbFlYSnpLRzVsZUhSWlpXRnlMQ0JwYm1Oc2RXUmxSR0YwWlNrZ1BpQXdMRnh1SUNBZ0lDQWdLU2tnZkh4Y2JpQWdJQ0JtWVd4elpWeHVJQ0FwTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdlV1ZoY25ORWFYTmhZbXhsWkVGbWRHVnlLRnh1SUNCa1lYa3NYRzRnSUhzZ2JXRjRSR0YwWlN3Z2VXVmhja2wwWlcxT2RXMWlaWElnUFNCRVJVWkJWVXhVWDFsRlFWSmZTVlJGVFY5T1ZVMUNSVklnZlNBOUlIdDlMRnh1S1NCN1hHNGdJR052Ym5OMElHNWxlSFJaWldGeUlEMGdZV1JrV1dWaGNuTW9aR0Y1TENCNVpXRnlTWFJsYlU1MWJXSmxjaWs3WEc0Z0lHTnZibk4wSUhzZ2MzUmhjblJRWlhKcGIyUWdmU0E5SUdkbGRGbGxZWEp6VUdWeWFXOWtLRzVsZUhSWlpXRnlMQ0I1WldGeVNYUmxiVTUxYldKbGNpazdYRzRnSUdOdmJuTjBJRzFoZUVSaGRHVlpaV0Z5SUQwZ2JXRjRSR0YwWlNBbUppQm5aWFJaWldGeUtHMWhlRVJoZEdVcE8xeHVJQ0J5WlhSMWNtNGdLRzFoZUVSaGRHVlpaV0Z5SUNZbUlHMWhlRVJoZEdWWlpXRnlJRHdnYzNSaGNuUlFaWEpwYjJRcElIeDhJR1poYkhObE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFJXWm1aV04wYVhabFRXbHVSR0YwWlNoN0lHMXBia1JoZEdVc0lHbHVZMngxWkdWRVlYUmxjeUI5S1NCN1hHNGdJR2xtSUNocGJtTnNkV1JsUkdGMFpYTWdKaVlnYldsdVJHRjBaU2tnZTF4dUlDQWdJR3hsZENCdGFXNUVZWFJsY3lBOUlHbHVZMngxWkdWRVlYUmxjeTVtYVd4MFpYSW9YRzRnSUNBZ0lDQW9hVzVqYkhWa1pVUmhkR1VwSUQwK0lHUnBabVpsY21WdVkyVkpia05oYkdWdVpHRnlSR0Y1Y3locGJtTnNkV1JsUkdGMFpTd2diV2x1UkdGMFpTa2dQajBnTUN4Y2JpQWdJQ0FwTzF4dUlDQWdJSEpsZEhWeWJpQnRhVzRvYldsdVJHRjBaWE1wTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLR2x1WTJ4MVpHVkVZWFJsY3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ0YVc0b2FXNWpiSFZrWlVSaGRHVnpLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiV2x1UkdGMFpUdGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwUldabVpXTjBhWFpsVFdGNFJHRjBaU2g3SUcxaGVFUmhkR1VzSUdsdVkyeDFaR1ZFWVhSbGN5QjlLU0I3WEc0Z0lHbG1JQ2hwYm1Oc2RXUmxSR0YwWlhNZ0ppWWdiV0Y0UkdGMFpTa2dlMXh1SUNBZ0lHeGxkQ0J0WVhoRVlYUmxjeUE5SUdsdVkyeDFaR1ZFWVhSbGN5NW1hV3gwWlhJb1hHNGdJQ0FnSUNBb2FXNWpiSFZrWlVSaGRHVXBJRDArSUdScFptWmxjbVZ1WTJWSmJrTmhiR1Z1WkdGeVJHRjVjeWhwYm1Oc2RXUmxSR0YwWlN3Z2JXRjRSR0YwWlNrZ1BEMGdNQ3hjYmlBZ0lDQXBPMXh1SUNBZ0lISmxkSFZ5YmlCdFlYZ29iV0Y0UkdGMFpYTXBPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHbHVZMngxWkdWRVlYUmxjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQnRZWGdvYVc1amJIVmtaVVJoZEdWektUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z2JXRjRSR0YwWlR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBTR2xuYUhSTWFXZG9kRVJoZVhOTllYQW9YRzRnSUdocFoyaHNhV2RvZEVSaGRHVnpJRDBnVzEwc1hHNGdJR1JsWm1GMWJIUkRiR0Z6YzA1aGJXVWdQU0JjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDJSaGVTMHRhR2xuYUd4cFoyaDBaV1JjSWl4Y2Jpa2dlMXh1SUNCamIyNXpkQ0JrWVhSbFEyeGhjM05sY3lBOUlHNWxkeUJOWVhBb0tUdGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR3hsYmlBOUlHaHBaMmhzYVdkb2RFUmhkR1Z6TG14bGJtZDBhRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ1kyOXVjM1FnYjJKcUlEMGdhR2xuYUd4cFoyaDBSR0YwWlhOYmFWMDdYRzRnSUNBZ2FXWWdLR2x6UkdGMFpTaHZZbW9wS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JyWlhrZ1BTQm1iM0p0WVhSRVlYUmxLRzlpYWl3Z1hDSk5UUzVrWkM1NWVYbDVYQ0lwTzF4dUlDQWdJQ0FnWTI5dWMzUWdZMnhoYzNOT1lXMWxjMEZ5Y2lBOUlHUmhkR1ZEYkdGemMyVnpMbWRsZENoclpYa3BJSHg4SUZ0ZE8xeHVJQ0FnSUNBZ2FXWWdLQ0ZqYkdGemMwNWhiV1Z6UVhKeUxtbHVZMngxWkdWektHUmxabUYxYkhSRGJHRnpjMDVoYldVcEtTQjdYRzRnSUNBZ0lDQWdJR05zWVhOelRtRnRaWE5CY25JdWNIVnphQ2hrWldaaGRXeDBRMnhoYzNOT1lXMWxLVHRjYmlBZ0lDQWdJQ0FnWkdGMFpVTnNZWE56WlhNdWMyVjBLR3RsZVN3Z1kyeGhjM05PWVcxbGMwRnljaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdiMkpxSUQwOVBTQmNJbTlpYW1WamRGd2lLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQnJaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9iMkpxS1R0Y2JpQWdJQ0FnSUdOdmJuTjBJR05zWVhOelRtRnRaU0E5SUd0bGVYTmJNRjA3WEc0Z0lDQWdJQ0JqYjI1emRDQmhjbkpQWmtSaGRHVnpJRDBnYjJKcVcydGxlWE5iTUYxZE8xeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmpiR0Z6YzA1aGJXVWdQVDA5SUZ3aWMzUnlhVzVuWENJZ0ppWWdZWEp5VDJaRVlYUmxjeTVqYjI1emRISjFZM1J2Y2lBOVBUMGdRWEp5WVhrcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdheUE5SURBc0lHeGxiaUE5SUdGeWNrOW1SR0YwWlhNdWJHVnVaM1JvT3lCcklEd2diR1Z1T3lCckt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JyWlhrZ1BTQm1iM0p0WVhSRVlYUmxLR0Z5Y2s5bVJHRjBaWE5iYTEwc0lGd2lUVTB1WkdRdWVYbDVlVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamJHRnpjMDVoYldWelFYSnlJRDBnWkdGMFpVTnNZWE56WlhNdVoyVjBLR3RsZVNrZ2ZId2dXMTA3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqYkdGemMwNWhiV1Z6UVhKeUxtbHVZMngxWkdWektHTnNZWE56VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpYTkJjbkl1Y0hWemFDaGpiR0Z6YzA1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBaVU5zWVhOelpYTXVjMlYwS0d0bGVTd2dZMnhoYzNOT1lXMWxjMEZ5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmtZWFJsUTJ4aGMzTmxjenRjYm4xY2JseHVMeW9xWEc0Z0tpQkRiMjF3WVhKbElIUm9aU0IwZDI4Z1lYSnlZWGx6WEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCaGNuSmhlVEZjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdGeWNtRjVNbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwSnZiMnhsWVc1OUlIUnlkV1VzSUdsbUlIUm9aU0J3WVhOelpXUWdZWEp5WVhrZ1lYSmxJR1Z4ZFdGc0xDQm1ZV3h6WlNCdmRHaGxjbmRwYzJWY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR0Z5Y21GNWMwRnlaVVZ4ZFdGc0tHRnljbUY1TVN3Z1lYSnlZWGt5S1NCN1hHNGdJR2xtSUNoaGNuSmhlVEV1YkdWdVozUm9JQ0U5UFNCaGNuSmhlVEl1YkdWdVozUm9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdGeWNtRjVNUzVsZG1WeWVTZ29kbUZzZFdVc0lHbHVaR1Y0S1NBOVBpQjJZV3gxWlNBOVBUMGdZWEp5WVhreVcybHVaR1Y0WFNrN1hHNTlYRzVjYmk4cUtseHVJQ29nUVhOemFXZHVJSFJvWlNCamRYTjBiMjBnWTJ4aGMzTWdkRzhnWldGamFDQmtZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCb2IyeHBaR0Y1UkdGMFpYTWdZWEp5WVhrZ2IyWWdiMkpxWldOMElHTnZiblJoYVc1cGJtY2daR0YwWlNCaGJtUWdibUZ0WlNCdlppQjBhR1VnYUc5c2FXUmhlVnh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdOc1lYTnpibUZ0WlNCMGJ5QmlaU0JoWkdSbFpDNWNiaUFxSUVCeVpYUjFjbTV6SUh0TllYQjlJRTFoY0NCamIyNTBZV2x1YVc1bklHUmhkR1VnWVhNZ2EyVjVJR0Z1WkNCaGNuSmhlU0J2WmlCamJHRnpjMjVoYldVZ1lXNWtJR2h2Ykdsa1lYa2dibUZ0WlNCaGN5QjJZV3gxWlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwU0c5c2FXUmhlWE5OWVhBb1hHNGdJR2h2Ykdsa1lYbEVZWFJsY3lBOUlGdGRMRnh1SUNCa1pXWmhkV3gwUTJ4aGMzTk9ZVzFsSUQwZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOWtZWGt0TFdodmJHbGtZWGx6WENJc1hHNHBJSHRjYmlBZ1kyOXVjM1FnWkdGMFpVTnNZWE56WlhNZ1BTQnVaWGNnVFdGd0tDazdYRzRnSUdodmJHbGtZWGxFWVhSbGN5NW1iM0pGWVdOb0tDaG9iMnhwWkdGNUtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QmtZWFJsT2lCa1lYUmxUMkpxTENCb2IyeHBaR0Y1VG1GdFpTQjlJRDBnYUc5c2FXUmhlVHRjYmlBZ0lDQnBaaUFvSVdselJHRjBaU2hrWVhSbFQySnFLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUd0bGVTQTlJR1p2Y20xaGRFUmhkR1VvWkdGMFpVOWlhaXdnWENKTlRTNWtaQzU1ZVhsNVhDSXBPMXh1SUNBZ0lHTnZibk4wSUdOc1lYTnpUbUZ0WlhOUFltb2dQU0JrWVhSbFEyeGhjM05sY3k1blpYUW9hMlY1S1NCOGZDQjdmVHRjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0JjSW1Oc1lYTnpUbUZ0WlZ3aUlHbHVJR05zWVhOelRtRnRaWE5QWW1vZ0ppWmNiaUFnSUNBZ0lHTnNZWE56VG1GdFpYTlBZbXBiWENKamJHRnpjMDVoYldWY0lsMGdQVDA5SUdSbFptRjFiSFJEYkdGemMwNWhiV1VnSmlaY2JpQWdJQ0FnSUdGeWNtRjVjMEZ5WlVWeGRXRnNLR05zWVhOelRtRnRaWE5QWW1wYlhDSm9iMnhwWkdGNVRtRnRaWE5jSWwwc0lGdG9iMnhwWkdGNVRtRnRaVjBwWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyeGhjM05PWVcxbGMwOWlhbHRjSW1Oc1lYTnpUbUZ0WlZ3aVhTQTlJR1JsWm1GMWJIUkRiR0Z6YzA1aGJXVTdYRzRnSUNBZ1kyOXVjM1FnYUc5c2FXUmhlVTVoYldWQmNuSWdQU0JqYkdGemMwNWhiV1Z6VDJKcVcxd2lhRzlzYVdSaGVVNWhiV1Z6WENKZE8xeHVJQ0FnSUdOc1lYTnpUbUZ0WlhOUFltcGJYQ0pvYjJ4cFpHRjVUbUZ0WlhOY0lsMGdQU0JvYjJ4cFpHRjVUbUZ0WlVGeWNseHVJQ0FnSUNBZ1B5QmJMaTR1YUc5c2FXUmhlVTVoYldWQmNuSXNJR2h2Ykdsa1lYbE9ZVzFsWFZ4dUlDQWdJQ0FnT2lCYmFHOXNhV1JoZVU1aGJXVmRPMXh1SUNBZ0lHUmhkR1ZEYkdGemMyVnpMbk5sZENoclpYa3NJR05zWVhOelRtRnRaWE5QWW1vcE8xeHVJQ0I5S1R0Y2JpQWdjbVYwZFhKdUlHUmhkR1ZEYkdGemMyVnpPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RHbHRaWE5VYjBsdWFtVmpkRUZtZEdWeUtGeHVJQ0J6ZEdGeWRFOW1SR0Y1TEZ4dUlDQmpkWEp5Wlc1MFZHbHRaU3hjYmlBZ1kzVnljbVZ1ZEUxMWJIUnBjR3hwWlhJc1hHNGdJR2x1ZEdWeWRtRnNjeXhjYmlBZ2FXNXFaV04wWldSVWFXMWxjeXhjYmlrZ2UxeHVJQ0JqYjI1emRDQnNJRDBnYVc1cVpXTjBaV1JVYVcxbGN5NXNaVzVuZEdnN1hHNGdJR052Ym5OMElIUnBiV1Z6SUQwZ1cxMDdYRzRnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnYkdWMElHbHVhbVZqZEdWa1ZHbHRaU0E5SUhOMFlYSjBUMlpFWVhrN1hHNGdJQ0FnYVc1cVpXTjBaV1JVYVcxbElEMGdZV1JrU0c5MWNuTW9hVzVxWldOMFpXUlVhVzFsTENCblpYUkliM1Z5Y3locGJtcGxZM1JsWkZScGJXVnpXMmxkS1NrN1hHNGdJQ0FnYVc1cVpXTjBaV1JVYVcxbElEMGdZV1JrVFdsdWRYUmxjeWhwYm1wbFkzUmxaRlJwYldVc0lHZGxkRTFwYm5WMFpYTW9hVzVxWldOMFpXUlVhVzFsYzF0cFhTa3BPMXh1SUNBZ0lHbHVhbVZqZEdWa1ZHbHRaU0E5SUdGa1pGTmxZMjl1WkhNb2FXNXFaV04wWldSVWFXMWxMQ0JuWlhSVFpXTnZibVJ6S0dsdWFtVmpkR1ZrVkdsdFpYTmJhVjBwS1R0Y2JseHVJQ0FnSUdOdmJuTjBJRzVsZUhSVWFXMWxJRDBnWVdSa1RXbHVkWFJsY3loY2JpQWdJQ0FnSUhOMFlYSjBUMlpFWVhrc1hHNGdJQ0FnSUNBb1kzVnljbVZ1ZEUxMWJIUnBjR3hwWlhJZ0t5QXhLU0FxSUdsdWRHVnlkbUZzY3l4Y2JpQWdJQ0FwTzF4dVhHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ2FYTkJablJsY2locGJtcGxZM1JsWkZScGJXVXNJR04xY25KbGJuUlVhVzFsS1NBbUpseHVJQ0FnSUNBZ2FYTkNaV1p2Y21Vb2FXNXFaV04wWldSVWFXMWxMQ0J1WlhoMFZHbHRaU2xjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJSFJwYldWekxuQjFjMmdvYVc1cVpXTjBaV1JVYVcxbGMxdHBYU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFJwYldWek8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWVdSa1dtVnlieWhwS1NCN1hHNGdJSEpsZEhWeWJpQnBJRHdnTVRBZ1B5QmdNQ1I3YVgxZ0lEb2dZQ1I3YVgxZ08xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFdXVmhjbk5RWlhKcGIyUW9YRzRnSUdSaGRHVXNYRzRnSUhsbFlYSkpkR1Z0VG5WdFltVnlJRDBnUkVWR1FWVk1WRjlaUlVGU1gwbFVSVTFmVGxWTlFrVlNMRnh1S1NCN1hHNGdJR052Ym5OMElHVnVaRkJsY21sdlpDQTlJRTFoZEdndVkyVnBiQ2huWlhSWlpXRnlLR1JoZEdVcElDOGdlV1ZoY2tsMFpXMU9kVzFpWlhJcElDb2dlV1ZoY2tsMFpXMU9kVzFpWlhJN1hHNGdJR052Ym5OMElITjBZWEowVUdWeWFXOWtJRDBnWlc1a1VHVnlhVzlrSUMwZ0tIbGxZWEpKZEdWdFRuVnRZbVZ5SUMwZ01TazdYRzRnSUhKbGRIVnliaUI3SUhOMFlYSjBVR1Z5YVc5a0xDQmxibVJRWlhKcGIyUWdmVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRWh2ZFhKelNXNUVZWGtvWkNrZ2UxeHVJQ0JqYjI1emRDQnpkR0Z5ZEU5bVJHRjVJRDBnYm1WM0lFUmhkR1VvWkM1blpYUkdkV3hzV1dWaGNpZ3BMQ0JrTG1kbGRFMXZiblJvS0Nrc0lHUXVaMlYwUkdGMFpTZ3BLVHRjYmlBZ1kyOXVjM1FnYzNSaGNuUlBabFJvWlU1bGVIUkVZWGtnUFNCdVpYY2dSR0YwWlNoY2JpQWdJQ0JrTG1kbGRFWjFiR3haWldGeUtDa3NYRzRnSUNBZ1pDNW5aWFJOYjI1MGFDZ3BMRnh1SUNBZ0lHUXVaMlYwUkdGMFpTZ3BMRnh1SUNBZ0lESTBMRnh1SUNBcE8xeHVYRzRnSUhKbGRIVnliaUJOWVhSb0xuSnZkVzVrS0NncmMzUmhjblJQWmxSb1pVNWxlSFJFWVhrZ0xTQXJjM1JoY25SUFprUmhlU2tnTHlBelh6WXdNRjh3TURBcE8xeHVmVnh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nZEdobElITjBZWEowSUc5bUlIUm9aU0J0YVc1MWRHVWdabTl5SUhSb1pTQm5hWFpsYmlCa1lYUmxYRzRnS2x4dUlDb2dUazlVUlRvZ2RHaHBjeUJtZFc1amRHbHZiaUJwY3lCaElFUlRWQ0JoYm1RZ2RHbHRaWHB2Ym1VdGMyRm1aU0JoYm1Gc2IyY2diMllnWUdSaGRHVXRabTV6TDNOMFlYSjBUMlpOYVc1MWRHVmdYRzRnS2lCa2J5QnViM1FnYldGclpTQmphR0Z1WjJWeklIVnViR1Z6Y3lCNWIzVWdhMjV2ZHlCM2FHRjBJSGx2ZFNkeVpTQmtiMmx1WjF4dUlDcGNiaUFxSUZObFpTQmpiMjF0Wlc1MGN5QnZiaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2U0dGamEyVnlNSGd3TVM5eVpXRmpkQzFrWVhSbGNHbGphMlZ5TDNCMWJHd3ZOREkwTkZ4dUlDb2dabTl5SUcxdmNtVWdaR1YwWVdsc2MxeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1JHRjBaWDBnWkNCa1lYUmxYRzRnS2lCQWNtVjBkWEp1Y3lCN1JHRjBaWDBnYzNSaGNuUWdiMllnZEdobElHMXBiblYwWlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjM1JoY25SUFprMXBiblYwWlNoa0tTQjdYRzRnSUdOdmJuTjBJSE5sWTI5dVpITWdQU0JrTG1kbGRGTmxZMjl1WkhNb0tUdGNiaUFnWTI5dWMzUWdiV2xzYkdselpXTnZibVJ6SUQwZ1pDNW5aWFJOYVd4c2FYTmxZMjl1WkhNb0tUdGNibHh1SUNCeVpYUjFjbTRnZEc5RVlYUmxLR1F1WjJWMFZHbHRaU2dwSUMwZ2MyVmpiMjVrY3lBcUlERXdNREFnTFNCdGFXeHNhWE5sWTI5dVpITXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCMGFHVWdaMmwyWlc0Z1pHRjBaWE1nWVhKbElHbHVJSFJvWlNCellXMWxJRzFwYm5WMFpWeHVJQ3BjYmlBcUlGUm9hWE1nWm5WdVkzUnBiMjRnYVhNZ1lTQkVVMVFnWVc1a0lIUnBiV1Y2YjI1bExYTmhabVVnWVc1aGJHOW5JRzltSUdCa1lYUmxMV1p1Y3k5cGMxTmhiV1ZOYVc1MWRHVmdYRzRnS2x4dUlDb2dRSEJoY21GdElIdEVZWFJsZlNCa01WeHVJQ29nUUhCaGNtRnRJSHRFWVhSbGZTQmtNbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYzFOaGJXVk5hVzUxZEdVb1pERXNJR1F5S1NCN1hHNGdJSEpsZEhWeWJpQnpkR0Z5ZEU5bVRXbHVkWFJsS0dReEtTNW5aWFJVYVcxbEtDa2dQVDA5SUhOMFlYSjBUMlpOYVc1MWRHVW9aRElwTG1kbGRGUnBiV1VvS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJTWlhSMWNtNXpJR0VnWTJ4dmJtVmtJR1JoZEdVZ2QybDBhQ0J0YVdSdWFXZG9kQ0IwYVcxbElDZ3dNRG93TURvd01DbGNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwUmhkR1Y5SUdSaGRHVWdWR2hsSUdSaGRHVWdabTl5SUhkb2FXTm9JRzFwWkc1cFoyaDBJSFJwYldVZ2FYTWdjbVZ4ZFdseVpXUmNiaUFxSUVCd1lYSmhiU0I3UkdGMFpYMGdaR0YwWlZSdlEyOXRjR0Z5WlNCMGFHVWdaR0YwWlNCMGJ5QmpiMjF3WVhKbElIZHBkR2hjYmlBcUlFQnlaWFIxY201eklIdEVZWFJsZlNCQklHNWxkeUJrWVhSbGRHbHRaU0J2WW1wbFkzUWdjbVZ3Y21WelpXNTBhVzVuSUhSb1pTQnBibkIxZENCa1lYUmxJSGRwZEdnZ2JXbGtibWxuYUhRZ2RHbHRaVnh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBUV2xrYm1sbmFIUkVZWFJsS0dSaGRHVXBJSHRjYmlBZ2FXWWdLQ0ZwYzBSaGRHVW9aR0YwWlNrcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKSmJuWmhiR2xrSUdSaGRHVmNJaWs3WEc0Z0lIMWNibHh1SUNCamIyNXpkQ0JrWVhSbFYybDBhRzkxZEZScGJXVWdQU0J1WlhjZ1JHRjBaU2hrWVhSbEtUdGNiaUFnWkdGMFpWZHBkR2h2ZFhSVWFXMWxMbk5sZEVodmRYSnpLREFzSURBc0lEQXNJREFwTzF4dUlDQnlaWFIxY200Z1pHRjBaVmRwZEdodmRYUlVhVzFsTzF4dWZWeHVYRzR2S2lwY2JpQXFJRWx6SUhSb1pTQm1hWEp6ZENCa1lYUmxJR0psWm05eVpTQjBhR1VnYzJWamIyNWtJRzl1WlQ5Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBSaGRHVjlJR1JoZEdVZ1ZHaGxJR1JoZEdVZ2RHaGhkQ0J6YUc5MWJHUWdZbVVnWW1WbWIzSmxJSFJvWlNCdmRHaGxjaUJ2Ym1VZ2RHOGdjbVYwZFhKdUlIUnlkV1ZjYmlBcUlFQndZWEpoYlNCN1JHRjBaWDBnWkdGMFpWUnZRMjl0Y0dGeVpTQlVhR1VnWkdGMFpTQjBieUJqYjIxd1lYSmxJSGRwZEdoY2JpQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmU0JVYUdVZ1ptbHljM1FnWkdGMFpTQnBjeUJpWldadmNtVWdkR2hsSUhObFkyOXVaQ0JrWVhSbFhHNGdLbHh1SUNvZ1RtOTBaVHBjYmlBcUlDQlVhR2x6SUdaMWJtTjBhVzl1SUdOdmJuTnBaR1Z5Y3lCMGFHVWdiV2xrTFc1cFoyaDBJRzltSUhSb1pTQm5hWFpsYmlCa1lYUmxjeUJtYjNJZ1kyOXRjR0Z5YVhOdmJpNWNiaUFxSUNCSmRDQmxkbUZzZFdGMFpYTWdkMmhsZEdobGNpQmtZWFJsSUdseklHSmxabTl5WlNCa1lYUmxWRzlEYjIxd1lYSmxJR0poYzJWa0lHOXVJSFJvWldseUlHMXBaQzF1YVdkb2RDQjBhVzFsYzNSaGJYQnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FYTkVZWFJsUW1WbWIzSmxLR1JoZEdVc0lHUmhkR1ZVYjBOdmJYQmhjbVVwSUh0Y2JpQWdhV1lnS0NGcGMwUmhkR1VvWkdGMFpTa2dmSHdnSVdselJHRjBaU2hrWVhSbFZHOURiMjF3WVhKbEtTa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrbHVkbUZzYVdRZ1pHRjBaU0J5WldObGFYWmxaRndpS1R0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wSUcxcFpHNXBaMmgwUkdGMFpTQTlJR2RsZEUxcFpHNXBaMmgwUkdGMFpTaGtZWFJsS1R0Y2JpQWdZMjl1YzNRZ2JXbGtibWxuYUhSRVlYUmxWRzlEYjIxd1lYSmxJRDBnWjJWMFRXbGtibWxuYUhSRVlYUmxLR1JoZEdWVWIwTnZiWEJoY21VcE8xeHVYRzRnSUhKbGRIVnliaUJwYzBKbFptOXlaU2h0YVdSdWFXZG9kRVJoZEdVc0lHMXBaRzVwWjJoMFJHRjBaVlJ2UTI5dGNHRnlaU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMU53WVdObFMyVjVSRzkzYmlobGRtVnVkQ2tnZTF4dUlDQmpiMjV6ZENCVFVFRkRSVjlMUlZrZ1BTQmNJaUJjSWp0Y2JpQWdjbVYwZFhKdUlHVjJaVzUwTG10bGVTQTlQVDBnVTFCQlEwVmZTMFZaTzF4dWZWeHVJaXdpYVcxd2IzSjBJRkpsWVdOMExDQjdJR055WldGMFpWSmxaaUI5SUdaeWIyMGdYQ0p5WldGamRGd2lPMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElGd2ljSEp2Y0MxMGVYQmxjMXdpTzF4dWFXMXdiM0owSUhzZ1kyeHplQ0I5SUdaeWIyMGdYQ0pqYkhONFhDSTdYRzVwYlhCdmNuUWdleUJuWlhSWlpXRnlJSDBnWm5KdmJTQmNJaTR2WkdGMFpWOTFkR2xzYzF3aU8xeHVYRzVtZFc1amRHbHZiaUJuWlc1bGNtRjBaVmxsWVhKektIbGxZWElzSUc1dlQyWlpaV0Z5TENCdGFXNUVZWFJsTENCdFlYaEVZWFJsS1NCN1hHNGdJR052Ym5OMElHeHBjM1FnUFNCYlhUdGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENBeUlDb2dibTlQWmxsbFlYSWdLeUF4T3lCcEt5c3BJSHRjYmlBZ0lDQmpiMjV6ZENCdVpYZFpaV0Z5SUQwZ2VXVmhjaUFySUc1dlQyWlpaV0Z5SUMwZ2FUdGNiaUFnSUNCc1pYUWdhWE5KYmxKaGJtZGxJRDBnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2h0YVc1RVlYUmxLU0I3WEc0Z0lDQWdJQ0JwYzBsdVVtRnVaMlVnUFNCblpYUlpaV0Z5S0cxcGJrUmhkR1VwSUR3OUlHNWxkMWxsWVhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHMWhlRVJoZEdVZ0ppWWdhWE5KYmxKaGJtZGxLU0I3WEc0Z0lDQWdJQ0JwYzBsdVVtRnVaMlVnUFNCblpYUlpaV0Z5S0cxaGVFUmhkR1VwSUQ0OUlHNWxkMWxsWVhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHbHpTVzVTWVc1blpTa2dlMXh1SUNBZ0lDQWdiR2x6ZEM1d2RYTm9LRzVsZDFsbFlYSXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnNhWE4wTzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCWlpXRnlSSEp2Y0dSdmQyNVBjSFJwYjI1eklHVjRkR1Z1WkhNZ1VtVmhZM1F1UTI5dGNHOXVaVzUwSUh0Y2JpQWdjM1JoZEdsaklIQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQnRhVzVFWVhSbE9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNCdFlYaEVZWFJsT2lCUWNtOXdWSGx3WlhNdWFXNXpkR0Z1WTJWUFppaEVZWFJsS1N4Y2JpQWdJQ0J2YmtOaGJtTmxiRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQnZia05vWVc1blpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCelkzSnZiR3hoWW14bFdXVmhja1J5YjNCa2IzZHVPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCNVpXRnlPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdlV1ZoY2tSeWIzQmtiM2R1U1hSbGJVNTFiV0psY2pvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2l4Y2JpQWdmVHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3Y205d2N5a2dlMXh1SUNBZ0lITjFjR1Z5S0hCeWIzQnpLVHRjYmlBZ0lDQmpiMjV6ZENCN0lIbGxZWEpFY205d1pHOTNia2wwWlcxT2RXMWlaWElzSUhOamNtOXNiR0ZpYkdWWlpXRnlSSEp2Y0dSdmQyNGdmU0E5SUhCeWIzQnpPMXh1SUNBZ0lHTnZibk4wSUc1dlQyWlpaV0Z5SUQxY2JpQWdJQ0FnSUhsbFlYSkVjbTl3Wkc5M2JrbDBaVzFPZFcxaVpYSWdmSHdnS0hOamNtOXNiR0ZpYkdWWlpXRnlSSEp2Y0dSdmQyNGdQeUF4TUNBNklEVXBPMXh1WEc0Z0lDQWdkR2hwY3k1emRHRjBaU0E5SUh0Y2JpQWdJQ0FnSUhsbFlYSnpUR2x6ZERvZ1oyVnVaWEpoZEdWWlpXRnljeWhjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1NVpXRnlMRnh1SUNBZ0lDQWdJQ0J1YjA5bVdXVmhjaXhjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dGFXNUVZWFJsTEZ4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtMWhlRVJoZEdVc1hHNGdJQ0FnSUNBcExGeHVJQ0FnSUgwN1hHNGdJQ0FnZEdocGN5NWtjbTl3Wkc5M2JsSmxaaUE5SUdOeVpXRjBaVkpsWmlncE8xeHVJQ0I5WEc1Y2JpQWdZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ1pISnZjR1J2ZDI1RGRYSnlaVzUwSUQwZ2RHaHBjeTVrY205d1pHOTNibEpsWmk1amRYSnlaVzUwTzF4dVhHNGdJQ0FnYVdZZ0tHUnliM0JrYjNkdVEzVnljbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0x5OGdSMlYwSUdGeWNtRjVJR1p5YjIwZ1NGUk5URU52Ykd4bFkzUnBiMjVjYmlBZ0lDQWdJR052Ym5OMElHUnliM0JrYjNkdVEzVnljbVZ1ZEVOb2FXeGtjbVZ1SUQwZ1pISnZjR1J2ZDI1RGRYSnlaVzUwTG1Ob2FXeGtjbVZ1WEc0Z0lDQWdJQ0FnSUQ4Z1FYSnlZWGt1Wm5KdmJTaGtjbTl3Wkc5M2JrTjFjbkpsYm5RdVkyaHBiR1J5Wlc0cFhHNGdJQ0FnSUNBZ0lEb2diblZzYkR0Y2JpQWdJQ0FnSUdOdmJuTjBJSE5sYkdWamRHVmtXV1ZoY2s5d2RHbHZia1ZzSUQwZ1pISnZjR1J2ZDI1RGRYSnlaVzUwUTJocGJHUnlaVzVjYmlBZ0lDQWdJQ0FnUHlCa2NtOXdaRzkzYmtOMWNuSmxiblJEYUdsc1pISmxiaTVtYVc1a0tDaGphR2xzWkVWc0tTQTlQaUJqYUdsc1pFVnNMbUZ5YVdGVFpXeGxZM1JsWkNsY2JpQWdJQ0FnSUNBZ09pQnVkV3hzTzF4dVhHNGdJQ0FnSUNCa2NtOXdaRzkzYmtOMWNuSmxiblF1YzJOeWIyeHNWRzl3SUQwZ2MyVnNaV04wWldSWlpXRnlUM0IwYVc5dVJXeGNiaUFnSUNBZ0lDQWdQeUJ6Wld4bFkzUmxaRmxsWVhKUGNIUnBiMjVGYkM1dlptWnpaWFJVYjNBZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2h6Wld4bFkzUmxaRmxsWVhKUGNIUnBiMjVGYkM1amJHbGxiblJJWldsbmFIUWdMU0JrY205d1pHOTNia04xY25KbGJuUXVZMnhwWlc1MFNHVnBaMmgwS1NBdklESmNiaUFnSUNBZ0lDQWdPaUFvWkhKdmNHUnZkMjVEZFhKeVpXNTBMbk5qY205c2JFaGxhV2RvZENBdElHUnliM0JrYjNkdVEzVnljbVZ1ZEM1amJHbGxiblJJWldsbmFIUXBJQzhnTWp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpXNWtaWEpQY0hScGIyNXpJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhObGJHVmpkR1ZrV1dWaGNpQTlJSFJvYVhNdWNISnZjSE11ZVdWaGNqdGNiaUFnSUNCamIyNXpkQ0J2Y0hScGIyNXpJRDBnZEdocGN5NXpkR0YwWlM1NVpXRnljMHhwYzNRdWJXRndLQ2g1WldGeUtTQTlQaUFvWEc0Z0lDQWdJQ0E4WkdsMlhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdYRzRnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBaV1JaWldGeUlEMDlQU0I1WldGeVhHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmVXVmhjaTF2Y0hScGIyNGdjbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZlV1ZoY2kxdmNIUnBiMjR0TFhObGJHVmpkR1ZrWDNsbFlYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ09pQmNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYM2xsWVhJdGIzQjBhVzl1WENKY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnJaWGs5ZTNsbFlYSjlYRzRnSUNBZ0lDQWdJRzl1UTJ4cFkyczllM1JvYVhNdWIyNURhR0Z1WjJVdVltbHVaQ2gwYUdsekxDQjVaV0Z5S1gxY2JpQWdJQ0FnSUNBZ1lYSnBZUzF6Wld4bFkzUmxaRDE3YzJWc1pXTjBaV1JaWldGeUlEMDlQU0I1WldGeUlEOGdYQ0owY25WbFhDSWdPaUIxYm1SbFptbHVaV1I5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUh0elpXeGxZM1JsWkZsbFlYSWdQVDA5SUhsbFlYSWdQeUFvWEc0Z0lDQWdJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTk9ZVzFsUFZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmVXVmhjaTF2Y0hScGIyNHRMWE5sYkdWamRHVmtYQ0krNHB5VFBDOXpjR0Z1UGx4dUlDQWdJQ0FnSUNBcElEb2dLRnh1SUNBZ0lDQWdJQ0FnSUZ3aVhDSmNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnZTNsbFlYSjlYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FwS1R0Y2JseHVJQ0FnSUdOdmJuTjBJRzFwYmxsbFlYSWdQU0IwYUdsekxuQnliM0J6TG0xcGJrUmhkR1VnUHlCblpYUlpaV0Z5S0hSb2FYTXVjSEp2Y0hNdWJXbHVSR0YwWlNrZ09pQnVkV3hzTzF4dUlDQWdJR052Ym5OMElHMWhlRmxsWVhJZ1BTQjBhR2x6TG5CeWIzQnpMbTFoZUVSaGRHVWdQeUJuWlhSWlpXRnlLSFJvYVhNdWNISnZjSE11YldGNFJHRjBaU2tnT2lCdWRXeHNPMXh1WEc0Z0lDQWdhV1lnS0NGdFlYaFpaV0Z5SUh4OElDRjBhR2x6TG5OMFlYUmxMbmxsWVhKelRHbHpkQzVtYVc1a0tDaDVaV0Z5S1NBOVBpQjVaV0Z5SUQwOVBTQnRZWGhaWldGeUtTa2dlMXh1SUNBZ0lDQWdiM0IwYVc5dWN5NTFibk5vYVdaMEtGeHVJQ0FnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZlV1ZoY2kxdmNIUnBiMjVjSWx4dUlDQWdJQ0FnSUNBZ0lHdGxlVDE3WENKMWNHTnZiV2x1WjF3aWZWeHVJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczllM1JvYVhNdWFXNWpjbVZ0Wlc1MFdXVmhjbk45WEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQThZU0JqYkdGemMwNWhiV1U5WENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5dVlYWnBaMkYwYVc5dUlISmxZV04wTFdSaGRHVndhV05yWlhKZlgyNWhkbWxuWVhScGIyNHRMWGxsWVhKeklISmxZV04wTFdSaGRHVndhV05yWlhKZlgyNWhkbWxuWVhScGIyNHRMWGxsWVhKekxYVndZMjl0YVc1blhDSWdMejVjYmlBZ0lDQWdJQ0FnUEM5a2FYWStMRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSVcxcGJsbGxZWElnZkh3Z0lYUm9hWE11YzNSaGRHVXVlV1ZoY25OTWFYTjBMbVpwYm1Rb0tIbGxZWElwSUQwK0lIbGxZWElnUFQwOUlHMXBibGxsWVhJcEtTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxuQjFjMmdvWEc0Z0lDQWdJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5NVpXRnlMVzl3ZEdsdmJsd2lYRzRnSUNBZ0lDQWdJQ0FnYTJWNVBYdGNJbkJ5WlhacGIzVnpYQ0o5WEc0Z0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN2RHaHBjeTVrWldOeVpXMWxiblJaWldGeWMzMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUR4aElHTnNZWE56VG1GdFpUMWNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMjVoZG1sbllYUnBiMjRnY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYm1GMmFXZGhkR2x2YmkwdGVXVmhjbk1nY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYm1GMmFXZGhkR2x2YmkwdGVXVmhjbk10Y0hKbGRtbHZkWE5jSWlBdlBseHVJQ0FnSUNBZ0lDQThMMlJwZGo0c1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ2Y0hScGIyNXpPMXh1SUNCOU8xeHVYRzRnSUc5dVEyaGhibWRsSUQwZ0tIbGxZWElwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbkJ5YjNCekxtOXVRMmhoYm1kbEtIbGxZWElwTzF4dUlDQjlPMXh1WEc0Z0lHaGhibVJzWlVOc2FXTnJUM1YwYzJsa1pTQTlJQ2dwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbkJ5YjNCekxtOXVRMkZ1WTJWc0tDazdYRzRnSUgwN1hHNWNiaUFnYzJocFpuUlpaV0Z5Y3lBOUlDaGhiVzkxYm5RcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCNVpXRnljeUE5SUhSb2FYTXVjM1JoZEdVdWVXVmhjbk5NYVhOMExtMWhjQ2htZFc1amRHbHZiaUFvZVdWaGNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIbGxZWElnS3lCaGJXOTFiblE3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIdGNiaUFnSUNBZ0lIbGxZWEp6VEdsemREb2dlV1ZoY25Nc1hHNGdJQ0FnZlNrN1hHNGdJSDA3WEc1Y2JpQWdhVzVqY21WdFpXNTBXV1ZoY25NZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyaHBablJaWldGeWN5Z3hLVHRjYmlBZ2ZUdGNibHh1SUNCa1pXTnlaVzFsYm5SWlpXRnljeUE5SUNncElEMCtJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YUdsbWRGbGxZWEp6S0MweEtUdGNiaUFnZlR0Y2JseHVJQ0J5Wlc1a1pYSW9LU0I3WEc0Z0lDQWdiR1YwSUdSeWIzQmtiM2R1UTJ4aGMzTWdQU0JqYkhONEtIdGNiaUFnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZlV1ZoY2kxa2NtOXdaRzkzYmx3aU9pQjBjblZsTEZ4dUlDQWdJQ0FnWENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5NVpXRnlMV1J5YjNCa2IzZHVMUzF6WTNKdmJHeGhZbXhsWENJNlhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXVjMk55YjJ4c1lXSnNaVmxsWVhKRWNtOXdaRzkzYml4Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMTdaSEp2Y0dSdmQyNURiR0Z6YzMwZ2NtVm1QWHQwYUdsekxtUnliM0JrYjNkdVVtVm1mVDVjYmlBZ0lDQWdJQ0FnZTNSb2FYTXVjbVZ1WkdWeVQzQjBhVzl1Y3lncGZWeHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ1hDSnlaV0ZqZEZ3aU8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUZ3aWNISnZjQzEwZVhCbGMxd2lPMXh1YVcxd2IzSjBJRmxsWVhKRWNtOXdaRzkzYms5d2RHbHZibk1nWm5KdmJTQmNJaTR2ZVdWaGNsOWtjbTl3Wkc5M2JsOXZjSFJwYjI1elhDSTdYRzVwYlhCdmNuUWdiMjVEYkdsamEwOTFkSE5wWkdVZ1puSnZiU0JjSW5KbFlXTjBMVzl1WTJ4cFkydHZkWFJ6YVdSbFhDSTdYRzVwYlhCdmNuUWdleUJuWlhSWlpXRnlJSDBnWm5KdmJTQmNJaTR2WkdGMFpWOTFkR2xzYzF3aU8xeHVYRzVqYjI1emRDQlhjbUZ3Y0dWa1dXVmhja1J5YjNCa2IzZHVUM0IwYVc5dWN5QTlJRzl1UTJ4cFkydFBkWFJ6YVdSbEtGbGxZWEpFY205d1pHOTNiazl3ZEdsdmJuTXBPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlpaV0Z5UkhKdmNHUnZkMjRnWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdGa2FuVnpkRVJoZEdWUGJrTm9ZVzVuWlRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdaSEp2Y0dSdmQyNU5iMlJsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvVzF3aWMyTnliMnhzWENJc0lGd2ljMlZzWldOMFhDSmRLUzVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJRzFoZUVSaGRHVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lHMXBia1JoZEdVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUc5dVEyaGhibWRsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJSE5qY205c2JHRmliR1ZaWldGeVJISnZjR1J2ZDI0NklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSGxsWVhJNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCNVpXRnlSSEp2Y0dSdmQyNUpkR1Z0VG5WdFltVnlPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lHUmhkR1U2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTEZ4dUlDQWdJRzl1VTJWc1pXTjBPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCelpYUlBjR1Z1T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ2ZUdGNibHh1SUNCemRHRjBaU0E5SUh0Y2JpQWdJQ0JrY205d1pHOTNibFpwYzJsaWJHVTZJR1poYkhObExGeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNsTmxiR1ZqZEU5d2RHbHZibk1nUFNBb0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2JXbHVXV1ZoY2lBOUlIUm9hWE11Y0hKdmNITXViV2x1UkdGMFpTQS9JR2RsZEZsbFlYSW9kR2hwY3k1d2NtOXdjeTV0YVc1RVlYUmxLU0E2SURFNU1EQTdYRzRnSUNBZ1kyOXVjM1FnYldGNFdXVmhjaUE5SUhSb2FYTXVjSEp2Y0hNdWJXRjRSR0YwWlNBL0lHZGxkRmxsWVhJb2RHaHBjeTV3Y205d2N5NXRZWGhFWVhSbEtTQTZJREl4TURBN1hHNWNiaUFnSUNCamIyNXpkQ0J2Y0hScGIyNXpJRDBnVzEwN1hHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlHMXBibGxsWVhJN0lHa2dQRDBnYldGNFdXVmhjanNnYVNzcktTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxuQjFjMmdvWEc0Z0lDQWdJQ0FnSUR4dmNIUnBiMjRnYTJWNVBYdHBmU0IyWVd4MVpUMTdhWDArWEc0Z0lDQWdJQ0FnSUNBZ2UybDlYRzRnSUNBZ0lDQWdJRHd2YjNCMGFXOXVQaXhjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdmNIUnBiMjV6TzF4dUlDQjlPMXh1WEc0Z0lHOXVVMlZzWldOMFEyaGhibWRsSUQwZ0tHVXBJRDArSUh0Y2JpQWdJQ0IwYUdsekxtOXVRMmhoYm1kbEtHVXVkR0Z5WjJWMExuWmhiSFZsS1R0Y2JpQWdmVHRjYmx4dUlDQnlaVzVrWlhKVFpXeGxZM1JOYjJSbElEMGdLQ2tnUFQ0Z0tGeHVJQ0FnSUR4elpXeGxZM1JjYmlBZ0lDQWdJSFpoYkhWbFBYdDBhR2x6TG5CeWIzQnpMbmxsWVhKOVhHNGdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOTVaV0Z5TFhObGJHVmpkRndpWEc0Z0lDQWdJQ0J2YmtOb1lXNW5aVDE3ZEdocGN5NXZibE5sYkdWamRFTm9ZVzVuWlgxY2JpQWdJQ0ErWEc0Z0lDQWdJQ0I3ZEdocGN5NXlaVzVrWlhKVFpXeGxZM1JQY0hScGIyNXpLQ2w5WEc0Z0lDQWdQQzl6Wld4bFkzUStYRzRnSUNrN1hHNWNiaUFnY21WdVpHVnlVbVZoWkZacFpYY2dQU0FvZG1semFXSnNaU2tnUFQ0Z0tGeHVJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lHdGxlVDFjSW5KbFlXUmNJbHh1SUNBZ0lDQWdjM1I1YkdVOWUzc2dkbWx6YVdKcGJHbDBlVG9nZG1semFXSnNaU0EvSUZ3aWRtbHphV0pzWlZ3aUlEb2dYQ0pvYVdSa1pXNWNJaUI5ZlZ4dUlDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmVXVmhjaTF5WldGa0xYWnBaWGRjSWx4dUlDQWdJQ0FnYjI1RGJHbGphejE3S0dWMlpXNTBLU0E5UGlCMGFHbHpMblJ2WjJkc1pVUnliM0JrYjNkdUtHVjJaVzUwS1gxY2JpQWdJQ0ErWEc0Z0lDQWdJQ0E4YzNCaGJpQmpiR0Z6YzA1aGJXVTlYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTk1WldGeUxYSmxZV1F0ZG1sbGR5MHRaRzkzYmkxaGNuSnZkMXdpSUM4K1hHNGdJQ0FnSUNBOGMzQmhiaUJqYkdGemMwNWhiV1U5WENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5NVpXRnlMWEpsWVdRdGRtbGxkeTB0YzJWc1pXTjBaV1F0ZVdWaGNsd2lQbHh1SUNBZ0lDQWdJQ0I3ZEdocGN5NXdjbTl3Y3k1NVpXRnlmVnh1SUNBZ0lDQWdQQzl6Y0dGdVBseHVJQ0FnSUR3dlpHbDJQbHh1SUNBcE8xeHVYRzRnSUhKbGJtUmxja1J5YjNCa2IzZHVJRDBnS0NrZ1BUNGdLRnh1SUNBZ0lEeFhjbUZ3Y0dWa1dXVmhja1J5YjNCa2IzZHVUM0IwYVc5dWMxeHVJQ0FnSUNBZ2EyVjVQVndpWkhKdmNHUnZkMjVjSWx4dUlDQWdJQ0FnZVdWaGNqMTdkR2hwY3k1d2NtOXdjeTU1WldGeWZWeHVJQ0FnSUNBZ2IyNURhR0Z1WjJVOWUzUm9hWE11YjI1RGFHRnVaMlY5WEc0Z0lDQWdJQ0J2YmtOaGJtTmxiRDE3ZEdocGN5NTBiMmRuYkdWRWNtOXdaRzkzYm4xY2JpQWdJQ0FnSUcxcGJrUmhkR1U5ZTNSb2FYTXVjSEp2Y0hNdWJXbHVSR0YwWlgxY2JpQWdJQ0FnSUcxaGVFUmhkR1U5ZTNSb2FYTXVjSEp2Y0hNdWJXRjRSR0YwWlgxY2JpQWdJQ0FnSUhOamNtOXNiR0ZpYkdWWlpXRnlSSEp2Y0dSdmQyNDllM1JvYVhNdWNISnZjSE11YzJOeWIyeHNZV0pzWlZsbFlYSkVjbTl3Wkc5M2JuMWNiaUFnSUNBZ0lIbGxZWEpFY205d1pHOTNia2wwWlcxT2RXMWlaWEk5ZTNSb2FYTXVjSEp2Y0hNdWVXVmhja1J5YjNCa2IzZHVTWFJsYlU1MWJXSmxjbjFjYmlBZ0lDQXZQbHh1SUNBcE8xeHVYRzRnSUhKbGJtUmxjbE5qY205c2JFMXZaR1VnUFNBb0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QmtjbTl3Wkc5M2JsWnBjMmxpYkdVZ2ZTQTlJSFJvYVhNdWMzUmhkR1U3WEc0Z0lDQWdiR1YwSUhKbGMzVnNkQ0E5SUZ0MGFHbHpMbkpsYm1SbGNsSmxZV1JXYVdWM0tDRmtjbTl3Wkc5M2JsWnBjMmxpYkdVcFhUdGNiaUFnSUNCcFppQW9aSEp2Y0dSdmQyNVdhWE5wWW14bEtTQjdYRzRnSUNBZ0lDQnlaWE4xYkhRdWRXNXphR2xtZENoMGFHbHpMbkpsYm1SbGNrUnliM0JrYjNkdUtDa3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNCOU8xeHVYRzRnSUc5dVEyaGhibWRsSUQwZ0tIbGxZWElwSUQwK0lIdGNiaUFnSUNCMGFHbHpMblJ2WjJkc1pVUnliM0JrYjNkdUtDazdYRzRnSUNBZ2FXWWdLSGxsWVhJZ1BUMDlJSFJvYVhNdWNISnZjSE11ZVdWaGNpa2djbVYwZFhKdU8xeHVJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNURhR0Z1WjJVb2VXVmhjaWs3WEc0Z0lIMDdYRzVjYmlBZ2RHOW5aMnhsUkhKdmNHUnZkMjRnUFNBb1pYWmxiblFwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLRnh1SUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0JrY205d1pHOTNibFpwYzJsaWJHVTZJQ0YwYUdsekxuTjBZWFJsTG1SeWIzQmtiM2R1Vm1semFXSnNaU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxtRmthblZ6ZEVSaGRHVlBia05vWVc1blpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFdXVmhja05vWVc1blpTaDBhR2x6TG5CeWIzQnpMbVJoZEdVc0lHVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBcE8xeHVJQ0I5TzF4dVhHNGdJR2hoYm1Sc1pWbGxZWEpEYUdGdVoyVWdQU0FvWkdGMFpTd2daWFpsYm5RcElEMCtJSHRjYmlBZ0lDQjBhR2x6TG05dVUyVnNaV04wS0dSaGRHVXNJR1YyWlc1MEtUdGNiaUFnSUNCMGFHbHpMbk5sZEU5d1pXNG9LVHRjYmlBZ2ZUdGNibHh1SUNCdmJsTmxiR1ZqZENBOUlDaGtZWFJsTENCbGRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbTl1VTJWc1pXTjBLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG05dVUyVnNaV04wS0dSaGRHVXNJR1YyWlc1MEtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdjMlYwVDNCbGJpQTlJQ2dwSUQwK0lIdGNiaUFnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTV6WlhSUGNHVnVLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG5ObGRFOXdaVzRvZEhKMVpTazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQnNaWFFnY21WdVpHVnlaV1JFY205d1pHOTNianRjYmlBZ0lDQnpkMmwwWTJnZ0tIUm9hWE11Y0hKdmNITXVaSEp2Y0dSdmQyNU5iMlJsS1NCN1hHNGdJQ0FnSUNCallYTmxJRndpYzJOeWIyeHNYQ0k2WEc0Z0lDQWdJQ0FnSUhKbGJtUmxjbVZrUkhKdmNHUnZkMjRnUFNCMGFHbHpMbkpsYm1SbGNsTmpjbTlzYkUxdlpHVW9LVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUZ3aWMyVnNaV04wWENJNlhHNGdJQ0FnSUNBZ0lISmxibVJsY21Wa1JISnZjR1J2ZDI0Z1BTQjBhR2x6TG5KbGJtUmxjbE5sYkdWamRFMXZaR1VvS1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0Z2NtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmVXVmhjaTFrY205d1pHOTNiaTFqYjI1MFlXbHVaWElnY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmZVdWaGNpMWtjbTl3Wkc5M2JpMWpiMjUwWVdsdVpYSXRMU1I3ZEdocGN5NXdjbTl3Y3k1a2NtOXdaRzkzYmsxdlpHVjlZSDFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnZTNKbGJtUmxjbVZrUkhKdmNHUnZkMjU5WEc0Z0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBcE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0JjSW5KbFlXTjBYQ0k3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdYQ0p3Y205d0xYUjVjR1Z6WENJN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUUxdmJuUm9SSEp2Y0dSdmQyNVBjSFJwYjI1eklHVjRkR1Z1WkhNZ1VtVmhZM1F1UTI5dGNHOXVaVzUwSUh0Y2JpQWdjM1JoZEdsaklIQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQnZia05oYm1ObGJEb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCdmJrTm9ZVzVuWlRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0J0YjI1MGFEb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHMXZiblJvVG1GdFpYTTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVVOW1LRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ2t1YVhOU1pYRjFhWEpsWkN4Y2JpQWdmVHRjYmx4dUlDQnBjMU5sYkdWamRHVmtUVzl1ZEdnZ1BTQW9hU2tnUFQ0Z2RHaHBjeTV3Y205d2N5NXRiMjUwYUNBOVBUMGdhVHRjYmx4dUlDQnlaVzVrWlhKUGNIUnBiMjV6SUQwZ0tDa2dQVDRnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeWIzQnpMbTF2Ym5Sb1RtRnRaWE11YldGd0tDaHRiMjUwYUN3Z2FTa2dQVDRnS0Z4dUlDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVhWE5UWld4bFkzUmxaRTF2Ym5Sb0tHa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBL0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZiVzl1ZEdndGIzQjBhVzl1SUhKbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDIxdmJuUm9MVzl3ZEdsdmJpMHRjMlZzWldOMFpXUmZiVzl1ZEdoY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgyMXZiblJvTFc5d2RHbHZibHdpWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2EyVjVQWHR0YjI1MGFIMWNiaUFnSUNBZ0lDQWdiMjVEYkdsamF6MTdkR2hwY3k1dmJrTm9ZVzVuWlM1aWFXNWtLSFJvYVhNc0lHa3BmVnh1SUNBZ0lDQWdJQ0JoY21saExYTmxiR1ZqZEdWa1BYdDBhR2x6TG1selUyVnNaV04wWldSTmIyNTBhQ2hwS1NBL0lGd2lkSEoxWlZ3aUlEb2dkVzVrWldacGJtVmtmVnh1SUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0I3ZEdocGN5NXBjMU5sYkdWamRHVmtUVzl1ZEdnb2FTa2dQeUFvWEc0Z0lDQWdJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTk9ZVzFsUFZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmJXOXVkR2d0YjNCMGFXOXVMUzF6Wld4bFkzUmxaRndpUHVLY2t6d3ZjM0JoYmo1Y2JpQWdJQ0FnSUNBZ0tTQTZJQ2hjYmlBZ0lDQWdJQ0FnSUNCY0lsd2lYRzRnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUh0dGIyNTBhSDFjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrcE8xeHVJQ0I5TzF4dVhHNGdJRzl1UTJoaGJtZGxJRDBnS0cxdmJuUm9LU0E5UGlCMGFHbHpMbkJ5YjNCekxtOXVRMmhoYm1kbEtHMXZiblJvS1R0Y2JseHVJQ0JvWVc1a2JHVkRiR2xqYTA5MWRITnBaR1VnUFNBb0tTQTlQaUIwYUdsekxuQnliM0J6TG05dVEyRnVZMlZzS0NrN1hHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgyMXZiblJvTFdSeWIzQmtiM2R1WENJK1hHNGdJQ0FnSUNBZ0lIdDBhR2x6TG5KbGJtUmxjazl3ZEdsdmJuTW9LWDFjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQlNaV0ZqZENCbWNtOXRJRndpY21WaFkzUmNJanRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQmNJbkJ5YjNBdGRIbHdaWE5jSWp0Y2JtbHRjRzl5ZENCTmIyNTBhRVJ5YjNCa2IzZHVUM0IwYVc5dWN5Qm1jbTl0SUZ3aUxpOXRiMjUwYUY5a2NtOXdaRzkzYmw5dmNIUnBiMjV6WENJN1hHNXBiWEJ2Y25RZ2IyNURiR2xqYTA5MWRITnBaR1VnWm5KdmJTQmNJbkpsWVdOMExXOXVZMnhwWTJ0dmRYUnphV1JsWENJN1hHNXBiWEJ2Y25RZ0tpQmhjeUIxZEdsc2N5Qm1jbTl0SUZ3aUxpOWtZWFJsWDNWMGFXeHpYQ0k3WEc1Y2JtTnZibk4wSUZkeVlYQndaV1JOYjI1MGFFUnliM0JrYjNkdVQzQjBhVzl1Y3lBOUlHOXVRMnhwWTJ0UGRYUnphV1JsS0UxdmJuUm9SSEp2Y0dSdmQyNVBjSFJwYjI1ektUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1RXOXVkR2hFY205d1pHOTNiaUJsZUhSbGJtUnpJRkpsWVdOMExrTnZiWEJ2Ym1WdWRDQjdYRzRnSUhOMFlYUnBZeUJ3Y205d1ZIbHdaWE1nUFNCN1hHNGdJQ0FnWkhKdmNHUnZkMjVOYjJSbE9pQlFjbTl3Vkhsd1pYTXViMjVsVDJZb1cxd2ljMk55YjJ4c1hDSXNJRndpYzJWc1pXTjBYQ0pkS1M1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUd4dlkyRnNaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQnRiMjUwYURvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2k1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUc5dVEyaGhibWRsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJSFZ6WlZOb2IzSjBUVzl1ZEdoSmJrUnliM0JrYjNkdU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwWlNBOUlIdGNiaUFnSUNCa2NtOXdaRzkzYmxacGMybGliR1U2SUdaaGJITmxMRnh1SUNCOU8xeHVYRzRnSUhKbGJtUmxjbE5sYkdWamRFOXdkR2x2Ym5NZ1BTQW9iVzl1ZEdoT1lXMWxjeWtnUFQ1Y2JpQWdJQ0J0YjI1MGFFNWhiV1Z6TG0xaGNDZ29UU3dnYVNrZ1BUNGdLRnh1SUNBZ0lDQWdQRzl3ZEdsdmJpQnJaWGs5ZTJsOUlIWmhiSFZsUFh0cGZUNWNiaUFnSUNBZ0lDQWdlMDE5WEc0Z0lDQWdJQ0E4TDI5d2RHbHZiajVjYmlBZ0lDQXBLVHRjYmx4dUlDQnlaVzVrWlhKVFpXeGxZM1JOYjJSbElEMGdLRzF2Ym5Sb1RtRnRaWE1wSUQwK0lDaGNiaUFnSUNBOGMyVnNaV04wWEc0Z0lDQWdJQ0IyWVd4MVpUMTdkR2hwY3k1d2NtOXdjeTV0YjI1MGFIMWNiaUFnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMjF2Ym5Sb0xYTmxiR1ZqZEZ3aVhHNGdJQ0FnSUNCdmJrTm9ZVzVuWlQxN0tHVXBJRDArSUhSb2FYTXViMjVEYUdGdVoyVW9aUzUwWVhKblpYUXVkbUZzZFdVcGZWeHVJQ0FnSUQ1Y2JpQWdJQ0FnSUh0MGFHbHpMbkpsYm1SbGNsTmxiR1ZqZEU5d2RHbHZibk1vYlc5dWRHaE9ZVzFsY3lsOVhHNGdJQ0FnUEM5elpXeGxZM1ErWEc0Z0lDazdYRzVjYmlBZ2NtVnVaR1Z5VW1WaFpGWnBaWGNnUFNBb2RtbHphV0pzWlN3Z2JXOXVkR2hPWVcxbGN5a2dQVDRnS0Z4dUlDQWdJRHhrYVhaY2JpQWdJQ0FnSUd0bGVUMWNJbkpsWVdSY0lseHVJQ0FnSUNBZ2MzUjViR1U5ZTNzZ2RtbHphV0pwYkdsMGVUb2dkbWx6YVdKc1pTQS9JRndpZG1semFXSnNaVndpSURvZ1hDSm9hV1JrWlc1Y0lpQjlmVnh1SUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYlc5dWRHZ3RjbVZoWkMxMmFXVjNYQ0pjYmlBZ0lDQWdJRzl1UTJ4cFkyczllM1JvYVhNdWRHOW5aMnhsUkhKdmNHUnZkMjU5WEc0Z0lDQWdQbHh1SUNBZ0lDQWdQSE53WVc0Z1kyeGhjM05PWVcxbFBWd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZiVzl1ZEdndGNtVmhaQzEyYVdWM0xTMWtiM2R1TFdGeWNtOTNYQ0lnTHo1Y2JpQWdJQ0FnSUR4emNHRnVJR05zWVhOelRtRnRaVDFjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDIxdmJuUm9MWEpsWVdRdGRtbGxkeTB0YzJWc1pXTjBaV1F0Ylc5dWRHaGNJajVjYmlBZ0lDQWdJQ0FnZTIxdmJuUm9UbUZ0WlhOYmRHaHBjeTV3Y205d2N5NXRiMjUwYUYxOVhHNGdJQ0FnSUNBOEwzTndZVzQrWEc0Z0lDQWdQQzlrYVhZK1hHNGdJQ2s3WEc1Y2JpQWdjbVZ1WkdWeVJISnZjR1J2ZDI0Z1BTQW9iVzl1ZEdoT1lXMWxjeWtnUFQ0Z0tGeHVJQ0FnSUR4WGNtRndjR1ZrVFc5dWRHaEVjbTl3Wkc5M2JrOXdkR2x2Ym5OY2JpQWdJQ0FnSUd0bGVUMWNJbVJ5YjNCa2IzZHVYQ0pjYmlBZ0lDQWdJRzF2Ym5Sb1BYdDBhR2x6TG5CeWIzQnpMbTF2Ym5Sb2ZWeHVJQ0FnSUNBZ2JXOXVkR2hPWVcxbGN6MTdiVzl1ZEdoT1lXMWxjMzFjYmlBZ0lDQWdJRzl1UTJoaGJtZGxQWHQwYUdsekxtOXVRMmhoYm1kbGZWeHVJQ0FnSUNBZ2IyNURZVzVqWld3OWUzUm9hWE11ZEc5bloyeGxSSEp2Y0dSdmQyNTlYRzRnSUNBZ0x6NWNiaUFnS1R0Y2JseHVJQ0J5Wlc1a1pYSlRZM0p2Ykd4TmIyUmxJRDBnS0cxdmJuUm9UbUZ0WlhNcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHUnliM0JrYjNkdVZtbHphV0pzWlNCOUlEMGdkR2hwY3k1emRHRjBaVHRjYmlBZ0lDQnNaWFFnY21WemRXeDBJRDBnVzNSb2FYTXVjbVZ1WkdWeVVtVmhaRlpwWlhjb0lXUnliM0JrYjNkdVZtbHphV0pzWlN3Z2JXOXVkR2hPWVcxbGN5bGRPMXh1SUNBZ0lHbG1JQ2hrY205d1pHOTNibFpwYzJsaWJHVXBJSHRjYmlBZ0lDQWdJSEpsYzNWc2RDNTFibk5vYVdaMEtIUm9hWE11Y21WdVpHVnlSSEp2Y0dSdmQyNG9iVzl1ZEdoT1lXMWxjeWtwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlPMXh1WEc0Z0lHOXVRMmhoYm1kbElEMGdLRzF2Ym5Sb0tTQTlQaUI3WEc0Z0lDQWdkR2hwY3k1MGIyZG5iR1ZFY205d1pHOTNiaWdwTzF4dUlDQWdJR2xtSUNodGIyNTBhQ0FoUFQwZ2RHaHBjeTV3Y205d2N5NXRiMjUwYUNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXZia05vWVc1blpTaHRiMjUwYUNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lIUnZaMmRzWlVSeWIzQmtiM2R1SUQwZ0tDa2dQVDVjYmlBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0h0Y2JpQWdJQ0FnSUdSeWIzQmtiM2R1Vm1semFXSnNaVG9nSVhSb2FYTXVjM1JoZEdVdVpISnZjR1J2ZDI1V2FYTnBZbXhsTEZ4dUlDQWdJSDBwTzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCdGIyNTBhRTVoYldWeklEMGdXekFzSURFc0lESXNJRE1zSURRc0lEVXNJRFlzSURjc0lEZ3NJRGtzSURFd0xDQXhNVjB1YldGd0tGeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NTFjMlZUYUc5eWRFMXZiblJvU1c1RWNtOXdaRzkzYmx4dUlDQWdJQ0FnSUNBL0lDaE5LU0E5UGlCMWRHbHNjeTVuWlhSTmIyNTBhRk5vYjNKMFNXNU1iMk5oYkdVb1RTd2dkR2hwY3k1d2NtOXdjeTVzYjJOaGJHVXBYRzRnSUNBZ0lDQWdJRG9nS0UwcElEMCtJSFYwYVd4ekxtZGxkRTF2Ym5Sb1NXNU1iMk5oYkdVb1RTd2dkR2hwY3k1d2NtOXdjeTVzYjJOaGJHVXBMRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQnNaWFFnY21WdVpHVnlaV1JFY205d1pHOTNianRjYmlBZ0lDQnpkMmwwWTJnZ0tIUm9hWE11Y0hKdmNITXVaSEp2Y0dSdmQyNU5iMlJsS1NCN1hHNGdJQ0FnSUNCallYTmxJRndpYzJOeWIyeHNYQ0k2WEc0Z0lDQWdJQ0FnSUhKbGJtUmxjbVZrUkhKdmNHUnZkMjRnUFNCMGFHbHpMbkpsYm1SbGNsTmpjbTlzYkUxdlpHVW9iVzl1ZEdoT1lXMWxjeWs3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdZMkZ6WlNCY0luTmxiR1ZqZEZ3aU9seHVJQ0FnSUNBZ0lDQnlaVzVrWlhKbFpFUnliM0JrYjNkdUlEMGdkR2hwY3k1eVpXNWtaWEpUWld4bFkzUk5iMlJsS0cxdmJuUm9UbUZ0WlhNcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyQnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOXRiMjUwYUMxa2NtOXdaRzkzYmkxamIyNTBZV2x1WlhJZ2NtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmJXOXVkR2d0WkhKdmNHUnZkMjR0WTI5dWRHRnBibVZ5TFMwa2UzUm9hWE11Y0hKdmNITXVaSEp2Y0dSdmQyNU5iMlJsZldCOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdHlaVzVrWlhKbFpFUnliM0JrYjNkdWZWeHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ1hDSnlaV0ZqZEZ3aU8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUZ3aWNISnZjQzEwZVhCbGMxd2lPMXh1YVcxd2IzSjBJSHNnWTJ4emVDQjlJR1p5YjIwZ1hDSmpiSE40WENJN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JoWkdSTmIyNTBhSE1zWEc0Z0lHWnZjbTFoZEVSaGRHVXNYRzRnSUdkbGRGTjBZWEowVDJaTmIyNTBhQ3hjYmlBZ2JtVjNSR0YwWlN4Y2JpQWdhWE5CWm5SbGNpeGNiaUFnYVhOVFlXMWxUVzl1ZEdnc1hHNGdJR2x6VTJGdFpWbGxZWElzWEc0Z0lHZGxkRlJwYldVc1hHNTlJR1p5YjIwZ1hDSXVMMlJoZEdWZmRYUnBiSE5jSWp0Y2JseHVablZ1WTNScGIyNGdaMlZ1WlhKaGRHVk5iMjUwYUZsbFlYSnpLRzFwYmtSaGRHVXNJRzFoZUVSaGRHVXBJSHRjYmlBZ1kyOXVjM1FnYkdsemRDQTlJRnRkTzF4dVhHNGdJR3hsZENCamRYSnlSR0YwWlNBOUlHZGxkRk4wWVhKMFQyWk5iMjUwYUNodGFXNUVZWFJsS1R0Y2JpQWdZMjl1YzNRZ2JHRnpkRVJoZEdVZ1BTQm5aWFJUZEdGeWRFOW1UVzl1ZEdnb2JXRjRSR0YwWlNrN1hHNWNiaUFnZDJocGJHVWdLQ0ZwYzBGbWRHVnlLR04xY25KRVlYUmxMQ0JzWVhOMFJHRjBaU2twSUh0Y2JpQWdJQ0JzYVhOMExuQjFjMmdvYm1WM1JHRjBaU2hqZFhKeVJHRjBaU2twTzF4dVhHNGdJQ0FnWTNWeWNrUmhkR1VnUFNCaFpHUk5iMjUwYUhNb1kzVnlja1JoZEdVc0lERXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnNhWE4wTzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCTmIyNTBhRmxsWVhKRWNtOXdaRzkzYms5d2RHbHZibk1nWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUcxcGJrUmhkR1U2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnYldGNFJHRjBaVG9nVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1JHRjBaU2t1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0J2YmtOaGJtTmxiRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQnZia05vWVc1blpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCelkzSnZiR3hoWW14bFRXOXVkR2haWldGeVJISnZjR1J2ZDI0NklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJR1JoZEdVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ1pHRjBaVVp2Y20xaGREb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHeHZZMkZzWlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdmVHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3Y205d2N5a2dlMXh1SUNBZ0lITjFjR1Z5S0hCeWIzQnpLVHRjYmx4dUlDQWdJSFJvYVhNdWMzUmhkR1VnUFNCN1hHNGdJQ0FnSUNCdGIyNTBhRmxsWVhKelRHbHpkRG9nWjJWdVpYSmhkR1ZOYjI1MGFGbGxZWEp6S0Z4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtMXBia1JoZEdVc1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXViV0Y0UkdGMFpTeGNiaUFnSUNBZ0lDa3NYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJSEpsYm1SbGNrOXdkR2x2Ym5NZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUmhkR1V1Ylc5dWRHaFpaV0Z5YzB4cGMzUXViV0Z3S0NodGIyNTBhRmxsWVhJcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHMXZiblJvV1dWaGNsQnZhVzUwSUQwZ1oyVjBWR2x0WlNodGIyNTBhRmxsWVhJcE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYVhOVFlXMWxUVzl1ZEdoWlpXRnlJRDFjYmlBZ0lDQWdJQ0FnYVhOVFlXMWxXV1ZoY2loMGFHbHpMbkJ5YjNCekxtUmhkR1VzSUcxdmJuUm9XV1ZoY2lrZ0ppWmNiaUFnSUNBZ0lDQWdhWE5UWVcxbFRXOXVkR2dvZEdocGN5NXdjbTl3Y3k1a1lYUmxMQ0J0YjI1MGFGbGxZWElwTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBOFpHbDJYRzRnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6VTJGdFpVMXZiblJvV1dWaGNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZiVzl1ZEdndGVXVmhjaTF2Y0hScGIyNHRMWE5sYkdWamRHVmtYMjF2Ym5Sb0xYbGxZWEpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmJXOXVkR2d0ZVdWaGNpMXZjSFJwYjI1Y0lseHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCclpYazllMjF2Ym5Sb1dXVmhjbEJ2YVc1MGZWeHVJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczllM1JvYVhNdWIyNURhR0Z1WjJVdVltbHVaQ2gwYUdsekxDQnRiMjUwYUZsbFlYSlFiMmx1ZENsOVhHNGdJQ0FnSUNBZ0lDQWdZWEpwWVMxelpXeGxZM1JsWkQxN2FYTlRZVzFsVFc5dWRHaFpaV0Z5SUQ4Z1hDSjBjblZsWENJZ09pQjFibVJsWm1sdVpXUjlYRzRnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNCN2FYTlRZVzFsVFc5dWRHaFpaV0Z5SUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNGdZMnhoYzNOT1lXMWxQVndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYlc5dWRHZ3RlV1ZoY2kxdmNIUnBiMjR0TFhObGJHVmpkR1ZrWENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSU9LY2sxeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5emNHRnVQbHh1SUNBZ0lDQWdJQ0FnSUNrZ09pQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCY0lsd2lYRzRnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQjdabTl5YldGMFJHRjBaU2h0YjI1MGFGbGxZWElzSUhSb2FYTXVjSEp2Y0hNdVpHRjBaVVp2Y20xaGRDd2dkR2hwY3k1d2NtOXdjeTVzYjJOaGJHVXBmVnh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZTazdYRzRnSUgwN1hHNWNiaUFnYjI1RGFHRnVaMlVnUFNBb2JXOXVkR2haWldGeUtTQTlQaUIwYUdsekxuQnliM0J6TG05dVEyaGhibWRsS0cxdmJuUm9XV1ZoY2lrN1hHNWNiaUFnYUdGdVpHeGxRMnhwWTJ0UGRYUnphV1JsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJSFJvYVhNdWNISnZjSE11YjI1RFlXNWpaV3dvS1R0Y2JpQWdmVHRjYmx4dUlDQnlaVzVrWlhJb0tTQjdYRzRnSUNBZ2JHVjBJR1J5YjNCa2IzZHVRMnhoYzNNZ1BTQmpiSE40S0h0Y2JpQWdJQ0FnSUZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmJXOXVkR2d0ZVdWaGNpMWtjbTl3Wkc5M2Jsd2lPaUIwY25WbExGeHVJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOXRiMjUwYUMxNVpXRnlMV1J5YjNCa2IzZHVMUzF6WTNKdmJHeGhZbXhsWENJNlhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXVjMk55YjJ4c1lXSnNaVTF2Ym5Sb1dXVmhja1J5YjNCa2IzZHVMRnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlEeGthWFlnWTJ4aGMzTk9ZVzFsUFh0a2NtOXdaRzkzYmtOc1lYTnpmVDU3ZEdocGN5NXlaVzVrWlhKUGNIUnBiMjV6S0NsOVBDOWthWFkrTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FnWm5KdmJTQmNJbkpsWVdOMFhDSTdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ1hDSndjbTl3TFhSNWNHVnpYQ0k3WEc1cGJYQnZjblFnVFc5dWRHaFpaV0Z5UkhKdmNHUnZkMjVQY0hScGIyNXpJR1p5YjIwZ1hDSXVMMjF2Ym5Sb1gzbGxZWEpmWkhKdmNHUnZkMjVmYjNCMGFXOXVjMXdpTzF4dWFXMXdiM0owSUc5dVEyeHBZMnRQZFhSemFXUmxJR1p5YjIwZ1hDSnlaV0ZqZEMxdmJtTnNhV05yYjNWMGMybGtaVndpTzF4dWFXMXdiM0owSUh0Y2JpQWdZV1JrVFc5dWRHaHpMRnh1SUNCbWIzSnRZWFJFWVhSbExGeHVJQ0JuWlhSVGRHRnlkRTltVFc5dWRHZ3NYRzRnSUdselFXWjBaWElzWEc0Z0lHbHpVMkZ0WlUxdmJuUm9MRnh1SUNCcGMxTmhiV1ZaWldGeUxGeHVJQ0J1WlhkRVlYUmxMRnh1SUNCblpYUlVhVzFsTEZ4dWZTQm1jbTl0SUZ3aUxpOWtZWFJsWDNWMGFXeHpYQ0k3WEc1Y2JuWmhjaUJYY21Gd2NHVmtUVzl1ZEdoWlpXRnlSSEp2Y0dSdmQyNVBjSFJwYjI1eklEMGdiMjVEYkdsamEwOTFkSE5wWkdVb1RXOXVkR2haWldGeVJISnZjR1J2ZDI1UGNIUnBiMjV6S1R0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVFc5dWRHaFpaV0Z5UkhKdmNHUnZkMjRnWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdSeWIzQmtiM2R1VFc5a1pUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGdGNJbk5qY205c2JGd2lMQ0JjSW5ObGJHVmpkRndpWFNrdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCa1lYUmxSbTl5YldGME9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2JHOWpZV3hsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJRzFoZUVSaGRHVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdiV2x1UkdGMFpUb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQmtZWFJsT2lCUWNtOXdWSGx3WlhNdWFXNXpkR0Z1WTJWUFppaEVZWFJsS1M1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUc5dVEyaGhibWRsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJSE5qY205c2JHRmliR1ZOYjI1MGFGbGxZWEpFY205d1pHOTNiam9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUgwN1hHNWNiaUFnYzNSaGRHVWdQU0I3WEc0Z0lDQWdaSEp2Y0dSdmQyNVdhWE5wWW14bE9pQm1ZV3h6WlN4Y2JpQWdmVHRjYmx4dUlDQnlaVzVrWlhKVFpXeGxZM1JQY0hScGIyNXpJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHeGxkQ0JqZFhKeVJHRjBaU0E5SUdkbGRGTjBZWEowVDJaTmIyNTBhQ2gwYUdsekxuQnliM0J6TG0xcGJrUmhkR1VwTzF4dUlDQWdJR052Ym5OMElHeGhjM1JFWVhSbElEMGdaMlYwVTNSaGNuUlBaazF2Ym5Sb0tIUm9hWE11Y0hKdmNITXViV0Y0UkdGMFpTazdYRzRnSUNBZ1kyOXVjM1FnYjNCMGFXOXVjeUE5SUZ0ZE8xeHVYRzRnSUNBZ2QyaHBiR1VnS0NGcGMwRm1kR1Z5S0dOMWNuSkVZWFJsTENCc1lYTjBSR0YwWlNrcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhScGJXVlFiMmx1ZENBOUlHZGxkRlJwYldVb1kzVnlja1JoZEdVcE8xeHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1d2RYTm9LRnh1SUNBZ0lDQWdJQ0E4YjNCMGFXOXVJR3RsZVQxN2RHbHRaVkJ2YVc1MGZTQjJZV3gxWlQxN2RHbHRaVkJ2YVc1MGZUNWNiaUFnSUNBZ0lDQWdJQ0I3Wm05eWJXRjBSR0YwWlNoamRYSnlSR0YwWlN3Z2RHaHBjeTV3Y205d2N5NWtZWFJsUm05eWJXRjBMQ0IwYUdsekxuQnliM0J6TG14dlkyRnNaU2w5WEc0Z0lDQWdJQ0FnSUR3dmIzQjBhVzl1UGl4Y2JpQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lHTjFjbkpFWVhSbElEMGdZV1JrVFc5dWRHaHpLR04xY25KRVlYUmxMQ0F4S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiM0IwYVc5dWN6dGNiaUFnZlR0Y2JseHVJQ0J2YmxObGJHVmpkRU5vWVc1blpTQTlJQ2hsS1NBOVBpQjdYRzRnSUNBZ2RHaHBjeTV2YmtOb1lXNW5aU2hsTG5SaGNtZGxkQzUyWVd4MVpTazdYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlVMlZzWldOMFRXOWtaU0E5SUNncElEMCtJQ2hjYmlBZ0lDQThjMlZzWldOMFhHNGdJQ0FnSUNCMllXeDFaVDE3WjJWMFZHbHRaU2huWlhSVGRHRnlkRTltVFc5dWRHZ29kR2hwY3k1d2NtOXdjeTVrWVhSbEtTbDlYRzRnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTl0YjI1MGFDMTVaV0Z5TFhObGJHVmpkRndpWEc0Z0lDQWdJQ0J2YmtOb1lXNW5aVDE3ZEdocGN5NXZibE5sYkdWamRFTm9ZVzVuWlgxY2JpQWdJQ0ErWEc0Z0lDQWdJQ0I3ZEdocGN5NXlaVzVrWlhKVFpXeGxZM1JQY0hScGIyNXpLQ2w5WEc0Z0lDQWdQQzl6Wld4bFkzUStYRzRnSUNrN1hHNWNiaUFnY21WdVpHVnlVbVZoWkZacFpYY2dQU0FvZG1semFXSnNaU2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSGxsWVhKTmIyNTBhQ0E5SUdadmNtMWhkRVJoZEdVb1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtUmhkR1VzWEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG1SaGRHVkdiM0p0WVhRc1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxteHZZMkZzWlN4Y2JpQWdJQ0FwTzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ2EyVjVQVndpY21WaFpGd2lYRzRnSUNBZ0lDQWdJSE4wZVd4bFBYdDdJSFpwYzJsaWFXeHBkSGs2SUhacGMybGliR1VnUHlCY0luWnBjMmxpYkdWY0lpQTZJRndpYUdsa1pHVnVYQ0lnZlgxY2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZiVzl1ZEdndGVXVmhjaTF5WldGa0xYWnBaWGRjSWx4dUlDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb1pYWmxiblFwSUQwK0lIUm9hWE11ZEc5bloyeGxSSEp2Y0dSdmQyNG9aWFpsYm5RcGZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQThjM0JoYmlCamJHRnpjMDVoYldVOVhDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOXRiMjUwYUMxNVpXRnlMWEpsWVdRdGRtbGxkeTB0Wkc5M2JpMWhjbkp2ZDF3aUlDOCtYRzRnSUNBZ0lDQWdJRHh6Y0dGdUlHTnNZWE56VG1GdFpUMWNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMjF2Ym5Sb0xYbGxZWEl0Y21WaFpDMTJhV1YzTFMxelpXeGxZM1JsWkMxdGIyNTBhQzE1WldGeVhDSStYRzRnSUNBZ0lDQWdJQ0FnZTNsbFlYSk5iMjUwYUgxY2JpQWdJQ0FnSUNBZ1BDOXpjR0Z1UGx4dUlDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JseHVJQ0J5Wlc1a1pYSkVjbTl3Wkc5M2JpQTlJQ2dwSUQwK0lDaGNiaUFnSUNBOFYzSmhjSEJsWkUxdmJuUm9XV1ZoY2tSeWIzQmtiM2R1VDNCMGFXOXVjMXh1SUNBZ0lDQWdhMlY1UFZ3aVpISnZjR1J2ZDI1Y0lseHVJQ0FnSUNBZ1pHRjBaVDE3ZEdocGN5NXdjbTl3Y3k1a1lYUmxmVnh1SUNBZ0lDQWdaR0YwWlVadmNtMWhkRDE3ZEdocGN5NXdjbTl3Y3k1a1lYUmxSbTl5YldGMGZWeHVJQ0FnSUNBZ2IyNURhR0Z1WjJVOWUzUm9hWE11YjI1RGFHRnVaMlY5WEc0Z0lDQWdJQ0J2YmtOaGJtTmxiRDE3ZEdocGN5NTBiMmRuYkdWRWNtOXdaRzkzYm4xY2JpQWdJQ0FnSUcxcGJrUmhkR1U5ZTNSb2FYTXVjSEp2Y0hNdWJXbHVSR0YwWlgxY2JpQWdJQ0FnSUcxaGVFUmhkR1U5ZTNSb2FYTXVjSEp2Y0hNdWJXRjRSR0YwWlgxY2JpQWdJQ0FnSUhOamNtOXNiR0ZpYkdWTmIyNTBhRmxsWVhKRWNtOXdaRzkzYmoxN2RHaHBjeTV3Y205d2N5NXpZM0p2Ykd4aFlteGxUVzl1ZEdoWlpXRnlSSEp2Y0dSdmQyNTlYRzRnSUNBZ0lDQnNiMk5oYkdVOWUzUm9hWE11Y0hKdmNITXViRzlqWVd4bGZWeHVJQ0FnSUM4K1hHNGdJQ2s3WEc1Y2JpQWdjbVZ1WkdWeVUyTnliMnhzVFc5a1pTQTlJQ2dwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUdSeWIzQmtiM2R1Vm1semFXSnNaU0I5SUQwZ2RHaHBjeTV6ZEdGMFpUdGNiaUFnSUNCc1pYUWdjbVZ6ZFd4MElEMGdXM1JvYVhNdWNtVnVaR1Z5VW1WaFpGWnBaWGNvSVdSeWIzQmtiM2R1Vm1semFXSnNaU2xkTzF4dUlDQWdJR2xtSUNoa2NtOXdaRzkzYmxacGMybGliR1VwSUh0Y2JpQWdJQ0FnSUhKbGMzVnNkQzUxYm5Ob2FXWjBLSFJvYVhNdWNtVnVaR1Z5UkhKdmNHUnZkMjRvS1NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDA3WEc1Y2JpQWdiMjVEYUdGdVoyVWdQU0FvYlc5dWRHaFpaV0Z5VUc5cGJuUXBJRDArSUh0Y2JpQWdJQ0IwYUdsekxuUnZaMmRzWlVSeWIzQmtiM2R1S0NrN1hHNWNiaUFnSUNCamIyNXpkQ0JqYUdGdVoyVmtSR0YwWlNBOUlHNWxkMFJoZEdVb2NHRnljMlZKYm5Rb2JXOXVkR2haWldGeVVHOXBiblFwS1R0Y2JseHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lHbHpVMkZ0WlZsbFlYSW9kR2hwY3k1d2NtOXdjeTVrWVhSbExDQmphR0Z1WjJWa1JHRjBaU2tnSmlaY2JpQWdJQ0FnSUdselUyRnRaVTF2Ym5Sb0tIUm9hWE11Y0hKdmNITXVaR0YwWlN3Z1kyaGhibWRsWkVSaGRHVXBYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJrTm9ZVzVuWlNoamFHRnVaMlZrUkdGMFpTazdYRzRnSUgwN1hHNWNiaUFnZEc5bloyeGxSSEp2Y0dSdmQyNGdQU0FvS1NBOVBseHVJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9lMXh1SUNBZ0lDQWdaSEp2Y0dSdmQyNVdhWE5wWW14bE9pQWhkR2hwY3k1emRHRjBaUzVrY205d1pHOTNibFpwYzJsaWJHVXNYRzRnSUNBZ2ZTazdYRzVjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUd4bGRDQnlaVzVrWlhKbFpFUnliM0JrYjNkdU8xeHVJQ0FnSUhOM2FYUmphQ0FvZEdocGN5NXdjbTl3Y3k1a2NtOXdaRzkzYmsxdlpHVXBJSHRjYmlBZ0lDQWdJR05oYzJVZ1hDSnpZM0p2Ykd4Y0lqcGNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVpXUkVjbTl3Wkc5M2JpQTlJSFJvYVhNdWNtVnVaR1Z5VTJOeWIyeHNUVzlrWlNncE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdOaGMyVWdYQ0p6Wld4bFkzUmNJanBjYmlBZ0lDQWdJQ0FnY21WdVpHVnlaV1JFY205d1pHOTNiaUE5SUhSb2FYTXVjbVZ1WkdWeVUyVnNaV04wVFc5a1pTZ3BPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMkJ5WldGamRDMWtZWFJsY0dsamEyVnlYMTl0YjI1MGFDMTVaV0Z5TFdSeWIzQmtiM2R1TFdOdmJuUmhhVzVsY2lCeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5dGIyNTBhQzE1WldGeUxXUnliM0JrYjNkdUxXTnZiblJoYVc1bGNpMHRKSHQwYUdsekxuQnliM0J6TG1SeWIzQmtiM2R1VFc5a1pYMWdmVnh1SUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0I3Y21WdVpHVnlaV1JFY205d1pHOTNibjFjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQlNaV0ZqZENCbWNtOXRJRndpY21WaFkzUmNJanRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQmNJbkJ5YjNBdGRIbHdaWE5jSWp0Y2JtbHRjRzl5ZENCN0lHTnNjM2dnZlNCbWNtOXRJRndpWTJ4emVGd2lPMXh1YVcxd2IzSjBJSHRjYmlBZ1oyVjBSR0Y1TEZ4dUlDQm5aWFJOYjI1MGFDeGNiaUFnWjJWMFJHRjBaU3hjYmlBZ2JtVjNSR0YwWlN4Y2JpQWdhWE5UWVcxbFJHRjVMRnh1SUNCcGMwUmhlVVJwYzJGaWJHVmtMRnh1SUNCcGMwUmhlVVY0WTJ4MVpHVmtMRnh1SUNCcGMwUmhlVWx1VW1GdVoyVXNYRzRnSUdselJYRjFZV3dzWEc0Z0lHbHpRbVZtYjNKbExGeHVJQ0JwYzBGbWRHVnlMRnh1SUNCblpYUkVZWGxQWmxkbFpXdERiMlJsTEZ4dUlDQm5aWFJUZEdGeWRFOW1WMlZsYXl4Y2JpQWdabTl5YldGMFJHRjBaU3hjYm4wZ1puSnZiU0JjSWk0dlpHRjBaVjkxZEdsc2Mxd2lPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QkVZWGtnWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdGeWFXRk1ZV0psYkZCeVpXWnBlRmRvWlc1RmJtRmliR1ZrT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR0Z5YVdGTVlXSmxiRkJ5WldacGVGZG9aVzVFYVhOaFlteGxaRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQmthWE5oWW14bFpFdGxlV0p2WVhKa1RtRjJhV2RoZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnWkdGNU9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHUmhlVU5zWVhOelRtRnRaVG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ1pXNWtSR0YwWlRvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrc1hHNGdJQ0FnYUdsbmFHeHBaMmgwUkdGMFpYTTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0UxaGNDa3NYRzRnSUNBZ2FHOXNhV1JoZVhNNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRTFoY0Nrc1hHNGdJQ0FnYVc1c2FXNWxPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCemFHOTFiR1JHYjJOMWMwUmhlVWx1YkdsdVpUb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYlc5dWRHZzZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUNBZ2IyNURiR2xqYXpvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdkWE5sVUc5cGJuUmxja1YyWlc1ME9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J2YmsxdmRYTmxSVzUwWlhJNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJSEJ5WlZObGJHVmpkR2x2YmpvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrc1hHNGdJQ0FnYzJWc1pXTjBaV1E2SUZCeWIzQlVlWEJsY3k1dlltcGxZM1FzWEc0Z0lDQWdjMlZzWldOMGFXNW5SR0YwWlRvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrc1hHNGdJQ0FnYzJWc1pXTjBjMFZ1WkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMlZzWldOMGMxTjBZWEowT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnpaV3hsWTNSelVtRnVaMlU2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITm9iM2RYWldWclVHbGphMlZ5T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnphRzkzVjJWbGEwNTFiV0psY2pvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMlZzWldOMGMwUnBjMkZpYkdWa1JHRjVjMGx1VW1GdVoyVTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhObGJHVmpkSE5OZFd4MGFYQnNaVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2MyVnNaV04wWldSRVlYUmxjem9nVUhKdmNGUjVjR1Z6TG1GeWNtRjVUMllvVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1JHRjBaU2twTEZ4dUlDQWdJSE4wWVhKMFJHRjBaVG9nVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1JHRjBaU2tzWEc0Z0lDQWdjbVZ1WkdWeVJHRjVRMjl1ZEdWdWRITTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUdoaGJtUnNaVTl1UzJWNVJHOTNiam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ1kyOXVkR0ZwYm1WeVVtVm1PaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0Y2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk5vWVhCbEtIc2dZM1Z5Y21WdWREb2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDQjlLU3hjYmlBZ0lDQmRLU3hjYmlBZ0lDQnRiMjUwYUZOb2IzZHpSSFZ3YkdsallYUmxSR0Y1YzBWdVpEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYlc5dWRHaFRhRzkzYzBSMWNHeHBZMkYwWlVSaGVYTlRkR0Z5ZERvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdiRzlqWVd4bE9pQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRjYmlBZ0lDQWdJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ0lDQlFjbTl3Vkhsd1pYTXVjMmhoY0dVb2V5QnNiMk5oYkdVNklGQnliM0JVZVhCbGN5NXZZbXBsWTNRZ2ZTa3NYRzRnSUNBZ1hTa3NYRzRnSUNBZ1kyRnNaVzVrWVhKVGRHRnlkRVJoZVRvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2l4Y2JpQWdJQ0JsZUdOc2RXUmxSR0YwWlhNNklGQnliM0JVZVhCbGN5NWhjbkpoZVU5bUtGeHVJQ0FnSUNBZ1VISnZjRlI1Y0dWekxtOXVaVTltVkhsd1pTaGJYRzRnSUNBZ0lDQWdJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lDQWdJQ0JRY205d1ZIbHdaWE11YzJoaGNHVW9lMXh1SUNBZ0lDQWdJQ0FnSUdSaGRHVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQmRLU3hjYmlBZ0lDQXBMRnh1SUNCOU8xeHVYRzRnSUdOdmJYQnZibVZ1ZEVScFpFMXZkVzUwS0NrZ2UxeHVJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFJtOWpkWE5FWVhrb0tUdGNiaUFnZlZ4dVhHNGdJR052YlhCdmJtVnVkRVJwWkZWd1pHRjBaU2h3Y21WMlVISnZjSE1wSUh0Y2JpQWdJQ0IwYUdsekxtaGhibVJzWlVadlkzVnpSR0Y1S0hCeVpYWlFjbTl3Y3lrN1hHNGdJSDFjYmx4dUlDQmtZWGxGYkNBOUlGSmxZV04wTG1OeVpXRjBaVkpsWmlncE8xeHVYRzRnSUdoaGJtUnNaVU5zYVdOcklEMGdLR1YyWlc1MEtTQTlQaUI3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbWx6UkdsellXSnNaV1FvS1NBbUppQjBhR2x6TG5CeWIzQnpMbTl1UTJ4cFkyc3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YjI1RGJHbGpheWhsZG1WdWRDazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJR2hoYm1Sc1pVMXZkWE5sUlc1MFpYSWdQU0FvWlhabGJuUXBJRDArSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11YVhORWFYTmhZbXhsWkNncElDWW1JSFJvYVhNdWNISnZjSE11YjI1TmIzVnpaVVZ1ZEdWeUtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbTl1VFc5MWMyVkZiblJsY2lobGRtVnVkQ2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdoaGJtUnNaVTl1UzJWNVJHOTNiaUE5SUNobGRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR1YyWlc1MFMyVjVJRDBnWlhabGJuUXVhMlY1TzF4dUlDQWdJR2xtSUNobGRtVnVkRXRsZVNBOVBUMGdYQ0lnWENJcElIdGNiaUFnSUNBZ0lHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0JsZG1WdWRDNXJaWGtnUFNCY0lrVnVkR1Z5WENJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXdjbTl3Y3k1b1lXNWtiR1ZQYmt0bGVVUnZkMjRvWlhabGJuUXBPMXh1SUNCOU8xeHVYRzRnSUdselUyRnRaVVJoZVNBOUlDaHZkR2hsY2lrZ1BUNGdhWE5UWVcxbFJHRjVLSFJvYVhNdWNISnZjSE11WkdGNUxDQnZkR2hsY2lrN1hHNWNiaUFnYVhOTFpYbGliMkZ5WkZObGJHVmpkR1ZrSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxtUnBjMkZpYkdWa1MyVjVZbTloY21ST1lYWnBaMkYwYVc5dUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2FYTlRaV3hsWTNSbFpFUmhkR1VnUFNCMGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEhOTmRXeDBhWEJzWlZ4dUlDQWdJQ0FnUHlCMGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEdWa1JHRjBaWE0vTG5OdmJXVW9LR1JoZEdVcElEMCtJSFJvYVhNdWFYTlRZVzFsUkdGNVQzSlhaV1ZyS0dSaGRHVXBLVnh1SUNBZ0lDQWdPaUIwYUdsekxtbHpVMkZ0WlVSaGVVOXlWMlZsYXloMGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEdWa0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlBaGFYTlRaV3hsWTNSbFpFUmhkR1VnSmlZZ2RHaHBjeTVwYzFOaGJXVkVZWGxQY2xkbFpXc29kR2hwY3k1d2NtOXdjeTV3Y21WVFpXeGxZM1JwYjI0cE8xeHVJQ0I5TzF4dVhHNGdJR2x6UkdsellXSnNaV1FnUFNBb0tTQTlQaUJwYzBSaGVVUnBjMkZpYkdWa0tIUm9hWE11Y0hKdmNITXVaR0Y1TENCMGFHbHpMbkJ5YjNCektUdGNibHh1SUNCcGMwVjRZMngxWkdWa0lEMGdLQ2tnUFQ0Z2FYTkVZWGxGZUdOc2RXUmxaQ2gwYUdsekxuQnliM0J6TG1SaGVTd2dkR2hwY3k1d2NtOXdjeWs3WEc1Y2JpQWdhWE5UZEdGeWRFOW1WMlZsYXlBOUlDZ3BJRDArWEc0Z0lDQWdhWE5UWVcxbFJHRjVLRnh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVrWVhrc1hHNGdJQ0FnSUNCblpYUlRkR0Z5ZEU5bVYyVmxheWhjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1a1lYa3NYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11Ykc5allXeGxMRnh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1OaGJHVnVaR0Z5VTNSaGNuUkVZWGtzWEc0Z0lDQWdJQ0FwTEZ4dUlDQWdJQ2s3WEc1Y2JpQWdhWE5UWVcxbFYyVmxheUE5SUNodmRHaGxjaWtnUFQ1Y2JpQWdJQ0IwYUdsekxuQnliM0J6TG5Ob2IzZFhaV1ZyVUdsamEyVnlJQ1ltWEc0Z0lDQWdhWE5UWVcxbFJHRjVLRnh1SUNBZ0lDQWdiM1JvWlhJc1hHNGdJQ0FnSUNCblpYUlRkR0Z5ZEU5bVYyVmxheWhjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1a1lYa3NYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11Ykc5allXeGxMRnh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1OaGJHVnVaR0Z5VTNSaGNuUkVZWGtzWEc0Z0lDQWdJQ0FwTEZ4dUlDQWdJQ2s3WEc1Y2JpQWdhWE5UWVcxbFJHRjVUM0pYWldWcklEMGdLRzkwYUdWeUtTQTlQaUIwYUdsekxtbHpVMkZ0WlVSaGVTaHZkR2hsY2lrZ2ZId2dkR2hwY3k1cGMxTmhiV1ZYWldWcktHOTBhR1Z5S1R0Y2JseHVJQ0JuWlhSSWFXZG9UR2xuYUhSbFpFTnNZWE56SUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2daR0Y1TENCb2FXZG9iR2xuYUhSRVlYUmxjeUI5SUQwZ2RHaHBjeTV3Y205d2N6dGNibHh1SUNBZ0lHbG1JQ2doYUdsbmFHeHBaMmgwUkdGMFpYTXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCTWIyOXJhVzVuSUdadmNpQmpiR0Z6YzA1aGJXVWdhVzRnZEdobElFMWhjQ0J2WmlCN0oyUmhlU0J6ZEhKcGJtY3NJQ2RqYkdGemMwNWhiV1VuZlZ4dUlDQWdJR052Ym5OMElHUmhlVk4wY2lBOUlHWnZjbTFoZEVSaGRHVW9aR0Y1TENCY0lrMU5MbVJrTG5sNWVYbGNJaWs3WEc0Z0lDQWdjbVYwZFhKdUlHaHBaMmhzYVdkb2RFUmhkR1Z6TG1kbGRDaGtZWGxUZEhJcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVaMWJtTjBhVzl1SUhSdklISmxkSFZ5YmlCMGFHVWdZWEp5WVhrZ1kyOXVkR0ZwYm1sdVp5QmpiR0Z6YzI1aGJXVWdZWE56YjJOcFlYUmxaQ0IwYnlCMGFHVWdaR0YwWlZ4dUlDQm5aWFJJYjJ4cFpHRjVjME5zWVhOeklEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnWkdGNUxDQm9iMnhwWkdGNWN5QjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JwWmlBb0lXaHZiR2xrWVhsektTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNBZ0lHTnZibk4wSUdSaGVWTjBjaUE5SUdadmNtMWhkRVJoZEdVb1pHRjVMQ0JjSWsxTkxtUmtMbmw1ZVhsY0lpazdYRzRnSUNBZ0x5OGdURzl2YTJsdVp5Qm1iM0lnWTJ4aGMzTk9ZVzFsSUdsdUlIUm9aU0JOWVhBZ2IyWWdlMlJoZVNCemRISnBibWM2SUh0amJHRnpjMDVoYldVc0lHaHZiR2xrWVhsT1lXMWxmWDFjYmlBZ0lDQnBaaUFvYUc5c2FXUmhlWE11YUdGektHUmhlVk4wY2lrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCYmFHOXNhV1JoZVhNdVoyVjBLR1JoZVZOMGNpa3VZMnhoYzNOT1lXMWxYVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnYVhOSmJsSmhibWRsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2daR0Y1TENCemRHRnlkRVJoZEdVc0lHVnVaRVJoZEdVZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdhV1lnS0NGemRHRnlkRVJoZEdVZ2ZId2dJV1Z1WkVSaGRHVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHbHpSR0Y1U1c1U1lXNW5aU2hrWVhrc0lITjBZWEowUkdGMFpTd2daVzVrUkdGMFpTazdYRzRnSUgwN1hHNWNiaUFnYVhOSmJsTmxiR1ZqZEdsdVoxSmhibWRsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lHUmhlU3hjYmlBZ0lDQWdJSE5sYkdWamRITlRkR0Z5ZEN4Y2JpQWdJQ0FnSUhObGJHVmpkSE5GYm1Rc1hHNGdJQ0FnSUNCelpXeGxZM1J6VW1GdVoyVXNYRzRnSUNBZ0lDQnpaV3hsWTNSelJHbHpZV0pzWldSRVlYbHpTVzVTWVc1blpTeGNiaUFnSUNBZ0lITjBZWEowUkdGMFpTeGNiaUFnSUNBZ0lHVnVaRVJoZEdVc1hHNGdJQ0FnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzVjYmlBZ0lDQmpiMjV6ZENCelpXeGxZM1JwYm1kRVlYUmxJRDBnZEdocGN5NXdjbTl3Y3k1elpXeGxZM1JwYm1kRVlYUmxJRDgvSUhSb2FYTXVjSEp2Y0hNdWNISmxVMlZzWldOMGFXOXVPMXh1WEc0Z0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSVNoelpXeGxZM1J6VTNSaGNuUWdmSHdnYzJWc1pXTjBjMFZ1WkNCOGZDQnpaV3hsWTNSelVtRnVaMlVwSUh4OFhHNGdJQ0FnSUNBaGMyVnNaV04wYVc1blJHRjBaU0I4ZkZ4dUlDQWdJQ0FnS0NGelpXeGxZM1J6UkdsellXSnNaV1JFWVhselNXNVNZVzVuWlNBbUppQjBhR2x6TG1selJHbHpZV0pzWldRb0tTbGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0J6Wld4bFkzUnpVM1JoY25RZ0ppWmNiaUFnSUNBZ0lHVnVaRVJoZEdVZ0ppWmNiaUFnSUNBZ0lDaHBjMEpsWm05eVpTaHpaV3hsWTNScGJtZEVZWFJsTENCbGJtUkVZWFJsS1NCOGZDQnBjMFZ4ZFdGc0tITmxiR1ZqZEdsdVowUmhkR1VzSUdWdVpFUmhkR1VwS1Z4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR2x6UkdGNVNXNVNZVzVuWlNoa1lYa3NJSE5sYkdWamRHbHVaMFJoZEdVc0lHVnVaRVJoZEdVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lITmxiR1ZqZEhORmJtUWdKaVpjYmlBZ0lDQWdJSE4wWVhKMFJHRjBaU0FtSmx4dUlDQWdJQ0FnS0dselFXWjBaWElvYzJWc1pXTjBhVzVuUkdGMFpTd2djM1JoY25SRVlYUmxLU0I4ZkNCcGMwVnhkV0ZzS0hObGJHVmpkR2x1WjBSaGRHVXNJSE4wWVhKMFJHRjBaU2twWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhWE5FWVhsSmJsSmhibWRsS0dSaGVTd2djM1JoY25SRVlYUmxMQ0J6Wld4bFkzUnBibWRFWVhSbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9YRzRnSUNBZ0lDQnpaV3hsWTNSelVtRnVaMlVnSmlaY2JpQWdJQ0FnSUhOMFlYSjBSR0YwWlNBbUpseHVJQ0FnSUNBZ0lXVnVaRVJoZEdVZ0ppWmNiaUFnSUNBZ0lDaHBjMEZtZEdWeUtITmxiR1ZqZEdsdVowUmhkR1VzSUhOMFlYSjBSR0YwWlNrZ2ZId2dhWE5GY1hWaGJDaHpaV3hsWTNScGJtZEVZWFJsTENCemRHRnlkRVJoZEdVcEtWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdselJHRjVTVzVTWVc1blpTaGtZWGtzSUhOMFlYSjBSR0YwWlN3Z2MyVnNaV04wYVc1blJHRjBaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlPMXh1WEc0Z0lHbHpVMlZzWldOMGFXNW5VbUZ1WjJWVGRHRnlkQ0E5SUNncElEMCtJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVhWE5KYmxObGJHVmpkR2x1WjFKaGJtZGxLQ2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0I3SUdSaGVTd2djM1JoY25SRVlYUmxMQ0J6Wld4bFkzUnpVM1JoY25RZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdZMjl1YzNRZ2MyVnNaV04wYVc1blJHRjBaU0E5SUhSb2FYTXVjSEp2Y0hNdWMyVnNaV04wYVc1blJHRjBaU0EvUHlCMGFHbHpMbkJ5YjNCekxuQnlaVk5sYkdWamRHbHZianRjYmx4dUlDQWdJR2xtSUNoelpXeGxZM1J6VTNSaGNuUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnBjMU5oYldWRVlYa29aR0Y1TENCelpXeGxZM1JwYm1kRVlYUmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdselUyRnRaVVJoZVNoa1lYa3NJSE4wWVhKMFJHRjBaU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdselUyVnNaV04wYVc1blVtRnVaMlZGYm1RZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG1selNXNVRaV3hsWTNScGJtZFNZVzVuWlNncEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2V5QmtZWGtzSUdWdVpFUmhkR1VzSUhObGJHVmpkSE5GYm1Rc0lITmxiR1ZqZEhOU1lXNW5aU0I5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCamIyNXpkQ0J6Wld4bFkzUnBibWRFWVhSbElEMGdkR2hwY3k1d2NtOXdjeTV6Wld4bFkzUnBibWRFWVhSbElEOC9JSFJvYVhNdWNISnZjSE11Y0hKbFUyVnNaV04wYVc5dU8xeHVYRzRnSUNBZ2FXWWdLSE5sYkdWamRITkZibVFnZkh3Z2MyVnNaV04wYzFKaGJtZGxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhWE5UWVcxbFJHRjVLR1JoZVN3Z2MyVnNaV04wYVc1blJHRjBaU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcGMxTmhiV1ZFWVhrb1pHRjVMQ0JsYm1SRVlYUmxLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnYVhOU1lXNW5aVk4wWVhKMElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnWkdGNUxDQnpkR0Z5ZEVSaGRHVXNJR1Z1WkVSaGRHVWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnYVdZZ0tDRnpkR0Z5ZEVSaGRHVWdmSHdnSVdWdVpFUmhkR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR2x6VTJGdFpVUmhlU2h6ZEdGeWRFUmhkR1VzSUdSaGVTazdYRzRnSUgwN1hHNWNiaUFnYVhOU1lXNW5aVVZ1WkNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR1JoZVN3Z2MzUmhjblJFWVhSbExDQmxibVJFWVhSbElIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJR2xtSUNnaGMzUmhjblJFWVhSbElIeDhJQ0ZsYm1SRVlYUmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnBjMU5oYldWRVlYa29aVzVrUkdGMFpTd2daR0Y1S1R0Y2JpQWdmVHRjYmx4dUlDQnBjMWRsWld0bGJtUWdQU0FvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZDJWbGEyUmhlU0E5SUdkbGRFUmhlU2gwYUdsekxuQnliM0J6TG1SaGVTazdYRzRnSUNBZ2NtVjBkWEp1SUhkbFpXdGtZWGtnUFQwOUlEQWdmSHdnZDJWbGEyUmhlU0E5UFQwZ05qdGNiaUFnZlR0Y2JseHVJQ0JwYzBGbWRHVnlUVzl1ZEdnZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11Ylc5dWRHZ2dJVDA5SUhWdVpHVm1hVzVsWkNBbUpseHVJQ0FnSUNBZ0tIUm9hWE11Y0hKdmNITXViVzl1ZEdnZ0t5QXhLU0FsSURFeUlEMDlQU0JuWlhSTmIyNTBhQ2gwYUdsekxuQnliM0J6TG1SaGVTbGNiaUFnSUNBcE8xeHVJQ0I5TzF4dVhHNGdJR2x6UW1WbWIzSmxUVzl1ZEdnZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11Ylc5dWRHZ2dJVDA5SUhWdVpHVm1hVzVsWkNBbUpseHVJQ0FnSUNBZ0tHZGxkRTF2Ym5Sb0tIUm9hWE11Y0hKdmNITXVaR0Y1S1NBcklERXBJQ1VnTVRJZ1BUMDlJSFJvYVhNdWNISnZjSE11Ylc5dWRHaGNiaUFnSUNBcE8xeHVJQ0I5TzF4dVhHNGdJR2x6UTNWeWNtVnVkRVJoZVNBOUlDZ3BJRDArSUhSb2FYTXVhWE5UWVcxbFJHRjVLRzVsZDBSaGRHVW9LU2s3WEc1Y2JpQWdhWE5UWld4bFkzUmxaQ0E5SUNncElEMCtJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXdjbTl3Y3k1elpXeGxZM1J6VFhWc2RHbHdiR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnliM0J6TG5ObGJHVmpkR1ZrUkdGMFpYTS9Mbk52YldVb0tHUmhkR1VwSUQwK1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVhOVFlXMWxSR0Y1VDNKWFpXVnJLR1JoZEdVcExGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWFYTlRZVzFsUkdGNVQzSlhaV1ZyS0hSb2FYTXVjSEp2Y0hNdWMyVnNaV04wWldRcE8xeHVJQ0I5TzF4dVhHNGdJR2RsZEVOc1lYTnpUbUZ0WlhNZ1BTQW9aR0YwWlNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUdSaGVVTnNZWE56VG1GdFpTQTlJSFJvYVhNdWNISnZjSE11WkdGNVEyeGhjM05PWVcxbFhHNGdJQ0FnSUNBL0lIUm9hWE11Y0hKdmNITXVaR0Y1UTJ4aGMzTk9ZVzFsS0dSaGRHVXBYRzRnSUNBZ0lDQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnlaWFIxY200Z1kyeHplQ2hjYmlBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmWkdGNVhDSXNYRzRnSUNBZ0lDQmtZWGxEYkdGemMwNWhiV1VzWEc0Z0lDQWdJQ0JjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDJSaGVTMHRYQ0lnS3lCblpYUkVZWGxQWmxkbFpXdERiMlJsS0hSb2FYTXVjSEp2Y0hNdVpHRjVLU3hjYmlBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnWENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5a1lYa3RMV1JwYzJGaWJHVmtYQ0k2SUhSb2FYTXVhWE5FYVhOaFlteGxaQ2dwTEZ4dUlDQWdJQ0FnSUNCY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgyUmhlUzB0WlhoamJIVmtaV1JjSWpvZ2RHaHBjeTVwYzBWNFkyeDFaR1ZrS0Nrc1hHNGdJQ0FnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZaR0Y1TFMxelpXeGxZM1JsWkZ3aU9pQjBhR2x6TG1selUyVnNaV04wWldRb0tTeGNiaUFnSUNBZ0lDQWdYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTlrWVhrdExXdGxlV0p2WVhKa0xYTmxiR1ZqZEdWa1hDSTZJSFJvYVhNdWFYTkxaWGxpYjJGeVpGTmxiR1ZqZEdWa0tDa3NYRzRnSUNBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmWkdGNUxTMXlZVzVuWlMxemRHRnlkRndpT2lCMGFHbHpMbWx6VW1GdVoyVlRkR0Z5ZENncExGeHVJQ0FnSUNBZ0lDQmNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMlJoZVMwdGNtRnVaMlV0Wlc1a1hDSTZJSFJvYVhNdWFYTlNZVzVuWlVWdVpDZ3BMRnh1SUNBZ0lDQWdJQ0JjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDJSaGVTMHRhVzR0Y21GdVoyVmNJam9nZEdocGN5NXBjMGx1VW1GdVoyVW9LU3hjYmlBZ0lDQWdJQ0FnWENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5a1lYa3RMV2x1TFhObGJHVmpkR2x1WnkxeVlXNW5aVndpT2lCMGFHbHpMbWx6U1c1VFpXeGxZM1JwYm1kU1lXNW5aU2dwTEZ4dUlDQWdJQ0FnSUNCY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgyUmhlUzB0YzJWc1pXTjBhVzVuTFhKaGJtZGxMWE4wWVhKMFhDSTZYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXBjMU5sYkdWamRHbHVaMUpoYm1kbFUzUmhjblFvS1N4Y2JpQWdJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOWtZWGt0TFhObGJHVmpkR2x1WnkxeVlXNW5aUzFsYm1SY0lqcGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtbHpVMlZzWldOMGFXNW5VbUZ1WjJWRmJtUW9LU3hjYmlBZ0lDQWdJQ0FnWENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5a1lYa3RMWFJ2WkdGNVhDSTZJSFJvYVhNdWFYTkRkWEp5Wlc1MFJHRjVLQ2tzWEc0Z0lDQWdJQ0FnSUZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZlpHRjVMUzEzWldWclpXNWtYQ0k2SUhSb2FYTXVhWE5YWldWclpXNWtLQ2tzWEc0Z0lDQWdJQ0FnSUZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZlpHRjVMUzF2ZFhSemFXUmxMVzF2Ym5Sb1hDSTZYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXBjMEZtZEdWeVRXOXVkR2dvS1NCOGZDQjBhR2x6TG1selFtVm1iM0psVFc5dWRHZ29LU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0IwYUdsekxtZGxkRWhwWjJoTWFXZG9kR1ZrUTJ4aGMzTW9YQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTlrWVhrdExXaHBaMmhzYVdkb2RHVmtYQ0lwTEZ4dUlDQWdJQ0FnZEdocGN5NW5aWFJJYjJ4cFpHRjVjME5zWVhOektDa3NYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JseHVJQ0JuWlhSQmNtbGhUR0ZpWld3Z1BTQW9LU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdlMXh1SUNBZ0lDQWdaR0Y1TEZ4dUlDQWdJQ0FnWVhKcFlVeGhZbVZzVUhKbFptbDRWMmhsYmtWdVlXSnNaV1FnUFNCY0lrTm9iMjl6WlZ3aUxGeHVJQ0FnSUNBZ1lYSnBZVXhoWW1Wc1VISmxabWw0VjJobGJrUnBjMkZpYkdWa0lEMGdYQ0pPYjNRZ1lYWmhhV3hoWW14bFhDSXNYRzRnSUNBZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0JqYjI1emRDQndjbVZtYVhnZ1BWeHVJQ0FnSUNBZ2RHaHBjeTVwYzBScGMyRmliR1ZrS0NrZ2ZId2dkR2hwY3k1cGMwVjRZMngxWkdWa0tDbGNiaUFnSUNBZ0lDQWdQeUJoY21saFRHRmlaV3hRY21WbWFYaFhhR1Z1UkdsellXSnNaV1JjYmlBZ0lDQWdJQ0FnT2lCaGNtbGhUR0ZpWld4UWNtVm1hWGhYYUdWdVJXNWhZbXhsWkR0Y2JseHVJQ0FnSUhKbGRIVnliaUJnSkh0d2NtVm1hWGg5SUNSN1ptOXliV0YwUkdGMFpTaGtZWGtzSUZ3aVVGQlFVRndpTENCMGFHbHpMbkJ5YjNCekxteHZZMkZzWlNsOVlEdGNiaUFnZlR0Y2JseHVJQ0F2THlCQklHWjFibU4wYVc5dUlIUnZJSEpsZEhWeWJpQjBhR1VnYUc5c2FXUmhlU2R6SUc1aGJXVWdZWE1nZEdsMGJHVW5jeUJqYjI1MFpXNTBYRzRnSUdkbGRGUnBkR3hsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2daR0Y1TENCb2IyeHBaR0Y1Y3lBOUlHNWxkeUJOWVhBb0tTd2daWGhqYkhWa1pVUmhkR1Z6SUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHTnZibk4wSUdOdmJYQmhjbVZFZENBOUlHWnZjbTFoZEVSaGRHVW9aR0Y1TENCY0lrMU5MbVJrTG5sNWVYbGNJaWs3WEc0Z0lDQWdZMjl1YzNRZ2RHbDBiR1Z6SUQwZ1cxMDdYRzRnSUNBZ2FXWWdLR2h2Ykdsa1lYbHpMbWhoY3loamIyMXdZWEpsUkhRcEtTQjdYRzRnSUNBZ0lDQjBhWFJzWlhNdWNIVnphQ2d1TGk1b2IyeHBaR0Y1Y3k1blpYUW9ZMjl0Y0dGeVpVUjBLUzVvYjJ4cFpHRjVUbUZ0WlhNcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RHaHBjeTVwYzBWNFkyeDFaR1ZrS0NrcElIdGNiaUFnSUNBZ0lIUnBkR3hsY3k1d2RYTm9LRnh1SUNBZ0lDQWdJQ0JsZUdOc2RXUmxSR0YwWlhOY2JpQWdJQ0FnSUNBZ0lDQS9MbVpwYkhSbGNpZ29aWGhqYkhWa1pVUmhkR1VwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzFOaGJXVkVZWGtvWlhoamJIVmtaVVJoZEdVdVpHRjBaU0EvSUdWNFkyeDFaR1ZFWVhSbExtUmhkR1VnT2lCbGVHTnNkV1JsUkdGMFpTd2daR0Y1S1N4Y2JpQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ0FnTG0xaGNDZ29aWGhqYkhWa1pVUmhkR1VwSUQwK0lHVjRZMngxWkdWRVlYUmxMbTFsYzNOaFoyVXBMRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhScGRHeGxjeTVxYjJsdUtGd2lMQ0JjSWlrN1hHNGdJSDA3WEc1Y2JpQWdaMlYwVkdGaVNXNWtaWGdnUFNBb2MyVnNaV04wWldRc0lIQnlaVk5sYkdWamRHbHZiaWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSE5sYkdWamRHVmtSR0Y1SUQwZ2MyVnNaV04wWldRZ2ZId2dkR2hwY3k1d2NtOXdjeTV6Wld4bFkzUmxaRHRjYmlBZ0lDQmpiMjV6ZENCd2NtVlRaV3hsWTNScGIyNUVZWGtnUFNCd2NtVlRaV3hsWTNScGIyNGdmSHdnZEdocGN5NXdjbTl3Y3k1d2NtVlRaV3hsWTNScGIyNDdYRzRnSUNBZ1kyOXVjM1FnZEdGaVNXNWtaWGdnUFZ4dUlDQWdJQ0FnSVNoY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXphRzkzVjJWbGExQnBZMnRsY2lBbUpseHVJQ0FnSUNBZ0lDQW9kR2hwY3k1d2NtOXdjeTV6YUc5M1YyVmxhMDUxYldKbGNpQjhmQ0FoZEdocGN5NXBjMU4wWVhKMFQyWlhaV1ZyS0NrcFhHNGdJQ0FnSUNBcElDWW1YRzRnSUNBZ0lDQW9kR2hwY3k1cGMwdGxlV0p2WVhKa1UyVnNaV04wWldRb0tTQjhmRnh1SUNBZ0lDQWdJQ0FvZEdocGN5NXBjMU5oYldWRVlYa29jMlZzWldOMFpXUkVZWGtwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdhWE5UWVcxbFJHRjVLSEJ5WlZObGJHVmpkR2x2YmtSaGVTd2djMlZzWldOMFpXUkVZWGtwS1NsY2JpQWdJQ0FnSUNBZ1B5QXdYRzRnSUNBZ0lDQWdJRG9nTFRFN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdGaVNXNWtaWGc3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdkbUZ5YVc5MWN5QmpZWE5sY3lCM2FHVnVJSGRsSUc1bFpXUWdkRzhnWVhCd2JIa2dabTlqZFhNZ2RHOGdkR2hsSUhCeVpYTmxiR1ZqZEdWa0lHUmhlVnh1SUNBdkx5Qm1iMk4xY3lCMGFHVWdaR0Y1SUc5dUlHMXZkVzUwTDNWd1pHRjBaU0J6YnlCMGFHRjBJR3RsZVdKdllYSmtJRzVoZG1sbllYUnBiMjRnZDI5eWEzTWdkMmhwYkdVZ1kzbGpiR2x1WnlCMGFISnZkV2RvSUcxdmJuUm9jeUIzYVhSb0lIVndJRzl5SUdSdmQyNGdhMlY1Y3lBb2JtOTBJR1p2Y2lCd2NtVjJJR0Z1WkNCdVpYaDBJRzF2Ym5Sb0lHSjFkSFJ2Ym5NcFhHNGdJQzh2SUhCeVpYWmxiblFnWm05amRYTWdabTl5SUhSb1pYTmxJR0ZqZEdsMlpVVnNaVzFsYm5RZ1kyRnpaWE1nYzI4Z2QyVWdaRzl1SjNRZ2NIVnNiQ0JtYjJOMWN5Qm1jbTl0SUhSb1pTQnBibkIxZENCaGN5QjBhR1VnWTJGc1pXNWtZWElnYjNCbGJuTmNiaUFnYUdGdVpHeGxSbTlqZFhORVlYa2dQU0FvY0hKbGRsQnliM0J6SUQwZ2UzMHBJRDArSUh0Y2JpQWdJQ0JzWlhRZ2MyaHZkV3hrUm05amRYTkVZWGtnUFNCbVlXeHpaVHRjYmlBZ0lDQXZMeUJ2Ym14NUlHUnZJSFJvYVhNZ2QyaHBiR1VnZEdobElHbHVjSFYwSUdsemJpZDBJR1p2WTNWelpXUmNiaUFnSUNBdkx5QnZkR2hsY25kcGMyVXNJSFI1Y0dsdVp5OWlZV05yYzNCaFkybHVaeUIwYUdVZ1pHRjBaU0J0WVc1MVlXeHNlU0J0WVhrZ2MzUmxZV3dnWm05amRYTWdZWGRoZVNCbWNtOXRJSFJvWlNCcGJuQjFkRnh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJSFJvYVhNdVoyVjBWR0ZpU1c1a1pYZ29LU0E5UFQwZ01DQW1KbHh1SUNBZ0lDQWdJWEJ5WlhaUWNtOXdjeTVwYzBsdWNIVjBSbTlqZFhObFpDQW1KbHh1SUNBZ0lDQWdkR2hwY3k1cGMxTmhiV1ZFWVhrb2RHaHBjeTV3Y205d2N5NXdjbVZUWld4bFkzUnBiMjRwWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0F2THlCMGFHVnlaU0JwY3lCamRYSnlaVzUwYkhrZ2JtOGdZV04wYVhabFJXeGxiV1Z1ZENCaGJtUWdibTkwSUdsdWJHbHVaVnh1SUNBZ0lDQWdhV1lnS0NGa2IyTjFiV1Z1ZEM1aFkzUnBkbVZGYkdWdFpXNTBJSHg4SUdSdlkzVnRaVzUwTG1GamRHbDJaVVZzWlcxbGJuUWdQVDA5SUdSdlkzVnRaVzUwTG1KdlpIa3BJSHRjYmlBZ0lDQWdJQ0FnYzJodmRXeGtSbTlqZFhORVlYa2dQU0IwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0x5OGdhVzVzYVc1bElIWmxjbk5wYjI0NlhHNGdJQ0FnSUNBdkx5QmtieUJ1YjNRZ1ptOWpkWE1nYjI0Z2FXNXBkR2xoYkNCeVpXNWtaWElnZEc4Z2NISmxkbVZ1ZENCaGRYUnZSbTlqZFhNZ2FYTnpkV1ZjYmlBZ0lDQWdJQzh2SUdadlkzVnpJR0ZtZEdWeUlHMXZiblJvSUdoaGN5QmphR0Z1WjJWa0lIWnBZU0JyWlhsaWIyRnlaRnh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdWFXNXNhVzVsSUNZbUlDRjBhR2x6TG5CeWIzQnpMbk5vYjNWc1pFWnZZM1Z6UkdGNVNXNXNhVzVsS1NCN1hHNGdJQ0FnSUNBZ0lITm9iM1ZzWkVadlkzVnpSR0Y1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCMGFHVWdZV04wYVhabFJXeGxiV1Z1ZENCcGN5QnBiaUIwYUdVZ1kyOXVkR0ZwYm1WeUxDQmhibVFnYVhRZ2FYTWdZVzV2ZEdobGNpQnBibk4wWVc1alpTQnZaaUJFWVhsY2JpQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVqYjI1MFlXbHVaWEpTWldZZ0ppWmNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVqYjI1MFlXbHVaWEpTWldZdVkzVnljbVZ1ZENBbUpseHVJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbU52Ym5SaGFXNWxjbEpsWmk1amRYSnlaVzUwTG1OdmJuUmhhVzV6S0dSdlkzVnRaVzUwTG1GamRHbDJaVVZzWlcxbGJuUXBJQ1ltWEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1GamRHbDJaVVZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmWkdGNVhDSXBYRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnYzJodmRXeGtSbTlqZFhORVlYa2dQU0IwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0x5OWtZWGtnYVhNZ2IyNWxJRzltSUhSb1pTQnViMjRnY21WdVpHVnlaV1FnWkhWd2JHbGpZWFJsSUdSaGVYTmNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG0xdmJuUm9VMmh2ZDNORWRYQnNhV05oZEdWRVlYbHpSVzVrSUNZbUlIUm9hWE11YVhOQlpuUmxjazF2Ym5Sb0tDa3BJSHRjYmlBZ0lDQWdJQ0FnYzJodmRXeGtSbTlqZFhORVlYa2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG0xdmJuUm9VMmh2ZDNORWRYQnNhV05oZEdWRVlYbHpVM1JoY25RZ0ppWWdkR2hwY3k1cGMwSmxabTl5WlUxdmJuUm9LQ2twSUh0Y2JpQWdJQ0FnSUNBZ2MyaHZkV3hrUm05amRYTkVZWGtnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnphRzkxYkdSR2IyTjFjMFJoZVNBbUppQjBhR2x6TG1SaGVVVnNMbU4xY25KbGJuUS9MbVp2WTNWektIc2djSEpsZG1WdWRGTmpjbTlzYkRvZ2RISjFaU0I5S1R0Y2JpQWdmVHRjYmx4dUlDQnlaVzVrWlhKRVlYbERiMjUwWlc1MGN5QTlJQ2dwSUQwK0lIdGNiaUFnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTV0YjI1MGFGTm9iM2R6UkhWd2JHbGpZWFJsUkdGNWMwVnVaQ0FtSmlCMGFHbHpMbWx6UVdaMFpYSk5iMjUwYUNncEtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNISnZjSE11Ylc5dWRHaFRhRzkzYzBSMWNHeHBZMkYwWlVSaGVYTlRkR0Z5ZENBbUppQjBhR2x6TG1selFtVm1iM0psVFc5dWRHZ29LU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeWIzQnpMbkpsYm1SbGNrUmhlVU52Ym5SbGJuUnpYRzRnSUNBZ0lDQS9JSFJvYVhNdWNISnZjSE11Y21WdVpHVnlSR0Y1UTI5dWRHVnVkSE1vWjJWMFJHRjBaU2gwYUdsekxuQnliM0J6TG1SaGVTa3NJSFJvYVhNdWNISnZjSE11WkdGNUtWeHVJQ0FnSUNBZ09pQm5aWFJFWVhSbEtIUm9hWE11Y0hKdmNITXVaR0Y1S1R0Y2JpQWdmVHRjYmx4dUlDQnlaVzVrWlhJZ1BTQW9LU0E5UGlBb1hHNGdJQ0FnUEdScGRseHVJQ0FnSUNBZ2NtVm1QWHQwYUdsekxtUmhlVVZzZlZ4dUlDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0MGFHbHpMbWRsZEVOc1lYTnpUbUZ0WlhNb2RHaHBjeTV3Y205d2N5NWtZWGtwZlZ4dUlDQWdJQ0FnYjI1TFpYbEViM2R1UFh0MGFHbHpMbWhoYm1Sc1pVOXVTMlY1Ukc5M2JuMWNiaUFnSUNBZ0lHOXVRMnhwWTJzOWUzUm9hWE11YUdGdVpHeGxRMnhwWTJ0OVhHNGdJQ0FnSUNCdmJrMXZkWE5sUlc1MFpYSTllMXh1SUNBZ0lDQWdJQ0FoZEdocGN5NXdjbTl3Y3k1MWMyVlFiMmx1ZEdWeVJYWmxiblFnUHlCMGFHbHpMbWhoYm1Sc1pVMXZkWE5sUlc1MFpYSWdPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJRzl1VUc5cGJuUmxja1Z1ZEdWeVBYdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTUxYzJWUWIybHVkR1Z5UlhabGJuUWdQeUIwYUdsekxtaGhibVJzWlUxdmRYTmxSVzUwWlhJZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIUmhZa2x1WkdWNFBYdDBhR2x6TG1kbGRGUmhZa2x1WkdWNEtDbDlYRzRnSUNBZ0lDQmhjbWxoTFd4aFltVnNQWHQwYUdsekxtZGxkRUZ5YVdGTVlXSmxiQ2dwZlZ4dUlDQWdJQ0FnY205c1pUMWNJbTl3ZEdsdmJsd2lYRzRnSUNBZ0lDQjBhWFJzWlQxN2RHaHBjeTVuWlhSVWFYUnNaU2dwZlZ4dUlDQWdJQ0FnWVhKcFlTMWthWE5oWW14bFpEMTdkR2hwY3k1cGMwUnBjMkZpYkdWa0tDbDlYRzRnSUNBZ0lDQmhjbWxoTFdOMWNuSmxiblE5ZTNSb2FYTXVhWE5EZFhKeVpXNTBSR0Y1S0NrZ1B5QmNJbVJoZEdWY0lpQTZJSFZ1WkdWbWFXNWxaSDFjYmlBZ0lDQWdJR0Z5YVdFdGMyVnNaV04wWldROWUzUm9hWE11YVhOVFpXeGxZM1JsWkNncElIeDhJSFJvYVhNdWFYTkpibEpoYm1kbEtDbDlYRzRnSUNBZ1BseHVJQ0FnSUNBZ2UzUm9hWE11Y21WdVpHVnlSR0Y1UTI5dWRHVnVkSE1vS1gxY2JpQWdJQ0FnSUh0MGFHbHpMbWRsZEZScGRHeGxLQ2tnSVQwOUlGd2lYQ0lnSmlZZ0tGeHVJQ0FnSUNBZ0lDQThjM0JoYmlCamJHRnpjMDVoYldVOVhDSnZkbVZ5YkdGNVhDSStlM1JvYVhNdVoyVjBWR2wwYkdVb0tYMDhMM053WVc0K1hHNGdJQ0FnSUNBcGZWeHVJQ0FnSUR3dlpHbDJQbHh1SUNBcE8xeHVmVnh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ1hDSnlaV0ZqZEZ3aU8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUZ3aWNISnZjQzEwZVhCbGMxd2lPMXh1YVcxd2IzSjBJSHNnWTJ4emVDQjlJR1p5YjIwZ1hDSmpiSE40WENJN1hHNXBiWEJ2Y25RZ2V5QnBjMU5oYldWRVlYa2dmU0JtY205dElGd2lMaTlrWVhSbFgzVjBhV3h6WENJN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZkbFpXdE9kVzFpWlhJZ1pYaDBaVzVrY3lCU1pXRmpkQzVEYjIxd2IyNWxiblFnZTF4dUlDQnpkR0YwYVdNZ1oyVjBJR1JsWm1GMWJIUlFjbTl3Y3lncElIdGNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnWVhKcFlVeGhZbVZzVUhKbFptbDRPaUJjSW5kbFpXc2dYQ0lzWEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJ3Y205d1ZIbHdaWE1nUFNCN1hHNGdJQ0FnZDJWbGEwNTFiV0psY2pvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2k1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUdSaGRHVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdiMjVEYkdsamF6b2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnWVhKcFlVeGhZbVZzVUhKbFptbDRPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lITmxiR1ZqZEdWa09pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNCd2NtVlRaV3hsWTNScGIyNDZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lITm9iM2RYWldWclVHbGphMlZ5T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnphRzkzVjJWbGEwNTFiV0psY2pvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdaR2x6WVdKc1pXUkxaWGxpYjJGeVpFNWhkbWxuWVhScGIyNDZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUdsdWJHbHVaVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2MyaHZkV3hrUm05amRYTkVZWGxKYm14cGJtVTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUdoaGJtUnNaVTl1UzJWNVJHOTNiam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ1kyOXVkR0ZwYm1WeVVtVm1PaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0Y2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk5vWVhCbEtIc2dZM1Z5Y21WdWREb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUld4bGJXVnVkQ2tnZlNrc1hHNGdJQ0FnWFNrc1hHNGdJSDA3WEc1Y2JpQWdZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUW9LU0I3WEc0Z0lDQWdkR2hwY3k1b1lXNWtiR1ZHYjJOMWMxZGxaV3RPZFcxaVpYSW9LVHRjYmlBZ2ZWeHVYRzRnSUdOdmJYQnZibVZ1ZEVScFpGVndaR0YwWlNod2NtVjJVSEp2Y0hNcElIdGNiaUFnSUNCMGFHbHpMbWhoYm1Sc1pVWnZZM1Z6VjJWbGEwNTFiV0psY2lod2NtVjJVSEp2Y0hNcE8xeHVJQ0I5WEc1Y2JpQWdkMlZsYTA1MWJXSmxja1ZzSUQwZ1VtVmhZM1F1WTNKbFlYUmxVbVZtS0NrN1hHNWNiaUFnYUdGdVpHeGxRMnhwWTJzZ1BTQW9aWFpsYm5RcElEMCtJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXdjbTl3Y3k1dmJrTnNhV05yS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtOXVRMnhwWTJzb1pYWmxiblFwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCb1lXNWtiR1ZQYmt0bGVVUnZkMjRnUFNBb1pYWmxiblFwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0JsZG1WdWRFdGxlU0E5SUdWMlpXNTBMbXRsZVR0Y2JpQWdJQ0JwWmlBb1pYWmxiblJMWlhrZ1BUMDlJRndpSUZ3aUtTQjdYRzRnSUNBZ0lDQmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJQ0FnWlhabGJuUXVhMlY1SUQwZ1hDSkZiblJsY2x3aU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVjSEp2Y0hNdWFHRnVaR3hsVDI1TFpYbEViM2R1S0dWMlpXNTBLVHRjYmlBZ2ZUdGNibHh1SUNCcGMwdGxlV0p2WVhKa1UyVnNaV04wWldRZ1BTQW9LU0E5UGx4dUlDQWdJQ0YwYUdsekxuQnliM0J6TG1ScGMyRmliR1ZrUzJWNVltOWhjbVJPWVhacFoyRjBhVzl1SUNZbVhHNGdJQ0FnSVdselUyRnRaVVJoZVNoMGFHbHpMbkJ5YjNCekxtUmhkR1VzSUhSb2FYTXVjSEp2Y0hNdWMyVnNaV04wWldRcElDWW1YRzRnSUNBZ2FYTlRZVzFsUkdGNUtIUm9hWE11Y0hKdmNITXVaR0YwWlN3Z2RHaHBjeTV3Y205d2N5NXdjbVZUWld4bFkzUnBiMjRwTzF4dVhHNGdJR2RsZEZSaFlrbHVaR1Y0SUQwZ0tDa2dQVDVjYmlBZ0lDQjBhR2x6TG5CeWIzQnpMbk5vYjNkWFpXVnJVR2xqYTJWeUlDWW1YRzRnSUNBZ2RHaHBjeTV3Y205d2N5NXphRzkzVjJWbGEwNTFiV0psY2lBbUpseHVJQ0FnSUNoMGFHbHpMbWx6UzJWNVltOWhjbVJUWld4bFkzUmxaQ2dwSUh4OFhHNGdJQ0FnSUNBb2FYTlRZVzFsUkdGNUtIUm9hWE11Y0hKdmNITXVaR0YwWlN3Z2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSbFpDa2dKaVpjYmlBZ0lDQWdJQ0FnYVhOVFlXMWxSR0Y1S0hSb2FYTXVjSEp2Y0hNdWNISmxVMlZzWldOMGFXOXVMQ0IwYUdsekxuQnliM0J6TG5ObGJHVmpkR1ZrS1NrcFhHNGdJQ0FnSUNBL0lEQmNiaUFnSUNBZ0lEb2dMVEU3WEc1Y2JpQWdMeThnZG1GeWFXOTFjeUJqWVhObGN5QjNhR1Z1SUhkbElHNWxaV1FnZEc4Z1lYQndiSGtnWm05amRYTWdkRzhnZEdobElIQnlaWE5sYkdWamRHVmtJSGRsWldzdGJuVnRZbVZ5WEc0Z0lDOHZJR1p2WTNWeklIUm9aU0IzWldWckxXNTFiV0psY2lCdmJpQnRiM1Z1ZEM5MWNHUmhkR1VnYzI4Z2RHaGhkQ0JyWlhsaWIyRnlaQ0J1WVhacFoyRjBhVzl1SUhkdmNtdHpJSGRvYVd4bElHTjVZMnhwYm1jZ2RHaHliM1ZuYUNCdGIyNTBhSE1nZDJsMGFDQjFjQ0J2Y2lCa2IzZHVJR3RsZVhNZ0tHNXZkQ0JtYjNJZ2NISmxkaUJoYm1RZ2JtVjRkQ0J0YjI1MGFDQmlkWFIwYjI1ektWeHVJQ0F2THlCd2NtVjJaVzUwSUdadlkzVnpJR1p2Y2lCMGFHVnpaU0JoWTNScGRtVkZiR1Z0Wlc1MElHTmhjMlZ6SUhOdklIZGxJR1J2YmlkMElIQjFiR3dnWm05amRYTWdabkp2YlNCMGFHVWdhVzV3ZFhRZ1lYTWdkR2hsSUdOaGJHVnVaR0Z5SUc5d1pXNXpYRzRnSUdoaGJtUnNaVVp2WTNWelYyVmxhMDUxYldKbGNpQTlJQ2h3Y21WMlVISnZjSE1nUFNCN2ZTa2dQVDRnZTF4dUlDQWdJR3hsZENCemFHOTFiR1JHYjJOMWMxZGxaV3RPZFcxaVpYSWdQU0JtWVd4elpUdGNiaUFnSUNBdkx5QnZibXg1SUdSdklIUm9hWE1nZDJocGJHVWdkR2hsSUdsdWNIVjBJR2x6YmlkMElHWnZZM1Z6WldSY2JpQWdJQ0F2THlCdmRHaGxjbmRwYzJVc0lIUjVjR2x1Wnk5aVlXTnJjM0JoWTJsdVp5QjBhR1VnWkdGMFpTQnRZVzUxWVd4c2VTQnRZWGtnYzNSbFlXd2dabTlqZFhNZ1lYZGhlU0JtY205dElIUm9aU0JwYm5CMWRGeHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lIUm9hWE11WjJWMFZHRmlTVzVrWlhnb0tTQTlQVDBnTUNBbUpseHVJQ0FnSUNBZ0lYQnlaWFpRY205d2N5NXBjMGx1Y0hWMFJtOWpkWE5sWkNBbUpseHVJQ0FnSUNBZ2FYTlRZVzFsUkdGNUtIUm9hWE11Y0hKdmNITXVaR0YwWlN3Z2RHaHBjeTV3Y205d2N5NXdjbVZUWld4bFkzUnBiMjRwWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0F2THlCMGFHVnlaU0JwY3lCamRYSnlaVzUwYkhrZ2JtOGdZV04wYVhabFJXeGxiV1Z1ZENCaGJtUWdibTkwSUdsdWJHbHVaVnh1SUNBZ0lDQWdhV1lnS0NGa2IyTjFiV1Z1ZEM1aFkzUnBkbVZGYkdWdFpXNTBJSHg4SUdSdlkzVnRaVzUwTG1GamRHbDJaVVZzWlcxbGJuUWdQVDA5SUdSdlkzVnRaVzUwTG1KdlpIa3BJSHRjYmlBZ0lDQWdJQ0FnYzJodmRXeGtSbTlqZFhOWFpXVnJUblZ0WW1WeUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklHbHViR2x1WlNCMlpYSnphVzl1T2x4dUlDQWdJQ0FnTHk4Z1pHOGdibTkwSUdadlkzVnpJRzl1SUdsdWFYUnBZV3dnY21WdVpHVnlJSFJ2SUhCeVpYWmxiblFnWVhWMGIwWnZZM1Z6SUdsemMzVmxYRzRnSUNBZ0lDQXZMeUJtYjJOMWN5QmhablJsY2lCdGIyNTBhQ0JvWVhNZ1kyaGhibWRsWkNCMmFXRWdhMlY1WW05aGNtUmNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG1sdWJHbHVaU0FtSmlBaGRHaHBjeTV3Y205d2N5NXphRzkxYkdSR2IyTjFjMFJoZVVsdWJHbHVaU2tnZTF4dUlDQWdJQ0FnSUNCemFHOTFiR1JHYjJOMWMxZGxaV3RPZFcxaVpYSWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lDOHZJSFJvWlNCaFkzUnBkbVZGYkdWdFpXNTBJR2x6SUdsdUlIUm9aU0JqYjI1MFlXbHVaWElzSUdGdVpDQnBkQ0JwY3lCaGJtOTBhR1Z5SUdsdWMzUmhibU5sSUc5bUlGZGxaV3RPZFcxaVpYSmNiaUFnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1amIyNTBZV2x1WlhKU1pXWWdKaVpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1amIyNTBZV2x1WlhKU1pXWXVZM1Z5Y21WdWRDQW1KbHh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1OdmJuUmhhVzVsY2xKbFppNWpkWEp5Wlc1MExtTnZiblJoYVc1ektHUnZZM1Z0Wlc1MExtRmpkR2wyWlVWc1pXMWxiblFwSUNZbVhHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmpkR2wyWlVWc1pXMWxiblFnSmlaY2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVlXTjBhWFpsUld4bGJXVnVkQzVqYkdGemMweHBjM1F1WTI5dWRHRnBibk1vWEc0Z0lDQWdJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOTNaV1ZyTFc1MWJXSmxjbHdpTEZ4dUlDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdjMmh2ZFd4a1JtOWpkWE5YWldWclRuVnRZbVZ5SUQwZ2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnphRzkxYkdSR2IyTjFjMWRsWld0T2RXMWlaWElnSmlaY2JpQWdJQ0FnSUhSb2FYTXVkMlZsYTA1MWJXSmxja1ZzTG1OMWNuSmxiblFnSmlaY2JpQWdJQ0FnSUhSb2FYTXVkMlZsYTA1MWJXSmxja1ZzTG1OMWNuSmxiblF1Wm05amRYTW9leUJ3Y21WMlpXNTBVMk55YjJ4c09pQjBjblZsSUgwcE8xeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lIZGxaV3RPZFcxaVpYSXNJR0Z5YVdGTVlXSmxiRkJ5WldacGVDQTlJRndpZDJWbGF5QmNJaXdnYjI1RGJHbGpheUI5SUQwZ2RHaHBjeTV3Y205d2N6dGNibHh1SUNBZ0lHTnZibk4wSUhkbFpXdE9kVzFpWlhKRGJHRnpjMlZ6SUQwZ2UxeHVJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOTNaV1ZyTFc1MWJXSmxjbHdpT2lCMGNuVmxMRnh1SUNBZ0lDQWdYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTkzWldWckxXNTFiV0psY2kwdFkyeHBZMnRoWW14bFhDSTZJQ0VoYjI1RGJHbGpheXhjYmlBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmZDJWbGF5MXVkVzFpWlhJdExYTmxiR1ZqZEdWa1hDSTZYRzRnSUNBZ0lDQWdJQ0VoYjI1RGJHbGpheUFtSmlCcGMxTmhiV1ZFWVhrb2RHaHBjeTV3Y205d2N5NWtZWFJsTENCMGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEdWa0tTeGNiaUFnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZkMlZsYXkxdWRXMWlaWEl0TFd0bGVXSnZZWEprTFhObGJHVmpkR1ZrWENJNlhHNGdJQ0FnSUNBZ0lIUm9hWE11YVhOTFpYbGliMkZ5WkZObGJHVmpkR1ZrS0Nrc1hHNGdJQ0FnZlR0Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNCeVpXWTllM1JvYVhNdWQyVmxhMDUxYldKbGNrVnNmVnh1SUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTJOc2MzZ29kMlZsYTA1MWJXSmxja05zWVhOelpYTXBmVnh1SUNBZ0lDQWdJQ0JoY21saExXeGhZbVZzUFh0Z0pIdGhjbWxoVEdGaVpXeFFjbVZtYVhoOUlDUjdkR2hwY3k1d2NtOXdjeTUzWldWclRuVnRZbVZ5ZldCOVhHNGdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUzUm9hWE11YUdGdVpHeGxRMnhwWTJ0OVhHNGdJQ0FnSUNBZ0lHOXVTMlY1Ukc5M2JqMTdkR2hwY3k1b1lXNWtiR1ZQYmt0bGVVUnZkMjU5WEc0Z0lDQWdJQ0FnSUhSaFlrbHVaR1Y0UFh0MGFHbHpMbWRsZEZSaFlrbHVaR1Y0S0NsOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdDNaV1ZyVG5WdFltVnlmVnh1SUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElGSmxZV04wSUdaeWIyMGdYQ0p5WldGamRGd2lPMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElGd2ljSEp2Y0MxMGVYQmxjMXdpTzF4dWFXMXdiM0owSUVSaGVTQm1jbTl0SUZ3aUxpOWtZWGxjSWp0Y2JtbHRjRzl5ZENCWFpXVnJUblZ0WW1WeUlHWnliMjBnWENJdUwzZGxaV3RmYm5WdFltVnlYQ0k3WEc1cGJYQnZjblFnZXlCamJITjRJSDBnWm5KdmJTQmNJbU5zYzNoY0lqdGNibHh1YVcxd2IzSjBJSHNnWVdSa1JHRjVjeXdnWjJWMFYyVmxheXdnWjJWMFUzUmhjblJQWmxkbFpXc3NJR2x6VTJGdFpVUmhlU0I5SUdaeWIyMGdYQ0l1TDJSaGRHVmZkWFJwYkhOY0lqdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1YyVmxheUJsZUhSbGJtUnpJRkpsWVdOMExrTnZiWEJ2Ym1WdWRDQjdYRzRnSUhOMFlYUnBZeUJuWlhRZ1pHVm1ZWFZzZEZCeWIzQnpLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQnphRzkxYkdSRGJHOXpaVTl1VTJWc1pXTjBPaUIwY25WbExGeHVJQ0FnSUgwN1hHNGdJSDFjYmlBZ2MzUmhkR2xqSUhCeWIzQlVlWEJsY3lBOUlIdGNiaUFnSUNCaGNtbGhUR0ZpWld4UWNtVm1hWGc2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdaR2x6WVdKc1pXUkxaWGxpYjJGeVpFNWhkbWxuWVhScGIyNDZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUdSaGVUb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQmtZWGxEYkdGemMwNWhiV1U2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lHUnBjMkZpYkdWa1JHRjVRWEpwWVV4aFltVnNVSEpsWm1sNE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdOb2IyOXpaVVJoZVVGeWFXRk1ZV0psYkZCeVpXWnBlRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQmxibVJFWVhSbE9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNCbGVHTnNkV1JsUkdGMFpYTTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVVOW1LRnh1SUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiWEc0Z0lDQWdJQ0FnSUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTEZ4dUlDQWdJQ0FnSUNCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZTF4dUlDQWdJQ0FnSUNBZ0lHUmhkR1U2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0JkS1N4Y2JpQWdJQ0FwTEZ4dUlDQWdJR1Y0WTJ4MVpHVkVZWFJsU1c1MFpYSjJZV3h6T2lCUWNtOXdWSGx3WlhNdVlYSnlZWGxQWmloY2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1emFHRndaU2g3WEc0Z0lDQWdJQ0FnSUhOMFlYSjBPaUJRY205d1ZIbHdaWE11YVc1emRHRnVZMlZQWmloRVlYUmxLU3hjYmlBZ0lDQWdJQ0FnWlc1a09pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNBZ0lIMHBMRnh1SUNBZ0lDa3NYRzRnSUNBZ1ptbHNkR1Z5UkdGMFpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnWm05eWJXRjBWMlZsYTA1MWJXSmxjam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2FHbG5hR3hwWjJoMFJHRjBaWE02SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFMWhjQ2tzWEc0Z0lDQWdhRzlzYVdSaGVYTTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0UxaGNDa3NYRzRnSUNBZ2FXNWpiSFZrWlVSaGRHVnpPaUJRY205d1ZIbHdaWE11WVhKeVlYa3NYRzRnSUNBZ2FXNWpiSFZrWlVSaGRHVkpiblJsY25aaGJITTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVTeGNiaUFnSUNCcGJteHBibVU2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITm9iM1ZzWkVadlkzVnpSR0Y1U1c1c2FXNWxPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCc2IyTmhiR1U2SUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxeHVJQ0FnSUNBZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1emFHRndaU2g3SUd4dlkyRnNaVG9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ0I5S1N4Y2JpQWdJQ0JkS1N4Y2JpQWdJQ0J0WVhoRVlYUmxPaUJRY205d1ZIbHdaWE11YVc1emRHRnVZMlZQWmloRVlYUmxLU3hjYmlBZ0lDQmpZV3hsYm1SaGNsTjBZWEowUkdGNU9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0FnSUcxcGJrUmhkR1U2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTEZ4dUlDQWdJRzF2Ym5Sb09pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0FnSUc5dVJHRjVRMnhwWTJzNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJSFZ6WlZCdmFXNTBaWEpGZG1WdWREb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYjI1RVlYbE5iM1Z6WlVWdWRHVnlPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCdmJsZGxaV3RUWld4bFkzUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhCeVpWTmxiR1ZqZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3NYRzRnSUNBZ2MyVnNaV04wWldRNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUhObGJHVmpkR2x1WjBSaGRHVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lITmxiR1ZqZEhORmJtUTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhObGJHVmpkSE5UZEdGeWREb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzJWc1pXTjBjMUpoYm1kbE9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6Wld4bFkzUnpUWFZzZEdsd2JHVTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhObGJHVmpkR1ZrUkdGMFpYTTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVVOW1LRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBLU3hjYmlBZ0lDQnpaV3hsWTNSelJHbHpZV0pzWldSRVlYbHpTVzVTWVc1blpUb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzJodmQxZGxaV3RPZFcxaVpYSTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhOb2IzZFhaV1ZyVUdsamEyVnlPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCemRHRnlkRVJoZEdVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUhObGRFOXdaVzQ2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lITm9iM1ZzWkVOc2IzTmxUMjVUWld4bFkzUTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhKbGJtUmxja1JoZVVOdmJuUmxiblJ6T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQm9ZVzVrYkdWUGJrdGxlVVJ2ZDI0NklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJR2x6U1c1d2RYUkdiMk4xYzJWa09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JqYjI1MFlXbHVaWEpTWldZNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMXh1SUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnSUNCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZXlCamRYSnlaVzUwT2lCUWNtOXdWSGx3WlhNdWIySnFaV04wSUgwcExGeHVJQ0FnSUYwcExGeHVJQ0FnSUcxdmJuUm9VMmh2ZDNORWRYQnNhV05oZEdWRVlYbHpSVzVrT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnRiMjUwYUZOb2IzZHpSSFZ3YkdsallYUmxSR0Y1YzFOMFlYSjBPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVkVZWGxEYkdsamF5QTlJQ2hrWVhrc0lHVjJaVzUwS1NBOVBpQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNISnZjSE11YjI1RVlYbERiR2xqYXlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXZia1JoZVVOc2FXTnJLR1JoZVN3Z1pYWmxiblFwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCb1lXNWtiR1ZFWVhsTmIzVnpaVVZ1ZEdWeUlEMGdLR1JoZVNrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG05dVJHRjVUVzkxYzJWRmJuUmxjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJrUmhlVTF2ZFhObFJXNTBaWElvWkdGNUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdhR0Z1Wkd4bFYyVmxhME5zYVdOcklEMGdLR1JoZVN3Z2QyVmxhMDUxYldKbGNpd2daWFpsYm5RcElEMCtJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdWNISnZjSE11YjI1WFpXVnJVMlZzWldOMElEMDlQU0JjSW1aMWJtTjBhVzl1WENJcElIdGNiaUFnSUNBZ0lIUm9hWE11Y0hKdmNITXViMjVYWldWclUyVnNaV04wS0dSaGVTd2dkMlZsYTA1MWJXSmxjaXdnWlhabGJuUXBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTV6YUc5M1YyVmxhMUJwWTJ0bGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1ZFWVhsRGJHbGpheWhrWVhrc0lHVjJaVzUwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdWMyaHZkV3hrUTJ4dmMyVlBibE5sYkdWamRDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTV6WlhSUGNHVnVLR1poYkhObEtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdabTl5YldGMFYyVmxhMDUxYldKbGNpQTlJQ2hrWVhSbEtTQTlQaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdVptOXliV0YwVjJWbGEwNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjSEp2Y0hNdVptOXliV0YwVjJWbGEwNTFiV0psY2loa1lYUmxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdkbGRGZGxaV3NvWkdGMFpTazdYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlSR0Y1Y3lBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnpkR0Z5ZEU5bVYyVmxheUE5SUhSb2FYTXVjM1JoY25SUFpsZGxaV3NvS1R0Y2JpQWdJQ0JqYjI1emRDQmtZWGx6SUQwZ1cxMDdYRzRnSUNBZ1kyOXVjM1FnZDJWbGEwNTFiV0psY2lBOUlIUm9hWE11Wm05eWJXRjBWMlZsYTA1MWJXSmxjaWh6ZEdGeWRFOW1WMlZsYXlrN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVjMmh2ZDFkbFpXdE9kVzFpWlhJcElIdGNiaUFnSUNBZ0lHTnZibk4wSUc5dVEyeHBZMnRCWTNScGIyNGdQVnh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG05dVYyVmxhMU5sYkdWamRDQjhmQ0IwYUdsekxuQnliM0J6TG5Ob2IzZFhaV1ZyVUdsamEyVnlYRzRnSUNBZ0lDQWdJQ0FnUHlCMGFHbHpMbWhoYm1Sc1pWZGxaV3REYkdsamF5NWlhVzVrS0hSb2FYTXNJSE4wWVhKMFQyWlhaV1ZyTENCM1pXVnJUblZ0WW1WeUtWeHVJQ0FnSUNBZ0lDQWdJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnWkdGNWN5NXdkWE5vS0Z4dUlDQWdJQ0FnSUNBOFYyVmxhMDUxYldKbGNseHVJQ0FnSUNBZ0lDQWdJR3RsZVQxY0lsZGNJbHh1SUNBZ0lDQWdJQ0FnSUhkbFpXdE9kVzFpWlhJOWUzZGxaV3RPZFcxaVpYSjlYRzRnSUNBZ0lDQWdJQ0FnWkdGMFpUMTdjM1JoY25SUFpsZGxaV3Q5WEc0Z0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN2IyNURiR2xqYTBGamRHbHZibjFjYmlBZ0lDQWdJQ0FnSUNCelpXeGxZM1JsWkQxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSbFpIMWNiaUFnSUNBZ0lDQWdJQ0J3Y21WVFpXeGxZM1JwYjI0OWUzUm9hWE11Y0hKdmNITXVjSEpsVTJWc1pXTjBhVzl1ZlZ4dUlDQWdJQ0FnSUNBZ0lHRnlhV0ZNWVdKbGJGQnlaV1pwZUQxN2RHaHBjeTV3Y205d2N5NWhjbWxoVEdGaVpXeFFjbVZtYVhoOVhHNGdJQ0FnSUNBZ0lDQWdjMmh2ZDFkbFpXdFFhV05yWlhJOWUzUm9hWE11Y0hKdmNITXVjMmh2ZDFkbFpXdFFhV05yWlhKOVhHNGdJQ0FnSUNBZ0lDQWdjMmh2ZDFkbFpXdE9kVzFpWlhJOWUzUm9hWE11Y0hKdmNITXVjMmh2ZDFkbFpXdE9kVzFpWlhKOVhHNGdJQ0FnSUNBZ0lDQWdaR2x6WVdKc1pXUkxaWGxpYjJGeVpFNWhkbWxuWVhScGIyNDllM1JvYVhNdWNISnZjSE11WkdsellXSnNaV1JMWlhsaWIyRnlaRTVoZG1sbllYUnBiMjU5WEc0Z0lDQWdJQ0FnSUNBZ2FHRnVaR3hsVDI1TFpYbEViM2R1UFh0MGFHbHpMbkJ5YjNCekxtaGhibVJzWlU5dVMyVjVSRzkzYm4xY2JpQWdJQ0FnSUNBZ0lDQnBjMGx1Y0hWMFJtOWpkWE5sWkQxN2RHaHBjeTV3Y205d2N5NXBjMGx1Y0hWMFJtOWpkWE5sWkgxY2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSlNaV1k5ZTNSb2FYTXVjSEp2Y0hNdVkyOXVkR0ZwYm1WeVVtVm1mVnh1SUNBZ0lDQWdJQ0F2UGl4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmtZWGx6TG1OdmJtTmhkQ2hjYmlBZ0lDQWdJRnN3TENBeExDQXlMQ0F6TENBMExDQTFMQ0EyWFM1dFlYQW9LRzltWm5ObGRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrWVhrZ1BTQmhaR1JFWVhsektITjBZWEowVDJaWFpXVnJMQ0J2Wm1aelpYUXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0FnSUR4RVlYbGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWFXRk1ZV0psYkZCeVpXWnBlRmRvWlc1RmJtRmliR1ZrUFh0MGFHbHpMbkJ5YjNCekxtTm9iMjl6WlVSaGVVRnlhV0ZNWVdKbGJGQnlaV1pwZUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5YVdGTVlXSmxiRkJ5WldacGVGZG9aVzVFYVhOaFlteGxaRDE3ZEdocGN5NXdjbTl3Y3k1a2FYTmhZbXhsWkVSaGVVRnlhV0ZNWVdKbGJGQnlaV1pwZUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVQxN1pHRjVMblpoYkhWbFQyWW9LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhlVDE3WkdGNWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5dWRHZzllM1JvYVhNdWNISnZjSE11Ylc5dWRHaDlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFh0MGFHbHpMbWhoYm1Sc1pVUmhlVU5zYVdOckxtSnBibVFvZEdocGN5d2daR0Y1S1gxY2JpQWdJQ0FnSUNBZ0lDQWdJSFZ6WlZCdmFXNTBaWEpGZG1WdWREMTdkR2hwY3k1d2NtOXdjeTUxYzJWUWIybHVkR1Z5UlhabGJuUjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrMXZkWE5sUlc1MFpYSTllM1JvYVhNdWFHRnVaR3hsUkdGNVRXOTFjMlZGYm5SbGNpNWlhVzVrS0hSb2FYTXNJR1JoZVNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0YVc1RVlYUmxQWHQwYUdsekxuQnliM0J6TG0xcGJrUmhkR1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWGhFWVhSbFBYdDBhR2x6TG5CeWIzQnpMbTFoZUVSaGRHVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCallXeGxibVJoY2xOMFlYSjBSR0Y1UFh0MGFHbHpMbkJ5YjNCekxtTmhiR1Z1WkdGeVUzUmhjblJFWVhsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsZUdOc2RXUmxSR0YwWlhNOWUzUm9hWE11Y0hKdmNITXVaWGhqYkhWa1pVUmhkR1Z6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaWGhqYkhWa1pVUmhkR1ZKYm5SbGNuWmhiSE05ZTNSb2FYTXVjSEp2Y0hNdVpYaGpiSFZrWlVSaGRHVkpiblJsY25aaGJITjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtTnNkV1JsUkdGMFpYTTllM1JvYVhNdWNISnZjSE11YVc1amJIVmtaVVJoZEdWemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1amJIVmtaVVJoZEdWSmJuUmxjblpoYkhNOWUzUm9hWE11Y0hKdmNITXVhVzVqYkhWa1pVUmhkR1ZKYm5SbGNuWmhiSE45WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9hV2RvYkdsbmFIUkVZWFJsY3oxN2RHaHBjeTV3Y205d2N5NW9hV2RvYkdsbmFIUkVZWFJsYzMxY2JpQWdJQ0FnSUNBZ0lDQWdJR2h2Ykdsa1lYbHpQWHQwYUdsekxuQnliM0J6TG1odmJHbGtZWGx6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWldOMGFXNW5SR0YwWlQxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNScGJtZEVZWFJsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzZEdWeVJHRjBaVDE3ZEdocGN5NXdjbTl3Y3k1bWFXeDBaWEpFWVhSbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKbFUyVnNaV04wYVc5dVBYdDBhR2x6TG5CeWIzQnpMbkJ5WlZObGJHVmpkR2x2Ym4xY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdWamRHVmtQWHQwYUdsekxuQnliM0J6TG5ObGJHVmpkR1ZrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWldOMGMxTjBZWEowUFh0MGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEhOVGRHRnlkSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEhORmJtUTllM1JvYVhNdWNISnZjSE11YzJWc1pXTjBjMFZ1WkgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdWamRITlNZVzVuWlQxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSelVtRnVaMlY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphRzkzVjJWbGExQnBZMnRsY2oxN2RHaHBjeTV3Y205d2N5NXphRzkzVjJWbGExQnBZMnRsY24xY2JpQWdJQ0FnSUNBZ0lDQWdJSE5vYjNkWFpXVnJUblZ0WW1WeVBYdDBhR2x6TG5CeWIzQnpMbk5vYjNkWFpXVnJUblZ0WW1WeWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBjMFJwYzJGaWJHVmtSR0Y1YzBsdVVtRnVaMlU5ZTNSb2FYTXVjSEp2Y0hNdWMyVnNaV04wYzBScGMyRmliR1ZrUkdGNWMwbHVVbUZ1WjJWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bFkzUnpUWFZzZEdsd2JHVTllM1JvYVhNdWNISnZjSE11YzJWc1pXTjBjMDExYkhScGNHeGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wWldSRVlYUmxjejE3ZEdocGN5NXdjbTl3Y3k1elpXeGxZM1JsWkVSaGRHVnpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblJFWVhSbFBYdDBhR2x6TG5CeWIzQnpMbk4wWVhKMFJHRjBaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnVaRVJoZEdVOWUzUm9hWE11Y0hKdmNITXVaVzVrUkdGMFpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGVVTnNZWE56VG1GdFpUMTdkR2hwY3k1d2NtOXdjeTVrWVhsRGJHRnpjMDVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSkVZWGxEYjI1MFpXNTBjejE3ZEdocGN5NXdjbTl3Y3k1eVpXNWtaWEpFWVhsRGIyNTBaVzUwYzMxY2JpQWdJQ0FnSUNBZ0lDQWdJR1JwYzJGaWJHVmtTMlY1WW05aGNtUk9ZWFpwWjJGMGFXOXVQWHQwYUdsekxuQnliM0J6TG1ScGMyRmliR1ZrUzJWNVltOWhjbVJPWVhacFoyRjBhVzl1ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFQyNUxaWGxFYjNkdVBYdDBhR2x6TG5CeWIzQnpMbWhoYm1Sc1pVOXVTMlY1Ukc5M2JuMWNiaUFnSUNBZ0lDQWdJQ0FnSUdselNXNXdkWFJHYjJOMWMyVmtQWHQwYUdsekxuQnliM0J6TG1selNXNXdkWFJHYjJOMWMyVmtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeVVtVm1QWHQwYUdsekxuQnliM0J6TG1OdmJuUmhhVzVsY2xKbFpuMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWJHbHVaVDE3ZEdocGN5NXdjbTl3Y3k1cGJteHBibVY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphRzkxYkdSR2IyTjFjMFJoZVVsdWJHbHVaVDE3ZEdocGN5NXdjbTl3Y3k1emFHOTFiR1JHYjJOMWMwUmhlVWx1YkdsdVpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUcxdmJuUm9VMmh2ZDNORWRYQnNhV05oZEdWRVlYbHpSVzVrUFh0MGFHbHpMbkJ5YjNCekxtMXZiblJvVTJodmQzTkVkWEJzYVdOaGRHVkVZWGx6Ulc1a2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5dWRHaFRhRzkzYzBSMWNHeHBZMkYwWlVSaGVYTlRkR0Z5ZEQxN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWJXOXVkR2hUYUc5M2MwUjFjR3hwWTJGMFpVUmhlWE5UZEdGeWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiRzlqWVd4bFBYdDBhR2x6TG5CeWIzQnpMbXh2WTJGc1pYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JseHVJQ0J6ZEdGeWRFOW1WMlZsYXlBOUlDZ3BJRDArWEc0Z0lDQWdaMlYwVTNSaGNuUlBabGRsWldzb1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtUmhlU3hjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11Ykc5allXeGxMRnh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVqWVd4bGJtUmhjbE4wWVhKMFJHRjVMRnh1SUNBZ0lDazdYRzVjYmlBZ2FYTkxaWGxpYjJGeVpGTmxiR1ZqZEdWa0lEMGdLQ2tnUFQ1Y2JpQWdJQ0FoZEdocGN5NXdjbTl3Y3k1a2FYTmhZbXhsWkV0bGVXSnZZWEprVG1GMmFXZGhkR2x2YmlBbUpseHVJQ0FnSUNGcGMxTmhiV1ZFWVhrb2RHaHBjeTV6ZEdGeWRFOW1WMlZsYXlncExDQjBhR2x6TG5CeWIzQnpMbk5sYkdWamRHVmtLU0FtSmx4dUlDQWdJR2x6VTJGdFpVUmhlU2gwYUdsekxuTjBZWEowVDJaWFpXVnJLQ2tzSUhSb2FYTXVjSEp2Y0hNdWNISmxVMlZzWldOMGFXOXVLVHRjYmx4dUlDQnlaVzVrWlhJb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZDJWbGEwNTFiV0psY2tOc1lYTnpaWE1nUFNCN1hHNGdJQ0FnSUNCY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgzZGxaV3RjSWpvZ2RISjFaU3hjYmlBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmZDJWbGF5MHRjMlZzWldOMFpXUmNJam9nYVhOVFlXMWxSR0Y1S0Z4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhKMFQyWlhaV1ZyS0Nrc1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXVjMlZzWldOMFpXUXNYRzRnSUNBZ0lDQXBMRnh1SUNBZ0lDQWdYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTkzWldWckxTMXJaWGxpYjJGeVpDMXpaV3hsWTNSbFpGd2lPaUIwYUdsekxtbHpTMlY1WW05aGNtUlRaV3hsWTNSbFpDZ3BMRnh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUR4a2FYWWdZMnhoYzNOT1lXMWxQWHRqYkhONEtIZGxaV3RPZFcxaVpYSkRiR0Z6YzJWektYMCtlM1JvYVhNdWNtVnVaR1Z5UkdGNWN5Z3BmVHd2WkdsMlBqdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJRkpsWVdOMElHWnliMjBnWENKeVpXRmpkRndpTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJRndpY0hKdmNDMTBlWEJsYzF3aU8xeHVhVzF3YjNKMElIc2dZMnh6ZUNCOUlHWnliMjBnWENKamJITjRYQ0k3WEc1cGJYQnZjblFnVjJWbGF5Qm1jbTl0SUZ3aUxpOTNaV1ZyWENJN1hHNXBiWEJ2Y25RZ0tpQmhjeUIxZEdsc2N5Qm1jbTl0SUZ3aUxpOWtZWFJsWDNWMGFXeHpYQ0k3WEc1Y2JtTnZibk4wSUVaSldFVkVYMGhGU1VkSVZGOVRWRUZPUkVGU1JGOVhSVVZMWDBOUFZVNVVJRDBnTmp0Y2JseHVZMjl1YzNRZ1RVOU9WRWhmUTA5TVZVMU9VMTlNUVZsUFZWUWdQU0I3WEc0Z0lGUlhUMTlEVDB4VlRVNVRPaUJjSW5SM2IxOWpiMngxYlc1elhDSXNYRzRnSUZSSVVrVkZYME5QVEZWTlRsTTZJRndpZEdoeVpXVmZZMjlzZFcxdWMxd2lMRnh1SUNCR1QxVlNYME5QVEZWTlRsTTZJRndpWm05MWNsOWpiMngxYlc1elhDSXNYRzU5TzF4dVkyOXVjM1FnVFU5T1ZFaGZRMDlNVlUxT1V5QTlJSHRjYmlBZ1cwMVBUbFJJWDBOUFRGVk5UbE5mVEVGWlQxVlVMbFJYVDE5RFQweFZUVTVUWFRvZ2UxeHVJQ0FnSUdkeWFXUTZJRnRjYmlBZ0lDQWdJRnN3TENBeFhTeGNiaUFnSUNBZ0lGc3lMQ0F6WFN4Y2JpQWdJQ0FnSUZzMExDQTFYU3hjYmlBZ0lDQWdJRnMyTENBM1hTeGNiaUFnSUNBZ0lGczRMQ0E1WFN4Y2JpQWdJQ0FnSUZzeE1Dd2dNVEZkTEZ4dUlDQWdJRjBzWEc0Z0lDQWdkbVZ5ZEdsallXeE9ZWFpwWjJGMGFXOXVUMlptYzJWME9pQXlMRnh1SUNCOUxGeHVJQ0JiVFU5T1ZFaGZRMDlNVlUxT1UxOU1RVmxQVlZRdVZFaFNSVVZmUTA5TVZVMU9VMTA2SUh0Y2JpQWdJQ0JuY21sa09pQmJYRzRnSUNBZ0lDQmJNQ3dnTVN3Z01sMHNYRzRnSUNBZ0lDQmJNeXdnTkN3Z05WMHNYRzRnSUNBZ0lDQmJOaXdnTnl3Z09GMHNYRzRnSUNBZ0lDQmJPU3dnTVRBc0lERXhYU3hjYmlBZ0lDQmRMRnh1SUNBZ0lIWmxjblJwWTJGc1RtRjJhV2RoZEdsdmJrOW1abk5sZERvZ015eGNiaUFnZlN4Y2JpQWdXMDFQVGxSSVgwTlBURlZOVGxOZlRFRlpUMVZVTGtaUFZWSmZRMDlNVlUxT1UxMDZJSHRjYmlBZ0lDQm5jbWxrT2lCYlhHNGdJQ0FnSUNCYk1Dd2dNU3dnTWl3Z00xMHNYRzRnSUNBZ0lDQmJOQ3dnTlN3Z05pd2dOMTBzWEc0Z0lDQWdJQ0JiT0N3Z09Td2dNVEFzSURFeFhTeGNiaUFnSUNCZExGeHVJQ0FnSUhabGNuUnBZMkZzVG1GMmFXZGhkR2x2Yms5bVpuTmxkRG9nTkN4Y2JpQWdmU3hjYm4wN1hHNWpiMjV6ZENCTlQwNVVTRjlPUVZaSlIwRlVTVTlPWDBoUFVrbGFUMDVVUVV4ZlQwWkdVMFZVSUQwZ01UdGNibHh1Wm5WdVkzUnBiMjRnWjJWMFRXOXVkR2hEYjJ4MWJXNXpUR0Y1YjNWMEtGeHVJQ0J6YUc5M1JtOTFja052YkhWdGJrMXZiblJvV1dWaGNsQnBZMnRsY2l4Y2JpQWdjMmh2ZDFSM2IwTnZiSFZ0YmsxdmJuUm9XV1ZoY2xCcFkydGxjaXhjYmlrZ2UxeHVJQ0JwWmlBb2MyaHZkMFp2ZFhKRGIyeDFiVzVOYjI1MGFGbGxZWEpRYVdOclpYSXBJSEpsZEhWeWJpQk5UMDVVU0Y5RFQweFZUVTVUWDB4QldVOVZWQzVHVDFWU1gwTlBURlZOVGxNN1hHNGdJR2xtSUNoemFHOTNWSGR2UTI5c2RXMXVUVzl1ZEdoWlpXRnlVR2xqYTJWeUtTQnlaWFIxY200Z1RVOU9WRWhmUTA5TVZVMU9VMTlNUVZsUFZWUXVWRmRQWDBOUFRGVk5UbE03WEc0Z0lISmxkSFZ5YmlCTlQwNVVTRjlEVDB4VlRVNVRYMHhCV1U5VlZDNVVTRkpGUlY5RFQweFZUVTVUTzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCTmIyNTBhQ0JsZUhSbGJtUnpJRkpsWVdOMExrTnZiWEJ2Ym1WdWRDQjdYRzRnSUhOMFlYUnBZeUJ3Y205d1ZIbHdaWE1nUFNCN1hHNGdJQ0FnWVhKcFlVeGhZbVZzVUhKbFptbDRPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHTm9iMjl6WlVSaGVVRnlhV0ZNWVdKbGJGQnlaV1pwZURvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JrYVhOaFlteGxaRVJoZVVGeWFXRk1ZV0psYkZCeVpXWnBlRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQmthWE5oWW14bFpFdGxlV0p2WVhKa1RtRjJhV2RoZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnWkdGNU9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHUmhlVU5zWVhOelRtRnRaVG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2JXOXVkR2hEYkdGemMwNWhiV1U2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lHVnVaRVJoZEdVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUc5eVpHVnlTVzVFYVhOd2JHRjVPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lHVjRZMngxWkdWRVlYUmxjem9nVUhKdmNGUjVjR1Z6TG1GeWNtRjVUMllvWEc0Z0lDQWdJQ0JRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0Y2JpQWdJQ0FnSUNBZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrc1hHNGdJQ0FnSUNBZ0lGQnliM0JVZVhCbGN5NXphR0Z3WlNoN1hHNGdJQ0FnSUNBZ0lDQWdaR0YwWlRvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0I5S1N4Y2JpQWdJQ0FnSUYwcExGeHVJQ0FnSUNrc1hHNGdJQ0FnWlhoamJIVmtaVVJoZEdWSmJuUmxjblpoYkhNNklGQnliM0JVZVhCbGN5NWhjbkpoZVU5bUtGeHVJQ0FnSUNBZ1VISnZjRlI1Y0dWekxuTm9ZWEJsS0h0Y2JpQWdJQ0FnSUNBZ2MzUmhjblE2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTEZ4dUlDQWdJQ0FnSUNCbGJtUTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lDQWdmU2tzWEc0Z0lDQWdLU3hjYmlBZ0lDQm1hV3gwWlhKRVlYUmxPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCbWFYaGxaRWhsYVdkb2REb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnWm05eWJXRjBWMlZsYTA1MWJXSmxjam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2FHbG5hR3hwWjJoMFJHRjBaWE02SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFMWhjQ2tzWEc0Z0lDQWdhRzlzYVdSaGVYTTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0UxaGNDa3NYRzRnSUNBZ2FXNWpiSFZrWlVSaGRHVnpPaUJRY205d1ZIbHdaWE11WVhKeVlYa3NYRzRnSUNBZ2FXNWpiSFZrWlVSaGRHVkpiblJsY25aaGJITTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVTeGNiaUFnSUNCcGJteHBibVU2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITm9iM1ZzWkVadlkzVnpSR0Y1U1c1c2FXNWxPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCc2IyTmhiR1U2SUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxeHVJQ0FnSUNBZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1emFHRndaU2g3SUd4dlkyRnNaVG9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ0I5S1N4Y2JpQWdJQ0JkS1N4Y2JpQWdJQ0J0WVhoRVlYUmxPaUJRY205d1ZIbHdaWE11YVc1emRHRnVZMlZQWmloRVlYUmxLU3hjYmlBZ0lDQnRhVzVFWVhSbE9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNCdmJrUmhlVU5zYVdOck9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0IxYzJWUWIybHVkR1Z5UlhabGJuUTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUc5dVJHRjVUVzkxYzJWRmJuUmxjam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2IyNU5iM1Z6WlV4bFlYWmxPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCdmJsZGxaV3RUWld4bFkzUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhCbFpXdE9aWGgwVFc5dWRHZzZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhCeVpWTmxiR1ZqZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3NYRzRnSUNBZ2MyVjBVSEpsVTJWc1pXTjBhVzl1T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQnpaV3hsWTNSbFpEb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3NYRzRnSUNBZ2MyVnNaV04wYVc1blJHRjBaVG9nVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1JHRjBaU2tzWEc0Z0lDQWdZMkZzWlc1a1lYSlRkR0Z5ZEVSaGVUb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnSUNCelpXeGxZM1J6Ulc1a09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6Wld4bFkzUnpVM1JoY25RNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSE5sYkdWamRITlNZVzVuWlRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMlZzWldOMGMwUnBjMkZpYkdWa1JHRjVjMGx1VW1GdVoyVTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhObGJHVmpkSE5OZFd4MGFYQnNaVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2MyVnNaV04wWldSRVlYUmxjem9nVUhKdmNGUjVjR1Z6TG1GeWNtRjVUMllvVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1JHRjBaU2twTEZ4dUlDQWdJSE5vYjNkWFpXVnJUblZ0WW1WeWN6b2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzNSaGNuUkVZWFJsT2lCUWNtOXdWSGx3WlhNdWFXNXpkR0Z1WTJWUFppaEVZWFJsS1N4Y2JpQWdJQ0J6WlhSUGNHVnVPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCemFHOTFiR1JEYkc5elpVOXVVMlZzWldOME9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J5Wlc1a1pYSkVZWGxEYjI1MFpXNTBjem9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2NtVnVaR1Z5VFc5dWRHaERiMjUwWlc1ME9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J5Wlc1a1pYSlJkV0Z5ZEdWeVEyOXVkR1Z1ZERvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdjMmh2ZDAxdmJuUm9XV1ZoY2xCcFkydGxjam9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2MyaHZkMFoxYkd4TmIyNTBhRmxsWVhKUWFXTnJaWEk2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITm9iM2RVZDI5RGIyeDFiVzVOYjI1MGFGbGxZWEpRYVdOclpYSTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhOb2IzZEdiM1Z5UTI5c2RXMXVUVzl1ZEdoWlpXRnlVR2xqYTJWeU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6YUc5M1VYVmhjblJsY2xsbFlYSlFhV05yWlhJNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSE5vYjNkWFpXVnJVR2xqYTJWeU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JvWVc1a2JHVlBia3RsZVVSdmQyNDZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUdoaGJtUnNaVTl1VFc5dWRHaExaWGxFYjNkdU9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0JwYzBsdWNIVjBSbTlqZFhObFpEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnZDJWbGEwRnlhV0ZNWVdKbGJGQnlaV1pwZURvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JqYjI1MFlXbHVaWEpTWldZNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMXh1SUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnSUNCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZXlCamRYSnlaVzUwT2lCUWNtOXdWSGx3WlhNdWIySnFaV04wSUgwcExGeHVJQ0FnSUYwcExGeHVJQ0FnSUcxdmJuUm9VMmh2ZDNORWRYQnNhV05oZEdWRVlYbHpSVzVrT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnRiMjUwYUZOb2IzZHpSSFZ3YkdsallYUmxSR0Y1YzFOMFlYSjBPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnZlR0Y2JseHVJQ0JOVDA1VVNGOVNSVVpUSUQwZ1d5NHVMa0Z5Y21GNUtERXlLVjB1YldGd0tDZ3BJRDArSUZKbFlXTjBMbU55WldGMFpWSmxaaWdwS1R0Y2JpQWdVVlZCVWxSRlVsOVNSVVpUSUQwZ1d5NHVMa0Z5Y21GNUtEUXBYUzV0WVhBb0tDa2dQVDRnVW1WaFkzUXVZM0psWVhSbFVtVm1LQ2twTzF4dVhHNGdJR2x6UkdsellXSnNaV1FnUFNBb1pHRjBaU2tnUFQ0Z2RYUnBiSE11YVhORVlYbEVhWE5oWW14bFpDaGtZWFJsTENCMGFHbHpMbkJ5YjNCektUdGNibHh1SUNCcGMwVjRZMngxWkdWa0lEMGdLR1JoZEdVcElEMCtJSFYwYVd4ekxtbHpSR0Y1UlhoamJIVmtaV1FvWkdGMFpTd2dkR2hwY3k1d2NtOXdjeWs3WEc1Y2JpQWdhR0Z1Wkd4bFJHRjVRMnhwWTJzZ1BTQW9aR0Y1TENCbGRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbTl1UkdGNVEyeHBZMnNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNUVZWGxEYkdsamF5aGtZWGtzSUdWMlpXNTBMQ0IwYUdsekxuQnliM0J6TG05eVpHVnlTVzVFYVhOd2JHRjVLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnYUdGdVpHeGxSR0Y1VFc5MWMyVkZiblJsY2lBOUlDaGtZWGtwSUQwK0lIdGNiaUFnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTV2YmtSaGVVMXZkWE5sUlc1MFpYSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YjI1RVlYbE5iM1Z6WlVWdWRHVnlLR1JoZVNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lHaGhibVJzWlUxdmRYTmxUR1ZoZG1VZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXViMjVOYjNWelpVeGxZWFpsS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtOXVUVzkxYzJWTVpXRjJaU2dwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCcGMxSmhibWRsVTNSaGNuUk5iMjUwYUNBOUlDaHRLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdleUJrWVhrc0lITjBZWEowUkdGMFpTd2daVzVrUkdGMFpTQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JwWmlBb0lYTjBZWEowUkdGMFpTQjhmQ0FoWlc1a1JHRjBaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkWFJwYkhNdWFYTlRZVzFsVFc5dWRHZ29kWFJwYkhNdWMyVjBUVzl1ZEdnb1pHRjVMQ0J0S1N3Z2MzUmhjblJFWVhSbEtUdGNiaUFnZlR0Y2JseHVJQ0JwYzFKaGJtZGxVM1JoY25SUmRXRnlkR1Z5SUQwZ0tIRXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR1JoZVN3Z2MzUmhjblJFWVhSbExDQmxibVJFWVhSbElIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJR2xtSUNnaGMzUmhjblJFWVhSbElIeDhJQ0ZsYm1SRVlYUmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjFkR2xzY3k1cGMxTmhiV1ZSZFdGeWRHVnlLSFYwYVd4ekxuTmxkRkYxWVhKMFpYSW9aR0Y1TENCeEtTd2djM1JoY25SRVlYUmxLVHRjYmlBZ2ZUdGNibHh1SUNCcGMxSmhibWRsUlc1a1RXOXVkR2dnUFNBb2JTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2daR0Y1TENCemRHRnlkRVJoZEdVc0lHVnVaRVJoZEdVZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdhV1lnS0NGemRHRnlkRVJoZEdVZ2ZId2dJV1Z1WkVSaGRHVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIVjBhV3h6TG1selUyRnRaVTF2Ym5Sb0tIVjBhV3h6TG5ObGRFMXZiblJvS0dSaGVTd2diU2tzSUdWdVpFUmhkR1VwTzF4dUlDQjlPMXh1WEc0Z0lHbHpVbUZ1WjJWRmJtUlJkV0Z5ZEdWeUlEMGdLSEVwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUdSaGVTd2djM1JoY25SRVlYUmxMQ0JsYm1SRVlYUmxJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUdsbUlDZ2hjM1JoY25SRVlYUmxJSHg4SUNGbGJtUkVZWFJsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIxZEdsc2N5NXBjMU5oYldWUmRXRnlkR1Z5S0hWMGFXeHpMbk5sZEZGMVlYSjBaWElvWkdGNUxDQnhLU3dnWlc1a1JHRjBaU2s3WEc0Z0lIMDdYRzVjYmlBZ2FYTkpibE5sYkdWamRHbHVaMUpoYm1kbFRXOXVkR2dnUFNBb2JTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2daR0Y1TENCelpXeGxZM1J6VTNSaGNuUXNJSE5sYkdWamRITkZibVFzSUhObGJHVmpkSE5TWVc1blpTd2djM1JoY25SRVlYUmxMQ0JsYm1SRVlYUmxJSDBnUFZ4dUlDQWdJQ0FnZEdocGN5NXdjbTl3Y3p0Y2JseHVJQ0FnSUdOdmJuTjBJSE5sYkdWamRHbHVaMFJoZEdVZ1BTQjBhR2x6TG5CeWIzQnpMbk5sYkdWamRHbHVaMFJoZEdVZ1B6OGdkR2hwY3k1d2NtOXdjeTV3Y21WVFpXeGxZM1JwYjI0N1hHNWNiaUFnSUNCcFppQW9JU2h6Wld4bFkzUnpVM1JoY25RZ2ZId2djMlZzWldOMGMwVnVaQ0I4ZkNCelpXeGxZM1J6VW1GdVoyVXBJSHg4SUNGelpXeGxZM1JwYm1kRVlYUmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITmxiR1ZqZEhOVGRHRnlkQ0FtSmlCbGJtUkVZWFJsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFhScGJITXVhWE5OYjI1MGFFbHVVbUZ1WjJVb2MyVnNaV04wYVc1blJHRjBaU3dnWlc1a1JHRjBaU3dnYlN3Z1pHRjVLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYzJWc1pXTjBjMFZ1WkNBbUppQnpkR0Z5ZEVSaGRHVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFkR2xzY3k1cGMwMXZiblJvU1c1U1lXNW5aU2h6ZEdGeWRFUmhkR1VzSUhObGJHVmpkR2x1WjBSaGRHVXNJRzBzSUdSaGVTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE5sYkdWamRITlNZVzVuWlNBbUppQnpkR0Z5ZEVSaGRHVWdKaVlnSVdWdVpFUmhkR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIxZEdsc2N5NXBjMDF2Ym5Sb1NXNVNZVzVuWlNoemRHRnlkRVJoZEdVc0lITmxiR1ZqZEdsdVowUmhkR1VzSUcwc0lHUmhlU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlPMXh1WEc0Z0lHbHpVMlZzWldOMGFXNW5UVzl1ZEdoU1lXNW5aVk4wWVhKMElEMGdLRzBwSUQwK0lIdGNiaUFnSUNCcFppQW9JWFJvYVhNdWFYTkpibE5sYkdWamRHbHVaMUpoYm1kbFRXOXVkR2dvYlNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCN0lHUmhlU3dnYzNSaGNuUkVZWFJsTENCelpXeGxZM1J6VTNSaGNuUWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnWTI5dWMzUWdYMjF2Ym5Sb0lEMGdkWFJwYkhNdWMyVjBUVzl1ZEdnb1pHRjVMQ0J0S1R0Y2JpQWdJQ0JqYjI1emRDQnpaV3hsWTNScGJtZEVZWFJsSUQwZ2RHaHBjeTV3Y205d2N5NXpaV3hsWTNScGJtZEVZWFJsSUQ4L0lIUm9hWE11Y0hKdmNITXVjSEpsVTJWc1pXTjBhVzl1TzF4dVhHNGdJQ0FnYVdZZ0tITmxiR1ZqZEhOVGRHRnlkQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFYwYVd4ekxtbHpVMkZ0WlUxdmJuUm9LRjl0YjI1MGFDd2djMlZzWldOMGFXNW5SR0YwWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFkR2xzY3k1cGMxTmhiV1ZOYjI1MGFDaGZiVzl1ZEdnc0lITjBZWEowUkdGMFpTazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJR2x6VTJWc1pXTjBhVzVuVFc5dWRHaFNZVzVuWlVWdVpDQTlJQ2h0S1NBOVBpQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtbHpTVzVUWld4bFkzUnBibWRTWVc1blpVMXZiblJvS0cwcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2V5QmtZWGtzSUdWdVpFUmhkR1VzSUhObGJHVmpkSE5GYm1Rc0lITmxiR1ZqZEhOU1lXNW5aU0I5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCamIyNXpkQ0JmYlc5dWRHZ2dQU0IxZEdsc2N5NXpaWFJOYjI1MGFDaGtZWGtzSUcwcE8xeHVJQ0FnSUdOdmJuTjBJSE5sYkdWamRHbHVaMFJoZEdVZ1BTQjBhR2x6TG5CeWIzQnpMbk5sYkdWamRHbHVaMFJoZEdVZ1B6OGdkR2hwY3k1d2NtOXdjeTV3Y21WVFpXeGxZM1JwYjI0N1hHNWNiaUFnSUNCcFppQW9jMlZzWldOMGMwVnVaQ0I4ZkNCelpXeGxZM1J6VW1GdVoyVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFkR2xzY3k1cGMxTmhiV1ZOYjI1MGFDaGZiVzl1ZEdnc0lITmxiR1ZqZEdsdVowUmhkR1VwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RYUnBiSE11YVhOVFlXMWxUVzl1ZEdnb1gyMXZiblJvTENCbGJtUkVZWFJsS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2FYTkpibE5sYkdWamRHbHVaMUpoYm1kbFVYVmhjblJsY2lBOUlDaHhLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdleUJrWVhrc0lITmxiR1ZqZEhOVGRHRnlkQ3dnYzJWc1pXTjBjMFZ1WkN3Z2MyVnNaV04wYzFKaGJtZGxMQ0J6ZEdGeWRFUmhkR1VzSUdWdVpFUmhkR1VnZlNBOVhHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ1kyOXVjM1FnYzJWc1pXTjBhVzVuUkdGMFpTQTlJSFJvYVhNdWNISnZjSE11YzJWc1pXTjBhVzVuUkdGMFpTQS9QeUIwYUdsekxuQnliM0J6TG5CeVpWTmxiR1ZqZEdsdmJqdGNibHh1SUNBZ0lHbG1JQ2doS0hObGJHVmpkSE5UZEdGeWRDQjhmQ0J6Wld4bFkzUnpSVzVrSUh4OElITmxiR1ZqZEhOU1lXNW5aU2tnZkh3Z0lYTmxiR1ZqZEdsdVowUmhkR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jMlZzWldOMGMxTjBZWEowSUNZbUlHVnVaRVJoZEdVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMWRHbHNjeTVwYzFGMVlYSjBaWEpKYmxKaGJtZGxLSE5sYkdWamRHbHVaMFJoZEdVc0lHVnVaRVJoZEdVc0lIRXNJR1JoZVNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITmxiR1ZqZEhORmJtUWdKaVlnYzNSaGNuUkVZWFJsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFhScGJITXVhWE5SZFdGeWRHVnlTVzVTWVc1blpTaHpkR0Z5ZEVSaGRHVXNJSE5sYkdWamRHbHVaMFJoZEdVc0lIRXNJR1JoZVNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITmxiR1ZqZEhOU1lXNW5aU0FtSmlCemRHRnlkRVJoZEdVZ0ppWWdJV1Z1WkVSaGRHVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFkR2xzY3k1cGMxRjFZWEowWlhKSmJsSmhibWRsS0hOMFlYSjBSR0YwWlN3Z2MyVnNaV04wYVc1blJHRjBaU3dnY1N3Z1pHRjVLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMDdYRzVjYmlBZ2FYTlhaV1ZyU1c1TmIyNTBhQ0E5SUNoemRHRnlkRTltVjJWbGF5a2dQVDRnZTF4dUlDQWdJR052Ym5OMElHUmhlU0E5SUhSb2FYTXVjSEp2Y0hNdVpHRjVPMXh1SUNBZ0lHTnZibk4wSUdWdVpFOW1WMlZsYXlBOUlIVjBhV3h6TG1Ga1pFUmhlWE1vYzNSaGNuUlBabGRsWldzc0lEWXBPMXh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNCMWRHbHNjeTVwYzFOaGJXVk5iMjUwYUNoemRHRnlkRTltVjJWbGF5d2daR0Y1S1NCOGZDQjFkR2xzY3k1cGMxTmhiV1ZOYjI1MGFDaGxibVJQWmxkbFpXc3NJR1JoZVNsY2JpQWdJQ0FwTzF4dUlDQjlPMXh1WEc0Z0lHbHpRM1Z5Y21WdWRFMXZiblJvSUQwZ0tHUmhlU3dnYlNrZ1BUNWNiaUFnSUNCMWRHbHNjeTVuWlhSWlpXRnlLR1JoZVNrZ1BUMDlJSFYwYVd4ekxtZGxkRmxsWVhJb2RYUnBiSE11Ym1WM1JHRjBaU2dwS1NBbUpseHVJQ0FnSUcwZ1BUMDlJSFYwYVd4ekxtZGxkRTF2Ym5Sb0tIVjBhV3h6TG01bGQwUmhkR1VvS1NrN1hHNWNiaUFnYVhORGRYSnlaVzUwVVhWaGNuUmxjaUE5SUNoa1lYa3NJSEVwSUQwK1hHNGdJQ0FnZFhScGJITXVaMlYwV1dWaGNpaGtZWGtwSUQwOVBTQjFkR2xzY3k1blpYUlpaV0Z5S0hWMGFXeHpMbTVsZDBSaGRHVW9LU2tnSmlaY2JpQWdJQ0J4SUQwOVBTQjFkR2xzY3k1blpYUlJkV0Z5ZEdWeUtIVjBhV3h6TG01bGQwUmhkR1VvS1NrN1hHNWNiaUFnYVhOVFpXeGxZM1JsWkUxdmJuUm9JRDBnS0dSaGVTd2diU3dnYzJWc1pXTjBaV1FwSUQwK1hHNGdJQ0FnZFhScGJITXVaMlYwVFc5dWRHZ29jMlZzWldOMFpXUXBJRDA5UFNCdElDWW1YRzRnSUNBZ2RYUnBiSE11WjJWMFdXVmhjaWhrWVhrcElEMDlQU0IxZEdsc2N5NW5aWFJaWldGeUtITmxiR1ZqZEdWa0tUdGNibHh1SUNCcGMxTmxiR1ZqZEdWa1VYVmhjblJsY2lBOUlDaGtZWGtzSUhFc0lITmxiR1ZqZEdWa0tTQTlQbHh1SUNBZ0lIVjBhV3h6TG1kbGRGRjFZWEowWlhJb1pHRjVLU0E5UFQwZ2NTQW1KbHh1SUNBZ0lIVjBhV3h6TG1kbGRGbGxZWElvWkdGNUtTQTlQVDBnZFhScGJITXVaMlYwV1dWaGNpaHpaV3hsWTNSbFpDazdYRzVjYmlBZ2NtVnVaR1Z5VjJWbGEzTWdQU0FvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZDJWbGEzTWdQU0JiWFR0Y2JpQWdJQ0IyWVhJZ2FYTkdhWGhsWkVobGFXZG9kQ0E5SUhSb2FYTXVjSEp2Y0hNdVptbDRaV1JJWldsbmFIUTdYRzVjYmlBZ0lDQnNaWFFnYVNBOUlEQTdYRzRnSUNBZ2JHVjBJR0p5WldGclFXWjBaWEpPWlhoMFVIVnphQ0E5SUdaaGJITmxPMXh1SUNBZ0lHeGxkQ0JqZFhKeVpXNTBWMlZsYTFOMFlYSjBJRDBnZFhScGJITXVaMlYwVTNSaGNuUlBabGRsWldzb1hHNGdJQ0FnSUNCMWRHbHNjeTVuWlhSVGRHRnlkRTltVFc5dWRHZ29kR2hwY3k1d2NtOXdjeTVrWVhrcExGeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXNiMk5oYkdVc1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtTmhiR1Z1WkdGeVUzUmhjblJFWVhrc1hHNGdJQ0FnS1R0Y2JseHVJQ0FnSUdOdmJuTjBJSE5sYkdWamRHVmtJRDBnZEdocGN5NXdjbTl3Y3k1emFHOTNWMlZsYTFCcFkydGxjbHh1SUNBZ0lDQWdQeUIxZEdsc2N5NW5aWFJUZEdGeWRFOW1WMlZsYXloY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbk5sYkdWamRHVmtMRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWJHOWpZV3hsTEZ4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXVZMkZzWlc1a1lYSlRkR0Z5ZEVSaGVTeGNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdPaUIwYUdsekxuQnliM0J6TG5ObGJHVmpkR1ZrTzF4dVhHNGdJQ0FnWTI5dWMzUWdjSEpsVTJWc1pXTjBhVzl1SUQwZ2RHaHBjeTV3Y205d2N5NXphRzkzVjJWbGExQnBZMnRsY2x4dUlDQWdJQ0FnUHlCMWRHbHNjeTVuWlhSVGRHRnlkRTltVjJWbGF5aGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG5CeVpWTmxiR1ZqZEdsdmJpeGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG14dlkyRnNaU3hjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtTmhiR1Z1WkdGeVUzUmhjblJFWVhrc1hHNGdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lEb2dkR2hwY3k1d2NtOXdjeTV3Y21WVFpXeGxZM1JwYjI0N1hHNWNiaUFnSUNCM2FHbHNaU0FvZEhKMVpTa2dlMXh1SUNBZ0lDQWdkMlZsYTNNdWNIVnphQ2hjYmlBZ0lDQWdJQ0FnUEZkbFpXdGNiaUFnSUNBZ0lDQWdJQ0JoY21saFRHRmlaV3hRY21WbWFYZzllM1JvYVhNdWNISnZjSE11ZDJWbGEwRnlhV0ZNWVdKbGJGQnlaV1pwZUgxY2JpQWdJQ0FnSUNBZ0lDQmphRzl2YzJWRVlYbEJjbWxoVEdGaVpXeFFjbVZtYVhnOWUzUm9hWE11Y0hKdmNITXVZMmh2YjNObFJHRjVRWEpwWVV4aFltVnNVSEpsWm1sNGZWeHVJQ0FnSUNBZ0lDQWdJR1JwYzJGaWJHVmtSR0Y1UVhKcFlVeGhZbVZzVUhKbFptbDRQWHQwYUdsekxuQnliM0J6TG1ScGMyRmliR1ZrUkdGNVFYSnBZVXhoWW1Wc1VISmxabWw0ZlZ4dUlDQWdJQ0FnSUNBZ0lHdGxlVDE3YVgxY2JpQWdJQ0FnSUNBZ0lDQmtZWGs5ZTJOMWNuSmxiblJYWldWclUzUmhjblI5WEc0Z0lDQWdJQ0FnSUNBZ2JXOXVkR2c5ZTNWMGFXeHpMbWRsZEUxdmJuUm9LSFJvYVhNdWNISnZjSE11WkdGNUtYMWNiaUFnSUNBZ0lDQWdJQ0J2YmtSaGVVTnNhV05yUFh0MGFHbHpMbWhoYm1Sc1pVUmhlVU5zYVdOcmZWeHVJQ0FnSUNBZ0lDQWdJSFZ6WlZCdmFXNTBaWEpGZG1WdWREMTdkR2hwY3k1d2NtOXdjeTUxYzJWUWIybHVkR1Z5UlhabGJuUjlYRzRnSUNBZ0lDQWdJQ0FnYjI1RVlYbE5iM1Z6WlVWdWRHVnlQWHQwYUdsekxtaGhibVJzWlVSaGVVMXZkWE5sUlc1MFpYSjlYRzRnSUNBZ0lDQWdJQ0FnYjI1WFpXVnJVMlZzWldOMFBYdDBhR2x6TG5CeWIzQnpMbTl1VjJWbGExTmxiR1ZqZEgxY2JpQWdJQ0FnSUNBZ0lDQm1iM0p0WVhSWFpXVnJUblZ0WW1WeVBYdDBhR2x6TG5CeWIzQnpMbVp2Y20xaGRGZGxaV3RPZFcxaVpYSjlYRzRnSUNBZ0lDQWdJQ0FnYkc5allXeGxQWHQwYUdsekxuQnliM0J6TG14dlkyRnNaWDFjYmlBZ0lDQWdJQ0FnSUNCdGFXNUVZWFJsUFh0MGFHbHpMbkJ5YjNCekxtMXBia1JoZEdWOVhHNGdJQ0FnSUNBZ0lDQWdiV0Y0UkdGMFpUMTdkR2hwY3k1d2NtOXdjeTV0WVhoRVlYUmxmVnh1SUNBZ0lDQWdJQ0FnSUdWNFkyeDFaR1ZFWVhSbGN6MTdkR2hwY3k1d2NtOXdjeTVsZUdOc2RXUmxSR0YwWlhOOVhHNGdJQ0FnSUNBZ0lDQWdaWGhqYkhWa1pVUmhkR1ZKYm5SbGNuWmhiSE05ZTNSb2FYTXVjSEp2Y0hNdVpYaGpiSFZrWlVSaGRHVkpiblJsY25aaGJITjlYRzRnSUNBZ0lDQWdJQ0FnYVc1amJIVmtaVVJoZEdWelBYdDBhR2x6TG5CeWIzQnpMbWx1WTJ4MVpHVkVZWFJsYzMxY2JpQWdJQ0FnSUNBZ0lDQnBibU5zZFdSbFJHRjBaVWx1ZEdWeWRtRnNjejE3ZEdocGN5NXdjbTl3Y3k1cGJtTnNkV1JsUkdGMFpVbHVkR1Z5ZG1Gc2MzMWNiaUFnSUNBZ0lDQWdJQ0JwYm14cGJtVTllM1JvYVhNdWNISnZjSE11YVc1c2FXNWxmVnh1SUNBZ0lDQWdJQ0FnSUhOb2IzVnNaRVp2WTNWelJHRjVTVzVzYVc1bFBYdDBhR2x6TG5CeWIzQnpMbk5vYjNWc1pFWnZZM1Z6UkdGNVNXNXNhVzVsZlZ4dUlDQWdJQ0FnSUNBZ0lHaHBaMmhzYVdkb2RFUmhkR1Z6UFh0MGFHbHpMbkJ5YjNCekxtaHBaMmhzYVdkb2RFUmhkR1Z6ZlZ4dUlDQWdJQ0FnSUNBZ0lHaHZiR2xrWVhselBYdDBhR2x6TG5CeWIzQnpMbWh2Ykdsa1lYbHpmVnh1SUNBZ0lDQWdJQ0FnSUhObGJHVmpkR2x1WjBSaGRHVTllM1JvYVhNdWNISnZjSE11YzJWc1pXTjBhVzVuUkdGMFpYMWNiaUFnSUNBZ0lDQWdJQ0JtYVd4MFpYSkVZWFJsUFh0MGFHbHpMbkJ5YjNCekxtWnBiSFJsY2tSaGRHVjlYRzRnSUNBZ0lDQWdJQ0FnY0hKbFUyVnNaV04wYVc5dVBYdHdjbVZUWld4bFkzUnBiMjU5WEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaV04wWldROWUzTmxiR1ZqZEdWa2ZWeHVJQ0FnSUNBZ0lDQWdJSE5sYkdWamRITlRkR0Z5ZEQxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSelUzUmhjblI5WEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaV04wYzBWdVpEMTdkR2hwY3k1d2NtOXdjeTV6Wld4bFkzUnpSVzVrZlZ4dUlDQWdJQ0FnSUNBZ0lITmxiR1ZqZEhOU1lXNW5aVDE3ZEdocGN5NXdjbTl3Y3k1elpXeGxZM1J6VW1GdVoyVjlYRzRnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBjMFJwYzJGaWJHVmtSR0Y1YzBsdVVtRnVaMlU5ZTNSb2FYTXVjSEp2Y0hNdWMyVnNaV04wYzBScGMyRmliR1ZrUkdGNWMwbHVVbUZ1WjJWOVhHNGdJQ0FnSUNBZ0lDQWdjMlZzWldOMGMwMTFiSFJwY0d4bFBYdDBhR2x6TG5CeWIzQnpMbk5sYkdWamRITk5kV3gwYVhCc1pYMWNiaUFnSUNBZ0lDQWdJQ0J6Wld4bFkzUmxaRVJoZEdWelBYdDBhR2x6TG5CeWIzQnpMbk5sYkdWamRHVmtSR0YwWlhOOVhHNGdJQ0FnSUNBZ0lDQWdjMmh2ZDFkbFpXdE9kVzFpWlhJOWUzUm9hWE11Y0hKdmNITXVjMmh2ZDFkbFpXdE9kVzFpWlhKemZWeHVJQ0FnSUNBZ0lDQWdJSE5vYjNkWFpXVnJVR2xqYTJWeVBYdDBhR2x6TG5CeWIzQnpMbk5vYjNkWFpXVnJVR2xqYTJWeWZWeHVJQ0FnSUNBZ0lDQWdJSE4wWVhKMFJHRjBaVDE3ZEdocGN5NXdjbTl3Y3k1emRHRnlkRVJoZEdWOVhHNGdJQ0FnSUNBZ0lDQWdaVzVrUkdGMFpUMTdkR2hwY3k1d2NtOXdjeTVsYm1SRVlYUmxmVnh1SUNBZ0lDQWdJQ0FnSUdSaGVVTnNZWE56VG1GdFpUMTdkR2hwY3k1d2NtOXdjeTVrWVhsRGJHRnpjMDVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdjMlYwVDNCbGJqMTdkR2hwY3k1d2NtOXdjeTV6WlhSUGNHVnVmVnh1SUNBZ0lDQWdJQ0FnSUhOb2IzVnNaRU5zYjNObFQyNVRaV3hsWTNROWUzUm9hWE11Y0hKdmNITXVjMmh2ZFd4a1EyeHZjMlZQYmxObGJHVmpkSDFjYmlBZ0lDQWdJQ0FnSUNCa2FYTmhZbXhsWkV0bGVXSnZZWEprVG1GMmFXZGhkR2x2YmoxN2RHaHBjeTV3Y205d2N5NWthWE5oWW14bFpFdGxlV0p2WVhKa1RtRjJhV2RoZEdsdmJuMWNiaUFnSUNBZ0lDQWdJQ0J5Wlc1a1pYSkVZWGxEYjI1MFpXNTBjejE3ZEdocGN5NXdjbTl3Y3k1eVpXNWtaWEpFWVhsRGIyNTBaVzUwYzMxY2JpQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWUGJrdGxlVVJ2ZDI0OWUzUm9hWE11Y0hKdmNITXVhR0Z1Wkd4bFQyNUxaWGxFYjNkdWZWeHVJQ0FnSUNBZ0lDQWdJR2x6U1c1d2RYUkdiMk4xYzJWa1BYdDBhR2x6TG5CeWIzQnpMbWx6U1c1d2RYUkdiMk4xYzJWa2ZWeHVJQ0FnSUNBZ0lDQWdJR052Ym5SaGFXNWxjbEpsWmoxN2RHaHBjeTV3Y205d2N5NWpiMjUwWVdsdVpYSlNaV1o5WEc0Z0lDQWdJQ0FnSUNBZ1kyRnNaVzVrWVhKVGRHRnlkRVJoZVQxN2RHaHBjeTV3Y205d2N5NWpZV3hsYm1SaGNsTjBZWEowUkdGNWZWeHVJQ0FnSUNBZ0lDQWdJRzF2Ym5Sb1UyaHZkM05FZFhCc2FXTmhkR1ZFWVhselJXNWtQWHQwYUdsekxuQnliM0J6TG0xdmJuUm9VMmh2ZDNORWRYQnNhV05oZEdWRVlYbHpSVzVrZlZ4dUlDQWdJQ0FnSUNBZ0lHMXZiblJvVTJodmQzTkVkWEJzYVdOaGRHVkVZWGx6VTNSaGNuUTllM1JvYVhNdWNISnZjSE11Ylc5dWRHaFRhRzkzYzBSMWNHeHBZMkYwWlVSaGVYTlRkR0Z5ZEgxY2JpQWdJQ0FnSUNBZ0x6NHNYRzRnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0JwWmlBb1luSmxZV3RCWm5SbGNrNWxlSFJRZFhOb0tTQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ2FTc3JPMXh1SUNBZ0lDQWdZM1Z5Y21WdWRGZGxaV3RUZEdGeWRDQTlJSFYwYVd4ekxtRmtaRmRsWld0ektHTjFjbkpsYm5SWFpXVnJVM1JoY25Rc0lERXBPMXh1WEc0Z0lDQWdJQ0F2THlCSlppQnZibVVnYjJZZ2RHaGxjMlVnWTI5dVpHbDBhVzl1Y3lCcGN5QjBjblZsTENCM1pTQjNhV3hzSUdWcGRHaGxjaUJpY21WaGF5QnZiaUIwYUdseklIZGxaV3RjYmlBZ0lDQWdJQzh2SUc5eUlHSnlaV0ZySUc5dUlIUm9aU0J1WlhoMElIZGxaV3RjYmlBZ0lDQWdJR052Ym5OMElHbHpSbWw0WldSQmJtUkdhVzVoYkZkbFpXc2dQVnh1SUNBZ0lDQWdJQ0JwYzBacGVHVmtTR1ZwWjJoMElDWW1JR2tnUGowZ1JrbFlSVVJmU0VWSlIwaFVYMU5VUVU1RVFWSkVYMWRGUlV0ZlEwOVZUbFE3WEc0Z0lDQWdJQ0JqYjI1emRDQnBjMDV2YmtacGVHVmtRVzVrVDNWMFQyWk5iMjUwYUNBOVhHNGdJQ0FnSUNBZ0lDRnBjMFpwZUdWa1NHVnBaMmgwSUNZbUlDRjBhR2x6TG1selYyVmxhMGx1VFc5dWRHZ29ZM1Z5Y21WdWRGZGxaV3RUZEdGeWRDazdYRzVjYmlBZ0lDQWdJR2xtSUNocGMwWnBlR1ZrUVc1a1JtbHVZV3hYWldWcklIeDhJR2x6VG05dVJtbDRaV1JCYm1SUGRYUlBaazF2Ym5Sb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxuQmxaV3RPWlhoMFRXOXVkR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYTBGbWRHVnlUbVY0ZEZCMWMyZ2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhkbFpXdHpPMXh1SUNCOU8xeHVYRzRnSUc5dVRXOXVkR2hEYkdsamF5QTlJQ2hsTENCdEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2JHRmlaV3hFWVhSbElEMGdkWFJwYkhNdWMyVjBUVzl1ZEdnb2RHaHBjeTV3Y205d2N5NWtZWGtzSUcwcE8xeHVYRzRnSUNBZ2FXWWdLSFYwYVd4ekxtbHpUVzl1ZEdoRWFYTmhZbXhsWkNoc1lXSmxiRVJoZEdVc0lIUm9hWE11Y0hKdmNITXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVvWVc1a2JHVkVZWGxEYkdsamF5aDFkR2xzY3k1blpYUlRkR0Z5ZEU5bVRXOXVkR2dvYkdGaVpXeEVZWFJsS1N3Z1pTazdYRzRnSUgwN1hHNWNiaUFnYjI1TmIyNTBhRTF2ZFhObFJXNTBaWElnUFNBb2JTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHeGhZbVZzUkdGMFpTQTlJSFYwYVd4ekxuTmxkRTF2Ym5Sb0tIUm9hWE11Y0hKdmNITXVaR0Y1TENCdEtUdGNibHh1SUNBZ0lHbG1JQ2gxZEdsc2N5NXBjMDF2Ym5Sb1JHbHpZV0pzWldRb2JHRmlaV3hFWVhSbExDQjBhR2x6TG5CeWIzQnpLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11YUdGdVpHeGxSR0Y1VFc5MWMyVkZiblJsY2loMWRHbHNjeTVuWlhSVGRHRnlkRTltVFc5dWRHZ29iR0ZpWld4RVlYUmxLU2s3WEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsVFc5dWRHaE9ZWFpwWjJGMGFXOXVJRDBnS0c1bGQwMXZiblJvTENCdVpYZEVZWFJsS1NBOVBpQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWFYTkVhWE5oWW14bFpDaHVaWGRFWVhSbEtTQjhmQ0IwYUdsekxtbHpSWGhqYkhWa1pXUW9ibVYzUkdGMFpTa3BJSEpsZEhWeWJqdGNiaUFnSUNCMGFHbHpMbkJ5YjNCekxuTmxkRkJ5WlZObGJHVmpkR2x2YmlodVpYZEVZWFJsS1R0Y2JpQWdJQ0IwYUdsekxrMVBUbFJJWDFKRlJsTmJibVYzVFc5dWRHaGRMbU4xY25KbGJuUWdKaVpjYmlBZ0lDQWdJSFJvYVhNdVRVOU9WRWhmVWtWR1UxdHVaWGROYjI1MGFGMHVZM1Z5Y21WdWRDNW1iMk4xY3lncE8xeHVJQ0I5TzF4dVhHNGdJRzl1VFc5dWRHaExaWGxFYjNkdUlEMGdLR1YyWlc1MExDQnRiMjUwYUNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUhObGJHVmpkR1ZrTEZ4dUlDQWdJQ0FnY0hKbFUyVnNaV04wYVc5dUxGeHVJQ0FnSUNBZ1pHbHpZV0pzWldSTFpYbGliMkZ5WkU1aGRtbG5ZWFJwYjI0c1hHNGdJQ0FnSUNCemFHOTNWSGR2UTI5c2RXMXVUVzl1ZEdoWlpXRnlVR2xqYTJWeUxGeHVJQ0FnSUNBZ2MyaHZkMFp2ZFhKRGIyeDFiVzVOYjI1MGFGbGxZWEpRYVdOclpYSXNYRzRnSUNBZ0lDQnpaWFJRY21WVFpXeGxZM1JwYjI0c1hHNGdJQ0FnSUNCb1lXNWtiR1ZQYmsxdmJuUm9TMlY1Ukc5M2JpeGNiaUFnSUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCbGRtVnVkRXRsZVNBOUlHVjJaVzUwTG10bGVUdGNiaUFnSUNCcFppQW9aWFpsYm5STFpYa2dJVDA5SUZ3aVZHRmlYQ0lwSUh0Y2JpQWdJQ0FnSUM4dklIQnlaWFpsYm5SRVpXWmhkV3gwSUc5dUlIUmhZaUJsZG1WdWRDQmliRzlqYTNNZ1ptOWpkWE1nWTJoaGJtZGxYRzRnSUNBZ0lDQmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvSVdScGMyRmliR1ZrUzJWNVltOWhjbVJPWVhacFoyRjBhVzl1S1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0J0YjI1MGFFTnZiSFZ0Ym5OTVlYbHZkWFFnUFNCblpYUk5iMjUwYUVOdmJIVnRibk5NWVhsdmRYUW9YRzRnSUNBZ0lDQWdJSE5vYjNkR2IzVnlRMjlzZFcxdVRXOXVkR2haWldGeVVHbGphMlZ5TEZ4dUlDQWdJQ0FnSUNCemFHOTNWSGR2UTI5c2RXMXVUVzl1ZEdoWlpXRnlVR2xqYTJWeUxGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lHTnZibk4wSUhabGNuUnBZMkZzVDJabWMyVjBJRDFjYmlBZ0lDQWdJQ0FnVFU5T1ZFaGZRMDlNVlUxT1UxdHRiMjUwYUVOdmJIVnRibk5NWVhsdmRYUmRMblpsY25ScFkyRnNUbUYyYVdkaGRHbHZiazltWm5ObGREdGNiaUFnSUNBZ0lHTnZibk4wSUcxdmJuUm9jMGR5YVdRZ1BTQk5UMDVVU0Y5RFQweFZUVTVUVzIxdmJuUm9RMjlzZFcxdWMweGhlVzkxZEYwdVozSnBaRHRjYmlBZ0lDQWdJSE4zYVhSamFDQW9aWFpsYm5STFpYa3BJSHRjYmlBZ0lDQWdJQ0FnWTJGelpTQmNJa1Z1ZEdWeVhDSTZYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXZiazF2Ym5Sb1EyeHBZMnNvWlhabGJuUXNJRzF2Ym5Sb0tUdGNiaUFnSUNBZ0lDQWdJQ0J6WlhSUWNtVlRaV3hsWTNScGIyNG9jMlZzWldOMFpXUXBPMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElGd2lRWEp5YjNkU2FXZG9kRndpT2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YUdGdVpHeGxUVzl1ZEdoT1lYWnBaMkYwYVc5dUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5dWRHZ2dQVDA5SURFeElEOGdNQ0E2SUcxdmJuUm9JQ3NnVFU5T1ZFaGZUa0ZXU1VkQlZFbFBUbDlJVDFKSldrOU9WRUZNWDA5R1JsTkZWQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIVjBhV3h6TG1Ga1pFMXZiblJvY3lod2NtVlRaV3hsWTNScGIyNHNJRTFQVGxSSVgwNUJWa2xIUVZSSlQwNWZTRTlTU1ZwUFRsUkJURjlQUmtaVFJWUXBMRnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnWENKQmNuSnZkMHhsWm5SY0lqcGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtaGhibVJzWlUxdmJuUm9UbUYyYVdkaGRHbHZiaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lHMXZiblJvSUQwOVBTQXdJRDhnTVRFZ09pQnRiMjUwYUNBdElFMVBUbFJJWDA1QlZrbEhRVlJKVDA1ZlNFOVNTVnBQVGxSQlRGOVBSa1pUUlZRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxZEdsc2N5NXpkV0pOYjI1MGFITW9jSEpsVTJWc1pXTjBhVzl1TENCTlQwNVVTRjlPUVZaSlIwRlVTVTlPWDBoUFVrbGFUMDVVUVV4ZlQwWkdVMFZVS1N4Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElGd2lRWEp5YjNkVmNGd2lPbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFRXOXVkR2hPWVhacFoyRjBhVzl1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUTJobFkyc2dhV1lnYlc5dWRHZ2diMjRnZEdobElHWnBjbk4wSUhKdmQxeHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5dWRHaHpSM0pwWkZzd1hTNXBibU5zZFdSbGN5aHRiMjUwYUNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCdGIyNTBhQ0FySURFeUlDMGdkbVZ5ZEdsallXeFBabVp6WlhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCdGIyNTBhQ0F0SUhabGNuUnBZMkZzVDJabWMyVjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RYUnBiSE11YzNWaVRXOXVkR2h6S0hCeVpWTmxiR1ZqZEdsdmJpd2dkbVZ5ZEdsallXeFBabVp6WlhRcExGeHVJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdYQ0pCY25KdmQwUnZkMjVjSWpwY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVTF2Ym5Sb1RtRjJhV2RoZEdsdmJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFTm9aV05ySUdsbUlHMXZiblJvSUc5dUlIUm9aU0JzWVhOMElISnZkMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXOXVkR2h6UjNKcFpGdHRiMjUwYUhOSGNtbGtMbXhsYm1kMGFDQXRJREZkTG1sdVkyeDFaR1Z6S0cxdmJuUm9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JRzF2Ym5Sb0lDMGdNVElnS3lCMlpYSjBhV05oYkU5bVpuTmxkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJRzF2Ym5Sb0lDc2dkbVZ5ZEdsallXeFBabVp6WlhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxZEdsc2N5NWhaR1JOYjI1MGFITW9jSEpsVTJWc1pXTjBhVzl1TENCMlpYSjBhV05oYkU5bVpuTmxkQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCb1lXNWtiR1ZQYmsxdmJuUm9TMlY1Ukc5M2JpQW1KaUJvWVc1a2JHVlBiazF2Ym5Sb1MyVjVSRzkzYmlobGRtVnVkQ2s3WEc0Z0lIMDdYRzVjYmlBZ2IyNVJkV0Z5ZEdWeVEyeHBZMnNnUFNBb1pTd2djU2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR3hoWW1Wc1JHRjBaU0E5SUhWMGFXeHpMbk5sZEZGMVlYSjBaWElvZEdocGN5NXdjbTl3Y3k1a1lYa3NJSEVwTzF4dVhHNGdJQ0FnYVdZZ0tIVjBhV3h6TG1selVYVmhjblJsY2tScGMyRmliR1ZrS0d4aFltVnNSR0YwWlN3Z2RHaHBjeTV3Y205d2N5a3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbWhoYm1Sc1pVUmhlVU5zYVdOcktIVjBhV3h6TG1kbGRGTjBZWEowVDJaUmRXRnlkR1Z5S0d4aFltVnNSR0YwWlNrc0lHVXBPMXh1SUNCOU8xeHVYRzRnSUc5dVVYVmhjblJsY2sxdmRYTmxSVzUwWlhJZ1BTQW9jU2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR3hoWW1Wc1JHRjBaU0E5SUhWMGFXeHpMbk5sZEZGMVlYSjBaWElvZEdocGN5NXdjbTl3Y3k1a1lYa3NJSEVwTzF4dVhHNGdJQ0FnYVdZZ0tIVjBhV3h6TG1selVYVmhjblJsY2tScGMyRmliR1ZrS0d4aFltVnNSR0YwWlN3Z2RHaHBjeTV3Y205d2N5a3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbWhoYm1Sc1pVUmhlVTF2ZFhObFJXNTBaWElvZFhScGJITXVaMlYwVTNSaGNuUlBabEYxWVhKMFpYSW9iR0ZpWld4RVlYUmxLU2s3WEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsVVhWaGNuUmxjazVoZG1sbllYUnBiMjRnUFNBb2JtVjNVWFZoY25SbGNpd2dibVYzUkdGMFpTa2dQVDRnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbWx6UkdsellXSnNaV1FvYm1WM1JHRjBaU2tnZkh3Z2RHaHBjeTVwYzBWNFkyeDFaR1ZrS0c1bGQwUmhkR1VwS1NCeVpYUjFjbTQ3WEc0Z0lDQWdkR2hwY3k1d2NtOXdjeTV6WlhSUWNtVlRaV3hsWTNScGIyNG9ibVYzUkdGMFpTazdYRzRnSUNBZ2RHaHBjeTVSVlVGU1ZFVlNYMUpGUmxOYmJtVjNVWFZoY25SbGNpQXRJREZkTG1OMWNuSmxiblFnSmlaY2JpQWdJQ0FnSUhSb2FYTXVVVlZCVWxSRlVsOVNSVVpUVzI1bGQxRjFZWEowWlhJZ0xTQXhYUzVqZFhKeVpXNTBMbVp2WTNWektDazdYRzRnSUgwN1hHNWNiaUFnYjI1UmRXRnlkR1Z5UzJWNVJHOTNiaUE5SUNobGRtVnVkQ3dnY1hWaGNuUmxjaWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR1YyWlc1MFMyVjVJRDBnWlhabGJuUXVhMlY1TzF4dUlDQWdJR2xtSUNnaGRHaHBjeTV3Y205d2N5NWthWE5oWW14bFpFdGxlV0p2WVhKa1RtRjJhV2RoZEdsdmJpa2dlMXh1SUNBZ0lDQWdjM2RwZEdOb0lDaGxkbVZ1ZEV0bGVTa2dlMXh1SUNBZ0lDQWdJQ0JqWVhObElGd2lSVzUwWlhKY0lqcGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtOXVVWFZoY25SbGNrTnNhV05yS0dWMlpXNTBMQ0J4ZFdGeWRHVnlLVHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxuTmxkRkJ5WlZObGJHVmpkR2x2YmloMGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEdWa0tUdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdZMkZ6WlNCY0lrRnljbTkzVW1sbmFIUmNJanBjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pWRjFZWEowWlhKT1lYWnBaMkYwYVc5dUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnY1hWaGNuUmxjaUE5UFQwZ05DQS9JREVnT2lCeGRXRnlkR1Z5SUNzZ01TeGNiaUFnSUNBZ0lDQWdJQ0FnSUhWMGFXeHpMbUZrWkZGMVlYSjBaWEp6S0hSb2FYTXVjSEp2Y0hNdWNISmxVMlZzWldOMGFXOXVMQ0F4S1N4Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElGd2lRWEp5YjNkTVpXWjBYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWVc1a2JHVlJkV0Z5ZEdWeVRtRjJhV2RoZEdsdmJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUhGMVlYSjBaWElnUFQwOUlERWdQeUEwSURvZ2NYVmhjblJsY2lBdElERXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMWRHbHNjeTV6ZFdKUmRXRnlkR1Z5Y3loMGFHbHpMbkJ5YjNCekxuQnlaVk5sYkdWamRHbHZiaXdnTVNrc1hHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnWjJWMFRXOXVkR2hEYkdGemMwNWhiV1Z6SUQwZ0tHMHBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQmtZWGtzWEc0Z0lDQWdJQ0J6ZEdGeWRFUmhkR1VzWEc0Z0lDQWdJQ0JsYm1SRVlYUmxMRnh1SUNBZ0lDQWdjMlZzWldOMFpXUXNYRzRnSUNBZ0lDQnRhVzVFWVhSbExGeHVJQ0FnSUNBZ2JXRjRSR0YwWlN4Y2JpQWdJQ0FnSUhCeVpWTmxiR1ZqZEdsdmJpeGNiaUFnSUNBZ0lHMXZiblJvUTJ4aGMzTk9ZVzFsTEZ4dUlDQWdJQ0FnWlhoamJIVmtaVVJoZEdWekxGeHVJQ0FnSUNBZ2FXNWpiSFZrWlVSaGRHVnpMRnh1SUNBZ0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJR052Ym5OMElGOXRiMjUwYUVOc1lYTnpUbUZ0WlNBOUlHMXZiblJvUTJ4aGMzTk9ZVzFsWEc0Z0lDQWdJQ0EvSUcxdmJuUm9RMnhoYzNOT1lXMWxLSFYwYVd4ekxuTmxkRTF2Ym5Sb0tHUmhlU3dnYlNrcFhHNGdJQ0FnSUNBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCamIyNXpkQ0JzWVdKbGJFUmhkR1VnUFNCMWRHbHNjeTV6WlhSTmIyNTBhQ2hrWVhrc0lHMHBPMXh1SUNBZ0lISmxkSFZ5YmlCamJITjRLRnh1SUNBZ0lDQWdYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTl0YjI1MGFDMTBaWGgwWENJc1hHNGdJQ0FnSUNCZ2NtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmJXOXVkR2d0Skh0dGZXQXNYRzRnSUNBZ0lDQmZiVzl1ZEdoRGJHRnpjMDVoYldVc1hHNGdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZiVzl1ZEdndGRHVjRkQzB0WkdsellXSnNaV1JjSWpwY2JpQWdJQ0FnSUNBZ0lDQW9iV2x1UkdGMFpTQjhmQ0J0WVhoRVlYUmxJSHg4SUdWNFkyeDFaR1ZFWVhSbGN5QjhmQ0JwYm1Oc2RXUmxSR0YwWlhNcElDWW1YRzRnSUNBZ0lDQWdJQ0FnZFhScGJITXVhWE5OYjI1MGFFUnBjMkZpYkdWa0tHeGhZbVZzUkdGMFpTd2dkR2hwY3k1d2NtOXdjeWtzWEc0Z0lDQWdJQ0FnSUZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmJXOXVkR2d0ZEdWNGRDMHRjMlZzWldOMFpXUmNJam9nZEdocGN5NXBjMU5sYkdWamRHVmtUVzl1ZEdnb1hHNGdJQ0FnSUNBZ0lDQWdaR0Y1TEZ4dUlDQWdJQ0FnSUNBZ0lHMHNYRzRnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBaV1FzWEc0Z0lDQWdJQ0FnSUNrc1hHNGdJQ0FnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZiVzl1ZEdndGRHVjRkQzB0YTJWNVltOWhjbVF0YzJWc1pXTjBaV1JjSWpwY2JpQWdJQ0FnSUNBZ0lDQWhkR2hwY3k1d2NtOXdjeTVrYVhOaFlteGxaRXRsZVdKdllYSmtUbUYyYVdkaGRHbHZiaUFtSmx4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YVhOVFpXeGxZM1JsWkUxdmJuUm9LR1JoZVN3Z2JTd2djSEpsVTJWc1pXTjBhVzl1S1N4Y2JpQWdJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOXRiMjUwYUMxMFpYaDBMUzFwYmkxelpXeGxZM1JwYm1jdGNtRnVaMlZjSWpwY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1selNXNVRaV3hsWTNScGJtZFNZVzVuWlUxdmJuUm9LRzBwTEZ4dUlDQWdJQ0FnSUNCY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgyMXZiblJvTFhSbGVIUXRMV2x1TFhKaGJtZGxYQ0k2SUhWMGFXeHpMbWx6VFc5dWRHaEpibEpoYm1kbEtGeHVJQ0FnSUNBZ0lDQWdJSE4wWVhKMFJHRjBaU3hjYmlBZ0lDQWdJQ0FnSUNCbGJtUkVZWFJsTEZ4dUlDQWdJQ0FnSUNBZ0lHMHNYRzRnSUNBZ0lDQWdJQ0FnWkdGNUxGeHVJQ0FnSUNBZ0lDQXBMRnh1SUNBZ0lDQWdJQ0JjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDIxdmJuUm9MWFJsZUhRdExYSmhibWRsTFhOMFlYSjBYQ0k2SUhSb2FYTXVhWE5TWVc1blpWTjBZWEowVFc5dWRHZ29iU2tzWEc0Z0lDQWdJQ0FnSUZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmJXOXVkR2d0ZEdWNGRDMHRjbUZ1WjJVdFpXNWtYQ0k2SUhSb2FYTXVhWE5TWVc1blpVVnVaRTF2Ym5Sb0tHMHBMRnh1SUNBZ0lDQWdJQ0JjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDIxdmJuUm9MWFJsZUhRdExYTmxiR1ZqZEdsdVp5MXlZVzVuWlMxemRHRnlkRndpT2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YVhOVFpXeGxZM1JwYm1kTmIyNTBhRkpoYm1kbFUzUmhjblFvYlNrc1hHNGdJQ0FnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZiVzl1ZEdndGRHVjRkQzB0YzJWc1pXTjBhVzVuTFhKaGJtZGxMV1Z1WkZ3aU9seHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFYTlRaV3hsWTNScGJtZE5iMjUwYUZKaGJtZGxSVzVrS0cwcExGeHVJQ0FnSUNBZ0lDQmNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMjF2Ym5Sb0xYUmxlSFF0TFhSdlpHRjVYQ0k2SUhSb2FYTXVhWE5EZFhKeVpXNTBUVzl1ZEdnb1pHRjVMQ0J0S1N4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnS1R0Y2JpQWdmVHRjYmx4dUlDQm5aWFJVWVdKSmJtUmxlQ0E5SUNodEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2NISmxVMlZzWldOMFpXUk5iMjUwYUNBOUlIVjBhV3h6TG1kbGRFMXZiblJvS0hSb2FYTXVjSEp2Y0hNdWNISmxVMlZzWldOMGFXOXVLVHRjYmlBZ0lDQmpiMjV6ZENCMFlXSkpibVJsZUNBOVhHNGdJQ0FnSUNBaGRHaHBjeTV3Y205d2N5NWthWE5oWW14bFpFdGxlV0p2WVhKa1RtRjJhV2RoZEdsdmJpQW1KaUJ0SUQwOVBTQndjbVZUWld4bFkzUmxaRTF2Ym5Sb1hHNGdJQ0FnSUNBZ0lEOGdYQ0l3WENKY2JpQWdJQ0FnSUNBZ09pQmNJaTB4WENJN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdGaVNXNWtaWGc3WEc0Z0lIMDdYRzVjYmlBZ1oyVjBVWFZoY25SbGNsUmhZa2x1WkdWNElEMGdLSEVwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0J3Y21WVFpXeGxZM1JsWkZGMVlYSjBaWElnUFNCMWRHbHNjeTVuWlhSUmRXRnlkR1Z5S0hSb2FYTXVjSEp2Y0hNdWNISmxVMlZzWldOMGFXOXVLVHRjYmlBZ0lDQmpiMjV6ZENCMFlXSkpibVJsZUNBOVhHNGdJQ0FnSUNBaGRHaHBjeTV3Y205d2N5NWthWE5oWW14bFpFdGxlV0p2WVhKa1RtRjJhV2RoZEdsdmJpQW1KaUJ4SUQwOVBTQndjbVZUWld4bFkzUmxaRkYxWVhKMFpYSmNiaUFnSUNBZ0lDQWdQeUJjSWpCY0lseHVJQ0FnSUNBZ0lDQTZJRndpTFRGY0lqdGNibHh1SUNBZ0lISmxkSFZ5YmlCMFlXSkpibVJsZUR0Y2JpQWdmVHRjYmx4dUlDQm5aWFJCY21saFRHRmlaV3dnUFNBb2JXOXVkR2dwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0JqYUc5dmMyVkVZWGxCY21saFRHRmlaV3hRY21WbWFYZ2dQU0JjSWtOb2IyOXpaVndpTEZ4dUlDQWdJQ0FnWkdsellXSnNaV1JFWVhsQmNtbGhUR0ZpWld4UWNtVm1hWGdnUFNCY0lrNXZkQ0JoZG1GcGJHRmliR1ZjSWl4Y2JpQWdJQ0FnSUdSaGVTeGNiaUFnSUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmx4dUlDQWdJR052Ym5OMElHeGhZbVZzUkdGMFpTQTlJSFYwYVd4ekxuTmxkRTF2Ym5Sb0tHUmhlU3dnYlc5dWRHZ3BPMXh1SUNBZ0lHTnZibk4wSUhCeVpXWnBlQ0E5WEc0Z0lDQWdJQ0IwYUdsekxtbHpSR2x6WVdKc1pXUW9iR0ZpWld4RVlYUmxLU0I4ZkNCMGFHbHpMbWx6UlhoamJIVmtaV1FvYkdGaVpXeEVZWFJsS1Z4dUlDQWdJQ0FnSUNBL0lHUnBjMkZpYkdWa1JHRjVRWEpwWVV4aFltVnNVSEpsWm1sNFhHNGdJQ0FnSUNBZ0lEb2dZMmh2YjNObFJHRjVRWEpwWVV4aFltVnNVSEpsWm1sNE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdBa2UzQnlaV1pwZUgwZ0pIdDFkR2xzY3k1bWIzSnRZWFJFWVhSbEtHeGhZbVZzUkdGMFpTd2dYQ0pOVFUxTklIbDVlWGxjSWlsOVlEdGNiaUFnZlR0Y2JseHVJQ0JuWlhSUmRXRnlkR1Z5UTJ4aGMzTk9ZVzFsY3lBOUlDaHhLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdlMXh1SUNBZ0lDQWdaR0Y1TEZ4dUlDQWdJQ0FnYzNSaGNuUkVZWFJsTEZ4dUlDQWdJQ0FnWlc1a1JHRjBaU3hjYmlBZ0lDQWdJSE5sYkdWamRHVmtMRnh1SUNBZ0lDQWdiV2x1UkdGMFpTeGNiaUFnSUNBZ0lHMWhlRVJoZEdVc1hHNGdJQ0FnSUNCd2NtVlRaV3hsWTNScGIyNHNYRzRnSUNBZ0lDQmthWE5oWW14bFpFdGxlV0p2WVhKa1RtRjJhV2RoZEdsdmJpeGNiaUFnSUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQnlaWFIxY200Z1kyeHplQ2hjYmlBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmY1hWaGNuUmxjaTEwWlhoMFhDSXNYRzRnSUNBZ0lDQmdjbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZjWFZoY25SbGNpMGtlM0Y5WUN4Y2JpQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOXhkV0Z5ZEdWeUxYUmxlSFF0TFdScGMyRmliR1ZrWENJNlhHNGdJQ0FnSUNBZ0lDQWdLRzFwYmtSaGRHVWdmSHdnYldGNFJHRjBaU2tnSmlaY2JpQWdJQ0FnSUNBZ0lDQjFkR2xzY3k1cGMxRjFZWEowWlhKRWFYTmhZbXhsWkNoMWRHbHNjeTV6WlhSUmRXRnlkR1Z5S0dSaGVTd2djU2tzSUhSb2FYTXVjSEp2Y0hNcExGeHVJQ0FnSUNBZ0lDQmNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYM0YxWVhKMFpYSXRkR1Y0ZEMwdGMyVnNaV04wWldSY0lqb2dkR2hwY3k1cGMxTmxiR1ZqZEdWa1VYVmhjblJsY2loY2JpQWdJQ0FnSUNBZ0lDQmtZWGtzWEc0Z0lDQWdJQ0FnSUNBZ2NTeGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bFkzUmxaQ3hjYmlBZ0lDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOXhkV0Z5ZEdWeUxYUmxlSFF0TFd0bGVXSnZZWEprTFhObGJHVmpkR1ZrWENJNlhHNGdJQ0FnSUNBZ0lDQWdJV1JwYzJGaWJHVmtTMlY1WW05aGNtUk9ZWFpwWjJGMGFXOXVJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYzFObGJHVmpkR1ZrVVhWaGNuUmxjaWhrWVhrc0lIRXNJSEJ5WlZObGJHVmpkR2x2Ymlrc1hHNGdJQ0FnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZjWFZoY25SbGNpMTBaWGgwTFMxcGJpMXpaV3hsWTNScGJtY3RjbUZ1WjJWY0lqcGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtbHpTVzVUWld4bFkzUnBibWRTWVc1blpWRjFZWEowWlhJb2NTa3NYRzRnSUNBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmY1hWaGNuUmxjaTEwWlhoMExTMXBiaTF5WVc1blpWd2lPaUIxZEdsc2N5NXBjMUYxWVhKMFpYSkpibEpoYm1kbEtGeHVJQ0FnSUNBZ0lDQWdJSE4wWVhKMFJHRjBaU3hjYmlBZ0lDQWdJQ0FnSUNCbGJtUkVZWFJsTEZ4dUlDQWdJQ0FnSUNBZ0lIRXNYRzRnSUNBZ0lDQWdJQ0FnWkdGNUxGeHVJQ0FnSUNBZ0lDQXBMRnh1SUNBZ0lDQWdJQ0JjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDNGMVlYSjBaWEl0ZEdWNGRDMHRjbUZ1WjJVdGMzUmhjblJjSWpwY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1selVtRnVaMlZUZEdGeWRGRjFZWEowWlhJb2NTa3NYRzRnSUNBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmY1hWaGNuUmxjaTEwWlhoMExTMXlZVzVuWlMxbGJtUmNJam9nZEdocGN5NXBjMUpoYm1kbFJXNWtVWFZoY25SbGNpaHhLU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCblpYUk5iMjUwYUVOdmJuUmxiblFnUFNBb2JTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2djMmh2ZDBaMWJHeE5iMjUwYUZsbFlYSlFhV05yWlhJc0lISmxibVJsY2sxdmJuUm9RMjl1ZEdWdWRDd2diRzlqWVd4bExDQmtZWGtnZlNBOVhHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUdOdmJuTjBJSE5vYjNKMFRXOXVkR2hVWlhoMElEMGdkWFJwYkhNdVoyVjBUVzl1ZEdoVGFHOXlkRWx1VEc5allXeGxLRzBzSUd4dlkyRnNaU2s3WEc0Z0lDQWdZMjl1YzNRZ1puVnNiRTF2Ym5Sb1ZHVjRkQ0E5SUhWMGFXeHpMbWRsZEUxdmJuUm9TVzVNYjJOaGJHVW9iU3dnYkc5allXeGxLVHRjYmlBZ0lDQnBaaUFvY21WdVpHVnlUVzl1ZEdoRGIyNTBaVzUwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY21WdVpHVnlUVzl1ZEdoRGIyNTBaVzUwS0cwc0lITm9iM0owVFc5dWRHaFVaWGgwTENCbWRXeHNUVzl1ZEdoVVpYaDBMQ0JrWVhrcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjMmh2ZDBaMWJHeE5iMjUwYUZsbFlYSlFhV05yWlhJZ1B5Qm1kV3hzVFc5dWRHaFVaWGgwSURvZ2MyaHZjblJOYjI1MGFGUmxlSFE3WEc0Z0lIMDdYRzVjYmlBZ1oyVjBVWFZoY25SbGNrTnZiblJsYm5RZ1BTQW9jU2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnY21WdVpHVnlVWFZoY25SbGNrTnZiblJsYm5Rc0lHeHZZMkZzWlNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCemFHOXlkRkYxWVhKMFpYSWdQU0IxZEdsc2N5NW5aWFJSZFdGeWRHVnlVMmh2Y25SSmJreHZZMkZzWlNoeExDQnNiMk5oYkdVcE8xeHVJQ0FnSUhKbGRIVnliaUJ5Wlc1a1pYSlJkV0Z5ZEdWeVEyOXVkR1Z1ZEZ4dUlDQWdJQ0FnUHlCeVpXNWtaWEpSZFdGeWRHVnlRMjl1ZEdWdWRDaHhMQ0J6YUc5eWRGRjFZWEowWlhJcFhHNGdJQ0FnSUNBNklITm9iM0owVVhWaGNuUmxjanRjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpOYjI1MGFITWdQU0FvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZTF4dUlDQWdJQ0FnYzJodmQxUjNiME52YkhWdGJrMXZiblJvV1dWaGNsQnBZMnRsY2l4Y2JpQWdJQ0FnSUhOb2IzZEdiM1Z5UTI5c2RXMXVUVzl1ZEdoWlpXRnlVR2xqYTJWeUxGeHVJQ0FnSUNBZ1pHRjVMRnh1SUNBZ0lDQWdjMlZzWldOMFpXUXNYRzRnSUNBZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0JqYjI1emRDQnRiMjUwYUVOdmJIVnRibk1nUFZ4dUlDQWdJQ0FnVFU5T1ZFaGZRMDlNVlUxT1UxdGNiaUFnSUNBZ0lDQWdaMlYwVFc5dWRHaERiMngxYlc1elRHRjViM1YwS0Z4dUlDQWdJQ0FnSUNBZ0lITm9iM2RHYjNWeVEyOXNkVzF1VFc5dWRHaFpaV0Z5VUdsamEyVnlMRnh1SUNBZ0lDQWdJQ0FnSUhOb2IzZFVkMjlEYjJ4MWJXNU5iMjUwYUZsbFlYSlFhV05yWlhJc1hHNGdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lGMHVaM0pwWkR0Y2JpQWdJQ0J5WlhSMWNtNGdiVzl1ZEdoRGIyeDFiVzV6TG0xaGNDZ29iVzl1ZEdnc0lHa3BJRDArSUNoY2JpQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYlc5dWRHZ3RkM0poY0hCbGNsd2lJR3RsZVQxN2FYMCtYRzRnSUNBZ0lDQWdJSHR0YjI1MGFDNXRZWEFvS0cwc0lHb3BJRDArSUNoY2JpQWdJQ0FnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV1k5ZTNSb2FYTXVUVTlPVkVoZlVrVkdVMXR0WFgxY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVQxN2FuMWNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZXlobGRpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVUVzl1ZEdoRGJHbGpheWhsZGl3Z2JTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1TFpYbEViM2R1UFhzb1pYWXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIVjBhV3h6TG1selUzQmhZMlZMWlhsRWIzZHVLR1YyS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWFl1YTJWNUlEMGdYQ0pGYm5SbGNsd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJrMXZiblJvUzJWNVJHOTNiaWhsZGl3Z2JTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1TmIzVnpaVVZ1ZEdWeVBYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lYUm9hWE11Y0hKdmNITXVkWE5sVUc5cGJuUmxja1YyWlc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QW9LU0E5UGlCMGFHbHpMbTl1VFc5dWRHaE5iM1Z6WlVWdWRHVnlLRzBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVVRzlwYm5SbGNrVnVkR1Z5UFh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1MWMyVlFiMmx1ZEdWeVJYWmxiblJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUNncElEMCtJSFJvYVhNdWIyNU5iMjUwYUUxdmRYTmxSVzUwWlhJb2JTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdGaVNXNWtaWGc5ZTNSb2FYTXVaMlYwVkdGaVNXNWtaWGdvYlNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTNSb2FYTXVaMlYwVFc5dWRHaERiR0Z6YzA1aGJXVnpLRzBwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbTlzWlQxY0ltOXdkR2x2Ymx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21saExXeGhZbVZzUFh0MGFHbHpMbWRsZEVGeWFXRk1ZV0psYkNodEtYMWNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWFXRXRZM1Z5Y21WdWREMTdkR2hwY3k1cGMwTjFjbkpsYm5STmIyNTBhQ2hrWVhrc0lHMHBJRDhnWENKa1lYUmxYQ0lnT2lCMWJtUmxabWx1WldSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21saExYTmxiR1ZqZEdWa1BYdDBhR2x6TG1selUyVnNaV04wWldSTmIyNTBhQ2hrWVhrc0lHMHNJSE5sYkdWamRHVmtLWDFjYmlBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3ZEdocGN5NW5aWFJOYjI1MGFFTnZiblJsYm5Rb2JTbDlYRzRnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ2twZlZ4dUlDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0tTazdYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlVWFZoY25SbGNuTWdQU0FvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZXlCa1lYa3NJSE5sYkdWamRHVmtJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUdOdmJuTjBJSEYxWVhKMFpYSnpJRDBnV3pFc0lESXNJRE1zSURSZE8xeHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYM0YxWVhKMFpYSXRkM0poY0hCbGNsd2lQbHh1SUNBZ0lDQWdJQ0I3Y1hWaGNuUmxjbk11YldGd0tDaHhMQ0JxS1NBOVBpQW9YRzRnSUNBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNVBYdHFmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVm1QWHQwYUdsekxsRlZRVkpVUlZKZlVrVkdVMXRxWFgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEp2YkdVOVhDSnZjSFJwYjI1Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3S0dWMktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNVJkV0Z5ZEdWeVEyeHBZMnNvWlhZc0lIRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVMyVjVSRzkzYmoxN0tHVjJLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViMjVSZFdGeWRHVnlTMlY1Ukc5M2JpaGxkaXdnY1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVOYjNWelpVVnVkR1Z5UFh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSVhSb2FYTXVjSEp2Y0hNdWRYTmxVRzlwYm5SbGNrVjJaVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlBb0tTQTlQaUIwYUdsekxtOXVVWFZoY25SbGNrMXZkWE5sUlc1MFpYSW9jU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNVFiMmx1ZEdWeVJXNTBaWEk5ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG5WelpWQnZhVzUwWlhKRmRtVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnS0NrZ1BUNGdkR2hwY3k1dmJsRjFZWEowWlhKTmIzVnpaVVZ1ZEdWeUtIRXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN2RHaHBjeTVuWlhSUmRXRnlkR1Z5UTJ4aGMzTk9ZVzFsY3loeEtYMWNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWFXRXRjMlZzWldOMFpXUTllM1JvYVhNdWFYTlRaV3hsWTNSbFpGRjFZWEowWlhJb1pHRjVMQ0J4TENCelpXeGxZM1JsWkNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwWVdKSmJtUmxlRDE3ZEdocGN5NW5aWFJSZFdGeWRHVnlWR0ZpU1c1a1pYZ29jU2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWxoTFdOMWNuSmxiblE5ZTNSb2FYTXVhWE5EZFhKeVpXNTBVWFZoY25SbGNpaGtZWGtzSUhFcElEOGdYQ0prWVhSbFhDSWdPaUIxYm1SbFptbHVaV1I5WEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNSb2FYTXVaMlYwVVhWaGNuUmxja052Ym5SbGJuUW9jU2w5WEc0Z0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUNrcGZWeHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCblpYUkRiR0Z6YzA1aGJXVnpJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUhObGJHVmpkR2x1WjBSaGRHVXNYRzRnSUNBZ0lDQnpaV3hsWTNSelUzUmhjblFzWEc0Z0lDQWdJQ0J6Wld4bFkzUnpSVzVrTEZ4dUlDQWdJQ0FnYzJodmQwMXZiblJvV1dWaGNsQnBZMnRsY2l4Y2JpQWdJQ0FnSUhOb2IzZFJkV0Z5ZEdWeVdXVmhjbEJwWTJ0bGNpeGNiaUFnSUNBZ0lITm9iM2RYWldWclVHbGphMlZ5TEZ4dUlDQWdJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdOc2MzZ29YRzRnSUNBZ0lDQmNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMjF2Ym5Sb1hDSXNYRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYlc5dWRHZ3RMWE5sYkdWamRHbHVaeTF5WVc1blpWd2lPbHh1SUNBZ0lDQWdJQ0FnSUhObGJHVmpkR2x1WjBSaGRHVWdKaVlnS0hObGJHVmpkSE5UZEdGeWRDQjhmQ0J6Wld4bFkzUnpSVzVrS1N4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCN0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZiVzl1ZEdoUWFXTnJaWEpjSWpvZ2MyaHZkMDF2Ym5Sb1dXVmhjbEJwWTJ0bGNpQjlMRnh1SUNBZ0lDQWdleUJjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDNGMVlYSjBaWEpRYVdOclpYSmNJam9nYzJodmQxRjFZWEowWlhKWlpXRnlVR2xqYTJWeUlIMHNYRzRnSUNBZ0lDQjdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmZDJWbGExQnBZMnRsY2x3aU9pQnphRzkzVjJWbGExQnBZMnRsY2lCOUxGeHVJQ0FnSUNrN1hHNGdJSDA3WEc1Y2JpQWdjbVZ1WkdWeUtDa2dlMXh1SUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUhOb2IzZE5iMjUwYUZsbFlYSlFhV05yWlhJc1hHNGdJQ0FnSUNCemFHOTNVWFZoY25SbGNsbGxZWEpRYVdOclpYSXNYRzRnSUNBZ0lDQmtZWGtzWEc0Z0lDQWdJQ0JoY21saFRHRmlaV3hRY21WbWFYZ2dQU0JjSWsxdmJuUm9JRndpTEZ4dUlDQWdJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ1kyOXVjM1FnWm05eWJXRjBkR1ZrUVhKcFlVeGhZbVZzVUhKbFptbDRJRDBnWVhKcFlVeGhZbVZzVUhKbFptbDRYRzRnSUNBZ0lDQS9JR0Z5YVdGTVlXSmxiRkJ5WldacGVDNTBjbWx0S0NrZ0t5QmNJaUJjSWx4dUlDQWdJQ0FnT2lCY0lsd2lPMXh1WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0MGFHbHpMbWRsZEVOc1lYTnpUbUZ0WlhNb0tYMWNiaUFnSUNBZ0lDQWdiMjVOYjNWelpVeGxZWFpsUFh0Y2JpQWdJQ0FnSUNBZ0lDQWhkR2hwY3k1d2NtOXdjeTUxYzJWUWIybHVkR1Z5UlhabGJuUWdQeUIwYUdsekxtaGhibVJzWlUxdmRYTmxUR1ZoZG1VZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J2YmxCdmFXNTBaWEpNWldGMlpUMTdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1MWMyVlFiMmx1ZEdWeVJYWmxiblFnUHlCMGFHbHpMbWhoYm1Sc1pVMXZkWE5sVEdWaGRtVWdPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCaGNtbGhMV3hoWW1Wc1BYdGdKSHRtYjNKdFlYUjBaV1JCY21saFRHRmlaV3hRY21WbWFYaDlKSHQxZEdsc2N5NW1iM0p0WVhSRVlYUmxLR1JoZVN3Z1hDSk5UVTFOTENCNWVYbDVYQ0lwZldCOVhHNGdJQ0FnSUNBZ0lISnZiR1U5WENKc2FYTjBZbTk0WENKY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ2UzTm9iM2ROYjI1MGFGbGxZWEpRYVdOclpYSmNiaUFnSUNBZ0lDQWdJQ0EvSUhSb2FYTXVjbVZ1WkdWeVRXOXVkR2h6S0NsY2JpQWdJQ0FnSUNBZ0lDQTZJSE5vYjNkUmRXRnlkR1Z5V1dWaGNsQnBZMnRsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdQeUIwYUdsekxuSmxibVJsY2xGMVlYSjBaWEp6S0NsY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nZEdocGN5NXlaVzVrWlhKWFpXVnJjeWdwZlZ4dUlDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJRkpsWVdOMElHWnliMjBnWENKeVpXRmpkRndpTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJRndpY0hKdmNDMTBlWEJsYzF3aU8xeHVhVzF3YjNKMElIdGNiaUFnWjJWMFNHOTFjbk1zWEc0Z0lHZGxkRTFwYm5WMFpYTXNYRzRnSUc1bGQwUmhkR1VzWEc0Z0lHZGxkRk4wWVhKMFQyWkVZWGtzWEc0Z0lHRmtaRTFwYm5WMFpYTXNYRzRnSUdadmNtMWhkRVJoZEdVc1hHNGdJR2x6VkdsdFpVbHVSR2x6WVdKc1pXUlNZVzVuWlN4Y2JpQWdhWE5VYVcxbFJHbHpZV0pzWldRc1hHNGdJSFJwYldWelZHOUpibXBsWTNSQlpuUmxjaXhjYmlBZ1oyVjBTRzkxY25OSmJrUmhlU3hjYmlBZ2FYTlRZVzFsVFdsdWRYUmxMRnh1ZlNCbWNtOXRJRndpTGk5a1lYUmxYM1YwYVd4elhDSTdYRzVwYlhCdmNuUWdleUJuWlhSVFpXTnZibVJ6SUgwZ1puSnZiU0JjSW1SaGRHVXRabTV6WENJN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZScGJXVWdaWGgwWlc1a2N5QlNaV0ZqZEM1RGIyMXdiMjVsYm5RZ2UxeHVJQ0J6ZEdGMGFXTWdaMlYwSUdSbFptRjFiSFJRY205d2N5Z3BJSHRjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ2FXNTBaWEoyWVd4ek9pQXpNQ3hjYmlBZ0lDQWdJRzl1VkdsdFpVTm9ZVzVuWlRvZ0tDa2dQVDRnZTMwc1hHNGdJQ0FnSUNCMGIyUmhlVUoxZEhSdmJqb2diblZzYkN4Y2JpQWdJQ0FnSUhScGJXVkRZWEIwYVc5dU9pQmNJbFJwYldWY0lpeGNiaUFnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHTmhiR05EWlc1MFpYSlFiM05wZEdsdmJpQTlJQ2hzYVhOMFNHVnBaMmgwTENCalpXNTBaWEpNYVZKbFppa2dQVDRnZTF4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQmpaVzUwWlhKTWFWSmxaaTV2Wm1aelpYUlViM0FnTFNBb2JHbHpkRWhsYVdkb2RDQXZJRElnTFNCalpXNTBaWEpNYVZKbFppNWpiR2xsYm5SSVpXbG5hSFFnTHlBeUtWeHVJQ0FnSUNrN1hHNGdJSDA3WEc1Y2JpQWdjM1JoZEdsaklIQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQm1iM0p0WVhRNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnYVc1amJIVmtaVlJwYldWek9pQlFjbTl3Vkhsd1pYTXVZWEp5WVhrc1hHNGdJQ0FnYVc1MFpYSjJZV3h6T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQWdJSE5sYkdWamRHVmtPaUJRY205d1ZIbHdaWE11YVc1emRHRnVZMlZQWmloRVlYUmxLU3hjYmlBZ0lDQnZjR1Z1Vkc5RVlYUmxPaUJRY205d1ZIbHdaWE11YVc1emRHRnVZMlZQWmloRVlYUmxLU3hjYmlBZ0lDQnZia05vWVc1blpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnZEdsdFpVTnNZWE56VG1GdFpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnZEc5a1lYbENkWFIwYjI0NklGQnliM0JVZVhCbGN5NXViMlJsTEZ4dUlDQWdJRzFwYmxScGJXVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lHMWhlRlJwYldVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUdWNFkyeDFaR1ZVYVcxbGN6b2dVSEp2Y0ZSNWNHVnpMbUZ5Y21GNUxGeHVJQ0FnSUdacGJIUmxjbFJwYldVNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzF2Ym5Sb1VtVm1PaUJRY205d1ZIbHdaWE11YjJKcVpXTjBMRnh1SUNBZ0lIUnBiV1ZEWVhCMGFXOXVPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHbHVhbVZqZEZScGJXVnpPaUJRY205d1ZIbHdaWE11WVhKeVlYa3NYRzRnSUNBZ2FHRnVaR3hsVDI1TFpYbEViM2R1T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQnNiMk5oYkdVNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMXh1SUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lGQnliM0JVZVhCbGN5NXphR0Z3WlNoN0lHeHZZMkZzWlRvZ1VISnZjRlI1Y0dWekxtOWlhbVZqZENCOUtTeGNiaUFnSUNCZEtTeGNiaUFnSUNCemFHOTNWR2x0WlZObGJHVmpkRTl1YkhrNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJsSUQwZ2UxeHVJQ0FnSUdobGFXZG9kRG9nYm5Wc2JDeGNiaUFnZlR0Y2JseHVJQ0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ2dwSUh0Y2JpQWdJQ0F2THlCamIyUmxJSFJ2SUdWdWMzVnlaU0J6Wld4bFkzUmxaQ0IwYVcxbElIZHBiR3dnWVd4M1lYbHpJR0psSUdsdUlHWnZZM1Z6SUhkcGRHaHBiaUIwYVcxbElIZHBibVJ2ZHlCM2FHVnVJR2wwSUdacGNuTjBJR0Z3Y0dWaGNuTmNiaUFnSUNCMGFHbHpMbk5qY205c2JGUnZWR2hsVTJWc1pXTjBaV1JVYVcxbEtDazdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNISnZjSE11Ylc5dWRHaFNaV1lnSmlZZ2RHaHBjeTVvWldGa1pYSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2UxeHVJQ0FnSUNBZ0lDQm9aV2xuYUhRNklIUm9hWE11Y0hKdmNITXViVzl1ZEdoU1pXWXVZMnhwWlc1MFNHVnBaMmgwSUMwZ2RHaHBjeTVvWldGa1pYSXVZMnhwWlc1MFNHVnBaMmgwTEZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2MyTnliMnhzVkc5VWFHVlRaV3hsWTNSbFpGUnBiV1VnUFNBb0tTQTlQaUI3WEc0Z0lDQWdjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsS0NncElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVzYVhOMEtTQnlaWFIxY200N1hHNWNiaUFnSUNBZ0lIUm9hWE11YkdsemRDNXpZM0p2Ykd4VWIzQWdQVnh1SUNBZ0lDQWdJQ0IwYUdsekxtTmxiblJsY2t4cElDWW1YRzRnSUNBZ0lDQWdJRlJwYldVdVkyRnNZME5sYm5SbGNsQnZjMmwwYVc5dUtGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11Ylc5dWRHaFNaV1pjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdkR2hwY3k1d2NtOXdjeTV0YjI1MGFGSmxaaTVqYkdsbGJuUklaV2xuYUhRZ0xTQjBhR2x6TG1obFlXUmxjaTVqYkdsbGJuUklaV2xuYUhSY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nZEdocGN5NXNhWE4wTG1Oc2FXVnVkRWhsYVdkb2RDeGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTmxiblJsY2t4cExGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMHBPMXh1SUNCOU8xeHVYRzRnSUdoaGJtUnNaVU5zYVdOcklEMGdLSFJwYldVcElEMCtJSHRjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FvS0hSb2FYTXVjSEp2Y0hNdWJXbHVWR2x0WlNCOGZDQjBhR2x6TG5CeWIzQnpMbTFoZUZScGJXVXBJQ1ltWEc0Z0lDQWdJQ0FnSUdselZHbHRaVWx1UkdsellXSnNaV1JTWVc1blpTaDBhVzFsTENCMGFHbHpMbkJ5YjNCektTa2dmSHhjYmlBZ0lDQWdJQ2dvZEdocGN5NXdjbTl3Y3k1bGVHTnNkV1JsVkdsdFpYTWdmSHhjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1cGJtTnNkV1JsVkdsdFpYTWdmSHhjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1bWFXeDBaWEpVYVcxbEtTQW1KbHh1SUNBZ0lDQWdJQ0JwYzFScGJXVkVhWE5oWW14bFpDaDBhVzFsTENCMGFHbHpMbkJ5YjNCektTbGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1d2NtOXdjeTV2YmtOb1lXNW5aU2gwYVcxbEtUdGNiaUFnZlR0Y2JseHVJQ0JwYzFObGJHVmpkR1ZrVkdsdFpTQTlJQ2gwYVcxbEtTQTlQbHh1SUNBZ0lIUm9hWE11Y0hKdmNITXVjMlZzWldOMFpXUWdKaVlnYVhOVFlXMWxUV2x1ZFhSbEtIUm9hWE11Y0hKdmNITXVjMlZzWldOMFpXUXNJSFJwYldVcE8xeHVYRzRnSUdselJHbHpZV0pzWldSVWFXMWxJRDBnS0hScGJXVXBJRDArWEc0Z0lDQWdLQ2gwYUdsekxuQnliM0J6TG0xcGJsUnBiV1VnZkh3Z2RHaHBjeTV3Y205d2N5NXRZWGhVYVcxbEtTQW1KbHh1SUNBZ0lDQWdhWE5VYVcxbFNXNUVhWE5oWW14bFpGSmhibWRsS0hScGJXVXNJSFJvYVhNdWNISnZjSE1wS1NCOGZGeHVJQ0FnSUNnb2RHaHBjeTV3Y205d2N5NWxlR05zZFdSbFZHbHRaWE1nZkh4Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWFXNWpiSFZrWlZScGJXVnpJSHg4WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG1acGJIUmxjbFJwYldVcElDWW1YRzRnSUNBZ0lDQnBjMVJwYldWRWFYTmhZbXhsWkNoMGFXMWxMQ0IwYUdsekxuQnliM0J6S1NrN1hHNWNiaUFnYkdsRGJHRnpjMlZ6SUQwZ0tIUnBiV1VwSUQwK0lIdGNiaUFnSUNCc1pYUWdZMnhoYzNObGN5QTlJRnRjYmlBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmZEdsdFpTMXNhWE4wTFdsMFpXMWNJaXhjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11ZEdsdFpVTnNZWE56VG1GdFpTQS9JSFJvYVhNdWNISnZjSE11ZEdsdFpVTnNZWE56VG1GdFpTaDBhVzFsS1NBNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNCZE8xeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWFYTlRaV3hsWTNSbFpGUnBiV1VvZEdsdFpTa3BJSHRjYmlBZ0lDQWdJR05zWVhOelpYTXVjSFZ6YUNoY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgzUnBiV1V0YkdsemRDMXBkR1Z0TFMxelpXeGxZM1JsWkZ3aUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1cGMwUnBjMkZpYkdWa1ZHbHRaU2gwYVcxbEtTa2dlMXh1SUNBZ0lDQWdZMnhoYzNObGN5NXdkWE5vS0Z3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmRHbHRaUzFzYVhOMExXbDBaVzB0TFdScGMyRmliR1ZrWENJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dlkyOXVkbVZ5ZENCMGFHbHpMbkJ5YjNCekxtbHVkR1Z5ZG1Gc2N5QmhibVFnZEdobElISmxiR1YyWVc1MElIUnBiV1VnZEc4Z2MyVmpiMjVrY3lCaGJtUWdZMmhsWTJzZ2FXWWdhWFFnYVhRbmN5QmhJR05zWldGdUlHMTFiSFJwY0d4bElHOW1JSFJvWlNCcGJuUmxjblpoYkZ4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWFXNXFaV04wVkdsdFpYTWdKaVpjYmlBZ0lDQWdJQ2huWlhSSWIzVnljeWgwYVcxbEtTQXFJRE0yTURBZ0t5Qm5aWFJOYVc1MWRHVnpLSFJwYldVcElDb2dOakFnS3lCblpYUlRaV052Ym1SektIUnBiV1VwS1NBbFhHNGdJQ0FnSUNBZ0lDaDBhR2x6TG5CeWIzQnpMbWx1ZEdWeWRtRnNjeUFxSURZd0tTQWhQVDFjYmlBZ0lDQWdJQ0FnTUZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnWTJ4aGMzTmxjeTV3ZFhOb0tGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZkR2x0WlMxc2FYTjBMV2wwWlcwdExXbHVhbVZqZEdWa1hDSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCamJHRnpjMlZ6TG1wdmFXNG9YQ0lnWENJcE8xeHVJQ0I5TzF4dVhHNGdJR2hoYm1Sc1pVOXVTMlY1Ukc5M2JpQTlJQ2hsZG1WdWRDd2dkR2x0WlNrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2hsZG1WdWRDNXJaWGtnUFQwOUlGd2lJRndpS1NCN1hHNGdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdaWFpsYm5RdWEyVjVJRDBnWENKRmJuUmxjbHdpTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUNobGRtVnVkQzVyWlhrZ1BUMDlJRndpUVhKeWIzZFZjRndpSUh4OElHVjJaVzUwTG10bGVTQTlQVDBnWENKQmNuSnZkMHhsWm5SY0lpa2dKaVpjYmlBZ0lDQWdJR1YyWlc1MExuUmhjbWRsZEM1d2NtVjJhVzkxYzFOcFlteHBibWRjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnSUNCbGRtVnVkQzUwWVhKblpYUXVjSEpsZG1sdmRYTlRhV0pzYVc1bkxtWnZZM1Z6S0NrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUNobGRtVnVkQzVyWlhrZ1BUMDlJRndpUVhKeWIzZEViM2R1WENJZ2ZId2daWFpsYm5RdWEyVjVJRDA5UFNCY0lrRnljbTkzVW1sbmFIUmNJaWtnSmlaY2JpQWdJQ0FnSUdWMlpXNTBMblJoY21kbGRDNXVaWGgwVTJsaWJHbHVaMXh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdaWFpsYm5RdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0FnSUdWMlpXNTBMblJoY21kbGRDNXVaWGgwVTJsaWJHbHVaeTVtYjJOMWN5Z3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hsZG1WdWRDNXJaWGtnUFQwOUlGd2lSVzUwWlhKY0lpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1ZEYkdsamF5aDBhVzFsS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1d2NtOXdjeTVvWVc1a2JHVlBia3RsZVVSdmQyNG9aWFpsYm5RcE8xeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNsUnBiV1Z6SUQwZ0tDa2dQVDRnZTF4dUlDQWdJR3hsZENCMGFXMWxjeUE5SUZ0ZE8xeHVJQ0FnSUdOdmJuTjBJR1p2Y20xaGRDQTlJSFJvYVhNdWNISnZjSE11Wm05eWJXRjBJRDhnZEdocGN5NXdjbTl3Y3k1bWIzSnRZWFFnT2lCY0luQmNJanRjYmlBZ0lDQmpiMjV6ZENCcGJuUmxjblpoYkhNZ1BTQjBhR2x6TG5CeWIzQnpMbWx1ZEdWeWRtRnNjenRjYmx4dUlDQWdJR052Ym5OMElHRmpkR2wyWlVSaGRHVWdQVnh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTV6Wld4bFkzUmxaQ0I4ZkNCMGFHbHpMbkJ5YjNCekxtOXdaVzVVYjBSaGRHVWdmSHdnYm1WM1JHRjBaU2dwTzF4dVhHNGdJQ0FnWTI5dWMzUWdZbUZ6WlNBOUlHZGxkRk4wWVhKMFQyWkVZWGtvWVdOMGFYWmxSR0YwWlNrN1hHNGdJQ0FnWTI5dWMzUWdjMjl5ZEdWa1NXNXFaV04wVkdsdFpYTWdQVnh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVwYm1wbFkzUlVhVzFsY3lBbUpseHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXBibXBsWTNSVWFXMWxjeTV6YjNKMEtHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaElDMGdZanRjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnWTI5dWMzUWdiV2x1ZFhSbGMwbHVSR0Y1SUQwZ05qQWdLaUJuWlhSSWIzVnljMGx1UkdGNUtHRmpkR2wyWlVSaGRHVXBPMXh1SUNBZ0lHTnZibk4wSUcxMWJIUnBjR3hwWlhJZ1BTQnRhVzUxZEdWelNXNUVZWGtnTHlCcGJuUmxjblpoYkhNN1hHNWNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHMTFiSFJwY0d4cFpYSTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWTNWeWNtVnVkRlJwYldVZ1BTQmhaR1JOYVc1MWRHVnpLR0poYzJVc0lHa2dLaUJwYm5SbGNuWmhiSE1wTzF4dUlDQWdJQ0FnZEdsdFpYTXVjSFZ6YUNoamRYSnlaVzUwVkdsdFpTazdYRzVjYmlBZ0lDQWdJR2xtSUNoemIzSjBaV1JKYm1wbFkzUlVhVzFsY3lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGFXMWxjMVJ2U1c1cVpXTjBJRDBnZEdsdFpYTlViMGx1YW1WamRFRm1kR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lHSmhjMlVzWEc0Z0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZScGJXVXNYRzRnSUNBZ0lDQWdJQ0FnYVN4Y2JpQWdJQ0FnSUNBZ0lDQnBiblJsY25aaGJITXNYRzRnSUNBZ0lDQWdJQ0FnYzI5eWRHVmtTVzVxWldOMFZHbHRaWE1zWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUnBiV1Z6SUQwZ2RHbHRaWE11WTI5dVkyRjBLSFJwYldWelZHOUpibXBsWTNRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFUmxkR1Z5YldsdVpTQjNhR2xqYUNCMGFXMWxJSFJ2SUdadlkzVnpJR0Z1WkNCelkzSnZiR3dnYVc1MGJ5QjJhV1YzSUhkb1pXNGdZMjl0Y0c5dVpXNTBJRzF2ZFc1MGMxeHVJQ0FnSUdOdmJuTjBJSFJwYldWVWIwWnZZM1Z6SUQwZ2RHbHRaWE11Y21Wa2RXTmxLQ2h3Y21WMkxDQjBhVzFsS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvZEdsdFpTNW5aWFJVYVcxbEtDa2dQRDBnWVdOMGFYWmxSR0YwWlM1blpYUlVhVzFsS0NrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnBiV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjSEpsZGp0Y2JpQWdJQ0I5TENCMGFXMWxjMXN3WFNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdsdFpYTXViV0Z3S0NoMGFXMWxMQ0JwS1NBOVBpQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQThiR2xjYmlBZ0lDQWdJQ0FnSUNCclpYazllMmw5WEc0Z0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN2RHaHBjeTVvWVc1a2JHVkRiR2xqYXk1aWFXNWtLSFJvYVhNc0lIUnBiV1VwZlZ4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdkR2hwY3k1c2FVTnNZWE56WlhNb2RHbHRaU2w5WEc0Z0lDQWdJQ0FnSUNBZ2NtVm1QWHNvYkdrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYVcxbElEMDlQU0IwYVcxbFZHOUdiMk4xY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5sYm5SbGNreHBJRDBnYkdrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0J2Ymt0bGVVUnZkMjQ5ZXlobGRpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1ZQYmt0bGVVUnZkMjRvWlhZc0lIUnBiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnZEdGaVNXNWtaWGc5ZTNScGJXVWdQVDA5SUhScGJXVlViMFp2WTNWeklEOGdNQ0E2SUMweGZWeHVJQ0FnSUNBZ0lDQWdJSEp2YkdVOVhDSnZjSFJwYjI1Y0lseHVJQ0FnSUNBZ0lDQWdJR0Z5YVdFdGMyVnNaV04wWldROWUzUm9hWE11YVhOVFpXeGxZM1JsWkZScGJXVW9kR2x0WlNrZ1B5QmNJblJ5ZFdWY0lpQTZJSFZ1WkdWbWFXNWxaSDFjYmlBZ0lDQWdJQ0FnSUNCaGNtbGhMV1JwYzJGaWJHVmtQWHQwYUdsekxtbHpSR2x6WVdKc1pXUlVhVzFsS0hScGJXVXBJRDhnWENKMGNuVmxYQ0lnT2lCMWJtUmxabWx1WldSOVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3Wm05eWJXRjBSR0YwWlNoMGFXMWxMQ0JtYjNKdFlYUXNJSFJvYVhNdWNISnZjSE11Ykc5allXeGxLWDFjYmlBZ0lDQWdJQ0FnUEM5c2FUNWNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZTazdYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIc2dhR1ZwWjJoMElIMGdQU0IwYUdsekxuTjBZWFJsTzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGdjbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZkR2x0WlMxamIyNTBZV2x1WlhJZ0pIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG5SdlpHRjVRblYwZEc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmRHbHRaUzFqYjI1MFlXbHVaWEl0TFhkcGRHZ3RkRzlrWVhrdFluVjBkRzl1WENKY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nWENKY0lseHVJQ0FnSUNBZ0lDQjlZSDFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WUhKbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDJobFlXUmxjaUJ5WldGamRDMWtZWFJsY0dsamEyVnlYMTlvWldGa1pYSXRMWFJwYldVZ0pIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyaHZkMVJwYldWVFpXeGxZM1JQYm14NVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOW9aV0ZrWlhJdExYUnBiV1V0TFc5dWJIbGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJRndpWENKY2JpQWdJQ0FnSUNBZ0lDQjlZSDFjYmlBZ0lDQWdJQ0FnSUNCeVpXWTlleWhvWldGa1pYSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHVmhaR1Z5SUQwZ2FHVmhaR1Z5TzF4dUlDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEl0ZEdsdFpWOWZhR1ZoWkdWeVhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNCN2RHaHBjeTV3Y205d2N5NTBhVzFsUTJGd2RHbHZibjFjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZkR2x0WlZ3aVBseHVJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZkR2x0WlMxaWIzaGNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeDFiRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTkwYVcxbExXeHBjM1JjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldZOWV5aHNhWE4wS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1c2FYTjBJRDBnYkdsemREdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTJobGFXZG9kQ0EvSUhzZ2FHVnBaMmgwSUgwZ09pQjdmWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbTlzWlQxY0lteHBjM1JpYjNoY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtbGhMV3hoWW1Wc1BYdDBhR2x6TG5CeWIzQnpMblJwYldWRFlYQjBhVzl1ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdkR2hwY3k1eVpXNWtaWEpVYVcxbGN5Z3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOTFiRDVjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FwTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FnWm5KdmJTQmNJbkpsWVdOMFhDSTdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ1hDSndjbTl3TFhSNWNHVnpYQ0k3WEc1cGJYQnZjblFnZXlCblpYUlpaV0Z5TENCdVpYZEVZWFJsSUgwZ1puSnZiU0JjSWk0dlpHRjBaVjkxZEdsc2Mxd2lPMXh1YVcxd2IzSjBJQ29nWVhNZ2RYUnBiSE1nWm5KdmJTQmNJaTR2WkdGMFpWOTFkR2xzYzF3aU8xeHVhVzF3YjNKMElIc2dZMnh6ZUNCOUlHWnliMjBnWENKamJITjRYQ0k3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRmxsWVhJZ1pYaDBaVzVrY3lCU1pXRmpkQzVEYjIxd2IyNWxiblFnZTF4dUlDQnpkR0YwYVdNZ2NISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lHTnNaV0Z5VTJWc1pXTjBhVzVuUkdGMFpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnWkdGMFpUb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3NYRzRnSUNBZ1pHbHpZV0pzWldSTFpYbGliMkZ5WkU1aGRtbG5ZWFJwYjI0NklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJR1Z1WkVSaGRHVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lHOXVSR0Y1UTJ4cFkyczZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhCeVpWTmxiR1ZqZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3NYRzRnSUNBZ2MyVjBVSEpsVTJWc1pXTjBhVzl1T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQnpaV3hsWTNSbFpEb2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDeGNiaUFnSUNCcGJteHBibVU2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lHMWhlRVJoZEdVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUcxcGJrUmhkR1U2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTEZ4dUlDQWdJSFZ6WlZCdmFXNTBaWEpGZG1WdWREb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYjI1WlpXRnlUVzkxYzJWRmJuUmxjam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQnZibGxsWVhKTmIzVnpaVXhsWVhabE9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUhObGJHVmpkR2x1WjBSaGRHVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lISmxibVJsY2xsbFlYSkRiMjUwWlc1ME9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J6Wld4bFkzUnpSVzVrT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnpaV3hsWTNSelUzUmhjblE2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITmxiR1ZqZEhOU1lXNW5aVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2MzUmhjblJFWVhSbE9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNCbGVHTnNkV1JsUkdGMFpYTTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVVOW1LRnh1SUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiWEc0Z0lDQWdJQ0FnSUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTEZ4dUlDQWdJQ0FnSUNCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZTF4dUlDQWdJQ0FnSUNBZ0lHUmhkR1U2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0JkS1N4Y2JpQWdJQ0FwTEZ4dUlDQWdJR2x1WTJ4MVpHVkVZWFJsY3pvZ1VISnZjRlI1Y0dWekxtRnljbUY1TEZ4dUlDQWdJR1pwYkhSbGNrUmhkR1U2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lIbGxZWEpKZEdWdFRuVnRZbVZ5T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQWdJR2hoYm1Sc1pVOXVTMlY1Ukc5M2Jqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnZVdWaGNrTnNZWE56VG1GdFpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJSDA3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY0hKdmNITXBJSHRjYmlBZ0lDQnpkWEJsY2lod2NtOXdjeWs3WEc0Z0lIMWNibHh1SUNCWlJVRlNYMUpGUmxNZ1BTQmJMaTR1UVhKeVlYa29kR2hwY3k1d2NtOXdjeTU1WldGeVNYUmxiVTUxYldKbGNpbGRMbTFoY0Nnb0tTQTlQbHh1SUNBZ0lGSmxZV04wTG1OeVpXRjBaVkpsWmlncExGeHVJQ0FwTzF4dVhHNGdJR2x6UkdsellXSnNaV1FnUFNBb1pHRjBaU2tnUFQ0Z2RYUnBiSE11YVhORVlYbEVhWE5oWW14bFpDaGtZWFJsTENCMGFHbHpMbkJ5YjNCektUdGNibHh1SUNCcGMwVjRZMngxWkdWa0lEMGdLR1JoZEdVcElEMCtJSFYwYVd4ekxtbHpSR0Y1UlhoamJIVmtaV1FvWkdGMFpTd2dkR2hwY3k1d2NtOXdjeWs3WEc1Y2JpQWdjMlZzWldOMGFXNW5SR0YwWlNBOUlDZ3BJRDArSUhSb2FYTXVjSEp2Y0hNdWMyVnNaV04wYVc1blJHRjBaU0EvUHlCMGFHbHpMbkJ5YjNCekxuQnlaVk5sYkdWamRHbHZianRjYmx4dUlDQjFjR1JoZEdWR2IyTjFjMDl1VUdGbmFXNWhkR1VnUFNBb2NtVm1TVzVrWlhncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCM1lXbDBSbTl5VW1WU1pXNWtaWElnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQjBhR2x6TGxsRlFWSmZVa1ZHVTF0eVpXWkpibVJsZUYwdVkzVnljbVZ1ZEM1bWIyTjFjeWdwTzF4dUlDQWdJSDB1WW1sdVpDaDBhR2x6S1R0Y2JseHVJQ0FnSUhkcGJtUnZkeTV5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVb2QyRnBkRVp2Y2xKbFVtVnVaR1Z5S1R0Y2JpQWdmVHRjYmx4dUlDQm9ZVzVrYkdWWlpXRnlRMnhwWTJzZ1BTQW9aR0Y1TENCbGRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbTl1UkdGNVEyeHBZMnNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNUVZWGxEYkdsamF5aGtZWGtzSUdWMlpXNTBLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnYUdGdVpHeGxXV1ZoY2s1aGRtbG5ZWFJwYjI0Z1BTQW9ibVYzV1dWaGNpd2dibVYzUkdGMFpTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2daR0YwWlN3Z2VXVmhja2wwWlcxT2RXMWlaWElnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ1kyOXVjM1FnZXlCemRHRnlkRkJsY21sdlpDQjlJRDBnZFhScGJITXVaMlYwV1dWaGNuTlFaWEpwYjJRb1pHRjBaU3dnZVdWaGNrbDBaVzFPZFcxaVpYSXBPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVhWE5FYVhOaFlteGxaQ2h1WlhkRVlYUmxLU0I4ZkNCMGFHbHpMbWx6UlhoamJIVmtaV1FvYm1WM1JHRjBaU2twSUhKbGRIVnlianRjYmlBZ0lDQjBhR2x6TG5CeWIzQnpMbk5sZEZCeVpWTmxiR1ZqZEdsdmJpaHVaWGRFWVhSbEtUdGNibHh1SUNBZ0lHbG1JQ2h1WlhkWlpXRnlJQzBnYzNSaGNuUlFaWEpwYjJRZ1BUMDlJQzB4S1NCN1hHNGdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpVWnZZM1Z6VDI1UVlXZHBibUYwWlNoNVpXRnlTWFJsYlU1MWJXSmxjaUF0SURFcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JtVjNXV1ZoY2lBdElITjBZWEowVUdWeWFXOWtJRDA5UFNCNVpXRnlTWFJsYlU1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NTFjR1JoZEdWR2IyTjFjMDl1VUdGbmFXNWhkR1VvTUNrN1hHNGdJQ0FnZlNCbGJITmxJSFJvYVhNdVdVVkJVbDlTUlVaVFcyNWxkMWxsWVhJZ0xTQnpkR0Z5ZEZCbGNtbHZaRjB1WTNWeWNtVnVkQzVtYjJOMWN5Z3BPMXh1SUNCOU8xeHVYRzRnSUdselUyRnRaVVJoZVNBOUlDaDVMQ0J2ZEdobGNpa2dQVDRnZFhScGJITXVhWE5UWVcxbFJHRjVLSGtzSUc5MGFHVnlLVHRjYmx4dUlDQnBjME4xY25KbGJuUlpaV0Z5SUQwZ0tIa3BJRDArSUhrZ1BUMDlJR2RsZEZsbFlYSW9ibVYzUkdGMFpTZ3BLVHRjYmx4dUlDQnBjMUpoYm1kbFUzUmhjblFnUFNBb2VTa2dQVDVjYmlBZ0lDQjBhR2x6TG5CeWIzQnpMbk4wWVhKMFJHRjBaU0FtSmx4dUlDQWdJSFJvYVhNdWNISnZjSE11Wlc1a1JHRjBaU0FtSmx4dUlDQWdJSFYwYVd4ekxtbHpVMkZ0WlZsbFlYSW9kWFJwYkhNdWMyVjBXV1ZoY2lodVpYZEVZWFJsS0Nrc0lIa3BMQ0IwYUdsekxuQnliM0J6TG5OMFlYSjBSR0YwWlNrN1hHNWNiaUFnYVhOU1lXNW5aVVZ1WkNBOUlDaDVLU0E5UGx4dUlDQWdJSFJvYVhNdWNISnZjSE11YzNSaGNuUkVZWFJsSUNZbVhHNGdJQ0FnZEdocGN5NXdjbTl3Y3k1bGJtUkVZWFJsSUNZbVhHNGdJQ0FnZFhScGJITXVhWE5UWVcxbFdXVmhjaWgxZEdsc2N5NXpaWFJaWldGeUtHNWxkMFJoZEdVb0tTd2dlU2tzSUhSb2FYTXVjSEp2Y0hNdVpXNWtSR0YwWlNrN1hHNWNiaUFnYVhOSmJsSmhibWRsSUQwZ0tIa3BJRDArWEc0Z0lDQWdkWFJwYkhNdWFYTlpaV0Z5U1c1U1lXNW5aU2g1TENCMGFHbHpMbkJ5YjNCekxuTjBZWEowUkdGMFpTd2dkR2hwY3k1d2NtOXdjeTVsYm1SRVlYUmxLVHRjYmx4dUlDQnBjMGx1VTJWc1pXTjBhVzVuVW1GdVoyVWdQU0FvZVNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2MyVnNaV04wYzFOMFlYSjBMQ0J6Wld4bFkzUnpSVzVrTENCelpXeGxZM1J6VW1GdVoyVXNJSE4wWVhKMFJHRjBaU3dnWlc1a1JHRjBaU0I5SUQxY2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNN1hHNWNiaUFnSUNCcFppQW9YRzRnSUNBZ0lDQWhLSE5sYkdWamRITlRkR0Z5ZENCOGZDQnpaV3hsWTNSelJXNWtJSHg4SUhObGJHVmpkSE5TWVc1blpTa2dmSHhjYmlBZ0lDQWdJQ0YwYUdsekxuTmxiR1ZqZEdsdVowUmhkR1VvS1Z4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2MyVnNaV04wYzFOMFlYSjBJQ1ltSUdWdVpFUmhkR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIxZEdsc2N5NXBjMWxsWVhKSmJsSmhibWRsS0hrc0lIUm9hWE11YzJWc1pXTjBhVzVuUkdGMFpTZ3BMQ0JsYm1SRVlYUmxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSE5sYkdWamRITkZibVFnSmlZZ2MzUmhjblJFWVhSbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RYUnBiSE11YVhOWlpXRnlTVzVTWVc1blpTaDVMQ0J6ZEdGeWRFUmhkR1VzSUhSb2FYTXVjMlZzWldOMGFXNW5SR0YwWlNncEtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tITmxiR1ZqZEhOU1lXNW5aU0FtSmlCemRHRnlkRVJoZEdVZ0ppWWdJV1Z1WkVSaGRHVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFkR2xzY3k1cGMxbGxZWEpKYmxKaGJtZGxLSGtzSUhOMFlYSjBSR0YwWlN3Z2RHaHBjeTV6Wld4bFkzUnBibWRFWVhSbEtDa3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgwN1hHNWNiaUFnYVhOVFpXeGxZM1JwYm1kU1lXNW5aVk4wWVhKMElEMGdLSGtwSUQwK0lIdGNiaUFnSUNCcFppQW9JWFJvYVhNdWFYTkpibE5sYkdWamRHbHVaMUpoYm1kbEtIa3BLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdleUJ6ZEdGeWRFUmhkR1VzSUhObGJHVmpkSE5UZEdGeWRDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JqYjI1emRDQmZlV1ZoY2lBOUlIVjBhV3h6TG5ObGRGbGxZWElvYm1WM1JHRjBaU2dwTENCNUtUdGNibHh1SUNBZ0lHbG1JQ2h6Wld4bFkzUnpVM1JoY25RcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMWRHbHNjeTVwYzFOaGJXVlpaV0Z5S0Y5NVpXRnlMQ0IwYUdsekxuTmxiR1ZqZEdsdVowUmhkR1VvS1NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjFkR2xzY3k1cGMxTmhiV1ZaWldGeUtGOTVaV0Z5TENCemRHRnlkRVJoZEdVcE8xeHVJQ0I5TzF4dVhHNGdJR2x6VTJWc1pXTjBhVzVuVW1GdVoyVkZibVFnUFNBb2VTa2dQVDRnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTVwYzBsdVUyVnNaV04wYVc1blVtRnVaMlVvZVNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCN0lHVnVaRVJoZEdVc0lITmxiR1ZqZEhORmJtUXNJSE5sYkdWamRITlNZVzVuWlNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCZmVXVmhjaUE5SUhWMGFXeHpMbk5sZEZsbFlYSW9ibVYzUkdGMFpTZ3BMQ0I1S1R0Y2JseHVJQ0FnSUdsbUlDaHpaV3hsWTNSelJXNWtJSHg4SUhObGJHVmpkSE5TWVc1blpTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIVjBhV3h6TG1selUyRnRaVmxsWVhJb1gzbGxZWElzSUhSb2FYTXVjMlZzWldOMGFXNW5SR0YwWlNncEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFYwYVd4ekxtbHpVMkZ0WlZsbFlYSW9YM2xsWVhJc0lHVnVaRVJoZEdVcE8xeHVJQ0I5TzF4dVhHNGdJR2x6UzJWNVltOWhjbVJUWld4bFkzUmxaQ0E5SUNoNUtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1pHRjBaU0E5SUhWMGFXeHpMbWRsZEZOMFlYSjBUMlpaWldGeUtIVjBhV3h6TG5ObGRGbGxZWElvZEdocGN5NXdjbTl3Y3k1a1lYUmxMQ0I1S1NrN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJQ0YwYUdsekxuQnliM0J6TG1ScGMyRmliR1ZrUzJWNVltOWhjbVJPWVhacFoyRjBhVzl1SUNZbVhHNGdJQ0FnSUNBaGRHaHBjeTV3Y205d2N5NXBibXhwYm1VZ0ppWmNiaUFnSUNBZ0lDRjFkR2xzY3k1cGMxTmhiV1ZFWVhrb1pHRjBaU3dnZFhScGJITXVaMlYwVTNSaGNuUlBabGxsWVhJb2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSbFpDa3BJQ1ltWEc0Z0lDQWdJQ0IxZEdsc2N5NXBjMU5oYldWRVlYa29aR0YwWlN3Z2RYUnBiSE11WjJWMFUzUmhjblJQWmxsbFlYSW9kR2hwY3k1d2NtOXdjeTV3Y21WVFpXeGxZM1JwYjI0cEtWeHVJQ0FnSUNrN1hHNGdJSDA3WEc1Y2JpQWdiMjVaWldGeVEyeHBZMnNnUFNBb1pTd2dlU2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnWkdGMFpTQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0IwYUdsekxtaGhibVJzWlZsbFlYSkRiR2xqYXloMWRHbHNjeTVuWlhSVGRHRnlkRTltV1dWaGNpaDFkR2xzY3k1elpYUlpaV0Z5S0dSaGRHVXNJSGtwS1N3Z1pTazdYRzRnSUgwN1hHNWNiaUFnYjI1WlpXRnlTMlY1Ukc5M2JpQTlJQ2hsTENCNUtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QnJaWGtnZlNBOUlHVTdYRzRnSUNBZ1kyOXVjM1FnZXlCb1lXNWtiR1ZQYmt0bGVVUnZkMjRnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzVjYmlBZ0lDQnBaaUFvSVhSb2FYTXVjSEp2Y0hNdVpHbHpZV0pzWldSTFpYbGliMkZ5WkU1aGRtbG5ZWFJwYjI0cElIdGNiaUFnSUNBZ0lITjNhWFJqYUNBb2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdYQ0pGYm5SbGNsd2lPbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXViMjVaWldGeVEyeHBZMnNvWlN3Z2VTazdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1elpYUlFjbVZUWld4bFkzUnBiMjRvZEdocGN5NXdjbTl3Y3k1elpXeGxZM1JsWkNrN1hHNGdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnWENKQmNuSnZkMUpwWjJoMFhDSTZYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWWlpXRnlUbUYyYVdkaGRHbHZiaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lIa2dLeUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkWFJwYkhNdVlXUmtXV1ZoY25Nb2RHaHBjeTV3Y205d2N5NXdjbVZUWld4bFkzUnBiMjRzSURFcExGeHVJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdYQ0pCY25KdmQweGxablJjSWpwY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVmxsWVhKT1lYWnBaMkYwYVc5dUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnZVNBdElERXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMWRHbHNjeTV6ZFdKWlpXRnljeWgwYUdsekxuQnliM0J6TG5CeVpWTmxiR1ZqZEdsdmJpd2dNU2tzWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCb1lXNWtiR1ZQYmt0bGVVUnZkMjRnSmlZZ2FHRnVaR3hsVDI1TFpYbEViM2R1S0dVcE8xeHVJQ0I5TzF4dVhHNGdJR2RsZEZsbFlYSkRiR0Z6YzA1aGJXVnpJRDBnS0hrcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCa1lYUmxMRnh1SUNBZ0lDQWdiV2x1UkdGMFpTeGNiaUFnSUNBZ0lHMWhlRVJoZEdVc1hHNGdJQ0FnSUNCelpXeGxZM1JsWkN4Y2JpQWdJQ0FnSUdWNFkyeDFaR1ZFWVhSbGN5eGNiaUFnSUNBZ0lHbHVZMngxWkdWRVlYUmxjeXhjYmlBZ0lDQWdJR1pwYkhSbGNrUmhkR1VzWEc0Z0lDQWdJQ0I1WldGeVEyeGhjM05PWVcxbExGeHVJQ0FnSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHTnNjM2dvWEc0Z0lDQWdJQ0JjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDNsbFlYSXRkR1Y0ZEZ3aUxGeHVJQ0FnSUNBZ1lISmxZV04wTFdSaGRHVndhV05yWlhKZlgzbGxZWEl0Skh0NWZXQXNYRzRnSUNBZ0lDQjVaV0Z5UTJ4aGMzTk9ZVzFsSUQ4Z2VXVmhja05zWVhOelRtRnRaU2gxZEdsc2N5NXpaWFJaWldGeUtHUmhkR1VzSUhrcEtTQTZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnWENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5NVpXRnlMWFJsZUhRdExYTmxiR1ZqZEdWa1hDSTZJSGtnUFQwOUlHZGxkRmxsWVhJb2MyVnNaV04wWldRcExGeHVJQ0FnSUNBZ0lDQmNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYM2xsWVhJdGRHVjRkQzB0WkdsellXSnNaV1JjSWpwY2JpQWdJQ0FnSUNBZ0lDQW9iV2x1UkdGMFpTQjhmQ0J0WVhoRVlYUmxJSHg4SUdWNFkyeDFaR1ZFWVhSbGN5QjhmQ0JwYm1Oc2RXUmxSR0YwWlhNZ2ZId2dabWxzZEdWeVJHRjBaU2tnSmlaY2JpQWdJQ0FnSUNBZ0lDQjFkR2xzY3k1cGMxbGxZWEpFYVhOaFlteGxaQ2g1TENCMGFHbHpMbkJ5YjNCektTeGNiaUFnSUNBZ0lDQWdYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTk1WldGeUxYUmxlSFF0TFd0bGVXSnZZWEprTFhObGJHVmpkR1ZrWENJNlhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGMwdGxlV0p2WVhKa1UyVnNaV04wWldRb2VTa3NYRzRnSUNBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmZVdWaGNpMTBaWGgwTFMxeVlXNW5aUzF6ZEdGeWRGd2lPaUIwYUdsekxtbHpVbUZ1WjJWVGRHRnlkQ2g1S1N4Y2JpQWdJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOTVaV0Z5TFhSbGVIUXRMWEpoYm1kbExXVnVaRndpT2lCMGFHbHpMbWx6VW1GdVoyVkZibVFvZVNrc1hHNGdJQ0FnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZlV1ZoY2kxMFpYaDBMUzFwYmkxeVlXNW5aVndpT2lCMGFHbHpMbWx6U1c1U1lXNW5aU2g1S1N4Y2JpQWdJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOTVaV0Z5TFhSbGVIUXRMV2x1TFhObGJHVmpkR2x1WnkxeVlXNW5aVndpT2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YVhOSmJsTmxiR1ZqZEdsdVoxSmhibWRsS0hrcExGeHVJQ0FnSUNBZ0lDQmNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYM2xsWVhJdGRHVjRkQzB0YzJWc1pXTjBhVzVuTFhKaGJtZGxMWE4wWVhKMFhDSTZYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXBjMU5sYkdWamRHbHVaMUpoYm1kbFUzUmhjblFvZVNrc1hHNGdJQ0FnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZlV1ZoY2kxMFpYaDBMUzF6Wld4bFkzUnBibWN0Y21GdVoyVXRaVzVrWENJNlhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGMxTmxiR1ZqZEdsdVoxSmhibWRsUlc1a0tIa3BMRnh1SUNBZ0lDQWdJQ0JjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDNsbFlYSXRkR1Y0ZEMwdGRHOWtZWGxjSWpvZ2RHaHBjeTVwYzBOMWNuSmxiblJaWldGeUtIa3BMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQXBPMXh1SUNCOU8xeHVYRzRnSUdkbGRGbGxZWEpVWVdKSmJtUmxlQ0E5SUNoNUtTQTlQaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdVpHbHpZV0pzWldSTFpYbGliMkZ5WkU1aGRtbG5ZWFJwYjI0cElISmxkSFZ5YmlCY0lpMHhYQ0k3WEc0Z0lDQWdZMjl1YzNRZ2NISmxVMlZzWldOMFpXUWdQU0IxZEdsc2N5NW5aWFJaWldGeUtIUm9hWE11Y0hKdmNITXVjSEpsVTJWc1pXTjBhVzl1S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUI1SUQwOVBTQndjbVZUWld4bFkzUmxaQ0EvSUZ3aU1Gd2lJRG9nWENJdE1Wd2lPMXh1SUNCOU8xeHVYRzRnSUdkbGRGbGxZWEpEYjI1MFlXbHVaWEpEYkdGemMwNWhiV1Z6SUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2djMlZzWldOMGFXNW5SR0YwWlN3Z2MyVnNaV04wYzFOMFlYSjBMQ0J6Wld4bFkzUnpSVzVrTENCelpXeGxZM1J6VW1GdVoyVWdmU0E5WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TzF4dUlDQWdJSEpsZEhWeWJpQmpiSE40S0Z3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmVXVmhjbHdpTENCN1hHNGdJQ0FnSUNCY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgzbGxZWEl0TFhObGJHVmpkR2x1WnkxeVlXNW5aVndpT2x4dUlDQWdJQ0FnSUNCelpXeGxZM1JwYm1kRVlYUmxJQ1ltSUNoelpXeGxZM1J6VTNSaGNuUWdmSHdnYzJWc1pXTjBjMFZ1WkNCOGZDQnpaV3hsWTNSelVtRnVaMlVwTEZ4dUlDQWdJSDBwTzF4dUlDQjlPMXh1WEc0Z0lHZGxkRmxsWVhKRGIyNTBaVzUwSUQwZ0tIa3BJRDArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2NtOXdjeTV5Wlc1a1pYSlpaV0Z5UTI5dWRHVnVkQ0EvSUhSb2FYTXVjSEp2Y0hNdWNtVnVaR1Z5V1dWaGNrTnZiblJsYm5Rb2VTa2dPaUI1TzF4dUlDQjlPMXh1WEc0Z0lISmxibVJsY2lncElIdGNiaUFnSUNCamIyNXpkQ0I1WldGeWMweHBjM1FnUFNCYlhUdGNiaUFnSUNCamIyNXpkQ0I3SUdSaGRHVXNJSGxsWVhKSmRHVnRUblZ0WW1WeUxDQnZibGxsWVhKTmIzVnpaVVZ1ZEdWeUxDQnZibGxsWVhKTmIzVnpaVXhsWVhabElIMGdQVnh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCN0lITjBZWEowVUdWeWFXOWtMQ0JsYm1SUVpYSnBiMlFnZlNBOUlIVjBhV3h6TG1kbGRGbGxZWEp6VUdWeWFXOWtLRnh1SUNBZ0lDQWdaR0YwWlN4Y2JpQWdJQ0FnSUhsbFlYSkpkR1Z0VG5WdFltVnlMRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQm1iM0lnS0d4bGRDQjVJRDBnYzNSaGNuUlFaWEpwYjJRN0lIa2dQRDBnWlc1a1VHVnlhVzlrT3lCNUt5c3BJSHRjYmlBZ0lDQWdJSGxsWVhKelRHbHpkQzV3ZFhOb0tGeHVJQ0FnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUNBZ2NtVm1QWHQwYUdsekxsbEZRVkpmVWtWR1UxdDVJQzBnYzNSaGNuUlFaWEpwYjJSZGZWeHVJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWhsZGlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2YmxsbFlYSkRiR2xqYXlobGRpd2dlU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0J2Ymt0bGVVUnZkMjQ5ZXlobGRpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hWMGFXeHpMbWx6VTNCaFkyVkxaWGxFYjNkdUtHVjJLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JsZGk1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JsZGk1clpYa2dQU0JjSWtWdWRHVnlYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI1WlpXRnlTMlY1Ukc5M2JpaGxkaXdnZVNrN1hHNGdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNCMFlXSkpibVJsZUQxN2RHaHBjeTVuWlhSWlpXRnlWR0ZpU1c1a1pYZ29lU2w5WEc0Z0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdDBhR2x6TG1kbGRGbGxZWEpEYkdGemMwNWhiV1Z6S0hrcGZWeHVJQ0FnSUNBZ0lDQWdJRzl1VFc5MWMyVkZiblJsY2oxN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FoZEdocGN5NXdjbTl3Y3k1MWMyVlFiMmx1ZEdWeVJYWmxiblJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQeUFvWlhZcElEMCtJRzl1V1dWaGNrMXZkWE5sUlc1MFpYSW9aWFlzSUhrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUc5dVVHOXBiblJsY2tWdWRHVnlQWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXVkWE5sVUc5cGJuUmxja1YyWlc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z0tHVjJLU0E5UGlCdmJsbGxZWEpOYjNWelpVVnVkR1Z5S0dWMkxDQjVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnZiazF2ZFhObFRHVmhkbVU5ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJWFJvYVhNdWNISnZjSE11ZFhObFVHOXBiblJsY2tWMlpXNTBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdLR1YyS1NBOVBpQnZibGxsWVhKTmIzVnpaVXhsWVhabEtHVjJMQ0I1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J2YmxCdmFXNTBaWEpNWldGMlpUMTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxuVnpaVkJ2YVc1MFpYSkZkbVZ1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUNobGRpa2dQVDRnYjI1WlpXRnlUVzkxYzJWTVpXRjJaU2hsZGl3Z2VTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2EyVjVQWHQ1ZlZ4dUlDQWdJQ0FnSUNBZ0lHRnlhV0V0WTNWeWNtVnVkRDE3ZEdocGN5NXBjME4xY25KbGJuUlpaV0Z5S0hrcElEOGdYQ0prWVhSbFhDSWdPaUIxYm1SbFptbHVaV1I5WEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQjdkR2hwY3k1blpYUlpaV0Z5UTI5dWRHVnVkQ2g1S1gxY2JpQWdJQ0FnSUNBZ1BDOWthWFkrTEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOWUzUm9hWE11WjJWMFdXVmhja052Ym5SaGFXNWxja05zWVhOelRtRnRaWE1vS1gwK1hHNGdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOTVaV0Z5TFhkeVlYQndaWEpjSWx4dUlDQWdJQ0FnSUNBZ0lHOXVUVzkxYzJWTVpXRjJaVDE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWhkR2hwY3k1d2NtOXdjeTUxYzJWUWIybHVkR1Z5UlhabGJuUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1B5QjBhR2x6TG5CeWIzQnpMbU5zWldGeVUyVnNaV04wYVc1blJHRjBaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnZibEJ2YVc1MFpYSk1aV0YyWlQxN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG5WelpWQnZhVzUwWlhKRmRtVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JSFJvYVhNdWNISnZjSE11WTJ4bFlYSlRaV3hsWTNScGJtZEVZWFJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnZTNsbFlYSnpUR2x6ZEgxY2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBcE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0JjSW5KbFlXTjBYQ0k3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdYQ0p3Y205d0xYUjVjR1Z6WENJN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUdsdWNIVjBWR2x0WlNCbGVIUmxibVJ6SUZKbFlXTjBMa052YlhCdmJtVnVkQ0I3WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ2IyNURhR0Z1WjJVNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJR1JoZEdVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUhScGJXVlRkSEpwYm1jNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnZEdsdFpVbHVjSFYwVEdGaVpXdzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ1kzVnpkRzl0VkdsdFpVbHVjSFYwT2lCUWNtOXdWSGx3WlhNdVpXeGxiV1Z1ZEN4Y2JpQWdmVHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3Y205d2N5a2dlMXh1SUNBZ0lITjFjR1Z5S0hCeWIzQnpLVHRjYmx4dUlDQWdJSFJvYVhNdWMzUmhkR1VnUFNCN1hHNGdJQ0FnSUNCMGFXMWxPaUIwYUdsekxuQnliM0J6TG5ScGJXVlRkSEpwYm1jc1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCblpYUkVaWEpwZG1Wa1UzUmhkR1ZHY205dFVISnZjSE1vY0hKdmNITXNJSE4wWVhSbEtTQjdYRzRnSUNBZ2FXWWdLSEJ5YjNCekxuUnBiV1ZUZEhKcGJtY2dJVDA5SUhOMFlYUmxMblJwYldVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lIUnBiV1U2SUhCeWIzQnpMblJwYldWVGRISnBibWNzWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZKbGRIVnliaUJ1ZFd4c0lIUnZJR2x1WkdsallYUmxJRzV2SUdOb1lXNW5aU0IwYnlCemRHRjBaUzVjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUc5dVZHbHRaVU5vWVc1blpTQTlJQ2gwYVcxbEtTQTlQaUI3WEc0Z0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lIUnBiV1VnZlNrN1hHNWNiaUFnSUNCamIyNXpkQ0I3SUdSaGRHVTZJSEJ5YjNCRVlYUmxJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUdOdmJuTjBJR2x6VUhKdmNFUmhkR1ZXWVd4cFpDQTlJSEJ5YjNCRVlYUmxJR2x1YzNSaGJtTmxiMllnUkdGMFpTQW1KaUFoYVhOT1lVNG9jSEp2Y0VSaGRHVXBPMXh1SUNBZ0lHTnZibk4wSUdSaGRHVWdQU0JwYzFCeWIzQkVZWFJsVm1Gc2FXUWdQeUJ3Y205d1JHRjBaU0E2SUc1bGR5QkVZWFJsS0NrN1hHNWNiaUFnSUNCa1lYUmxMbk5sZEVodmRYSnpLSFJwYldVdWMzQnNhWFFvWENJNlhDSXBXekJkS1R0Y2JpQWdJQ0JrWVhSbExuTmxkRTFwYm5WMFpYTW9kR2x0WlM1emNHeHBkQ2hjSWpwY0lpbGJNVjBwTzF4dVhHNGdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJrTm9ZVzVuWlNoa1lYUmxLVHRjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpVYVcxbFNXNXdkWFFnUFNBb0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QjBhVzFsSUgwZ1BTQjBhR2x6TG5OMFlYUmxPMXh1SUNBZ0lHTnZibk4wSUhzZ1pHRjBaU3dnZEdsdFpWTjBjbWx1Wnl3Z1kzVnpkRzl0VkdsdFpVbHVjSFYwSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1WEc0Z0lDQWdhV1lnS0dOMWMzUnZiVlJwYldWSmJuQjFkQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRkpsWVdOMExtTnNiMjVsUld4bGJXVnVkQ2hqZFhOMGIyMVVhVzFsU1c1d2RYUXNJSHRjYmlBZ0lDQWdJQ0FnWkdGMFpTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklIUnBiV1VzWEc0Z0lDQWdJQ0FnSUc5dVEyaGhibWRsT2lCMGFHbHpMbTl1VkdsdFpVTm9ZVzVuWlN4Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4YVc1d2RYUmNiaUFnSUNBZ0lDQWdkSGx3WlQxY0luUnBiV1ZjSWx4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeUxYUnBiV1ZmWDJsdWNIVjBYQ0pjYmlBZ0lDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJOVhDSlVhVzFsWENKY2JpQWdJQ0FnSUNBZ2JtRnRaVDFjSW5ScGJXVXRhVzV3ZFhSY0lseHVJQ0FnSUNBZ0lDQnlaWEYxYVhKbFpGeHVJQ0FnSUNBZ0lDQjJZV3gxWlQxN2RHbHRaWDFjYmlBZ0lDQWdJQ0FnYjI1RGFHRnVaMlU5ZXlobGRpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YjI1VWFXMWxRMmhoYm1kbEtHVjJMblJoY21kbGRDNTJZV3gxWlNCOGZDQjBhVzFsVTNSeWFXNW5LVHRjYmlBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUM4K1hHNGdJQ0FnS1R0Y2JpQWdmVHRjYmx4dUlDQnlaVzVrWlhJb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYVc1d2RYUXRkR2x0WlMxamIyNTBZV2x1WlhKY0lqNWNiaUFnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeUxYUnBiV1ZmWDJOaGNIUnBiMjVjSWo1Y2JpQWdJQ0FnSUNBZ0lDQjdkR2hwY3k1d2NtOXdjeTUwYVcxbFNXNXdkWFJNWVdKbGJIMWNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2kxMGFXMWxYMTlwYm5CMWRDMWpiMjUwWVdsdVpYSmNJajVjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEl0ZEdsdFpWOWZhVzV3ZFhSY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbkpsYm1SbGNsUnBiV1ZKYm5CMWRDZ3BmVnh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0JjSW5CeWIzQXRkSGx3WlhOY0lqdGNibWx0Y0c5eWRDQlNaV0ZqZENCbWNtOXRJRndpY21WaFkzUmNJanRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnUTJGc1pXNWtZWEpEYjI1MFlXbHVaWElvZTF4dUlDQnphRzkzVkdsdFpWTmxiR1ZqZEU5dWJIa2dQU0JtWVd4elpTeGNiaUFnYzJodmQxUnBiV1VnUFNCbVlXeHpaU3hjYmlBZ1kyeGhjM05PWVcxbExGeHVJQ0JqYUdsc1pISmxiaXhjYm4wcElIdGNiaUFnYkdWMElHRnlhV0ZNWVdKbGJDQTlJSE5vYjNkVWFXMWxVMlZzWldOMFQyNXNlVnh1SUNBZ0lEOGdYQ0pEYUc5dmMyVWdWR2x0WlZ3aVhHNGdJQ0FnT2lCZ1EyaHZiM05sSUVSaGRHVWtlM05vYjNkVWFXMWxJRDhnWENJZ1lXNWtJRlJwYldWY0lpQTZJRndpWENKOVlEdGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhrYVhaY2JpQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05PWVcxbGZWeHVJQ0FnSUNBZ2NtOXNaVDFjSW1ScFlXeHZaMXdpWEc0Z0lDQWdJQ0JoY21saExXeGhZbVZzUFh0aGNtbGhUR0ZpWld4OVhHNGdJQ0FnSUNCaGNtbGhMVzF2WkdGc1BWd2lkSEoxWlZ3aVhHNGdJQ0FnUGx4dUlDQWdJQ0FnZTJOb2FXeGtjbVZ1ZlZ4dUlDQWdJRHd2WkdsMlBseHVJQ0FwTzF4dWZWeHVYRzVEWVd4bGJtUmhja052Ym5SaGFXNWxjaTV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJSE5vYjNkVWFXMWxVMlZzWldOMFQyNXNlVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUhOb2IzZFVhVzFsT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ1kyeGhjM05PWVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0JqYUdsc1pISmxiam9nVUhKdmNGUjVjR1Z6TG01dlpHVXNYRzU5TzF4dUlpd2lhVzF3YjNKMElGbGxZWEpFY205d1pHOTNiaUJtY205dElGd2lMaTk1WldGeVgyUnliM0JrYjNkdVhDSTdYRzVwYlhCdmNuUWdUVzl1ZEdoRWNtOXdaRzkzYmlCbWNtOXRJRndpTGk5dGIyNTBhRjlrY205d1pHOTNibHdpTzF4dWFXMXdiM0owSUUxdmJuUm9XV1ZoY2tSeWIzQmtiM2R1SUdaeWIyMGdYQ0l1TDIxdmJuUm9YM2xsWVhKZlpISnZjR1J2ZDI1Y0lqdGNibWx0Y0c5eWRDQk5iMjUwYUNCbWNtOXRJRndpTGk5dGIyNTBhRndpTzF4dWFXMXdiM0owSUZScGJXVWdabkp2YlNCY0lpNHZkR2x0WlZ3aU8xeHVhVzF3YjNKMElGbGxZWElnWm5KdmJTQmNJaTR2ZVdWaGNsd2lPMXh1YVcxd2IzSjBJRWx1Y0hWMFZHbHRaU0JtY205dElGd2lMaTlwYm5CMWRGUnBiV1ZjSWp0Y2JtbHRjRzl5ZENCU1pXRmpkQ0JtY205dElGd2ljbVZoWTNSY0lqdGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNCY0luQnliM0F0ZEhsd1pYTmNJanRjYm1sdGNHOXlkQ0I3SUdOc2MzZ2dmU0JtY205dElGd2lZMnh6ZUZ3aU8xeHVhVzF3YjNKMElFTmhiR1Z1WkdGeVEyOXVkR0ZwYm1WeUlHWnliMjBnWENJdUwyTmhiR1Z1WkdGeVgyTnZiblJoYVc1bGNsd2lPMXh1YVcxd2IzSjBJSHRjYmlBZ2JtVjNSR0YwWlN4Y2JpQWdjMlYwVFc5dWRHZ3NYRzRnSUdkbGRFMXZiblJvTEZ4dUlDQmhaR1JOYjI1MGFITXNYRzRnSUhOMVlrMXZiblJvY3l4Y2JpQWdaMlYwVTNSaGNuUlBabGRsWldzc1hHNGdJR2RsZEZOMFlYSjBUMlpVYjJSaGVTeGNiaUFnWVdSa1JHRjVjeXhjYmlBZ1ptOXliV0YwUkdGMFpTeGNiaUFnYzJWMFdXVmhjaXhjYmlBZ1oyVjBXV1ZoY2l4Y2JpQWdhWE5DWldadmNtVXNYRzRnSUdGa1pGbGxZWEp6TEZ4dUlDQnpkV0paWldGeWN5eGNiaUFnYVhOQlpuUmxjaXhjYmlBZ1oyVjBSbTl5YldGMGRHVmtWMlZsYTJSaGVVbHVURzlqWVd4bExGeHVJQ0JuWlhSWFpXVnJaR0Y1VTJodmNuUkpia3h2WTJGc1pTeGNiaUFnWjJWMFYyVmxhMlJoZVUxcGJrbHVURzlqWVd4bExGeHVJQ0JwYzFOaGJXVkVZWGtzWEc0Z0lHbHpVMkZ0WlUxdmJuUm9MRnh1SUNCdGIyNTBhRVJwYzJGaWJHVmtRbVZtYjNKbExGeHVJQ0J0YjI1MGFFUnBjMkZpYkdWa1FXWjBaWElzWEc0Z0lIbGxZWEpFYVhOaFlteGxaRUpsWm05eVpTeGNiaUFnZVdWaGNrUnBjMkZpYkdWa1FXWjBaWElzWEc0Z0lIbGxZWEp6UkdsellXSnNaV1JCWm5SbGNpeGNiaUFnZVdWaGNuTkVhWE5oWW14bFpFSmxabTl5WlN4Y2JpQWdjWFZoY25SbGNrUnBjMkZpYkdWa1FtVm1iM0psTEZ4dUlDQnhkV0Z5ZEdWeVJHbHpZV0pzWldSQlpuUmxjaXhjYmlBZ1oyVjBSV1ptWldOMGFYWmxUV2x1UkdGMFpTeGNiaUFnWjJWMFJXWm1aV04wYVhabFRXRjRSR0YwWlN4Y2JpQWdZV1JrV21WeWJ5eGNiaUFnYVhOV1lXeHBaQ3hjYmlBZ1oyVjBXV1ZoY25OUVpYSnBiMlFzWEc0Z0lFUkZSa0ZWVEZSZldVVkJVbDlKVkVWTlgwNVZUVUpGVWl4Y2JpQWdaMlYwVFc5dWRHaEpia3h2WTJGc1pTeGNibjBnWm5KdmJTQmNJaTR2WkdGMFpWOTFkR2xzYzF3aU8xeHVYRzVqYjI1emRDQkVVazlRUkU5WFRsOUdUME5WVTE5RFRFRlRVMDVCVFVWVElEMGdXMXh1SUNCY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgzbGxZWEl0YzJWc1pXTjBYQ0lzWEc0Z0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZiVzl1ZEdndGMyVnNaV04wWENJc1hHNGdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYlc5dWRHZ3RlV1ZoY2kxelpXeGxZM1JjSWl4Y2JsMDdYRzVjYm1OdmJuTjBJR2x6UkhKdmNHUnZkMjVUWld4bFkzUWdQU0FvWld4bGJXVnVkQ0E5SUh0OUtTQTlQaUI3WEc0Z0lHTnZibk4wSUdOc1lYTnpUbUZ0WlhNZ1BTQW9aV3hsYldWdWRDNWpiR0Z6YzA1aGJXVWdmSHdnWENKY0lpa3VjM0JzYVhRb0wxeGNjeXN2S1R0Y2JpQWdjbVYwZFhKdUlFUlNUMUJFVDFkT1gwWlBRMVZUWDBOTVFWTlRUa0ZOUlZNdWMyOXRaU2hjYmlBZ0lDQW9kR1Z6ZEVOc1lYTnpibUZ0WlNrZ1BUNGdZMnhoYzNOT1lXMWxjeTVwYm1SbGVFOW1LSFJsYzNSRGJHRnpjMjVoYldVcElENDlJREFzWEc0Z0lDazdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJEWVd4bGJtUmhjaUJsZUhSbGJtUnpJRkpsWVdOMExrTnZiWEJ2Ym1WdWRDQjdYRzRnSUhOMFlYUnBZeUJuWlhRZ1pHVm1ZWFZzZEZCeWIzQnpLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQnZia1J5YjNCa2IzZHVSbTlqZFhNNklDZ3BJRDArSUh0OUxGeHVJQ0FnSUNBZ2JXOXVkR2h6VTJodmQyNDZJREVzWEc0Z0lDQWdJQ0JtYjNKalpWTm9iM2ROYjI1MGFFNWhkbWxuWVhScGIyNDZJR1poYkhObExGeHVJQ0FnSUNBZ2RHbHRaVU5oY0hScGIyNDZJRndpVkdsdFpWd2lMRnh1SUNBZ0lDQWdjSEpsZG1sdmRYTlpaV0Z5UW5WMGRHOXVUR0ZpWld3NklGd2lVSEpsZG1sdmRYTWdXV1ZoY2x3aUxGeHVJQ0FnSUNBZ2JtVjRkRmxsWVhKQ2RYUjBiMjVNWVdKbGJEb2dYQ0pPWlhoMElGbGxZWEpjSWl4Y2JpQWdJQ0FnSUhCeVpYWnBiM1Z6VFc5dWRHaENkWFIwYjI1TVlXSmxiRG9nWENKUWNtVjJhVzkxY3lCTmIyNTBhRndpTEZ4dUlDQWdJQ0FnYm1WNGRFMXZiblJvUW5WMGRHOXVUR0ZpWld3NklGd2lUbVY0ZENCTmIyNTBhRndpTEZ4dUlDQWdJQ0FnWTNWemRHOXRWR2x0WlVsdWNIVjBPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ2VXVmhja2wwWlcxT2RXMWlaWEk2SUVSRlJrRlZURlJmV1VWQlVsOUpWRVZOWDA1VlRVSkZVaXhjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJSEJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JoWkdwMWMzUkVZWFJsVDI1RGFHRnVaMlU2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lHTm9iMjl6WlVSaGVVRnlhV0ZNWVdKbGJGQnlaV1pwZURvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JqYkdGemMwNWhiV1U2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMmhwYkdSeVpXNDZJRkJ5YjNCVWVYQmxjeTV1YjJSbExGeHVJQ0FnSUdOdmJuUmhhVzVsY2pvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdaR0YwWlVadmNtMWhkRG9nVUhKdmNGUjVjR1Z6TG05dVpVOW1WSGx3WlNoYlVISnZjRlI1Y0dWekxuTjBjbWx1Wnl3Z1VISnZjRlI1Y0dWekxtRnljbUY1WFNsY2JpQWdJQ0FnSUM1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUdSaGVVTnNZWE56VG1GdFpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnZDJWbGEwUmhlVU5zWVhOelRtRnRaVG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ1pHbHpZV0pzWldSRVlYbEJjbWxoVEdGaVpXeFFjbVZtYVhnNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnYlc5dWRHaERiR0Z6YzA1aGJXVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhScGJXVkRiR0Z6YzA1aGJXVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhsbFlYSkRiR0Z6YzA1aGJXVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUdScGMyRmliR1ZrUzJWNVltOWhjbVJPWVhacFoyRjBhVzl1T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQmpZV3hsYm1SaGNsTjBZWEowUkdGNU9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0FnSUdSeWIzQmtiM2R1VFc5a1pUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGdGNJbk5qY205c2JGd2lMQ0JjSW5ObGJHVmpkRndpWFNrc1hHNGdJQ0FnWlc1a1JHRjBaVG9nVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1JHRjBaU2tzWEc0Z0lDQWdaWGhqYkhWa1pVUmhkR1Z6T2lCUWNtOXdWSGx3WlhNdVlYSnlZWGxQWmloY2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxeHVJQ0FnSUNBZ0lDQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk5vWVhCbEtIdGNiaUFnSUNBZ0lDQWdJQ0JrWVhSbE9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdJQ0FnSUgwcExGeHVJQ0FnSUNBZ1hTa3NYRzRnSUNBZ0tTeGNiaUFnSUNCbGVHTnNkV1JsUkdGMFpVbHVkR1Z5ZG1Gc2N6b2dVSEp2Y0ZSNWNHVnpMbUZ5Y21GNVQyWW9YRzRnSUNBZ0lDQlFjbTl3Vkhsd1pYTXVjMmhoY0dVb2UxeHVJQ0FnSUNBZ0lDQnpkR0Z5ZERvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrc1hHNGdJQ0FnSUNBZ0lHVnVaRG9nVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1JHRjBaU2tzWEc0Z0lDQWdJQ0I5S1N4Y2JpQWdJQ0FwTEZ4dUlDQWdJR1pwYkhSbGNrUmhkR1U2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lHWnBlR1ZrU0dWcFoyaDBPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCbWIzSnRZWFJYWldWclRuVnRZbVZ5T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQm9hV2RvYkdsbmFIUkVZWFJsY3pvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9UV0Z3S1N4Y2JpQWdJQ0JvYjJ4cFpHRjVjem9nVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1RXRndLU3hjYmlBZ0lDQnBibU5zZFdSbFJHRjBaWE02SUZCeWIzQlVlWEJsY3k1aGNuSmhlU3hjYmlBZ0lDQnBibU5zZFdSbFJHRjBaVWx1ZEdWeWRtRnNjem9nVUhKdmNGUjVjR1Z6TG1GeWNtRjVUMllvWEc0Z0lDQWdJQ0JRY205d1ZIbHdaWE11YzJoaGNHVW9lMXh1SUNBZ0lDQWdJQ0J6ZEdGeWREb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3NYRzRnSUNBZ0lDQWdJR1Z1WkRvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrc1hHNGdJQ0FnSUNCOUtTeGNiaUFnSUNBcExGeHVJQ0FnSUdsdVkyeDFaR1ZVYVcxbGN6b2dVSEp2Y0ZSNWNHVnpMbUZ5Y21GNUxGeHVJQ0FnSUdsdWFtVmpkRlJwYldWek9pQlFjbTl3Vkhsd1pYTXVZWEp5WVhrc1hHNGdJQ0FnYVc1c2FXNWxPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCemFHOTFiR1JHYjJOMWMwUmhlVWx1YkdsdVpUb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYkc5allXeGxPaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0Y2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdJQ0JRY205d1ZIbHdaWE11YzJoaGNHVW9leUJzYjJOaGJHVTZJRkJ5YjNCVWVYQmxjeTV2WW1wbFkzUWdmU2tzWEc0Z0lDQWdYU2tzWEc0Z0lDQWdiV0Y0UkdGMFpUb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3NYRzRnSUNBZ2JXbHVSR0YwWlRvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrc1hHNGdJQ0FnYlc5dWRHaHpVMmh2ZDI0NklGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNGdJQ0FnYlc5dWRHaFRaV3hsWTNSbFpFbHVPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lHNWxlSFJOYjI1MGFFRnlhV0ZNWVdKbGJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCdVpYaDBXV1ZoY2tGeWFXRk1ZV0psYkRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0J2YmtOc2FXTnJUM1YwYzJsa1pUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCdmJrMXZiblJvUTJoaGJtZGxPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCdmJsbGxZWEpEYUdGdVoyVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUdadmNtTmxVMmh2ZDAxdmJuUm9UbUYyYVdkaGRHbHZiam9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2IyNUVjbTl3Wkc5M2JrWnZZM1Z6T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQnZibE5sYkdWamREb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCdmJsZGxaV3RUWld4bFkzUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhOb2IzZFVhVzFsVTJWc1pXTjBPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCemFHOTNWR2x0WlVsdWNIVjBPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCemFHOTNUVzl1ZEdoWlpXRnlVR2xqYTJWeU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6YUc5M1JuVnNiRTF2Ym5Sb1dXVmhjbEJwWTJ0bGNqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzJodmQxUjNiME52YkhWdGJrMXZiblJvV1dWaGNsQnBZMnRsY2pvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMmh2ZDBadmRYSkRiMngxYlc1TmIyNTBhRmxsWVhKUWFXTnJaWEk2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITm9iM2RaWldGeVVHbGphMlZ5T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnphRzkzVVhWaGNuUmxjbGxsWVhKUWFXTnJaWEk2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITm9iM2RYWldWclVHbGphMlZ5T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnphRzkzVkdsdFpWTmxiR1ZqZEU5dWJIazZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhScGJXVkdiM0p0WVhRNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnZEdsdFpVbHVkR1Z5ZG1Gc2N6b2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnSUNCdmJsUnBiV1ZEYUdGdVoyVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhScGJXVkpibkIxZEV4aFltVnNPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHMXBibFJwYldVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUcxaGVGUnBiV1U2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTEZ4dUlDQWdJR1Y0WTJ4MVpHVlVhVzFsY3pvZ1VISnZjRlI1Y0dWekxtRnljbUY1TEZ4dUlDQWdJR1pwYkhSbGNsUnBiV1U2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lIUnBiV1ZEWVhCMGFXOXVPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHOXdaVzVVYjBSaGRHVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lIQmxaV3RPWlhoMFRXOXVkR2c2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lIQnlaWFpwYjNWelRXOXVkR2hCY21saFRHRmlaV3c2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdjSEpsZG1sdmRYTlpaV0Z5UVhKcFlVeGhZbVZzT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJSE5qY205c2JHRmliR1ZaWldGeVJISnZjR1J2ZDI0NklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSE5qY205c2JHRmliR1ZOYjI1MGFGbGxZWEpFY205d1pHOTNiam9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2NISmxVMlZzWldOMGFXOXVPaUJRY205d1ZIbHdaWE11YVc1emRHRnVZMlZQWmloRVlYUmxLU3hjYmlBZ0lDQnpaV3hsWTNSbFpEb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvUkdGMFpTa3NYRzRnSUNBZ2MyVnNaV04wYzBWdVpEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzJWc1pXTjBjMU4wWVhKME9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6Wld4bFkzUnpVbUZ1WjJVNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSE5sYkdWamRITkVhWE5oWW14bFpFUmhlWE5KYmxKaGJtZGxPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCelpXeGxZM1J6VFhWc2RHbHdiR1U2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITmxiR1ZqZEdWa1JHRjBaWE02SUZCeWIzQlVlWEJsY3k1aGNuSmhlVTltS0ZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwS1N4Y2JpQWdJQ0J6YUc5M1RXOXVkR2hFY205d1pHOTNiam9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2MyaHZkMUJ5WlhacGIzVnpUVzl1ZEdoek9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6YUc5M1RXOXVkR2haWldGeVJISnZjR1J2ZDI0NklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSE5vYjNkWFpXVnJUblZ0WW1WeWN6b2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzJodmQxbGxZWEpFY205d1pHOTNiam9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2MzUmhjblJFWVhSbE9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNCMGIyUmhlVUoxZEhSdmJqb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCMWMyVlhaV1ZyWkdGNWMxTm9iM0owT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQm1iM0p0WVhSWFpXVnJSR0Y1T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQjNhWFJvVUc5eWRHRnNPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCM1pXVnJUR0ZpWld3NklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnZVdWaGNrbDBaVzFPZFcxaVpYSTZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUNBZ2VXVmhja1J5YjNCa2IzZHVTWFJsYlU1MWJXSmxjam9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ0lDQnpaWFJQY0dWdU9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J6YUc5MWJHUkRiRzl6WlU5dVUyVnNaV04wT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQjFjMlZUYUc5eWRFMXZiblJvU1c1RWNtOXdaRzkzYmpvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMmh2ZDBScGMyRmliR1ZrVFc5dWRHaE9ZWFpwWjJGMGFXOXVPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCd2NtVjJhVzkxYzAxdmJuUm9RblYwZEc5dVRHRmlaV3c2SUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxeHVJQ0FnSUNBZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1dWIyUmxMRnh1SUNBZ0lGMHBMRnh1SUNBZ0lHNWxlSFJOYjI1MGFFSjFkSFJ2Ymt4aFltVnNPaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0Y2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdJQ0JRY205d1ZIbHdaWE11Ym05a1pTeGNiaUFnSUNCZEtTeGNiaUFnSUNCd2NtVjJhVzkxYzFsbFlYSkNkWFIwYjI1TVlXSmxiRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQnVaWGgwV1dWaGNrSjFkSFJ2Ymt4aFltVnNPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lISmxibVJsY2tOMWMzUnZiVWhsWVdSbGNqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnY21WdVpHVnlSR0Y1UTI5dWRHVnVkSE02SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lISmxibVJsY2sxdmJuUm9RMjl1ZEdWdWREb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnY21WdVpHVnlVWFZoY25SbGNrTnZiblJsYm5RNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJSEpsYm1SbGNsbGxZWEpEYjI1MFpXNTBPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCMWMyVlFiMmx1ZEdWeVJYWmxiblE2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lHOXVSR0Y1VFc5MWMyVkZiblJsY2pvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdiMjVOYjI1MGFFMXZkWE5sVEdWaGRtVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUc5dVdXVmhjazF2ZFhObFJXNTBaWEk2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lHOXVXV1ZoY2sxdmRYTmxUR1ZoZG1VNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJSE5vYjNkUWIzQndaWEpCY25KdmR6b2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYUdGdVpHeGxUMjVMWlhsRWIzZHVPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCb1lXNWtiR1ZQYmtSaGVVdGxlVVJ2ZDI0NklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJR2x6U1c1d2RYUkdiMk4xYzJWa09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JqZFhOMGIyMVVhVzFsU1c1d2RYUTZJRkJ5YjNCVWVYQmxjeTVsYkdWdFpXNTBMRnh1SUNBZ0lIZGxaV3RCY21saFRHRmlaV3hRY21WbWFYZzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2JXOXVkR2hCY21saFRHRmlaV3hRY21WbWFYZzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2MyVjBVSEpsVTJWc1pXTjBhVzl1T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ2ZUdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHdjbTl3Y3lrZ2UxeHVJQ0FnSUhOMWNHVnlLSEJ5YjNCektUdGNibHh1SUNBZ0lIUm9hWE11WTI5dWRHRnBibVZ5VW1WbUlEMGdVbVZoWTNRdVkzSmxZWFJsVW1WbUtDazdYRzVjYmlBZ0lDQjBhR2x6TG5OMFlYUmxJRDBnZTF4dUlDQWdJQ0FnWkdGMFpUb2dkR2hwY3k1blpYUkVZWFJsU1c1V2FXVjNLQ2tzWEc0Z0lDQWdJQ0J6Wld4bFkzUnBibWRFWVhSbE9pQnVkV3hzTEZ4dUlDQWdJQ0FnYlc5dWRHaERiMjUwWVdsdVpYSTZJRzUxYkd3c1hHNGdJQ0FnSUNCcGMxSmxibVJsY2tGeWFXRk1hWFpsVFdWemMyRm5aVG9nWm1Gc2MyVXNYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJR052YlhCdmJtVnVkRVJwWkUxdmRXNTBLQ2tnZTF4dUlDQWdJQzh2SUcxdmJuUm9RMjl1ZEdGcGJtVnlJR2hsYVdkb2RDQnBjeUJ1WldWa1pXUWdhVzRnZEdsdFpTQmpiMjF3YjI1bGJuUmNiaUFnSUNBdkx5QjBieUJrWlhSbGNtMXBibVVnZEdobElHaGxhV2RvZENCbWIzSWdkR2hsSUhWc0lHbHVJSFJvWlNCMGFXMWxJR052YlhCdmJtVnVkRnh1SUNBZ0lDOHZJSE5sZEZOMFlYUmxJR2hsY21VZ2MyOGdhR1ZwWjJoMElHbHpJR2RwZG1WdUlHRm1kR1Z5SUdacGJtRnNJR052YlhCdmJtVnVkRnh1SUNBZ0lDOHZJR3hoZVc5MWRDQnBjeUJ5Wlc1a1pYSmxaRnh1SUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG5Ob2IzZFVhVzFsVTJWc1pXTjBLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtRnpjMmxuYmsxdmJuUm9RMjl1ZEdGcGJtVnlJRDBnS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdJRzF2Ym5Sb1EyOXVkR0ZwYm1WeU9pQjBhR2x6TG0xdmJuUm9RMjl1ZEdGcGJtVnlJSDBwTzF4dUlDQWdJQ0FnZlNrb0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVW9jSEpsZGxCeWIzQnpLU0I3WEc0Z0lDQWdhV1lnS0Z4dUlDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1d2NtVlRaV3hsWTNScGIyNGdKaVpjYmlBZ0lDQWdJQ2doYVhOVFlXMWxSR0Y1S0hSb2FYTXVjSEp2Y0hNdWNISmxVMlZzWldOMGFXOXVMQ0J3Y21WMlVISnZjSE11Y0hKbFUyVnNaV04wYVc5dUtTQjhmRnh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG0xdmJuUm9VMlZzWldOMFpXUkpiaUFoUFQwZ2NISmxkbEJ5YjNCekxtMXZiblJvVTJWc1pXTjBaV1JKYmlsY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR2hoYzAxdmJuUm9RMmhoYm1kbFpDQTlJQ0ZwYzFOaGJXVk5iMjUwYUNoY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpTNWtZWFJsTEZ4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxuQnlaVk5sYkdWamRHbHZiaXhjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtGeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnWkdGMFpUb2dkR2hwY3k1d2NtOXdjeTV3Y21WVFpXeGxZM1JwYjI0c1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ2dwSUQwK0lHaGhjMDF2Ym5Sb1EyaGhibWRsWkNBbUppQjBhR2x6TG1oaGJtUnNaVU4xYzNSdmJVMXZiblJvUTJoaGJtZGxLSFJvYVhNdWMzUmhkR1V1WkdGMFpTa3NYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9YRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbTl3Wlc1VWIwUmhkR1VnSmlaY2JpQWdJQ0FnSUNGcGMxTmhiV1ZFWVhrb2RHaHBjeTV3Y205d2N5NXZjR1Z1Vkc5RVlYUmxMQ0J3Y21WMlVISnZjSE11YjNCbGJsUnZSR0YwWlNsY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9lMXh1SUNBZ0lDQWdJQ0JrWVhSbE9pQjBhR2x6TG5CeWIzQnpMbTl3Wlc1VWIwUmhkR1VzWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCb1lXNWtiR1ZEYkdsamEwOTFkSE5wWkdVZ1BTQW9aWFpsYm5RcElEMCtJSHRjYmlBZ0lDQjBhR2x6TG5CeWIzQnpMbTl1UTJ4cFkydFBkWFJ6YVdSbEtHVjJaVzUwS1R0Y2JpQWdmVHRjYmx4dUlDQnpaWFJEYkdsamEwOTFkSE5wWkdWU1pXWWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl1ZEdGcGJtVnlVbVZtTG1OMWNuSmxiblE3WEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsUkhKdmNHUnZkMjVHYjJOMWN5QTlJQ2hsZG1WdWRDa2dQVDRnZTF4dUlDQWdJR2xtSUNocGMwUnliM0JrYjNkdVUyVnNaV04wS0dWMlpXNTBMblJoY21kbGRDa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YjI1RWNtOXdaRzkzYmtadlkzVnpLQ2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdkbGRFUmhkR1ZKYmxacFpYY2dQU0FvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZXlCd2NtVlRaV3hsWTNScGIyNHNJSE5sYkdWamRHVmtMQ0J2Y0dWdVZHOUVZWFJsSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHTnZibk4wSUcxcGJrUmhkR1VnUFNCblpYUkZabVpsWTNScGRtVk5hVzVFWVhSbEtIUm9hWE11Y0hKdmNITXBPMXh1SUNBZ0lHTnZibk4wSUcxaGVFUmhkR1VnUFNCblpYUkZabVpsWTNScGRtVk5ZWGhFWVhSbEtIUm9hWE11Y0hKdmNITXBPMXh1SUNBZ0lHTnZibk4wSUdOMWNuSmxiblFnUFNCdVpYZEVZWFJsS0NrN1hHNGdJQ0FnWTI5dWMzUWdhVzVwZEdsaGJFUmhkR1VnUFNCdmNHVnVWRzlFWVhSbElIeDhJSE5sYkdWamRHVmtJSHg4SUhCeVpWTmxiR1ZqZEdsdmJqdGNiaUFnSUNCcFppQW9hVzVwZEdsaGJFUmhkR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJwYm1sMGFXRnNSR0YwWlR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdhV1lnS0cxcGJrUmhkR1VnSmlZZ2FYTkNaV1p2Y21Vb1kzVnljbVZ1ZEN3Z2JXbHVSR0YwWlNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMXBia1JoZEdVN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHMWhlRVJoZEdVZ0ppWWdhWE5CWm5SbGNpaGpkWEp5Wlc1MExDQnRZWGhFWVhSbEtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0Y0UkdGMFpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR04xY25KbGJuUTdYRzRnSUgwN1hHNWNiaUFnYVc1amNtVmhjMlZOYjI1MGFDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLRnh1SUNBZ0lDQWdLSHNnWkdGMFpTQjlLU0E5UGlBb2UxeHVJQ0FnSUNBZ0lDQmtZWFJsT2lCaFpHUk5iMjUwYUhNb1pHRjBaU3dnTVNrc1hHNGdJQ0FnSUNCOUtTeGNiaUFnSUNBZ0lDZ3BJRDArSUhSb2FYTXVhR0Z1Wkd4bFRXOXVkR2hEYUdGdVoyVW9kR2hwY3k1emRHRjBaUzVrWVhSbEtTeGNiaUFnSUNBcE8xeHVJQ0I5TzF4dVhHNGdJR1JsWTNKbFlYTmxUVzl1ZEdnZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaGNiaUFnSUNBZ0lDaDdJR1JoZEdVZ2ZTa2dQVDRnS0h0Y2JpQWdJQ0FnSUNBZ1pHRjBaVG9nYzNWaVRXOXVkR2h6S0dSaGRHVXNJREVwTEZ4dUlDQWdJQ0FnZlNrc1hHNGdJQ0FnSUNBb0tTQTlQaUIwYUdsekxtaGhibVJzWlUxdmJuUm9RMmhoYm1kbEtIUm9hWE11YzNSaGRHVXVaR0YwWlNrc1hHNGdJQ0FnS1R0Y2JpQWdmVHRjYmx4dUlDQm9ZVzVrYkdWRVlYbERiR2xqYXlBOUlDaGtZWGtzSUdWMlpXNTBMQ0J0YjI1MGFGTmxiR1ZqZEdWa1NXNHBJRDArSUh0Y2JpQWdJQ0IwYUdsekxuQnliM0J6TG05dVUyVnNaV04wS0dSaGVTd2daWFpsYm5Rc0lHMXZiblJvVTJWc1pXTjBaV1JKYmlrN1hHNGdJQ0FnZEdocGN5NXdjbTl3Y3k1elpYUlFjbVZUWld4bFkzUnBiMjRnSmlZZ2RHaHBjeTV3Y205d2N5NXpaWFJRY21WVFpXeGxZM1JwYjI0b1pHRjVLVHRjYmlBZ2ZUdGNibHh1SUNCb1lXNWtiR1ZFWVhsTmIzVnpaVVZ1ZEdWeUlEMGdLR1JoZVNrZ1BUNGdlMXh1SUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCelpXeGxZM1JwYm1kRVlYUmxPaUJrWVhrZ2ZTazdYRzRnSUNBZ2RHaHBjeTV3Y205d2N5NXZia1JoZVUxdmRYTmxSVzUwWlhJZ0ppWWdkR2hwY3k1d2NtOXdjeTV2YmtSaGVVMXZkWE5sUlc1MFpYSW9aR0Y1S1R0Y2JpQWdmVHRjYmx4dUlDQm9ZVzVrYkdWTmIyNTBhRTF2ZFhObFRHVmhkbVVnUFNBb0tTQTlQaUI3WEc0Z0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lITmxiR1ZqZEdsdVowUmhkR1U2SUc1MWJHd2dmU2s3WEc0Z0lDQWdkR2hwY3k1d2NtOXdjeTV2YmsxdmJuUm9UVzkxYzJWTVpXRjJaU0FtSmlCMGFHbHpMbkJ5YjNCekxtOXVUVzl1ZEdoTmIzVnpaVXhsWVhabEtDazdYRzRnSUgwN1hHNWNiaUFnYUdGdVpHeGxXV1ZoY2sxdmRYTmxSVzUwWlhJZ1BTQW9aWFpsYm5Rc0lIbGxZWElwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnYzJWc1pXTjBhVzVuUkdGMFpUb2djMlYwV1dWaGNpaHVaWGRFWVhSbEtDa3NJSGxsWVhJcElIMHBPMXh1SUNBZ0lDRWhkR2hwY3k1d2NtOXdjeTV2YmxsbFlYSk5iM1Z6WlVWdWRHVnlJQ1ltSUhSb2FYTXVjSEp2Y0hNdWIyNVpaV0Z5VFc5MWMyVkZiblJsY2lobGRtVnVkQ3dnZVdWaGNpazdYRzRnSUgwN1hHNWNiaUFnYUdGdVpHeGxXV1ZoY2sxdmRYTmxUR1ZoZG1VZ1BTQW9aWFpsYm5Rc0lIbGxZWElwSUQwK0lIdGNiaUFnSUNBaElYUm9hWE11Y0hKdmNITXViMjVaWldGeVRXOTFjMlZNWldGMlpTQW1KaUIwYUdsekxuQnliM0J6TG05dVdXVmhjazF2ZFhObFRHVmhkbVVvWlhabGJuUXNJSGxsWVhJcE8xeHVJQ0I5TzF4dVhHNGdJR2hoYm1Sc1pWbGxZWEpEYUdGdVoyVWdQU0FvWkdGMFpTa2dQVDRnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxtOXVXV1ZoY2tOb1lXNW5aU2tnZTF4dUlDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJsbGxZWEpEYUdGdVoyVW9aR0YwWlNrN1hHNGdJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnYVhOU1pXNWtaWEpCY21saFRHbDJaVTFsYzNOaFoyVTZJSFJ5ZFdVZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbUZrYW5WemRFUmhkR1ZQYmtOb1lXNW5aU2tnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXViMjVUWld4bFkzUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJsTmxiR1ZqZENoa1lYUmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxuTmxkRTl3Wlc0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTV6WlhSUGNHVnVLSFJ5ZFdVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyVjBVSEpsVTJWc1pXTjBhVzl1SUNZbUlIUm9hWE11Y0hKdmNITXVjMlYwVUhKbFUyVnNaV04wYVc5dUtHUmhkR1VwTzF4dUlDQjlPMXh1WEc0Z0lHaGhibVJzWlUxdmJuUm9RMmhoYm1kbElEMGdLR1JoZEdVcElEMCtJSHRjYmlBZ0lDQjBhR2x6TG1oaGJtUnNaVU4xYzNSdmJVMXZiblJvUTJoaGJtZGxLR1JoZEdVcE8xeHVJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbUZrYW5WemRFUmhkR1ZQYmtOb1lXNW5aU2tnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXViMjVUWld4bFkzUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJsTmxiR1ZqZENoa1lYUmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxuTmxkRTl3Wlc0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTV6WlhSUGNHVnVLSFJ5ZFdVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyVjBVSEpsVTJWc1pXTjBhVzl1SUNZbUlIUm9hWE11Y0hKdmNITXVjMlYwVUhKbFUyVnNaV04wYVc5dUtHUmhkR1VwTzF4dUlDQjlPMXh1WEc0Z0lHaGhibVJzWlVOMWMzUnZiVTF2Ym5Sb1EyaGhibWRsSUQwZ0tHUmhkR1VwSUQwK0lIdGNiaUFnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTV2YmsxdmJuUm9RMmhoYm1kbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbTl1VFc5dWRHaERhR0Z1WjJVb1pHRjBaU2s3WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIc2dhWE5TWlc1a1pYSkJjbWxoVEdsMlpVMWxjM05oWjJVNklIUnlkV1VnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lHaGhibVJzWlUxdmJuUm9XV1ZoY2tOb1lXNW5aU0E5SUNoa1lYUmxLU0E5UGlCN1hHNGdJQ0FnZEdocGN5NW9ZVzVrYkdWWlpXRnlRMmhoYm1kbEtHUmhkR1VwTzF4dUlDQWdJSFJvYVhNdWFHRnVaR3hsVFc5dWRHaERhR0Z1WjJVb1pHRjBaU2s3WEc0Z0lIMDdYRzVjYmlBZ1kyaGhibWRsV1dWaGNpQTlJQ2g1WldGeUtTQTlQaUI3WEc0Z0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoY2JpQWdJQ0FnSUNoN0lHUmhkR1VnZlNrZ1BUNGdLSHRjYmlBZ0lDQWdJQ0FnWkdGMFpUb2djMlYwV1dWaGNpaGtZWFJsTENCNVpXRnlLU3hjYmlBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnS0NrZ1BUNGdkR2hwY3k1b1lXNWtiR1ZaWldGeVEyaGhibWRsS0hSb2FYTXVjM1JoZEdVdVpHRjBaU2tzWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCamFHRnVaMlZOYjI1MGFDQTlJQ2h0YjI1MGFDa2dQVDRnZTF4dUlDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb1hHNGdJQ0FnSUNBb2V5QmtZWFJsSUgwcElEMCtJQ2g3WEc0Z0lDQWdJQ0FnSUdSaGRHVTZJSE5sZEUxdmJuUm9LR1JoZEdVc0lHMXZiblJvS1N4Y2JpQWdJQ0FnSUgwcExGeHVJQ0FnSUNBZ0tDa2dQVDRnZEdocGN5NW9ZVzVrYkdWTmIyNTBhRU5vWVc1blpTaDBhR2x6TG5OMFlYUmxMbVJoZEdVcExGeHVJQ0FnSUNrN1hHNGdJSDA3WEc1Y2JpQWdZMmhoYm1kbFRXOXVkR2haWldGeUlEMGdLRzF2Ym5Sb1dXVmhjaWtnUFQ0Z2UxeHVJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9YRzRnSUNBZ0lDQW9leUJrWVhSbElIMHBJRDArSUNoN1hHNGdJQ0FnSUNBZ0lHUmhkR1U2SUhObGRGbGxZWElvYzJWMFRXOXVkR2dvWkdGMFpTd2daMlYwVFc5dWRHZ29iVzl1ZEdoWlpXRnlLU2tzSUdkbGRGbGxZWElvYlc5dWRHaFpaV0Z5S1Nrc1hHNGdJQ0FnSUNCOUtTeGNiaUFnSUNBZ0lDZ3BJRDArSUhSb2FYTXVhR0Z1Wkd4bFRXOXVkR2haWldGeVEyaGhibWRsS0hSb2FYTXVjM1JoZEdVdVpHRjBaU2tzWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCb1pXRmtaWElnUFNBb1pHRjBaU0E5SUhSb2FYTXVjM1JoZEdVdVpHRjBaU2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSE4wWVhKMFQyWlhaV1ZySUQwZ1oyVjBVM1JoY25SUFpsZGxaV3NvWEc0Z0lDQWdJQ0JrWVhSbExGeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXNiMk5oYkdVc1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtTmhiR1Z1WkdGeVUzUmhjblJFWVhrc1hHNGdJQ0FnS1R0Y2JseHVJQ0FnSUdOdmJuTjBJR1JoZVU1aGJXVnpJRDBnVzEwN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVjMmh2ZDFkbFpXdE9kVzFpWlhKektTQjdYRzRnSUNBZ0lDQmtZWGxPWVcxbGN5NXdkWE5vS0Z4dUlDQWdJQ0FnSUNBOFpHbDJJR3RsZVQxY0lsZGNJaUJqYkdGemMwNWhiV1U5WENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5a1lYa3RibUZ0WlZ3aVBseHVJQ0FnSUNBZ0lDQWdJSHQwYUdsekxuQnliM0J6TG5kbFpXdE1ZV0psYkNCOGZDQmNJaU5jSW4xY2JpQWdJQ0FnSUNBZ1BDOWthWFkrTEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHUmhlVTVoYldWekxtTnZibU5oZENoY2JpQWdJQ0FnSUZzd0xDQXhMQ0F5TENBekxDQTBMQ0ExTENBMlhTNXRZWEFvS0c5bVpuTmxkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa1lYa2dQU0JoWkdSRVlYbHpLSE4wWVhKMFQyWlhaV1ZyTENCdlptWnpaWFFwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IzWldWclJHRjVUbUZ0WlNBOUlIUm9hWE11Wm05eWJXRjBWMlZsYTJSaGVTaGtZWGtzSUhSb2FYTXVjSEp2Y0hNdWJHOWpZV3hsS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCM1pXVnJSR0Y1UTJ4aGMzTk9ZVzFsSUQwZ2RHaHBjeTV3Y205d2N5NTNaV1ZyUkdGNVEyeGhjM05PWVcxbFhHNGdJQ0FnSUNBZ0lDQWdQeUIwYUdsekxuQnliM0J6TG5kbFpXdEVZWGxEYkdGemMwNWhiV1VvWkdGNUtWeHVJQ0FnSUNBZ0lDQWdJRG9nZFc1a1pXWnBibVZrTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1UFh0dlptWnpaWFI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zYzNnb1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOWtZWGt0Ym1GdFpWd2lMQ0IzWldWclJHRjVRMnhoYzNOT1lXMWxLWDFjYmlBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3ZDJWbGEwUmhlVTVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlLU3hjYmlBZ0lDQXBPMXh1SUNCOU8xeHVYRzRnSUdadmNtMWhkRmRsWld0a1lYa2dQU0FvWkdGNUxDQnNiMk5oYkdVcElEMCtJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXdjbTl3Y3k1bWIzSnRZWFJYWldWclJHRjVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaMlYwUm05eWJXRjBkR1ZrVjJWbGEyUmhlVWx1VEc5allXeGxLR1JoZVN3Z2RHaHBjeTV3Y205d2N5NW1iM0p0WVhSWFpXVnJSR0Y1TENCc2IyTmhiR1VwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV3Y205d2N5NTFjMlZYWldWclpHRjVjMU5vYjNKMFhHNGdJQ0FnSUNBL0lHZGxkRmRsWld0a1lYbFRhRzl5ZEVsdVRHOWpZV3hsS0dSaGVTd2diRzlqWVd4bEtWeHVJQ0FnSUNBZ09pQm5aWFJYWldWclpHRjVUV2x1U1c1TWIyTmhiR1VvWkdGNUxDQnNiMk5oYkdVcE8xeHVJQ0I5TzF4dVhHNGdJR1JsWTNKbFlYTmxXV1ZoY2lBOUlDZ3BJRDArSUh0Y2JpQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtGeHVJQ0FnSUNBZ0tIc2daR0YwWlNCOUtTQTlQaUFvZTF4dUlDQWdJQ0FnSUNCa1lYUmxPaUJ6ZFdKWlpXRnljeWhjYmlBZ0lDQWdJQ0FnSUNCa1lYUmxMRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyaHZkMWxsWVhKUWFXTnJaWElnUHlCMGFHbHpMbkJ5YjNCekxubGxZWEpKZEdWdFRuVnRZbVZ5SURvZ01TeGNiaUFnSUNBZ0lDQWdLU3hjYmlBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnS0NrZ1BUNGdkR2hwY3k1b1lXNWtiR1ZaWldGeVEyaGhibWRsS0hSb2FYTXVjM1JoZEdVdVpHRjBaU2tzWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCamJHVmhjbE5sYkdWamRHbHVaMFJoZEdVZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdJSE5sYkdWamRHbHVaMFJoZEdVNklHNTFiR3dnZlNrN1hHNGdJSDA3WEc1Y2JpQWdjbVZ1WkdWeVVISmxkbWx2ZFhOQ2RYUjBiMjRnUFNBb0tTQTlQaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdWNtVnVaR1Z5UTNWemRHOXRTR1ZoWkdWeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElHRnNiRkJ5WlhaRVlYbHpSR2x6WVdKc1pXUTdYRzRnSUNBZ2MzZHBkR05vSUNoMGNuVmxLU0I3WEc0Z0lDQWdJQ0JqWVhObElIUm9hWE11Y0hKdmNITXVjMmh2ZDAxdmJuUm9XV1ZoY2xCcFkydGxjanBjYmlBZ0lDQWdJQ0FnWVd4c1VISmxka1JoZVhORWFYTmhZbXhsWkNBOUlIbGxZWEpFYVhOaFlteGxaRUpsWm05eVpTaDBhR2x6TG5OMFlYUmxMbVJoZEdVc0lIUm9hWE11Y0hKdmNITXBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnZEdocGN5NXdjbTl3Y3k1emFHOTNXV1ZoY2xCcFkydGxjanBjYmlBZ0lDQWdJQ0FnWVd4c1VISmxka1JoZVhORWFYTmhZbXhsWkNBOUlIbGxZWEp6UkdsellXSnNaV1JDWldadmNtVW9kR2hwY3k1emRHRjBaUzVrWVhSbExDQjBhR2x6TG5CeWIzQnpLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUhSb2FYTXVjSEp2Y0hNdWMyaHZkMUYxWVhKMFpYSlpaV0Z5VUdsamEyVnlPbHh1SUNBZ0lDQWdJQ0JoYkd4UWNtVjJSR0Y1YzBScGMyRmliR1ZrSUQwZ2NYVmhjblJsY2tScGMyRmliR1ZrUW1WbWIzSmxLRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEdVdVpHRjBaU3hjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lHRnNiRkJ5WlhaRVlYbHpSR2x6WVdKc1pXUWdQU0J0YjI1MGFFUnBjMkZpYkdWa1FtVm1iM0psS0hSb2FYTXVjM1JoZEdVdVpHRjBaU3dnZEdocGN5NXdjbTl3Y3lrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUNnaGRHaHBjeTV3Y205d2N5NW1iM0pqWlZOb2IzZE5iMjUwYUU1aGRtbG5ZWFJwYjI0Z0ppWmNiaUFnSUNBZ0lDQWdJWFJvYVhNdWNISnZjSE11YzJodmQwUnBjMkZpYkdWa1RXOXVkR2hPWVhacFoyRjBhVzl1SUNZbVhHNGdJQ0FnSUNBZ0lHRnNiRkJ5WlhaRVlYbHpSR2x6WVdKc1pXUXBJSHg4WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG5Ob2IzZFVhVzFsVTJWc1pXTjBUMjVzZVZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdsamIyNURiR0Z6YzJWeklEMGdXMXh1SUNBZ0lDQWdYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTl1WVhacFoyRjBhVzl1TFdsamIyNWNJaXhjYmlBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYm1GMmFXZGhkR2x2YmkxcFkyOXVMUzF3Y21WMmFXOTFjMXdpTEZ4dUlDQWdJRjA3WEc1Y2JpQWdJQ0JqYjI1emRDQmpiR0Z6YzJWeklEMGdXMXh1SUNBZ0lDQWdYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTl1WVhacFoyRjBhVzl1WENJc1hHNGdJQ0FnSUNCY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgyNWhkbWxuWVhScGIyNHRMWEJ5WlhacGIzVnpYQ0lzWEc0Z0lDQWdYVHRjYmx4dUlDQWdJR3hsZENCamJHbGphMGhoYm1Sc1pYSWdQU0IwYUdsekxtUmxZM0psWVhObFRXOXVkR2c3WEc1Y2JpQWdJQ0JwWmlBb1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxuTm9iM2ROYjI1MGFGbGxZWEpRYVdOclpYSWdmSHhjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YzJodmQxRjFZWEowWlhKWlpXRnlVR2xqYTJWeUlIeDhYRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbk5vYjNkWlpXRnlVR2xqYTJWeVhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNCamJHbGphMGhoYm1Sc1pYSWdQU0IwYUdsekxtUmxZM0psWVhObFdXVmhjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWVd4c1VISmxka1JoZVhORWFYTmhZbXhsWkNBbUppQjBhR2x6TG5CeWIzQnpMbk5vYjNkRWFYTmhZbXhsWkUxdmJuUm9UbUYyYVdkaGRHbHZiaWtnZTF4dUlDQWdJQ0FnWTJ4aGMzTmxjeTV3ZFhOb0tGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZibUYyYVdkaGRHbHZiaTB0Y0hKbGRtbHZkWE10TFdScGMyRmliR1ZrWENJcE8xeHVJQ0FnSUNBZ1kyeHBZMnRJWVc1a2JHVnlJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JwYzBadmNsbGxZWElnUFZ4dUlDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1emFHOTNUVzl1ZEdoWlpXRnlVR2xqYTJWeUlIeDhYRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbk5vYjNkUmRXRnlkR1Z5V1dWaGNsQnBZMnRsY2lCOGZGeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXphRzkzV1dWaGNsQnBZMnRsY2p0Y2JseHVJQ0FnSUdOdmJuTjBJSHNnY0hKbGRtbHZkWE5OYjI1MGFFSjFkSFJ2Ymt4aFltVnNMQ0J3Y21WMmFXOTFjMWxsWVhKQ2RYUjBiMjVNWVdKbGJDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JseHVJQ0FnSUdOdmJuTjBJSHRjYmlBZ0lDQWdJSEJ5WlhacGIzVnpUVzl1ZEdoQmNtbGhUR0ZpWld3Z1BTQjBlWEJsYjJZZ2NISmxkbWx2ZFhOTmIyNTBhRUoxZEhSdmJreGhZbVZzSUQwOVBTQmNJbk4wY21sdVoxd2lYRzRnSUNBZ0lDQWdJRDhnY0hKbGRtbHZkWE5OYjI1MGFFSjFkSFJ2Ymt4aFltVnNYRzRnSUNBZ0lDQWdJRG9nWENKUWNtVjJhVzkxY3lCTmIyNTBhRndpTEZ4dUlDQWdJQ0FnY0hKbGRtbHZkWE5aWldGeVFYSnBZVXhoWW1Wc0lEMGdkSGx3Wlc5bUlIQnlaWFpwYjNWeldXVmhja0oxZEhSdmJreGhZbVZzSUQwOVBTQmNJbk4wY21sdVoxd2lYRzRnSUNBZ0lDQWdJRDhnY0hKbGRtbHZkWE5aWldGeVFuVjBkRzl1VEdGaVpXeGNiaUFnSUNBZ0lDQWdPaUJjSWxCeVpYWnBiM1Z6SUZsbFlYSmNJaXhjYmlBZ0lDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4WW5WMGRHOXVYRzRnSUNBZ0lDQWdJSFI1Y0dVOVhDSmlkWFIwYjI1Y0lseHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOelpYTXVhbTlwYmloY0lpQmNJaWw5WEc0Z0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTJOc2FXTnJTR0Z1Wkd4bGNuMWNiaUFnSUNBZ0lDQWdiMjVMWlhsRWIzZHVQWHQwYUdsekxuQnliM0J6TG1oaGJtUnNaVTl1UzJWNVJHOTNibjFjYmlBZ0lDQWdJQ0FnWVhKcFlTMXNZV0psYkQxN2FYTkdiM0paWldGeUlEOGdjSEpsZG1sdmRYTlpaV0Z5UVhKcFlVeGhZbVZzSURvZ2NISmxkbWx2ZFhOTmIyNTBhRUZ5YVdGTVlXSmxiSDFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnUEhOd1lXNGdZMnhoYzNOT1lXMWxQWHRwWTI5dVEyeGhjM05sY3k1cWIybHVLRndpSUZ3aUtYMCtYRzRnSUNBZ0lDQWdJQ0FnZTJselJtOXlXV1ZoY2x4dUlDQWdJQ0FnSUNBZ0lDQWdQeUIwYUdsekxuQnliM0J6TG5CeVpYWnBiM1Z6V1dWaGNrSjFkSFJ2Ymt4aFltVnNYRzRnSUNBZ0lDQWdJQ0FnSUNBNklIUm9hWE11Y0hKdmNITXVjSEpsZG1sdmRYTk5iMjUwYUVKMWRIUnZia3hoWW1Wc2ZWeHVJQ0FnSUNBZ0lDQThMM053WVc0K1hHNGdJQ0FnSUNBOEwySjFkSFJ2Ymo1Y2JpQWdJQ0FwTzF4dUlDQjlPMXh1WEc0Z0lHbHVZM0psWVhObFdXVmhjaUE5SUNncElEMCtJSHRjYmlBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0Z4dUlDQWdJQ0FnS0hzZ1pHRjBaU0I5S1NBOVBpQW9lMXh1SUNBZ0lDQWdJQ0JrWVhSbE9pQmhaR1JaWldGeWN5aGNiaUFnSUNBZ0lDQWdJQ0JrWVhSbExGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11YzJodmQxbGxZWEpRYVdOclpYSWdQeUIwYUdsekxuQnliM0J6TG5sbFlYSkpkR1Z0VG5WdFltVnlJRG9nTVN4Y2JpQWdJQ0FnSUNBZ0tTeGNiaUFnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdLQ2tnUFQ0Z2RHaHBjeTVvWVc1a2JHVlpaV0Z5UTJoaGJtZGxLSFJvYVhNdWMzUmhkR1V1WkdGMFpTa3NYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JseHVJQ0J5Wlc1a1pYSk9aWGgwUW5WMGRHOXVJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG5KbGJtUmxja04xYzNSdmJVaGxZV1JsY2lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCaGJHeE9aWGgwUkdGNWMwUnBjMkZpYkdWa08xeHVJQ0FnSUhOM2FYUmphQ0FvZEhKMVpTa2dlMXh1SUNBZ0lDQWdZMkZ6WlNCMGFHbHpMbkJ5YjNCekxuTm9iM2ROYjI1MGFGbGxZWEpRYVdOclpYSTZYRzRnSUNBZ0lDQWdJR0ZzYkU1bGVIUkVZWGx6UkdsellXSnNaV1FnUFNCNVpXRnlSR2x6WVdKc1pXUkJablJsY2loMGFHbHpMbk4wWVhSbExtUmhkR1VzSUhSb2FYTXVjSEp2Y0hNcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdOaGMyVWdkR2hwY3k1d2NtOXdjeTV6YUc5M1dXVmhjbEJwWTJ0bGNqcGNiaUFnSUNBZ0lDQWdZV3hzVG1WNGRFUmhlWE5FYVhOaFlteGxaQ0E5SUhsbFlYSnpSR2x6WVdKc1pXUkJablJsY2loMGFHbHpMbk4wWVhSbExtUmhkR1VzSUhSb2FYTXVjSEp2Y0hNcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdOaGMyVWdkR2hwY3k1d2NtOXdjeTV6YUc5M1VYVmhjblJsY2xsbFlYSlFhV05yWlhJNlhHNGdJQ0FnSUNBZ0lHRnNiRTVsZUhSRVlYbHpSR2x6WVdKc1pXUWdQU0J4ZFdGeWRHVnlSR2x6WVdKc1pXUkJablJsY2loMGFHbHpMbk4wWVhSbExtUmhkR1VzSUhSb2FYTXVjSEp2Y0hNcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUdGc2JFNWxlSFJFWVhselJHbHpZV0pzWldRZ1BTQnRiMjUwYUVScGMyRmliR1ZrUVdaMFpYSW9kR2hwY3k1emRHRjBaUzVrWVhSbExDQjBhR2x6TG5CeWIzQnpLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdLQ0YwYUdsekxuQnliM0J6TG1admNtTmxVMmh2ZDAxdmJuUm9UbUYyYVdkaGRHbHZiaUFtSmx4dUlDQWdJQ0FnSUNBaGRHaHBjeTV3Y205d2N5NXphRzkzUkdsellXSnNaV1JOYjI1MGFFNWhkbWxuWVhScGIyNGdKaVpjYmlBZ0lDQWdJQ0FnWVd4c1RtVjRkRVJoZVhORWFYTmhZbXhsWkNrZ2ZIeGNiaUFnSUNBZ0lIUm9hWE11Y0hKdmNITXVjMmh2ZDFScGJXVlRaV3hsWTNSUGJteDVYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdZMnhoYzNObGN5QTlJRnRjYmlBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmYm1GMmFXZGhkR2x2Ymx3aUxGeHVJQ0FnSUNBZ1hDSnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOXVZWFpwWjJGMGFXOXVMUzF1WlhoMFhDSXNYRzRnSUNBZ1hUdGNiaUFnSUNCamIyNXpkQ0JwWTI5dVEyeGhjM05sY3lBOUlGdGNiaUFnSUNBZ0lGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZibUYyYVdkaGRHbHZiaTFwWTI5dVhDSXNYRzRnSUNBZ0lDQmNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMjVoZG1sbllYUnBiMjR0YVdOdmJpMHRibVY0ZEZ3aUxGeHVJQ0FnSUYwN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVjMmh2ZDFScGJXVlRaV3hsWTNRcElIdGNiaUFnSUNBZ0lHTnNZWE56WlhNdWNIVnphQ2hjSW5KbFlXTjBMV1JoZEdWd2FXTnJaWEpmWDI1aGRtbG5ZWFJwYjI0dExXNWxlSFF0TFhkcGRHZ3RkR2x0WlZ3aUtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVkRzlrWVhsQ2RYUjBiMjRwSUh0Y2JpQWdJQ0FnSUdOc1lYTnpaWE11Y0hWemFDaGNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMjVoZG1sbllYUnBiMjR0TFc1bGVIUXRMWGRwZEdndGRHOWtZWGt0WW5WMGRHOXVYQ0lwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCamJHbGphMGhoYm1Sc1pYSWdQU0IwYUdsekxtbHVZM0psWVhObFRXOXVkR2c3WEc1Y2JpQWdJQ0JwWmlBb1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxuTm9iM2ROYjI1MGFGbGxZWEpRYVdOclpYSWdmSHhjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YzJodmQxRjFZWEowWlhKWlpXRnlVR2xqYTJWeUlIeDhYRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbk5vYjNkWlpXRnlVR2xqYTJWeVhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNCamJHbGphMGhoYm1Sc1pYSWdQU0IwYUdsekxtbHVZM0psWVhObFdXVmhjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWVd4c1RtVjRkRVJoZVhORWFYTmhZbXhsWkNBbUppQjBhR2x6TG5CeWIzQnpMbk5vYjNkRWFYTmhZbXhsWkUxdmJuUm9UbUYyYVdkaGRHbHZiaWtnZTF4dUlDQWdJQ0FnWTJ4aGMzTmxjeTV3ZFhOb0tGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZibUYyYVdkaGRHbHZiaTB0Ym1WNGRDMHRaR2x6WVdKc1pXUmNJaWs3WEc0Z0lDQWdJQ0JqYkdsamEwaGhibVJzWlhJZ1BTQnVkV3hzTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHbHpSbTl5V1dWaGNpQTlYRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbk5vYjNkTmIyNTBhRmxsWVhKUWFXTnJaWElnZkh4Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyaHZkMUYxWVhKMFpYSlpaV0Z5VUdsamEyVnlJSHg4WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG5Ob2IzZFpaV0Z5VUdsamEyVnlPMXh1WEc0Z0lDQWdZMjl1YzNRZ2V5QnVaWGgwVFc5dWRHaENkWFIwYjI1TVlXSmxiQ3dnYm1WNGRGbGxZWEpDZFhSMGIyNU1ZV0psYkNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCdVpYaDBUVzl1ZEdoQmNtbGhUR0ZpWld3Z1BTQjBlWEJsYjJZZ2JtVjRkRTF2Ym5Sb1FuVjBkRzl1VEdGaVpXd2dQVDA5SUZ3aWMzUnlhVzVuWENKY2JpQWdJQ0FnSUNBZ1B5QnVaWGgwVFc5dWRHaENkWFIwYjI1TVlXSmxiRnh1SUNBZ0lDQWdJQ0E2SUZ3aVRtVjRkQ0JOYjI1MGFGd2lMRnh1SUNBZ0lDQWdibVY0ZEZsbFlYSkJjbWxoVEdGaVpXd2dQU0IwZVhCbGIyWWdibVY0ZEZsbFlYSkNkWFIwYjI1TVlXSmxiQ0E5UFQwZ1hDSnpkSEpwYm1kY0lseHVJQ0FnSUNBZ0lDQS9JRzVsZUhSWlpXRnlRblYwZEc5dVRHRmlaV3hjYmlBZ0lDQWdJQ0FnT2lCY0lrNWxlSFFnV1dWaGNsd2lMRnh1SUNBZ0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhpZFhSMGIyNWNiaUFnSUNBZ0lDQWdkSGx3WlQxY0ltSjFkSFJ2Ymx3aVhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdZMnhoYzNObGN5NXFiMmx1S0Z3aUlGd2lLWDFjYmlBZ0lDQWdJQ0FnYjI1RGJHbGphejE3WTJ4cFkydElZVzVrYkdWeWZWeHVJQ0FnSUNBZ0lDQnZia3RsZVVSdmQyNDllM1JvYVhNdWNISnZjSE11YUdGdVpHeGxUMjVMWlhsRWIzZHVmVnh1SUNBZ0lDQWdJQ0JoY21saExXeGhZbVZzUFh0cGMwWnZjbGxsWVhJZ1B5QnVaWGgwV1dWaGNrRnlhV0ZNWVdKbGJDQTZJRzVsZUhSTmIyNTBhRUZ5YVdGTVlXSmxiSDFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnUEhOd1lXNGdZMnhoYzNOT1lXMWxQWHRwWTI5dVEyeGhjM05sY3k1cWIybHVLRndpSUZ3aUtYMCtYRzRnSUNBZ0lDQWdJQ0FnZTJselJtOXlXV1ZoY2x4dUlDQWdJQ0FnSUNBZ0lDQWdQeUIwYUdsekxuQnliM0J6TG01bGVIUlpaV0Z5UW5WMGRHOXVUR0ZpWld4Y2JpQWdJQ0FnSUNBZ0lDQWdJRG9nZEdocGN5NXdjbTl3Y3k1dVpYaDBUVzl1ZEdoQ2RYUjBiMjVNWVdKbGJIMWNiaUFnSUNBZ0lDQWdQQzl6Y0dGdVBseHVJQ0FnSUNBZ1BDOWlkWFIwYjI0K1hHNGdJQ0FnS1R0Y2JpQWdmVHRjYmx4dUlDQnlaVzVrWlhKRGRYSnlaVzUwVFc5dWRHZ2dQU0FvWkdGMFpTQTlJSFJvYVhNdWMzUmhkR1V1WkdGMFpTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHTnNZWE56WlhNZ1BTQmJYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTlqZFhKeVpXNTBMVzF2Ym5Sb1hDSmRPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdWMyaHZkMWxsWVhKRWNtOXdaRzkzYmlrZ2UxeHVJQ0FnSUNBZ1kyeGhjM05sY3k1d2RYTm9LRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmWTNWeWNtVnVkQzF0YjI1MGFDMHRhR0Z6V1dWaGNrUnliM0JrYjNkdVhDSXBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTV6YUc5M1RXOXVkR2hFY205d1pHOTNiaWtnZTF4dUlDQWdJQ0FnWTJ4aGMzTmxjeTV3ZFhOb0tGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZZM1Z5Y21WdWRDMXRiMjUwYUMwdGFHRnpUVzl1ZEdoRWNtOXdaRzkzYmx3aUtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVjMmh2ZDAxdmJuUm9XV1ZoY2tSeWIzQmtiM2R1S1NCN1hHNGdJQ0FnSUNCamJHRnpjMlZ6TG5CMWMyZ29YQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTlqZFhKeVpXNTBMVzF2Ym5Sb0xTMW9ZWE5OYjI1MGFGbGxZWEpFY205d1pHOTNibHdpS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMlZ6TG1wdmFXNG9YQ0lnWENJcGZUNWNiaUFnSUNBZ0lDQWdlMlp2Y20xaGRFUmhkR1VvWkdGMFpTd2dkR2hwY3k1d2NtOXdjeTVrWVhSbFJtOXliV0YwTENCMGFHbHpMbkJ5YjNCekxteHZZMkZzWlNsOVhHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQXBPMXh1SUNCOU8xeHVYRzRnSUhKbGJtUmxjbGxsWVhKRWNtOXdaRzkzYmlBOUlDaHZkbVZ5Y21sa1pVaHBaR1VnUFNCbVlXeHpaU2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1d2NtOXdjeTV6YUc5M1dXVmhja1J5YjNCa2IzZHVJSHg4SUc5MlpYSnlhV1JsU0dsa1pTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQRmxsWVhKRWNtOXdaRzkzYmx4dUlDQWdJQ0FnSUNCaFpHcDFjM1JFWVhSbFQyNURhR0Z1WjJVOWUzUm9hWE11Y0hKdmNITXVZV1JxZFhOMFJHRjBaVTl1UTJoaGJtZGxmVnh1SUNBZ0lDQWdJQ0JrWVhSbFBYdDBhR2x6TG5OMFlYUmxMbVJoZEdWOVhHNGdJQ0FnSUNBZ0lHOXVVMlZzWldOMFBYdDBhR2x6TG5CeWIzQnpMbTl1VTJWc1pXTjBmVnh1SUNBZ0lDQWdJQ0J6WlhSUGNHVnVQWHQwYUdsekxuQnliM0J6TG5ObGRFOXdaVzU5WEc0Z0lDQWdJQ0FnSUdSeWIzQmtiM2R1VFc5a1pUMTdkR2hwY3k1d2NtOXdjeTVrY205d1pHOTNiazF2WkdWOVhHNGdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFBYdDBhR2x6TG1Ob1lXNW5aVmxsWVhKOVhHNGdJQ0FnSUNBZ0lHMXBia1JoZEdVOWUzUm9hWE11Y0hKdmNITXViV2x1UkdGMFpYMWNiaUFnSUNBZ0lDQWdiV0Y0UkdGMFpUMTdkR2hwY3k1d2NtOXdjeTV0WVhoRVlYUmxmVnh1SUNBZ0lDQWdJQ0I1WldGeVBYdG5aWFJaWldGeUtIUm9hWE11YzNSaGRHVXVaR0YwWlNsOVhHNGdJQ0FnSUNBZ0lITmpjbTlzYkdGaWJHVlpaV0Z5UkhKdmNHUnZkMjQ5ZTNSb2FYTXVjSEp2Y0hNdWMyTnliMnhzWVdKc1pWbGxZWEpFY205d1pHOTNibjFjYmlBZ0lDQWdJQ0FnZVdWaGNrUnliM0JrYjNkdVNYUmxiVTUxYldKbGNqMTdkR2hwY3k1d2NtOXdjeTU1WldGeVJISnZjR1J2ZDI1SmRHVnRUblZ0WW1WeWZWeHVJQ0FnSUNBZ0x6NWNiaUFnSUNBcE8xeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNrMXZiblJvUkhKdmNHUnZkMjRnUFNBb2IzWmxjbkpwWkdWSWFXUmxJRDBnWm1Gc2MyVXBJRDArSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11Y0hKdmNITXVjMmh2ZDAxdmJuUm9SSEp2Y0dSdmQyNGdmSHdnYjNabGNuSnBaR1ZJYVdSbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThUVzl1ZEdoRWNtOXdaRzkzYmx4dUlDQWdJQ0FnSUNCa2NtOXdaRzkzYmsxdlpHVTllM1JvYVhNdWNISnZjSE11WkhKdmNHUnZkMjVOYjJSbGZWeHVJQ0FnSUNBZ0lDQnNiMk5oYkdVOWUzUm9hWE11Y0hKdmNITXViRzlqWVd4bGZWeHVJQ0FnSUNBZ0lDQnZia05vWVc1blpUMTdkR2hwY3k1amFHRnVaMlZOYjI1MGFIMWNiaUFnSUNBZ0lDQWdiVzl1ZEdnOWUyZGxkRTF2Ym5Sb0tIUm9hWE11YzNSaGRHVXVaR0YwWlNsOVhHNGdJQ0FnSUNBZ0lIVnpaVk5vYjNKMFRXOXVkR2hKYmtSeWIzQmtiM2R1UFh0MGFHbHpMbkJ5YjNCekxuVnpaVk5vYjNKMFRXOXVkR2hKYmtSeWIzQmtiM2R1ZlZ4dUlDQWdJQ0FnTHo1Y2JpQWdJQ0FwTzF4dUlDQjlPMXh1WEc0Z0lISmxibVJsY2sxdmJuUm9XV1ZoY2tSeWIzQmtiM2R1SUQwZ0tHOTJaWEp5YVdSbFNHbGtaU0E5SUdaaGJITmxLU0E5UGlCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG5CeWIzQnpMbk5vYjNkTmIyNTBhRmxsWVhKRWNtOXdaRzkzYmlCOGZDQnZkbVZ5Y21sa1pVaHBaR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4TmIyNTBhRmxsWVhKRWNtOXdaRzkzYmx4dUlDQWdJQ0FnSUNCa2NtOXdaRzkzYmsxdlpHVTllM1JvYVhNdWNISnZjSE11WkhKdmNHUnZkMjVOYjJSbGZWeHVJQ0FnSUNBZ0lDQnNiMk5oYkdVOWUzUm9hWE11Y0hKdmNITXViRzlqWVd4bGZWeHVJQ0FnSUNBZ0lDQmtZWFJsUm05eWJXRjBQWHQwYUdsekxuQnliM0J6TG1SaGRHVkdiM0p0WVhSOVhHNGdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFBYdDBhR2x6TG1Ob1lXNW5aVTF2Ym5Sb1dXVmhjbjFjYmlBZ0lDQWdJQ0FnYldsdVJHRjBaVDE3ZEdocGN5NXdjbTl3Y3k1dGFXNUVZWFJsZlZ4dUlDQWdJQ0FnSUNCdFlYaEVZWFJsUFh0MGFHbHpMbkJ5YjNCekxtMWhlRVJoZEdWOVhHNGdJQ0FnSUNBZ0lHUmhkR1U5ZTNSb2FYTXVjM1JoZEdVdVpHRjBaWDFjYmlBZ0lDQWdJQ0FnYzJOeWIyeHNZV0pzWlUxdmJuUm9XV1ZoY2tSeWIzQmtiM2R1UFh0MGFHbHpMbkJ5YjNCekxuTmpjbTlzYkdGaWJHVk5iMjUwYUZsbFlYSkVjbTl3Wkc5M2JuMWNiaUFnSUNBZ0lDOCtYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVlViMlJoZVVKMWRIUnZia05zYVdOcklEMGdLR1VwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbkJ5YjNCekxtOXVVMlZzWldOMEtHZGxkRk4wWVhKMFQyWlViMlJoZVNncExDQmxLVHRjYmlBZ0lDQjBhR2x6TG5CeWIzQnpMbk5sZEZCeVpWTmxiR1ZqZEdsdmJpQW1KaUIwYUdsekxuQnliM0J6TG5ObGRGQnlaVk5sYkdWamRHbHZiaWhuWlhSVGRHRnlkRTltVkc5a1lYa29LU2s3WEc0Z0lIMDdYRzVjYmlBZ2NtVnVaR1Z5Vkc5a1lYbENkWFIwYjI0Z1BTQW9LU0E5UGlCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG5CeWIzQnpMblJ2WkdGNVFuVjBkRzl1SUh4OElIUm9hWE11Y0hKdmNITXVjMmh2ZDFScGJXVlRaV3hsWTNSUGJteDVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4WkdsMlhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYM1J2WkdGNUxXSjFkSFJ2Ymx3aVhHNGdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWV5aGxLU0E5UGlCMGFHbHpMbWhoYm1Sc1pWUnZaR0Y1UW5WMGRHOXVRMnhwWTJzb1pTbDlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJSHQwYUdsekxuQnliM0J6TG5SdlpHRjVRblYwZEc5dWZWeHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpFWldaaGRXeDBTR1ZoWkdWeUlEMGdLSHNnYlc5dWRHaEVZWFJsTENCcElIMHBJRDArSUNoY2JpQWdJQ0E4WkdsMlhHNGdJQ0FnSUNCamJHRnpjMDVoYldVOWUyQnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOW9aV0ZrWlhJZ0pIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTV6YUc5M1ZHbHRaVk5sYkdWamRGeHVJQ0FnSUNBZ0lDQWdJRDhnWENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5b1pXRmtaWEl0TFdoaGN5MTBhVzFsTFhObGJHVmpkRndpWEc0Z0lDQWdJQ0FnSUNBZ09pQmNJbHdpWEc0Z0lDQWdJQ0I5WUgxY2JpQWdJQ0ErWEc0Z0lDQWdJQ0I3ZEdocGN5NXlaVzVrWlhKRGRYSnlaVzUwVFc5dWRHZ29iVzl1ZEdoRVlYUmxLWDFjYmlBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGdjbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZhR1ZoWkdWeVgxOWtjbTl3Wkc5M2JpQnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOW9aV0ZrWlhKZlgyUnliM0JrYjNkdUxTMGtlM1JvYVhNdWNISnZjSE11WkhKdmNHUnZkMjVOYjJSbGZXQjlYRzRnSUNBZ0lDQWdJRzl1Um05amRYTTllM1JvYVhNdWFHRnVaR3hsUkhKdmNHUnZkMjVHYjJOMWMzMWNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdlM1JvYVhNdWNtVnVaR1Z5VFc5dWRHaEVjbTl3Wkc5M2JpaHBJQ0U5UFNBd0tYMWNiaUFnSUNBZ0lDQWdlM1JvYVhNdWNtVnVaR1Z5VFc5dWRHaFpaV0Z5UkhKdmNHUnZkMjRvYVNBaFBUMGdNQ2w5WEc0Z0lDQWdJQ0FnSUh0MGFHbHpMbkpsYm1SbGNsbGxZWEpFY205d1pHOTNiaWhwSUNFOVBTQXdLWDFjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5a1lYa3RibUZ0WlhOY0lqNWNiaUFnSUNBZ0lDQWdlM1JvYVhNdWFHVmhaR1Z5S0cxdmJuUm9SR0YwWlNsOVhHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQThMMlJwZGo1Y2JpQWdLVHRjYmx4dUlDQnlaVzVrWlhKRGRYTjBiMjFJWldGa1pYSWdQU0FvYUdWaFpHVnlRWEpuY3lBOUlIdDlLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdleUJ0YjI1MGFFUmhkR1VzSUdrZ2ZTQTlJR2hsWVdSbGNrRnlaM003WEc1Y2JpQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBb2RHaHBjeTV3Y205d2N5NXphRzkzVkdsdFpWTmxiR1ZqZENBbUppQWhkR2hwY3k1emRHRjBaUzV0YjI1MGFFTnZiblJoYVc1bGNpa2dmSHhjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YzJodmQxUnBiV1ZUWld4bFkzUlBibXg1WEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQndjbVYyVFc5dWRHaENkWFIwYjI1RWFYTmhZbXhsWkNBOUlHMXZiblJvUkdsellXSnNaV1JDWldadmNtVW9YRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxMbVJoZEdVc1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxGeHVJQ0FnSUNrN1hHNWNiaUFnSUNCamIyNXpkQ0J1WlhoMFRXOXVkR2hDZFhSMGIyNUVhWE5oWW14bFpDQTlJRzF2Ym5Sb1JHbHpZV0pzWldSQlpuUmxjaWhjYmlBZ0lDQWdJSFJvYVhNdWMzUmhkR1V1WkdGMFpTeGNiaUFnSUNBZ0lIUm9hWE11Y0hKdmNITXNYRzRnSUNBZ0tUdGNibHh1SUNBZ0lHTnZibk4wSUhCeVpYWlpaV0Z5UW5WMGRHOXVSR2x6WVdKc1pXUWdQU0I1WldGeVJHbHpZV0pzWldSQ1pXWnZjbVVvWEc0Z0lDQWdJQ0IwYUdsekxuTjBZWFJsTG1SaGRHVXNYRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQmpiMjV6ZENCdVpYaDBXV1ZoY2tKMWRIUnZia1JwYzJGaWJHVmtJRDBnZVdWaGNrUnBjMkZpYkdWa1FXWjBaWElvWEc0Z0lDQWdJQ0IwYUdsekxuTjBZWFJsTG1SaGRHVXNYRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQmpiMjV6ZENCemFHOTNSR0Y1VG1GdFpYTWdQVnh1SUNBZ0lDQWdJWFJvYVhNdWNISnZjSE11YzJodmQwMXZiblJvV1dWaGNsQnBZMnRsY2lBbUpseHVJQ0FnSUNBZ0lYUm9hWE11Y0hKdmNITXVjMmh2ZDFGMVlYSjBaWEpaWldGeVVHbGphMlZ5SUNZbVhHNGdJQ0FnSUNBaGRHaHBjeTV3Y205d2N5NXphRzkzV1dWaGNsQnBZMnRsY2p0Y2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4WkdsMlhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMmhsWVdSbGNpQnlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOW9aV0ZrWlhJdExXTjFjM1J2YlZ3aVhHNGdJQ0FnSUNBZ0lHOXVSbTlqZFhNOWUzUm9hWE11Y0hKdmNITXViMjVFY205d1pHOTNia1p2WTNWemZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQjdkR2hwY3k1d2NtOXdjeTV5Wlc1a1pYSkRkWE4wYjIxSVpXRmtaWElvZTF4dUlDQWdJQ0FnSUNBZ0lDNHVMblJvYVhNdWMzUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ1kzVnpkRzl0U0dWaFpHVnlRMjkxYm5RNklHa3NYRzRnSUNBZ0lDQWdJQ0FnYlc5dWRHaEVZWFJsTEZ4dUlDQWdJQ0FnSUNBZ0lHTm9ZVzVuWlUxdmJuUm9PaUIwYUdsekxtTm9ZVzVuWlUxdmJuUm9MRnh1SUNBZ0lDQWdJQ0FnSUdOb1lXNW5aVmxsWVhJNklIUm9hWE11WTJoaGJtZGxXV1ZoY2l4Y2JpQWdJQ0FnSUNBZ0lDQmtaV055WldGelpVMXZiblJvT2lCMGFHbHpMbVJsWTNKbFlYTmxUVzl1ZEdnc1hHNGdJQ0FnSUNBZ0lDQWdhVzVqY21WaGMyVk5iMjUwYURvZ2RHaHBjeTVwYm1OeVpXRnpaVTF2Ym5Sb0xGeHVJQ0FnSUNBZ0lDQWdJR1JsWTNKbFlYTmxXV1ZoY2pvZ2RHaHBjeTVrWldOeVpXRnpaVmxsWVhJc1hHNGdJQ0FnSUNBZ0lDQWdhVzVqY21WaGMyVlpaV0Z5T2lCMGFHbHpMbWx1WTNKbFlYTmxXV1ZoY2l4Y2JpQWdJQ0FnSUNBZ0lDQndjbVYyVFc5dWRHaENkWFIwYjI1RWFYTmhZbXhsWkN4Y2JpQWdJQ0FnSUNBZ0lDQnVaWGgwVFc5dWRHaENkWFIwYjI1RWFYTmhZbXhsWkN4Y2JpQWdJQ0FnSUNBZ0lDQndjbVYyV1dWaGNrSjFkSFJ2YmtScGMyRmliR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lHNWxlSFJaWldGeVFuVjBkRzl1UkdsellXSnNaV1FzWEc0Z0lDQWdJQ0FnSUgwcGZWeHVJQ0FnSUNBZ0lDQjdjMmh2ZDBSaGVVNWhiV1Z6SUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYMlJoZVMxdVlXMWxjMXdpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlM1JvYVhNdWFHVmhaR1Z5S0cxdmJuUm9SR0YwWlNsOVhHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FwTzF4dUlDQjlPMXh1WEc0Z0lISmxibVJsY2xsbFlYSklaV0ZrWlhJZ1BTQW9leUJ0YjI1MGFFUmhkR1VnZlNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2MyaHZkMWxsWVhKUWFXTnJaWElzSUhsbFlYSkpkR1Z0VG5WdFltVnlJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUdOdmJuTjBJSHNnYzNSaGNuUlFaWEpwYjJRc0lHVnVaRkJsY21sdlpDQjlJRDBnWjJWMFdXVmhjbk5RWlhKcGIyUW9YRzRnSUNBZ0lDQnRiMjUwYUVSaGRHVXNYRzRnSUNBZ0lDQjVaV0Z5U1hSbGJVNTFiV0psY2l4Y2JpQWdJQ0FwTzF4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgyaGxZV1JsY2lCeVpXRmpkQzFrWVhSbGNHbGphMlZ5TFhsbFlYSXRhR1ZoWkdWeVhDSStYRzRnSUNBZ0lDQWdJSHR6YUc5M1dXVmhjbEJwWTJ0bGNpQS9JR0FrZTNOMFlYSjBVR1Z5YVc5a2ZTQXRJQ1I3Wlc1a1VHVnlhVzlrZldBZ09pQm5aWFJaWldGeUtHMXZiblJvUkdGMFpTbDlYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FwTzF4dUlDQjlPMXh1WEc0Z0lISmxibVJsY2tobFlXUmxjaUE5SUNob1pXRmtaWEpCY21kektTQTlQaUI3WEc0Z0lDQWdjM2RwZEdOb0lDaDBjblZsS1NCN1hHNGdJQ0FnSUNCallYTmxJSFJvYVhNdWNISnZjSE11Y21WdVpHVnlRM1Z6ZEc5dFNHVmhaR1Z5SUNFOVBTQjFibVJsWm1sdVpXUTZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGJtUmxja04xYzNSdmJVaGxZV1JsY2lob1pXRmtaWEpCY21kektUdGNiaUFnSUNBZ0lHTmhjMlVnZEdocGN5NXdjbTl3Y3k1emFHOTNUVzl1ZEdoWlpXRnlVR2xqYTJWeUlIeDhYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11YzJodmQxRjFZWEowWlhKWlpXRnlVR2xqYTJWeUlIeDhYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11YzJodmQxbGxZWEpRYVdOclpYSTZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGJtUmxjbGxsWVhKSVpXRmtaWElvYUdWaFpHVnlRWEpuY3lrN1hHNGdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaVzVrWlhKRVpXWmhkV3gwU0dWaFpHVnlLR2hsWVdSbGNrRnlaM01wTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpOYjI1MGFITWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNISnZjSE11YzJodmQxUnBiV1ZUWld4bFkzUlBibXg1SUh4OElIUm9hWE11Y0hKdmNITXVjMmh2ZDFsbFlYSlFhV05yWlhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnRiMjUwYUV4cGMzUWdQU0JiWFR0Y2JpQWdJQ0JqYjI1emRDQnRiMjUwYUhOVWIxTjFZblJ5WVdOMElEMGdkR2hwY3k1d2NtOXdjeTV6YUc5M1VISmxkbWx2ZFhOTmIyNTBhSE5jYmlBZ0lDQWdJRDhnZEdocGN5NXdjbTl3Y3k1dGIyNTBhSE5UYUc5M2JpQXRJREZjYmlBZ0lDQWdJRG9nTUR0Y2JpQWdJQ0JqYjI1emRDQm1jbTl0VFc5dWRHaEVZWFJsSUQxY2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyaHZkMDF2Ym5Sb1dXVmhjbEJwWTJ0bGNpQjhmQ0IwYUdsekxuQnliM0J6TG5Ob2IzZFJkV0Z5ZEdWeVdXVmhjbEJwWTJ0bGNseHVJQ0FnSUNBZ0lDQS9JR0ZrWkZsbFlYSnpLSFJvYVhNdWMzUmhkR1V1WkdGMFpTd2diVzl1ZEdoelZHOVRkV0owY21GamRDbGNiaUFnSUNBZ0lDQWdPaUJ6ZFdKTmIyNTBhSE1vZEdocGN5NXpkR0YwWlM1a1lYUmxMQ0J0YjI1MGFITlViMU4xWW5SeVlXTjBLVHRjYmlBZ0lDQmpiMjV6ZENCdGIyNTBhRk5sYkdWamRHVmtTVzRnUFNCMGFHbHpMbkJ5YjNCekxtMXZiblJvVTJWc1pXTjBaV1JKYmlBL1B5QnRiMjUwYUhOVWIxTjFZblJ5WVdOME8xeHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTV3Y205d2N5NXRiMjUwYUhOVGFHOTNianNnS3l0cEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCdGIyNTBhSE5VYjBGa1pDQTlJR2tnTFNCdGIyNTBhRk5sYkdWamRHVmtTVzRnS3lCdGIyNTBhSE5VYjFOMVluUnlZV04wTzF4dUlDQWdJQ0FnWTI5dWMzUWdiVzl1ZEdoRVlYUmxJRDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1emFHOTNUVzl1ZEdoWlpXRnlVR2xqYTJWeUlIeDhJSFJvYVhNdWNISnZjSE11YzJodmQxRjFZWEowWlhKWlpXRnlVR2xqYTJWeVhHNGdJQ0FnSUNBZ0lDQWdQeUJoWkdSWlpXRnljeWhtY205dFRXOXVkR2hFWVhSbExDQnRiMjUwYUhOVWIwRmtaQ2xjYmlBZ0lDQWdJQ0FnSUNBNklHRmtaRTF2Ym5Sb2N5aG1jbTl0VFc5dWRHaEVZWFJsTENCdGIyNTBhSE5VYjBGa1pDazdYRzRnSUNBZ0lDQmpiMjV6ZENCdGIyNTBhRXRsZVNBOUlHQnRiMjUwYUMwa2UybDlZRHRjYmlBZ0lDQWdJR052Ym5OMElHMXZiblJvVTJodmQzTkVkWEJzYVdOaGRHVkVZWGx6Ulc1a0lEMGdhU0E4SUhSb2FYTXVjSEp2Y0hNdWJXOXVkR2h6VTJodmQyNGdMU0F4TzF4dUlDQWdJQ0FnWTI5dWMzUWdiVzl1ZEdoVGFHOTNjMFIxY0d4cFkyRjBaVVJoZVhOVGRHRnlkQ0E5SUdrZ1BpQXdPMXh1SUNBZ0lDQWdiVzl1ZEdoTWFYTjBMbkIxYzJnb1hHNGdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNCclpYazllMjF2Ym5Sb1MyVjVmVnh1SUNBZ0lDQWdJQ0FnSUhKbFpqMTdLR1JwZGlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjI1MGFFTnZiblJoYVc1bGNpQTlJR1JwZGp0Y2JpQWdJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0luSmxZV04wTFdSaGRHVndhV05yWlhKZlgyMXZiblJvTFdOdmJuUmhhVzVsY2x3aVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3ZEdocGN5NXlaVzVrWlhKSVpXRmtaWElvZXlCdGIyNTBhRVJoZEdVc0lHa2dmU2w5WEc0Z0lDQWdJQ0FnSUNBZ1BFMXZiblJvWEc0Z0lDQWdJQ0FnSUNBZ0lDQmphRzl2YzJWRVlYbEJjbWxoVEdGaVpXeFFjbVZtYVhnOWUzUm9hWE11Y0hKdmNITXVZMmh2YjNObFJHRjVRWEpwWVV4aFltVnNVSEpsWm1sNGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsellXSnNaV1JFWVhsQmNtbGhUR0ZpWld4UWNtVm1hWGc5ZTNSb2FYTXVjSEp2Y0hNdVpHbHpZV0pzWldSRVlYbEJjbWxoVEdGaVpXeFFjbVZtYVhoOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IzWldWclFYSnBZVXhoWW1Wc1VISmxabWw0UFh0MGFHbHpMbkJ5YjNCekxuZGxaV3RCY21saFRHRmlaV3hRY21WbWFYaDlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNtbGhUR0ZpWld4UWNtVm1hWGc5ZTNSb2FYTXVjSEp2Y0hNdWJXOXVkR2hCY21saFRHRmlaV3hRY21WbWFYaDlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlQxN2RHaHBjeTVqYUdGdVoyVk5iMjUwYUZsbFlYSjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYazllMjF2Ym5Sb1JHRjBaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhlVU5zWVhOelRtRnRaVDE3ZEdocGN5NXdjbTl3Y3k1a1lYbERiR0Z6YzA1aGJXVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCallXeGxibVJoY2xOMFlYSjBSR0Y1UFh0MGFHbHpMbkJ5YjNCekxtTmhiR1Z1WkdGeVUzUmhjblJFWVhsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjI1MGFFTnNZWE56VG1GdFpUMTdkR2hwY3k1d2NtOXdjeTV0YjI1MGFFTnNZWE56VG1GdFpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVJHRjVRMnhwWTJzOWUzUm9hWE11YUdGdVpHeGxSR0Y1UTJ4cFkydDlYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZQYmt0bGVVUnZkMjQ5ZTNSb2FYTXVjSEp2Y0hNdWFHRnVaR3hsVDI1RVlYbExaWGxFYjNkdWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxUMjVOYjI1MGFFdGxlVVJ2ZDI0OWUzUm9hWE11Y0hKdmNITXVhR0Z1Wkd4bFQyNUxaWGxFYjNkdWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhObFVHOXBiblJsY2tWMlpXNTBQWHQwYUdsekxuQnliM0J6TG5WelpWQnZhVzUwWlhKRmRtVnVkSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVSR0Y1VFc5MWMyVkZiblJsY2oxN2RHaHBjeTVvWVc1a2JHVkVZWGxOYjNWelpVVnVkR1Z5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVOYjNWelpVeGxZWFpsUFh0MGFHbHpMbWhoYm1Sc1pVMXZiblJvVFc5MWMyVk1aV0YyWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1VjJWbGExTmxiR1ZqZEQxN2RHaHBjeTV3Y205d2N5NXZibGRsWld0VFpXeGxZM1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjbVJsY2tsdVJHbHpjR3hoZVQxN2FYMWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNtMWhkRmRsWld0T2RXMWlaWEk5ZTNSb2FYTXVjSEp2Y0hNdVptOXliV0YwVjJWbGEwNTFiV0psY24xY2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGc1pUMTdkR2hwY3k1d2NtOXdjeTVzYjJOaGJHVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdGFXNUVZWFJsUFh0MGFHbHpMbkJ5YjNCekxtMXBia1JoZEdWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhoRVlYUmxQWHQwYUdsekxuQnliM0J6TG0xaGVFUmhkR1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlR05zZFdSbFJHRjBaWE05ZTNSb2FYTXVjSEp2Y0hNdVpYaGpiSFZrWlVSaGRHVnpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaGpiSFZrWlVSaGRHVkpiblJsY25aaGJITTllM1JvYVhNdWNISnZjSE11WlhoamJIVmtaVVJoZEdWSmJuUmxjblpoYkhOOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvYVdkb2JHbG5hSFJFWVhSbGN6MTdkR2hwY3k1d2NtOXdjeTVvYVdkb2JHbG5hSFJFWVhSbGMzMWNiaUFnSUNBZ0lDQWdJQ0FnSUdodmJHbGtZWGx6UFh0MGFHbHpMbkJ5YjNCekxtaHZiR2xrWVhsemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBhVzVuUkdGMFpUMTdkR2hwY3k1emRHRjBaUzV6Wld4bFkzUnBibWRFWVhSbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1amJIVmtaVVJoZEdWelBYdDBhR2x6TG5CeWIzQnpMbWx1WTJ4MVpHVkVZWFJsYzMxY2JpQWdJQ0FnSUNBZ0lDQWdJR2x1WTJ4MVpHVkVZWFJsU1c1MFpYSjJZV3h6UFh0MGFHbHpMbkJ5YjNCekxtbHVZMngxWkdWRVlYUmxTVzUwWlhKMllXeHpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXNhVzVsUFh0MGFHbHpMbkJ5YjNCekxtbHViR2x1WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE5vYjNWc1pFWnZZM1Z6UkdGNVNXNXNhVzVsUFh0MGFHbHpMbkJ5YjNCekxuTm9iM1ZzWkVadlkzVnpSR0Y1U1c1c2FXNWxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbDRaV1JJWldsbmFIUTllM1JvYVhNdWNISnZjSE11Wm1sNFpXUklaV2xuYUhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4MFpYSkVZWFJsUFh0MGFHbHpMbkJ5YjNCekxtWnBiSFJsY2tSaGRHVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtVlRaV3hsWTNScGIyNDllM1JvYVhNdWNISnZjSE11Y0hKbFUyVnNaV04wYVc5dWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFVISmxVMlZzWldOMGFXOXVQWHQwYUdsekxuQnliM0J6TG5ObGRGQnlaVk5sYkdWamRHbHZibjFjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEdWa1BYdDBhR2x6TG5CeWIzQnpMbk5sYkdWamRHVmtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wYzFOMFlYSjBQWHQwYUdsekxuQnliM0J6TG5ObGJHVmpkSE5UZEdGeWRIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJHVmpkSE5GYm1ROWUzUm9hWE11Y0hKdmNITXVjMlZzWldOMGMwVnVaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEhOU1lXNW5aVDE3ZEdocGN5NXdjbTl3Y3k1elpXeGxZM1J6VW1GdVoyVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeGxZM1J6UkdsellXSnNaV1JFWVhselNXNVNZVzVuWlQxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSelJHbHpZV0pzWldSRVlYbHpTVzVTWVc1blpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJHVmpkSE5OZFd4MGFYQnNaVDE3ZEdocGN5NXdjbTl3Y3k1elpXeGxZM1J6VFhWc2RHbHdiR1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV3hsWTNSbFpFUmhkR1Z6UFh0MGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEdWa1JHRjBaWE45WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphRzkzVjJWbGEwNTFiV0psY25NOWUzUm9hWE11Y0hKdmNITXVjMmh2ZDFkbFpXdE9kVzFpWlhKemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGNuUkVZWFJsUFh0MGFHbHpMbkJ5YjNCekxuTjBZWEowUkdGMFpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVpFUmhkR1U5ZTNSb2FYTXVjSEp2Y0hNdVpXNWtSR0YwWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEJsWld0T1pYaDBUVzl1ZEdnOWUzUm9hWE11Y0hKdmNITXVjR1ZsYTA1bGVIUk5iMjUwYUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEU5d1pXNDllM1JvYVhNdWNISnZjSE11YzJWMFQzQmxibjFjYmlBZ0lDQWdJQ0FnSUNBZ0lITm9iM1ZzWkVOc2IzTmxUMjVUWld4bFkzUTllM1JvYVhNdWNISnZjSE11YzJodmRXeGtRMnh2YzJWUGJsTmxiR1ZqZEgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYm1SbGNrUmhlVU52Ym5SbGJuUnpQWHQwYUdsekxuQnliM0J6TG5KbGJtUmxja1JoZVVOdmJuUmxiblJ6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVRXOXVkR2hEYjI1MFpXNTBQWHQwYUdsekxuQnliM0J6TG5KbGJtUmxjazF2Ym5Sb1EyOXVkR1Z1ZEgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYm1SbGNsRjFZWEowWlhKRGIyNTBaVzUwUFh0MGFHbHpMbkJ5YjNCekxuSmxibVJsY2xGMVlYSjBaWEpEYjI1MFpXNTBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5V1dWaGNrTnZiblJsYm5ROWUzUm9hWE11Y0hKdmNITXVjbVZ1WkdWeVdXVmhja052Ym5SbGJuUjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTmhZbXhsWkV0bGVXSnZZWEprVG1GMmFXZGhkR2x2YmoxN2RHaHBjeTV3Y205d2N5NWthWE5oWW14bFpFdGxlV0p2WVhKa1RtRjJhV2RoZEdsdmJuMWNiaUFnSUNBZ0lDQWdJQ0FnSUhOb2IzZE5iMjUwYUZsbFlYSlFhV05yWlhJOWUzUm9hWE11Y0hKdmNITXVjMmh2ZDAxdmJuUm9XV1ZoY2xCcFkydGxjbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lITm9iM2RHZFd4c1RXOXVkR2haWldGeVVHbGphMlZ5UFh0MGFHbHpMbkJ5YjNCekxuTm9iM2RHZFd4c1RXOXVkR2haWldGeVVHbGphMlZ5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMmh2ZDFSM2IwTnZiSFZ0YmsxdmJuUm9XV1ZoY2xCcFkydGxjajE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11YzJodmQxUjNiME52YkhWdGJrMXZiblJvV1dWaGNsQnBZMnRsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaHZkMFp2ZFhKRGIyeDFiVzVOYjI1MGFGbGxZWEpRYVdOclpYSTllMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbk5vYjNkR2IzVnlRMjlzZFcxdVRXOXVkR2haWldGeVVHbGphMlZ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCemFHOTNXV1ZoY2xCcFkydGxjajE3ZEdocGN5NXdjbTl3Y3k1emFHOTNXV1ZoY2xCcFkydGxjbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lITm9iM2RSZFdGeWRHVnlXV1ZoY2xCcFkydGxjajE3ZEdocGN5NXdjbTl3Y3k1emFHOTNVWFZoY25SbGNsbGxZWEpRYVdOclpYSjlYRzRnSUNBZ0lDQWdJQ0FnSUNCemFHOTNWMlZsYTFCcFkydGxjajE3ZEdocGN5NXdjbTl3Y3k1emFHOTNWMlZsYTFCcFkydGxjbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpTVzV3ZFhSR2IyTjFjMlZrUFh0MGFHbHpMbkJ5YjNCekxtbHpTVzV3ZFhSR2IyTjFjMlZrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlVbVZtUFh0MGFHbHpMbU52Ym5SaGFXNWxjbEpsWm4xY2JpQWdJQ0FnSUNBZ0lDQWdJRzF2Ym5Sb1UyaHZkM05FZFhCc2FXTmhkR1ZFWVhselJXNWtQWHR0YjI1MGFGTm9iM2R6UkhWd2JHbGpZWFJsUkdGNWMwVnVaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHMXZiblJvVTJodmQzTkVkWEJzYVdOaGRHVkVZWGx6VTNSaGNuUTllMjF2Ym5Sb1UyaHZkM05FZFhCc2FXTmhkR1ZFWVhselUzUmhjblI5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdQQzlrYVhZK0xGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzF2Ym5Sb1RHbHpkRHRjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpaWldGeWN5QTlJQ2dwSUQwK0lIdGNiaUFnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTV6YUc5M1ZHbHRaVk5sYkdWamRFOXViSGtwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWNISnZjSE11YzJodmQxbGxZWEpRYVdOclpYSXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsOWZlV1ZoY2kwdFkyOXVkR0ZwYm1WeVhDSStYRzRnSUNBZ0lDQWdJQ0FnZTNSb2FYTXVjbVZ1WkdWeVNHVmhaR1Z5S0hzZ2JXOXVkR2hFWVhSbE9pQjBhR2x6TG5OMFlYUmxMbVJoZEdVZ2ZTbDlYRzRnSUNBZ0lDQWdJQ0FnUEZsbFlYSmNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVJHRjVRMnhwWTJzOWUzUm9hWE11YUdGdVpHeGxSR0Y1UTJ4cFkydDlYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeGxZM1JwYm1kRVlYUmxQWHQwYUdsekxuTjBZWFJsTG5ObGJHVmpkR2x1WjBSaGRHVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHVmhjbE5sYkdWamRHbHVaMFJoZEdVOWUzUm9hWE11WTJ4bFlYSlRaV3hsWTNScGJtZEVZWFJsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWlQxN2RHaHBjeTV6ZEdGMFpTNWtZWFJsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdleTR1TG5Sb2FYTXVjSEp2Y0hOOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmxsbFlYSk5iM1Z6WlVWdWRHVnlQWHQwYUdsekxtaGhibVJzWlZsbFlYSk5iM1Z6WlVWdWRHVnlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNVpaV0Z5VFc5MWMyVk1aV0YyWlQxN2RHaHBjeTVvWVc1a2JHVlpaV0Z5VFc5MWMyVk1aV0YyWlgxY2JpQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNsUnBiV1ZUWldOMGFXOXVJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YzJodmQxUnBiV1ZUWld4bFkzUWdKaVpjYmlBZ0lDQWdJQ2gwYUdsekxuTjBZWFJsTG0xdmJuUm9RMjl1ZEdGcGJtVnlJSHg4SUhSb2FYTXVjSEp2Y0hNdWMyaHZkMVJwYldWVFpXeGxZM1JQYm14NUtWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ1BGUnBiV1ZjYmlBZ0lDQWdJQ0FnSUNCelpXeGxZM1JsWkQxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSbFpIMWNiaUFnSUNBZ0lDQWdJQ0J2Y0dWdVZHOUVZWFJsUFh0MGFHbHpMbkJ5YjNCekxtOXdaVzVVYjBSaGRHVjlYRzRnSUNBZ0lDQWdJQ0FnYjI1RGFHRnVaMlU5ZTNSb2FYTXVjSEp2Y0hNdWIyNVVhVzFsUTJoaGJtZGxmVnh1SUNBZ0lDQWdJQ0FnSUhScGJXVkRiR0Z6YzA1aGJXVTllM1JvYVhNdWNISnZjSE11ZEdsdFpVTnNZWE56VG1GdFpYMWNiaUFnSUNBZ0lDQWdJQ0JtYjNKdFlYUTllM1JvYVhNdWNISnZjSE11ZEdsdFpVWnZjbTFoZEgxY2JpQWdJQ0FnSUNBZ0lDQnBibU5zZFdSbFZHbHRaWE05ZTNSb2FYTXVjSEp2Y0hNdWFXNWpiSFZrWlZScGJXVnpmVnh1SUNBZ0lDQWdJQ0FnSUdsdWRHVnlkbUZzY3oxN2RHaHBjeTV3Y205d2N5NTBhVzFsU1c1MFpYSjJZV3h6ZlZ4dUlDQWdJQ0FnSUNBZ0lHMXBibFJwYldVOWUzUm9hWE11Y0hKdmNITXViV2x1VkdsdFpYMWNiaUFnSUNBZ0lDQWdJQ0J0WVhoVWFXMWxQWHQwYUdsekxuQnliM0J6TG0xaGVGUnBiV1Y5WEc0Z0lDQWdJQ0FnSUNBZ1pYaGpiSFZrWlZScGJXVnpQWHQwYUdsekxuQnliM0J6TG1WNFkyeDFaR1ZVYVcxbGMzMWNiaUFnSUNBZ0lDQWdJQ0JtYVd4MFpYSlVhVzFsUFh0MGFHbHpMbkJ5YjNCekxtWnBiSFJsY2xScGJXVjlYRzRnSUNBZ0lDQWdJQ0FnZEdsdFpVTmhjSFJwYjI0OWUzUm9hWE11Y0hKdmNITXVkR2x0WlVOaGNIUnBiMjU5WEc0Z0lDQWdJQ0FnSUNBZ2RHOWtZWGxDZFhSMGIyNDllM1JvYVhNdWNISnZjSE11ZEc5a1lYbENkWFIwYjI1OVhHNGdJQ0FnSUNBZ0lDQWdjMmh2ZDAxdmJuUm9SSEp2Y0dSdmQyNDllM1JvYVhNdWNISnZjSE11YzJodmQwMXZiblJvUkhKdmNHUnZkMjU5WEc0Z0lDQWdJQ0FnSUNBZ2MyaHZkMDF2Ym5Sb1dXVmhja1J5YjNCa2IzZHVQWHQwYUdsekxuQnliM0J6TG5Ob2IzZE5iMjUwYUZsbFlYSkVjbTl3Wkc5M2JuMWNiaUFnSUNBZ0lDQWdJQ0J6YUc5M1dXVmhja1J5YjNCa2IzZHVQWHQwYUdsekxuQnliM0J6TG5Ob2IzZFpaV0Z5UkhKdmNHUnZkMjU5WEc0Z0lDQWdJQ0FnSUNBZ2QybDBhRkJ2Y25SaGJEMTdkR2hwY3k1d2NtOXdjeTUzYVhSb1VHOXlkR0ZzZlZ4dUlDQWdJQ0FnSUNBZ0lHMXZiblJvVW1WbVBYdDBhR2x6TG5OMFlYUmxMbTF2Ym5Sb1EyOXVkR0ZwYm1WeWZWeHVJQ0FnSUNBZ0lDQWdJR2x1YW1WamRGUnBiV1Z6UFh0MGFHbHpMbkJ5YjNCekxtbHVhbVZqZEZScGJXVnpmVnh1SUNBZ0lDQWdJQ0FnSUd4dlkyRnNaVDE3ZEdocGN5NXdjbTl3Y3k1c2IyTmhiR1Y5WEc0Z0lDQWdJQ0FnSUNBZ2FHRnVaR3hsVDI1TFpYbEViM2R1UFh0MGFHbHpMbkJ5YjNCekxtaGhibVJzWlU5dVMyVjVSRzkzYm4xY2JpQWdJQ0FnSUNBZ0lDQnphRzkzVkdsdFpWTmxiR1ZqZEU5dWJIazllM1JvYVhNdWNISnZjSE11YzJodmQxUnBiV1ZUWld4bFkzUlBibXg1ZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdjbVZ1WkdWeVNXNXdkWFJVYVcxbFUyVmpkR2x2YmlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjBhVzFsSUQwZ2JtVjNJRVJoZEdVb2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSbFpDazdYRzRnSUNBZ1kyOXVjM1FnZEdsdFpWWmhiR2xrSUQwZ2FYTldZV3hwWkNoMGFXMWxLU0FtSmlCQ2IyOXNaV0Z1S0hSb2FYTXVjSEp2Y0hNdWMyVnNaV04wWldRcE8xeHVJQ0FnSUdOdmJuTjBJSFJwYldWVGRISnBibWNnUFNCMGFXMWxWbUZzYVdSY2JpQWdJQ0FnSUQ4Z1lDUjdZV1JrV21WeWJ5aDBhVzFsTG1kbGRFaHZkWEp6S0NrcGZUb2tlMkZrWkZwbGNtOG9kR2x0WlM1blpYUk5hVzUxZEdWektDa3BmV0JjYmlBZ0lDQWdJRG9nWENKY0lqdGNiaUFnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTV6YUc5M1ZHbHRaVWx1Y0hWMEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQThTVzV3ZFhSVWFXMWxYRzRnSUNBZ0lDQWdJQ0FnWkdGMFpUMTdkR2x0WlgxY2JpQWdJQ0FnSUNBZ0lDQjBhVzFsVTNSeWFXNW5QWHQwYVcxbFUzUnlhVzVuZlZ4dUlDQWdJQ0FnSUNBZ0lIUnBiV1ZKYm5CMWRFeGhZbVZzUFh0MGFHbHpMbkJ5YjNCekxuUnBiV1ZKYm5CMWRFeGhZbVZzZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFBYdDBhR2x6TG5CeWIzQnpMbTl1VkdsdFpVTm9ZVzVuWlgxY2JpQWdJQ0FnSUNBZ0lDQmpkWE4wYjIxVWFXMWxTVzV3ZFhROWUzUm9hWE11Y0hKdmNITXVZM1Z6ZEc5dFZHbHRaVWx1Y0hWMGZWeHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlRWEpwWVV4cGRtVlNaV2RwYjI0Z1BTQW9LU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdleUJ6ZEdGeWRGQmxjbWx2WkN3Z1pXNWtVR1Z5YVc5a0lIMGdQU0JuWlhSWlpXRnljMUJsY21sdlpDaGNiaUFnSUNBZ0lIUm9hWE11YzNSaGRHVXVaR0YwWlN4Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWVXVmhja2wwWlcxT2RXMWlaWElzWEc0Z0lDQWdLVHRjYmlBZ0lDQnNaWFFnWVhKcFlVeHBkbVZOWlhOellXZGxPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdWMyaHZkMWxsWVhKUWFXTnJaWElwSUh0Y2JpQWdJQ0FnSUdGeWFXRk1hWFpsVFdWemMyRm5aU0E5SUdBa2UzTjBZWEowVUdWeWFXOWtmU0F0SUNSN1pXNWtVR1Z5YVc5a2ZXQTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGNiaUFnSUNBZ0lIUm9hWE11Y0hKdmNITXVjMmh2ZDAxdmJuUm9XV1ZoY2xCcFkydGxjaUI4ZkZ4dUlDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1emFHOTNVWFZoY25SbGNsbGxZWEpRYVdOclpYSmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lHRnlhV0ZNYVhabFRXVnpjMkZuWlNBOUlHZGxkRmxsWVhJb2RHaHBjeTV6ZEdGMFpTNWtZWFJsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdZWEpwWVV4cGRtVk5aWE56WVdkbElEMGdZQ1I3WjJWMFRXOXVkR2hKYmt4dlkyRnNaU2hjYmlBZ0lDQWdJQ0FnWjJWMFRXOXVkR2dvZEdocGN5NXpkR0YwWlM1a1lYUmxLU3hjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1c2IyTmhiR1VzWEc0Z0lDQWdJQ0FwZlNBa2UyZGxkRmxsWVhJb2RHaHBjeTV6ZEdGMFpTNWtZWFJsS1gxZ08xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4YzNCaGJseHVJQ0FnSUNBZ0lDQnliMnhsUFZ3aVlXeGxjblJjSWx4dUlDQWdJQ0FnSUNCaGNtbGhMV3hwZG1VOVhDSndiMnhwZEdWY0lseHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTloY21saExXeHBkbVZjSWx4dUlDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNCN2RHaHBjeTV6ZEdGMFpTNXBjMUpsYm1SbGNrRnlhV0ZNYVhabFRXVnpjMkZuWlNBbUppQmhjbWxoVEdsMlpVMWxjM05oWjJWOVhHNGdJQ0FnSUNBOEwzTndZVzQrWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpEYUdsc1pISmxiaUE5SUNncElEMCtJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXdjbTl3Y3k1amFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5amFHbHNaSEpsYmkxamIyNTBZV2x1WlhKY0lqNWNiaUFnSUNBZ0lDQWdJQ0I3ZEdocGN5NXdjbTl3Y3k1amFHbHNaSEpsYm4xY2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnWTI5dWMzUWdRMjl1ZEdGcGJtVnlJRDBnZEdocGN5NXdjbTl3Y3k1amIyNTBZV2x1WlhJZ2ZId2dRMkZzWlc1a1lYSkRiMjUwWVdsdVpYSTdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4a2FYWWdjM1I1YkdVOWUzc2daR2x6Y0d4aGVUb2dYQ0pqYjI1MFpXNTBjMXdpSUgxOUlISmxaajE3ZEdocGN5NWpiMjUwWVdsdVpYSlNaV1o5UGx4dUlDQWdJQ0FnSUNBOFEyOXVkR0ZwYm1WeVhHNGdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkhONEtGd2ljbVZoWTNRdFpHRjBaWEJwWTJ0bGNsd2lMQ0IwYUdsekxuQnliM0J6TG1Oc1lYTnpUbUZ0WlN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5TFMxMGFXMWxMVzl1YkhsY0lqb2dkR2hwY3k1d2NtOXdjeTV6YUc5M1ZHbHRaVk5sYkdWamRFOXViSGtzWEc0Z0lDQWdJQ0FnSUNBZ2ZTbDlYRzRnSUNBZ0lDQWdJQ0FnYzJodmQxUnBiV1U5ZTNSb2FYTXVjSEp2Y0hNdWMyaHZkMVJwYldWVFpXeGxZM1FnZkh3Z2RHaHBjeTV3Y205d2N5NXphRzkzVkdsdFpVbHVjSFYwZlZ4dUlDQWdJQ0FnSUNBZ0lITm9iM2RVYVcxbFUyVnNaV04wVDI1c2VUMTdkR2hwY3k1d2NtOXdjeTV6YUc5M1ZHbHRaVk5sYkdWamRFOXViSGw5WEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQjdkR2hwY3k1eVpXNWtaWEpCY21saFRHbDJaVkpsWjJsdmJpZ3BmVnh1SUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbkpsYm1SbGNsQnlaWFpwYjNWelFuVjBkRzl1S0NsOVhHNGdJQ0FnSUNBZ0lDQWdlM1JvYVhNdWNtVnVaR1Z5VG1WNGRFSjFkSFJ2YmlncGZWeHVJQ0FnSUNBZ0lDQWdJSHQwYUdsekxuSmxibVJsY2sxdmJuUm9jeWdwZlZ4dUlDQWdJQ0FnSUNBZ0lIdDBhR2x6TG5KbGJtUmxjbGxsWVhKektDbDlYRzRnSUNBZ0lDQWdJQ0FnZTNSb2FYTXVjbVZ1WkdWeVZHOWtZWGxDZFhSMGIyNG9LWDFjYmlBZ0lDQWdJQ0FnSUNCN2RHaHBjeTV5Wlc1a1pYSlVhVzFsVTJWamRHbHZiaWdwZlZ4dUlDQWdJQ0FnSUNBZ0lIdDBhR2x6TG5KbGJtUmxja2x1Y0hWMFZHbHRaVk5sWTNScGIyNG9LWDFjYmlBZ0lDQWdJQ0FnSUNCN2RHaHBjeTV5Wlc1a1pYSkRhR2xzWkhKbGJpZ3BmVnh1SUNBZ0lDQWdJQ0E4TDBOdmJuUmhhVzVsY2o1Y2JpQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUZ3aWNtVmhZM1JjSWp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0JjSW5CeWIzQXRkSGx3WlhOY0lqdGNibHh1WTI5dWMzUWdRMkZzWlc1a1lYSkpZMjl1SUQwZ0tIc2dhV052Yml3Z1kyeGhjM05PWVcxbElEMGdYQ0pjSWl3Z2IyNURiR2xqYXlCOUtTQTlQaUI3WEc0Z0lHTnZibk4wSUdSbFptRjFiSFJEYkdGemN5QTlJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmWTJGc1pXNWtZWEl0YVdOdmJsd2lPMXh1WEc0Z0lHbG1JQ2hTWldGamRDNXBjMVpoYkdsa1JXeGxiV1Z1ZENocFkyOXVLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQlNaV0ZqZEM1amJHOXVaVVZzWlcxbGJuUW9hV052Yml3Z2UxeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbE9pQmdKSHRwWTI5dUxuQnliM0J6TG1Oc1lYTnpUbUZ0WlNCOGZDQmNJbHdpZlNBa2UyUmxabUYxYkhSRGJHRnpjMzBnSkh0amJHRnpjMDVoYldWOVlDeGNiaUFnSUNBZ0lHOXVRMnhwWTJzNklDaGxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhV052Ymk1d2NtOXdjeTV2YmtOc2FXTnJJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFkyOXVMbkJ5YjNCekxtOXVRMnhwWTJzb1pTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHOXVRMnhwWTJzZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyc29aU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQnBaaUFvZEhsd1pXOW1JR2xqYjI0Z1BUMDlJRndpYzNSeWFXNW5YQ0lwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR2xjYmlBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0Z0pIdGtaV1poZFd4MFEyeGhjM045SUNSN2FXTnZibjBnSkh0amJHRnpjMDVoYldWOVlIMWNiaUFnSUNBZ0lDQWdZWEpwWVMxb2FXUmtaVzQ5WENKMGNuVmxYQ0pjYmlBZ0lDQWdJQ0FnYjI1RGJHbGphejE3YjI1RGJHbGphMzFjYmlBZ0lDQWdJQzgrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUM4dklFUmxabUYxYkhRZ1UxWkhJRWxqYjI1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOGMzWm5YRzRnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMkFrZTJSbFptRjFiSFJEYkdGemMzMGdKSHRqYkdGemMwNWhiV1Y5WUgxY2JpQWdJQ0FnSUhodGJHNXpQVndpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWRjSWx4dUlDQWdJQ0FnZG1sbGQwSnZlRDFjSWpBZ01DQTBORGdnTlRFeVhDSmNiaUFnSUNBZ0lHOXVRMnhwWTJzOWUyOXVRMnhwWTJ0OVhHNGdJQ0FnUGx4dUlDQWdJQ0FnUEhCaGRHZ2daRDFjSWswNU5pQXpNbFkyTkVnME9FTXlNUzQxSURZMElEQWdPRFV1TlNBd0lERXhNblkwT0VnME5EaFdNVEV5WXpBdE1qWXVOUzB5TVM0MUxUUTRMVFE0TFRRNFNETTFNbFl6TW1Nd0xURTNMamN0TVRRdU15MHpNaTB6TWkwek1uTXRNeklnTVRRdU15MHpNaUF6TWxZMk5FZ3hOakJXTXpKak1DMHhOeTQzTFRFMExqTXRNekl0TXpJdE16SlRPVFlnTVRRdU15QTVOaUF6TW5wTk5EUTRJREU1TWtnd1ZqUTJOR013SURJMkxqVWdNakV1TlNBME9DQTBPQ0EwT0VnME1EQmpNall1TlNBd0lEUTRMVEl4TGpVZ05EZ3RORGhXTVRreWVsd2lJQzgrWEc0Z0lDQWdQQzl6ZG1jK1hHNGdJQ2s3WEc1OU8xeHVYRzVEWVd4bGJtUmhja2xqYjI0dWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCcFkyOXVPaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0UWNtOXdWSGx3WlhNdWMzUnlhVzVuTENCUWNtOXdWSGx3WlhNdWJtOWtaVjBwTEZ4dUlDQmpiR0Z6YzA1aGJXVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUc5dVEyeHBZMnM2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1EyRnNaVzVrWVhKSlkyOXVPMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ1hDSnlaV0ZqZEZ3aU8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUZ3aWNISnZjQzEwZVhCbGMxd2lPMXh1YVcxd2IzSjBJRkpsWVdOMFJFOU5JR1p5YjIwZ1hDSnlaV0ZqZEMxa2IyMWNJanRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVRzl5ZEdGc0lHVjRkR1Z1WkhNZ1VtVmhZM1F1UTI5dGNHOXVaVzUwSUh0Y2JpQWdjM1JoZEdsaklIQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQmphR2xzWkhKbGJqb2dVSEp2Y0ZSNWNHVnpMbUZ1ZVN4Y2JpQWdJQ0J3YjNKMFlXeEpaRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQndiM0owWVd4SWIzTjBPaUJRY205d1ZIbHdaWE11YVc1emRHRnVZMlZQWmloVGFHRmtiM2RTYjI5MEtTeGNiaUFnZlR0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lod2NtOXdjeWtnZTF4dUlDQWdJSE4xY0dWeUtIQnliM0J6S1R0Y2JpQWdJQ0IwYUdsekxtVnNJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbVJwZGx3aUtUdGNiaUFnZlZ4dVhHNGdJR052YlhCdmJtVnVkRVJwWkUxdmRXNTBLQ2tnZTF4dUlDQWdJSFJvYVhNdWNHOXlkR0ZzVW05dmRDQTlJQ2gwYUdsekxuQnliM0J6TG5CdmNuUmhiRWh2YzNRZ2ZId2daRzlqZFcxbGJuUXBMbWRsZEVWc1pXMWxiblJDZVVsa0tGeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXdiM0owWVd4SlpDeGNiaUFnSUNBcE8xeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1d2IzSjBZV3hTYjI5MEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5CdmNuUmhiRkp2YjNRZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aVpHbDJYQ0lwTzF4dUlDQWdJQ0FnZEdocGN5NXdiM0owWVd4U2IyOTBMbk5sZEVGMGRISnBZblYwWlNoY0ltbGtYQ0lzSUhSb2FYTXVjSEp2Y0hNdWNHOXlkR0ZzU1dRcE8xeHVJQ0FnSUNBZ0tIUm9hWE11Y0hKdmNITXVjRzl5ZEdGc1NHOXpkQ0I4ZkNCa2IyTjFiV1Z1ZEM1aWIyUjVLUzVoY0hCbGJtUkRhR2xzWkNoMGFHbHpMbkJ2Y25SaGJGSnZiM1FwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG5CdmNuUmhiRkp2YjNRdVlYQndaVzVrUTJocGJHUW9kR2hwY3k1bGJDazdYRzRnSUgxY2JseHVJQ0JqYjIxd2IyNWxiblJYYVd4c1ZXNXRiM1Z1ZENncElIdGNiaUFnSUNCMGFHbHpMbkJ2Y25SaGJGSnZiM1F1Y21WdGIzWmxRMmhwYkdRb2RHaHBjeTVsYkNrN1hHNGdJSDFjYmx4dUlDQnlaVzVrWlhJb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZKbFlXTjBSRTlOTG1OeVpXRjBaVkJ2Y25SaGJDaDBhR2x6TG5CeWIzQnpMbU5vYVd4a2NtVnVMQ0IwYUdsekxtVnNLVHRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ1hDSnlaV0ZqZEZ3aU8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUZ3aWNISnZjQzEwZVhCbGMxd2lPMXh1WEc0dkx5QlVZV0pNYjI5d0lIQnlaWFpsYm5SeklIUm9aU0IxYzJWeUlHWnliMjBnZEdGaVltbHVaeUJ2ZFhSemFXUmxJRzltSUhSb1pTQndiM0J3WlhKY2JpOHZJRWwwSUdOeVpXRjBaWE1nWVNCMFlXSnBibVJsZUNCc2IyOXdJSE52SUhSb1lYUWdYQ0pVWVdKY0lpQnZiaUIwYUdVZ2JHRnpkQ0JsYkdWdFpXNTBJSGRwYkd3Z1ptOWpkWE1nZEdobElHWnBjbk4wSUdWc1pXMWxiblJjYmk4dklHRnVaQ0JjSWxOb2FXWjBJRlJoWWx3aUlHOXVJSFJvWlNCbWFYSnpkQ0JsYkdWdFpXNTBJSGRwYkd3Z1ptOWpkWE1nZEdobElHeGhjM1FnWld4bGJXVnVkRnh1WEc1amIyNXpkQ0JtYjJOMWMyRmliR1ZGYkdWdFpXNTBjMU5sYkdWamRHOXlJRDFjYmlBZ1hDSmJkR0ZpYVc1a1pYaGRMQ0JoTENCaWRYUjBiMjRzSUdsdWNIVjBMQ0J6Wld4bFkzUXNJSFJsZUhSaGNtVmhYQ0k3WEc1amIyNXpkQ0JtYjJOMWMyRmliR1ZHYVd4MFpYSWdQU0FvYm05a1pTa2dQVDRnSVc1dlpHVXVaR2x6WVdKc1pXUWdKaVlnYm05a1pTNTBZV0pKYm1SbGVDQWhQVDBnTFRFN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZSaFlreHZiM0FnWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nWjJWMElHUmxabUYxYkhSUWNtOXdjeWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdaVzVoWW14bFZHRmlURzl2Y0RvZ2RISjFaU3hjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJSEJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JqYUdsc1pISmxiam9nVUhKdmNGUjVjR1Z6TG1GdWVTeGNiaUFnSUNCbGJtRmliR1ZVWVdKTWIyOXdPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnZlR0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lod2NtOXdjeWtnZTF4dUlDQWdJSE4xY0dWeUtIQnliM0J6S1R0Y2JseHVJQ0FnSUhSb2FYTXVkR0ZpVEc5dmNGSmxaaUE5SUZKbFlXTjBMbU55WldGMFpWSmxaaWdwTzF4dUlDQjlYRzVjYmlBZ0x5OGdjWFZsY25rZ1lXeHNJR1p2WTNWellXSnNaU0JsYkdWdFpXNTBjMXh1SUNBdkx5QjBjbWx0SUdacGNuTjBJR0Z1WkNCc1lYTjBJR0psWTJGMWMyVWdkR2hsZVNCaGNtVWdkR2hsSUdadlkzVnpJR2QxWVhKa2MxeHVJQ0JuWlhSVVlXSkRhR2xzWkhKbGJpQTlJQ2dwSUQwK1hHNGdJQ0FnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObFhHNGdJQ0FnSUNBdVkyRnNiQ2hjYmlBZ0lDQWdJQ0FnZEdocGN5NTBZV0pNYjI5d1VtVm1MbU4xY25KbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaG1iMk4xYzJGaWJHVkZiR1Z0Wlc1MGMxTmxiR1ZqZEc5eUtTeGNiaUFnSUNBZ0lDQWdNU3hjYmlBZ0lDQWdJQ0FnTFRFc1hHNGdJQ0FnSUNBcFhHNGdJQ0FnSUNBdVptbHNkR1Z5S0dadlkzVnpZV0pzWlVacGJIUmxjaWs3WEc1Y2JpQWdhR0Z1Wkd4bFJtOWpkWE5UZEdGeWRDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0IwWVdKRGFHbHNaSEpsYmlBOUlIUm9hWE11WjJWMFZHRmlRMmhwYkdSeVpXNG9LVHRjYmlBZ0lDQjBZV0pEYUdsc1pISmxiaUFtSmx4dUlDQWdJQ0FnZEdGaVEyaHBiR1J5Wlc0dWJHVnVaM1JvSUQ0Z01TQW1KbHh1SUNBZ0lDQWdkR0ZpUTJocGJHUnlaVzViZEdGaVEyaHBiR1J5Wlc0dWJHVnVaM1JvSUMwZ01WMHVabTlqZFhNb0tUdGNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVkdiMk4xYzBWdVpDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0IwWVdKRGFHbHNaSEpsYmlBOUlIUm9hWE11WjJWMFZHRmlRMmhwYkdSeVpXNG9LVHRjYmlBZ0lDQjBZV0pEYUdsc1pISmxiaUFtSmlCMFlXSkRhR2xzWkhKbGJpNXNaVzVuZEdnZ1BpQXhJQ1ltSUhSaFlrTm9hV3hrY21WdVd6QmRMbVp2WTNWektDazdYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTV3Y205d2N5NWxibUZpYkdWVVlXSk1iMjl3S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXdjbTl3Y3k1amFHbHNaSEpsYmp0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZmRHRmlMV3h2YjNCY0lpQnlaV1k5ZTNSb2FYTXVkR0ZpVEc5dmNGSmxabjArWEc0Z0lDQWdJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5MFlXSXRiRzl2Y0Y5ZmMzUmhjblJjSWx4dUlDQWdJQ0FnSUNBZ0lIUmhZa2x1WkdWNFBWd2lNRndpWEc0Z0lDQWdJQ0FnSUNBZ2IyNUdiMk4xY3oxN2RHaHBjeTVvWVc1a2JHVkdiMk4xYzFOMFlYSjBmVnh1SUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNCN2RHaHBjeTV3Y205d2N5NWphR2xzWkhKbGJuMWNiaUFnSUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbkpsWVdOMExXUmhkR1Z3YVdOclpYSmZYM1JoWWkxc2IyOXdYMTlsYm1SY0lseHVJQ0FnSUNBZ0lDQWdJSFJoWWtsdVpHVjRQVndpTUZ3aVhHNGdJQ0FnSUNBZ0lDQWdiMjVHYjJOMWN6MTdkR2hwY3k1b1lXNWtiR1ZHYjJOMWMwVnVaSDFjYmlBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUZ3aWNtVmhZM1JjSWp0Y2JtbHRjRzl5ZENCN1hHNGdJSFZ6WlVac2IyRjBhVzVuTEZ4dUlDQmhjbkp2ZHl4Y2JpQWdiMlptYzJWMExGeHVJQ0JtYkdsd0xGeHVJQ0JoZFhSdlZYQmtZWFJsTEZ4dWZTQm1jbTl0SUZ3aVFHWnNiMkYwYVc1bkxYVnBMM0psWVdOMFhDSTdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ1hDSndjbTl3TFhSNWNHVnpYQ0k3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0J3YjNCd1pYSlFiR0ZqWlcxbGJuUlFiM05wZEdsdmJuTWdQU0JiWEc0Z0lGd2lkRzl3TFhOMFlYSjBYQ0lzWEc0Z0lGd2lkRzl3TFdWdVpGd2lMRnh1SUNCY0ltSnZkSFJ2YlMxemRHRnlkRndpTEZ4dUlDQmNJbUp2ZEhSdmJTMWxibVJjSWl4Y2JpQWdYQ0p5YVdkb2RDMXpkR0Z5ZEZ3aUxGeHVJQ0JjSW5KcFoyaDBMV1Z1WkZ3aUxGeHVJQ0JjSW14bFpuUXRjM1JoY25SY0lpeGNiaUFnWENKc1pXWjBMV1Z1WkZ3aUxGeHVJQ0JjSW5SdmNGd2lMRnh1SUNCY0luSnBaMmgwWENJc1hHNGdJRndpWW05MGRHOXRYQ0lzWEc0Z0lGd2liR1ZtZEZ3aUxGeHVYVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnZDJsMGFFWnNiMkYwYVc1bktFTnZiWEJ2Ym1WdWRDa2dlMXh1SUNCamIyNXpkQ0JYYVhSb1JteHZZWFJwYm1jZ1BTQW9jSEp2Y0hNcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCaGJIUmZjSEp2Y0hNZ1BTQjdYRzRnSUNBZ0lDQXVMaTV3Y205d2N5eGNiaUFnSUNBZ0lIQnZjSEJsY2sxdlpHbG1hV1Z5Y3pvZ2NISnZjSE11Y0c5d2NHVnlUVzlrYVdacFpYSnpJSHg4SUZ0ZExGeHVJQ0FnSUNBZ2NHOXdjR1Z5VUhKdmNITTZJSEJ5YjNCekxuQnZjSEJsY2xCeWIzQnpJSHg4SUh0OUxGeHVJQ0FnSUNBZ2FHbGtaVkJ2Y0hCbGNqcGNiaUFnSUNBZ0lDQWdkSGx3Wlc5bUlIQnliM0J6TG1ocFpHVlFiM0J3WlhJZ1BUMDlJRndpWW05dmJHVmhibHdpSUQ4Z2NISnZjSE11YUdsa1pWQnZjSEJsY2lBNklIUnlkV1VzWEc0Z0lDQWdmVHRjYmlBZ0lDQmpiMjV6ZENCaGNuSnZkMUpsWmlBOUlGSmxZV04wTG5WelpWSmxaaWdwTzF4dUlDQWdJR052Ym5OMElHWnNiMkYwYVc1blVISnZjSE1nUFNCMWMyVkdiRzloZEdsdVp5aDdYRzRnSUNBZ0lDQnZjR1Z1T2lBaFlXeDBYM0J5YjNCekxtaHBaR1ZRYjNCd1pYSXNYRzRnSUNBZ0lDQjNhR2xzWlVWc1pXMWxiblJ6VFc5MWJuUmxaRG9nWVhWMGIxVndaR0YwWlN4Y2JpQWdJQ0FnSUhCc1lXTmxiV1Z1ZERvZ1lXeDBYM0J5YjNCekxuQnZjSEJsY2xCc1lXTmxiV1Z1ZEN4Y2JpQWdJQ0FnSUcxcFpHUnNaWGRoY21VNklGdGNiaUFnSUNBZ0lDQWdabXhwY0NoN0lIQmhaR1JwYm1jNklERTFJSDBwTEZ4dUlDQWdJQ0FnSUNCdlptWnpaWFFvTVRBcExGeHVJQ0FnSUNBZ0lDQmhjbkp2ZHloN0lHVnNaVzFsYm5RNklHRnljbTkzVW1WbUlIMHBMRnh1SUNBZ0lDQWdJQ0F1TGk1aGJIUmZjSEp2Y0hNdWNHOXdjR1Z5VFc5a2FXWnBaWEp6TEZ4dUlDQWdJQ0FnWFN4Y2JpQWdJQ0FnSUM0dUxtRnNkRjl3Y205d2N5NXdiM0J3WlhKUWNtOXdjeXhjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThRMjl0Y0c5dVpXNTBJSHN1TGk1aGJIUmZjSEp2Y0hOOUlIQnZjSEJsY2xCeWIzQnpQWHQ3SUM0dUxtWnNiMkYwYVc1blVISnZjSE1zSUdGeWNtOTNVbVZtSUgxOUlDOCtYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JseHVJQ0JYYVhSb1JteHZZWFJwYm1jdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lIQnZjSEJsY2xCc1lXTmxiV1Z1ZERvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0hCdmNIQmxjbEJzWVdObGJXVnVkRkJ2YzJsMGFXOXVjeWtzWEc0Z0lDQWdjRzl3Y0dWeVRXOWthV1pwWlhKek9pQlFjbTl3Vkhsd1pYTXVZWEp5WVhsUFppaFFjbTl3Vkhsd1pYTXViMkpxWldOMEtTeGNiaUFnSUNCd2IzQndaWEpRY205d2N6b2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDeGNiaUFnSUNCb2FXUmxVRzl3Y0dWeU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdmVHRjYmx4dUlDQnlaWFIxY200Z1YybDBhRVpzYjJGMGFXNW5PMXh1ZlZ4dUlpd2lhVzF3YjNKMElIc2dZMnh6ZUNCOUlHWnliMjBnWENKamJITjRYQ0k3WEc1cGJYQnZjblFnVW1WaFkzUWdabkp2YlNCY0luSmxZV04wWENJN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnWENKd2NtOXdMWFI1Y0dWelhDSTdYRzVwYlhCdmNuUWdleUJHYkc5aGRHbHVaMEZ5Y205M0lIMGdabkp2YlNCY0lrQm1iRzloZEdsdVp5MTFhUzl5WldGamRGd2lPMXh1YVcxd2IzSjBJRlJoWWt4dmIzQWdabkp2YlNCY0lpNHZkR0ZpWDJ4dmIzQmNJanRjYm1sdGNHOXlkQ0JRYjNKMFlXd2dabkp2YlNCY0lpNHZjRzl5ZEdGc1hDSTdYRzVwYlhCdmNuUWdkMmwwYUVac2IyRjBhVzVuSUdaeWIyMGdYQ0l1TDNkcGRHaGZabXh2WVhScGJtZGNJanRjYmx4dUx5OGdSWGh3YjNKMFpXUWdabTl5SUhSbGMzUnBibWNnY0hWeWNHOXpaWE5jYm1WNGNHOXlkQ0JqYkdGemN5QlFiM0J3WlhKRGIyMXdiMjVsYm5RZ1pYaDBaVzVrY3lCU1pXRmpkQzVEYjIxd2IyNWxiblFnZTF4dUlDQnpkR0YwYVdNZ1oyVjBJR1JsWm1GMWJIUlFjbTl3Y3lncElIdGNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnYUdsa1pWQnZjSEJsY2pvZ2RISjFaU3hjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJSEJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JqYkdGemMwNWhiV1U2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdkM0poY0hCbGNrTnNZWE56VG1GdFpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCb2FXUmxVRzl3Y0dWeU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J3YjNCd1pYSkRiMjF3YjI1bGJuUTZJRkJ5YjNCVWVYQmxjeTVsYkdWdFpXNTBMRnh1SUNBZ0lIQnZjSEJsY2tOdmJuUmhhVzVsY2pvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdjRzl3Y0dWeVVISnZjSE02SUZCeWIzQlVlWEJsY3k1dlltcGxZM1FzWEc0Z0lDQWdkR0Z5WjJWMFEyOXRjRzl1Wlc1ME9pQlFjbTl3Vkhsd1pYTXVaV3hsYldWdWRDeGNiaUFnSUNCbGJtRmliR1ZVWVdKTWIyOXdPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCd2IzQndaWEpQYmt0bGVVUnZkMjQ2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lITm9iM2RCY25KdmR6b2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnY0c5eWRHRnNTV1E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdjRzl5ZEdGc1NHOXpkRG9nVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1UyaGhaRzkzVW05dmRDa3NYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lHTnNZWE56VG1GdFpTeGNiaUFnSUNBZ0lIZHlZWEJ3WlhKRGJHRnpjMDVoYldVc1hHNGdJQ0FnSUNCb2FXUmxVRzl3Y0dWeUxGeHVJQ0FnSUNBZ2NHOXdjR1Z5UTI5dGNHOXVaVzUwTEZ4dUlDQWdJQ0FnZEdGeVoyVjBRMjl0Y0c5dVpXNTBMRnh1SUNBZ0lDQWdaVzVoWW14bFZHRmlURzl2Y0N4Y2JpQWdJQ0FnSUhCdmNIQmxjazl1UzJWNVJHOTNiaXhjYmlBZ0lDQWdJSEJ2Y25SaGJFbGtMRnh1SUNBZ0lDQWdjRzl5ZEdGc1NHOXpkQ3hjYmlBZ0lDQWdJSEJ2Y0hCbGNsQnliM0J6TEZ4dUlDQWdJQ0FnYzJodmQwRnljbTkzTEZ4dUlDQWdJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ2JHVjBJSEJ2Y0hCbGNqdGNibHh1SUNBZ0lHbG1JQ2doYUdsa1pWQnZjSEJsY2lrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWTJ4aGMzTmxjeUE5SUdOc2MzZ29YQ0p5WldGamRDMWtZWFJsY0dsamEyVnlMWEJ2Y0hCbGNsd2lMQ0JqYkdGemMwNWhiV1VwTzF4dUlDQWdJQ0FnY0c5d2NHVnlJRDBnS0Z4dUlDQWdJQ0FnSUNBOFZHRmlURzl2Y0NCbGJtRmliR1ZVWVdKTWIyOXdQWHRsYm1GaWJHVlVZV0pNYjI5d2ZUNWNiaUFnSUNBZ0lDQWdJQ0E4WkdsMlhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldZOWUzQnZjSEJsY2xCeWIzQnpMbkpsWm5NdWMyVjBSbXh2WVhScGJtZDlYRzRnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVDE3Y0c5d2NHVnlVSEp2Y0hNdVpteHZZWFJwYm1kVGRIbHNaWE45WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOelpYTjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMWEJzWVdObGJXVnVkRDE3Y0c5d2NHVnlVSEp2Y0hNdWNHeGhZMlZ0Wlc1MGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1TFpYbEViM2R1UFh0d2IzQndaWEpQYmt0bGVVUnZkMjU5WEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNCdmNIQmxja052YlhCdmJtVnVkSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIdHphRzkzUVhKeWIzY2dKaVlnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4Um14dllYUnBibWRCY25KdmQxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxaajE3Y0c5d2NHVnlVSEp2Y0hNdVlYSnliM2RTWldaOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEQxN2NHOXdjR1Z5VUhKdmNITXVZMjl1ZEdWNGRIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hzUFZ3aVkzVnljbVZ1ZEVOdmJHOXlYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKdmEyVlhhV1IwYUQxN01YMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhROWV6aDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnOWV6RTJmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBYdDdJSFJ5WVc1elptOXliVG9nWENKMGNtRnVjMnhoZEdWWktDMHhjSGdwWENJZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p5WldGamRDMWtZWFJsY0dsamEyVnlYMTkwY21saGJtZHNaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0E4TDFSaFlreHZiM0ErWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxuQnZjSEJsY2tOdmJuUmhhVzVsY2lrZ2UxeHVJQ0FnSUNBZ2NHOXdjR1Z5SUQwZ1VtVmhZM1F1WTNKbFlYUmxSV3hsYldWdWRDaDBhR2x6TG5CeWIzQnpMbkJ2Y0hCbGNrTnZiblJoYVc1bGNpd2dlMzBzSUhCdmNIQmxjaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hCdmNuUmhiRWxrSUNZbUlDRm9hV1JsVUc5d2NHVnlLU0I3WEc0Z0lDQWdJQ0J3YjNCd1pYSWdQU0FvWEc0Z0lDQWdJQ0FnSUR4UWIzSjBZV3dnY0c5eWRHRnNTV1E5ZTNCdmNuUmhiRWxrZlNCd2IzSjBZV3hJYjNOMFBYdHdiM0owWVd4SWIzTjBmVDVjYmlBZ0lDQWdJQ0FnSUNCN2NHOXdjR1Z5ZlZ4dUlDQWdJQ0FnSUNBOEwxQnZjblJoYkQ1Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdkM0poY0hCbGNrTnNZWE56WlhNZ1BTQmpiSE40S0Z3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2kxM2NtRndjR1Z5WENJc0lIZHlZWEJ3WlhKRGJHRnpjMDVoYldVcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4U1pXRmpkQzVHY21GbmJXVnVkRDVjYmlBZ0lDQWdJQ0FnUEdScGRpQnlaV1k5ZTNCdmNIQmxjbEJ5YjNCekxuSmxabk11YzJWMFVtVm1aWEpsYm1ObGZTQmpiR0Z6YzA1aGJXVTllM2R5WVhCd1pYSkRiR0Z6YzJWemZUNWNiaUFnSUNBZ0lDQWdJQ0I3ZEdGeVoyVjBRMjl0Y0c5dVpXNTBmVnh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdlM0J2Y0hCbGNuMWNiaUFnSUNBZ0lEd3ZVbVZoWTNRdVJuSmhaMjFsYm5RK1hHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCM2FYUm9SbXh2WVhScGJtY29VRzl3Y0dWeVEyOXRjRzl1Wlc1MEtUdGNiaUlzSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUZ3aWNtVmhZM1JjSWp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0JjSW5CeWIzQXRkSGx3WlhOY0lqdGNibWx0Y0c5eWRDQkRZV3hsYm1SaGNpQm1jbTl0SUZ3aUxpOWpZV3hsYm1SaGNsd2lPMXh1YVcxd2IzSjBJRU5oYkdWdVpHRnlTV052YmlCbWNtOXRJRndpTGk5allXeGxibVJoY2w5cFkyOXVYQ0k3WEc1cGJYQnZjblFnVUc5eWRHRnNJR1p5YjIwZ1hDSXVMM0J2Y25SaGJGd2lPMXh1YVcxd2IzSjBJRkJ2Y0hCbGNrTnZiWEJ2Ym1WdWRDQm1jbTl0SUZ3aUxpOXdiM0J3WlhKZlkyOXRjRzl1Wlc1MFhDSTdYRzVwYlhCdmNuUWdleUJ3YjNCd1pYSlFiR0ZqWlcxbGJuUlFiM05wZEdsdmJuTWdmU0JtY205dElGd2lMaTkzYVhSb1gyWnNiMkYwYVc1blhDSTdYRzVwYlhCdmNuUWdleUJqYkhONElIMGdabkp2YlNCY0ltTnNjM2hjSWp0Y2JtbHRjRzl5ZENCN0lITmxkQ0I5SUdaeWIyMGdYQ0prWVhSbExXWnVjeTl6WlhSY0lqdGNibWx0Y0c5eWRDQjdJSE4wWVhKMFQyWkVZWGtnZlNCbWNtOXRJRndpWkdGMFpTMW1ibk12YzNSaGNuUlBaa1JoZVZ3aU8xeHVhVzF3YjNKMElIc2daVzVrVDJaRVlYa2dmU0JtY205dElGd2laR0YwWlMxbWJuTXZaVzVrVDJaRVlYbGNJanRjYm1sdGNHOXlkQ0I3SUdselZtRnNhV1FnZlNCbWNtOXRJRndpWkdGMFpTMW1ibk12YVhOV1lXeHBaRndpTzF4dWFXMXdiM0owSUh0Y2JpQWdibVYzUkdGMFpTeGNiaUFnYVhORVlYUmxMRnh1SUNCcGMwSmxabTl5WlN4Y2JpQWdhWE5CWm5SbGNpeGNiaUFnYVhORmNYVmhiQ3hjYmlBZ2MyVjBWR2x0WlN4Y2JpQWdaMlYwVTJWamIyNWtjeXhjYmlBZ1oyVjBUV2x1ZFhSbGN5eGNiaUFnWjJWMFNHOTFjbk1zWEc0Z0lHRmtaRVJoZVhNc1hHNGdJR0ZrWkUxdmJuUm9jeXhjYmlBZ1lXUmtWMlZsYTNNc1hHNGdJSE4xWWtSaGVYTXNYRzRnSUhOMVlrMXZiblJvY3l4Y2JpQWdjM1ZpVjJWbGEzTXNYRzRnSUdGa1pGbGxZWEp6TEZ4dUlDQnpkV0paWldGeWN5eGNiaUFnYVhORVlYbEVhWE5oWW14bFpDeGNiaUFnYVhORVlYbEpibEpoYm1kbExGeHVJQ0JuWlhSRlptWmxZM1JwZG1WTmFXNUVZWFJsTEZ4dUlDQm5aWFJGWm1abFkzUnBkbVZOWVhoRVlYUmxMRnh1SUNCd1lYSnpaVVJoZEdVc1hHNGdJSE5oWm1WRVlYUmxSbTl5YldGMExGeHVJQ0J6WVdabFJHRjBaVkpoYm1kbFJtOXliV0YwTEZ4dUlDQm5aWFJJYVdkb2RFeHBaMmgwUkdGNWMwMWhjQ3hjYmlBZ1oyVjBXV1ZoY2l4Y2JpQWdaMlYwVFc5dWRHZ3NYRzRnSUdkbGRGTjBZWEowVDJaWFpXVnJMRnh1SUNCblpYUkZibVJQWmxkbFpXc3NYRzRnSUhKbFoybHpkR1Z5VEc5allXeGxMRnh1SUNCelpYUkVaV1poZFd4MFRHOWpZV3hsTEZ4dUlDQm5aWFJFWldaaGRXeDBURzlqWVd4bExGeHVJQ0JFUlVaQlZVeFVYMWxGUVZKZlNWUkZUVjlPVlUxQ1JWSXNYRzRnSUdselUyRnRaVVJoZVN4Y2JpQWdhWE5OYjI1MGFFUnBjMkZpYkdWa0xGeHVJQ0JwYzFsbFlYSkVhWE5oWW14bFpDeGNiaUFnYzJGbVpVMTFiSFJwY0d4bFJHRjBaWE5HYjNKdFlYUXNYRzRnSUdkbGRFaHZiR2xrWVhselRXRndMRnh1SUNCcGMwUmhkR1ZDWldadmNtVXNYRzU5SUdaeWIyMGdYQ0l1TDJSaGRHVmZkWFJwYkhOY0lqdGNibWx0Y0c5eWRDQlVZV0pNYjI5d0lHWnliMjBnWENJdUwzUmhZbDlzYjI5d1hDSTdYRzVwYlhCdmNuUWdiMjVEYkdsamEwOTFkSE5wWkdVZ1puSnZiU0JjSW5KbFlXTjBMVzl1WTJ4cFkydHZkWFJ6YVdSbFhDSTdYRzVjYm1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnWVhNZ1EyRnNaVzVrWVhKRGIyNTBZV2x1WlhJZ2ZTQm1jbTl0SUZ3aUxpOWpZV3hsYm1SaGNsOWpiMjUwWVdsdVpYSmNJanRjYmx4dVpYaHdiM0owSUhzZ2NtVm5hWE4wWlhKTWIyTmhiR1VzSUhObGRFUmxabUYxYkhSTWIyTmhiR1VzSUdkbGRFUmxabUYxYkhSTWIyTmhiR1VnZlR0Y2JseHVZMjl1YzNRZ2IzVjBjMmxrWlVOc2FXTnJTV2R1YjNKbFEyeGhjM01nUFNCY0luSmxZV04wTFdSaGRHVndhV05yWlhJdGFXZHViM0psTFc5dVkyeHBZMnR2ZFhSemFXUmxYQ0k3WEc1amIyNXpkQ0JYY21Gd2NHVmtRMkZzWlc1a1lYSWdQU0J2YmtOc2FXTnJUM1YwYzJsa1pTaERZV3hsYm1SaGNpazdYRzVjYmk4dklFTnZiWEJoY21WeklHUmhkR1Z6SUhsbFlYSXJiVzl1ZEdnZ1kyOXRZbWx1WVhScGIyNXpYRzVtZFc1amRHbHZiaUJvWVhOUWNtVlRaV3hsWTNScGIyNURhR0Z1WjJWa0tHUmhkR1V4TENCa1lYUmxNaWtnZTF4dUlDQnBaaUFvWkdGMFpURWdKaVlnWkdGMFpUSXBJSHRjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1oyVjBUVzl1ZEdnb1pHRjBaVEVwSUNFOVBTQm5aWFJOYjI1MGFDaGtZWFJsTWlrZ2ZId2daMlYwV1dWaGNpaGtZWFJsTVNrZ0lUMDlJR2RsZEZsbFlYSW9aR0YwWlRJcFhHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCa1lYUmxNU0FoUFQwZ1pHRjBaVEk3WEc1OVhHNWNiaThxS2x4dUlDb2dSMlZ1WlhKaGJDQmtZWFJsY0dsamEyVnlJR052YlhCdmJtVnVkQzVjYmlBcUwxeHVZMjl1YzNRZ1NVNVFWVlJmUlZKU1h6RWdQU0JjSWtSaGRHVWdhVzV3ZFhRZ2JtOTBJSFpoYkdsa0xsd2lPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QkVZWFJsVUdsamEyVnlJR1Y0ZEdWdVpITWdVbVZoWTNRdVEyOXRjRzl1Wlc1MElIdGNiaUFnYzNSaGRHbGpJR2RsZENCa1pXWmhkV3gwVUhKdmNITW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lHRnNiRzkzVTJGdFpVUmhlVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQmtZWFJsUm05eWJXRjBPaUJjSWsxTkwyUmtMM2w1ZVhsY0lpeGNiaUFnSUNBZ0lHUmhkR1ZHYjNKdFlYUkRZV3hsYm1SaGNqb2dYQ0pNVEV4TUlIbDVlWGxjSWl4Y2JpQWdJQ0FnSUc5dVEyaGhibWRsS0NrZ2UzMHNYRzRnSUNBZ0lDQmthWE5oWW14bFpEb2dabUZzYzJVc1hHNGdJQ0FnSUNCa2FYTmhZbXhsWkV0bGVXSnZZWEprVG1GMmFXZGhkR2x2YmpvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0JrY205d1pHOTNiazF2WkdVNklGd2ljMk55YjJ4c1hDSXNYRzRnSUNBZ0lDQnZia1p2WTNWektDa2dlMzBzWEc0Z0lDQWdJQ0J2YmtKc2RYSW9LU0I3ZlN4Y2JpQWdJQ0FnSUc5dVMyVjVSRzkzYmlncElIdDlMRnh1SUNBZ0lDQWdiMjVKYm5CMWRFTnNhV05yS0NrZ2UzMHNYRzRnSUNBZ0lDQnZibE5sYkdWamRDZ3BJSHQ5TEZ4dUlDQWdJQ0FnYjI1RGJHbGphMDkxZEhOcFpHVW9LU0I3ZlN4Y2JpQWdJQ0FnSUc5dVRXOXVkR2hEYUdGdVoyVW9LU0I3ZlN4Y2JpQWdJQ0FnSUc5dVEyRnNaVzVrWVhKUGNHVnVLQ2tnZTMwc1hHNGdJQ0FnSUNCdmJrTmhiR1Z1WkdGeVEyeHZjMlVvS1NCN2ZTeGNiaUFnSUNBZ0lIQnlaWFpsYm5SUGNHVnVUMjVHYjJOMWN6b2dabUZzYzJVc1hHNGdJQ0FnSUNCdmJsbGxZWEpEYUdGdVoyVW9LU0I3ZlN4Y2JpQWdJQ0FnSUc5dVNXNXdkWFJGY25KdmNpZ3BJSHQ5TEZ4dUlDQWdJQ0FnYlc5dWRHaHpVMmh2ZDI0NklERXNYRzRnSUNBZ0lDQnlaV0ZrVDI1c2VUb2dabUZzYzJVc1hHNGdJQ0FnSUNCM2FYUm9VRzl5ZEdGc09pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUhObGJHVmpkSE5FYVhOaFlteGxaRVJoZVhOSmJsSmhibWRsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJSE5vYjNWc1pFTnNiM05sVDI1VFpXeGxZM1E2SUhSeWRXVXNYRzRnSUNBZ0lDQnphRzkzVkdsdFpWTmxiR1ZqZERvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0J6YUc5M1ZHbHRaVWx1Y0hWME9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUhOb2IzZFFjbVYyYVc5MWMwMXZiblJvY3pvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0J6YUc5M1RXOXVkR2haWldGeVVHbGphMlZ5T2lCbVlXeHpaU3hjYmlBZ0lDQWdJSE5vYjNkR2RXeHNUVzl1ZEdoWlpXRnlVR2xqYTJWeU9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUhOb2IzZFVkMjlEYjJ4MWJXNU5iMjUwYUZsbFlYSlFhV05yWlhJNklHWmhiSE5sTEZ4dUlDQWdJQ0FnYzJodmQwWnZkWEpEYjJ4MWJXNU5iMjUwYUZsbFlYSlFhV05yWlhJNklHWmhiSE5sTEZ4dUlDQWdJQ0FnYzJodmQxbGxZWEpRYVdOclpYSTZJR1poYkhObExGeHVJQ0FnSUNBZ2MyaHZkMUYxWVhKMFpYSlpaV0Z5VUdsamEyVnlPaUJtWVd4elpTeGNiaUFnSUNBZ0lITm9iM2RYWldWclVHbGphMlZ5T2lCbVlXeHpaU3hjYmlBZ0lDQWdJSE4wY21samRGQmhjbk5wYm1jNklHWmhiSE5sTEZ4dUlDQWdJQ0FnYzNkaGNGSmhibWRsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJSFJwYldWSmJuUmxjblpoYkhNNklETXdMRnh1SUNBZ0lDQWdkR2x0WlVOaGNIUnBiMjQ2SUZ3aVZHbHRaVndpTEZ4dUlDQWdJQ0FnY0hKbGRtbHZkWE5OYjI1MGFFRnlhV0ZNWVdKbGJEb2dYQ0pRY21WMmFXOTFjeUJOYjI1MGFGd2lMRnh1SUNBZ0lDQWdjSEpsZG1sdmRYTk5iMjUwYUVKMWRIUnZia3hoWW1Wc09pQmNJbEJ5WlhacGIzVnpJRTF2Ym5Sb1hDSXNYRzRnSUNBZ0lDQnVaWGgwVFc5dWRHaEJjbWxoVEdGaVpXdzZJRndpVG1WNGRDQk5iMjUwYUZ3aUxGeHVJQ0FnSUNBZ2JtVjRkRTF2Ym5Sb1FuVjBkRzl1VEdGaVpXdzZJRndpVG1WNGRDQk5iMjUwYUZ3aUxGeHVJQ0FnSUNBZ2NISmxkbWx2ZFhOWlpXRnlRWEpwWVV4aFltVnNPaUJjSWxCeVpYWnBiM1Z6SUZsbFlYSmNJaXhjYmlBZ0lDQWdJSEJ5WlhacGIzVnpXV1ZoY2tKMWRIUnZia3hoWW1Wc09pQmNJbEJ5WlhacGIzVnpJRmxsWVhKY0lpeGNiaUFnSUNBZ0lHNWxlSFJaWldGeVFYSnBZVXhoWW1Wc09pQmNJazVsZUhRZ1dXVmhjbHdpTEZ4dUlDQWdJQ0FnYm1WNGRGbGxZWEpDZFhSMGIyNU1ZV0psYkRvZ1hDSk9aWGgwSUZsbFlYSmNJaXhjYmlBZ0lDQWdJSFJwYldWSmJuQjFkRXhoWW1Wc09pQmNJbFJwYldWY0lpeGNiaUFnSUNBZ0lHVnVZV0pzWlZSaFlreHZiM0E2SUhSeWRXVXNYRzRnSUNBZ0lDQjVaV0Z5U1hSbGJVNTFiV0psY2pvZ1JFVkdRVlZNVkY5WlJVRlNYMGxVUlUxZlRsVk5Ra1ZTTEZ4dUlDQWdJQ0FnWm05amRYTlRaV3hsWTNSbFpFMXZiblJvT2lCbVlXeHpaU3hjYmlBZ0lDQWdJSE5vYjNkUWIzQndaWEpCY25KdmR6b2dkSEoxWlN4Y2JpQWdJQ0FnSUdWNFkyeDFaR1ZUWTNKdmJHeGlZWEk2SUhSeWRXVXNYRzRnSUNBZ0lDQmpkWE4wYjIxVWFXMWxTVzV3ZFhRNklHNTFiR3dzWEc0Z0lDQWdJQ0JqWVd4bGJtUmhjbE4wWVhKMFJHRjVPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0IwYjJkbmJHVkRZV3hsYm1SaGNrOXVTV052YmtOc2FXTnJPaUJtWVd4elpTeGNiaUFnSUNBZ0lIVnpaVkJ2YVc1MFpYSkZkbVZ1ZERvZ1ptRnNjMlVzWEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJ3Y205d1ZIbHdaWE1nUFNCN1hHNGdJQ0FnWVdScWRYTjBSR0YwWlU5dVEyaGhibWRsT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQmhiR3h2ZDFOaGJXVkVZWGs2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lHRnlhV0ZFWlhOamNtbGlaV1JDZVRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JoY21saFNXNTJZV3hwWkRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JoY21saFRHRmlaV3hEYkc5elpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCaGNtbGhUR0ZpWld4c1pXUkNlVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQmhjbWxoVW1WeGRXbHlaV1E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZWFYwYjBOdmJYQnNaWFJsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR0YxZEc5R2IyTjFjem9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ1kyRnNaVzVrWVhKRGJHRnpjMDVoYldVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnWTJGc1pXNWtZWEpEYjI1MFlXbHVaWEk2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lHTm9hV3hrY21WdU9pQlFjbTl3Vkhsd1pYTXVibTlrWlN4Y2JpQWdJQ0JqYUc5dmMyVkVZWGxCY21saFRHRmlaV3hRY21WbWFYZzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ1kyeHZjMlZQYmxOamNtOXNiRG9nVUhKdmNGUjVjR1Z6TG05dVpVOW1WSGx3WlNoYlVISnZjRlI1Y0dWekxtSnZiMndzSUZCeWIzQlVlWEJsY3k1bWRXNWpYU2tzWEc0Z0lDQWdZMnhoYzNOT1lXMWxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHTjFjM1J2YlVsdWNIVjBPaUJRY205d1ZIbHdaWE11Wld4bGJXVnVkQ3hjYmlBZ0lDQmpkWE4wYjIxSmJuQjFkRkpsWmpvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JqWVd4bGJtUmhjbE4wWVhKMFJHRjVPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnlaV0ZqZEM5dWJ5MTFiblZ6WldRdGNISnZjQzEwZVhCbGMxeHVJQ0FnSUdSaGRHVkdiM0p0WVhRNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMUJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NJRkJ5YjNCVWVYQmxjeTVoY25KaGVWMHBMRnh1SUNBZ0lHUmhkR1ZHYjNKdFlYUkRZV3hsYm1SaGNqb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCa1lYbERiR0Z6YzA1aGJXVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhkbFpXdEVZWGxEYkdGemMwNWhiV1U2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lHUnBjMkZpYkdWa1JHRjVRWEpwWVV4aFltVnNVSEpsWm1sNE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUcxdmJuUm9RMnhoYzNOT1lXMWxPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCMGFXMWxRMnhoYzNOT1lXMWxPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCa2FYTmhZbXhsWkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdaR2x6WVdKc1pXUkxaWGxpYjJGeVpFNWhkbWxuWVhScGIyNDZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUdSeWIzQmtiM2R1VFc5a1pUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGdGNJbk5qY205c2JGd2lMQ0JjSW5ObGJHVmpkRndpWFNrdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCbGJtUkVZWFJsT2lCUWNtOXdWSGx3WlhNdWFXNXpkR0Z1WTJWUFppaEVZWFJsS1N4Y2JpQWdJQ0JsZUdOc2RXUmxSR0YwWlhNNklGQnliM0JVZVhCbGN5NWhjbkpoZVU5bUtGeHVJQ0FnSUNBZ1VISnZjRlI1Y0dWekxtOXVaVTltVkhsd1pTaGJYRzRnSUNBZ0lDQWdJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMRnh1SUNBZ0lDQWdJQ0JRY205d1ZIbHdaWE11YzJoaGNHVW9lMXh1SUNBZ0lDQWdJQ0FnSUdSaGRHVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQmRLU3hjYmlBZ0lDQXBMRnh1SUNBZ0lHVjRZMngxWkdWRVlYUmxTVzUwWlhKMllXeHpPaUJRY205d1ZIbHdaWE11WVhKeVlYbFBaaWhjYmlBZ0lDQWdJRkJ5YjNCVWVYQmxjeTV6YUdGd1pTaDdYRzRnSUNBZ0lDQWdJSE4wWVhKME9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNBZ0lDQWdaVzVrT2lCUWNtOXdWSGx3WlhNdWFXNXpkR0Z1WTJWUFppaEVZWFJsS1N4Y2JpQWdJQ0FnSUgwcExGeHVJQ0FnSUNrc1hHNGdJQ0FnWm1sc2RHVnlSR0YwWlRvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdabWw0WldSSVpXbG5hSFE2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lHWnZjbTA2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdabTl5YldGMFYyVmxhMDUxYldKbGNqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYUdsbmFHeHBaMmgwUkdGMFpYTTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVTeGNiaUFnSUNCb2IyeHBaR0Y1Y3pvZ1VISnZjRlI1Y0dWekxtRnljbUY1TEZ4dUlDQWdJR2xrT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR2x1WTJ4MVpHVkVZWFJsY3pvZ1VISnZjRlI1Y0dWekxtRnljbUY1TEZ4dUlDQWdJR2x1WTJ4MVpHVkVZWFJsU1c1MFpYSjJZV3h6T2lCUWNtOXdWSGx3WlhNdVlYSnlZWGtzWEc0Z0lDQWdhVzVqYkhWa1pWUnBiV1Z6T2lCUWNtOXdWSGx3WlhNdVlYSnlZWGtzWEc0Z0lDQWdhVzVxWldOMFZHbHRaWE02SUZCeWIzQlVlWEJsY3k1aGNuSmhlU3hjYmlBZ0lDQnBibXhwYm1VNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJR2x6UTJ4bFlYSmhZbXhsT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQjBiMmRuYkdWRFlXeGxibVJoY2s5dVNXTnZia05zYVdOck9pQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRjYmlBZ0lDQWdJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUNBZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdYU2tzWEc0Z0lDQWdjMmh2ZDBsamIyNDZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUdsamIyNDZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFpsUjVjR1VvVzFCeWIzQlVlWEJsY3k1emRISnBibWNzSUZCeWIzQlVlWEJsY3k1dWIyUmxYU2tzWEc0Z0lDQWdZMkZzWlc1a1lYSkpZMjl1UTJ4aGMzTnVZVzFsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR3h2WTJGc1pUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiWEc0Z0lDQWdJQ0JRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk5vWVhCbEtIc2diRzlqWVd4bE9pQlFjbTl3Vkhsd1pYTXViMkpxWldOMElIMHBMRnh1SUNBZ0lGMHBMRnh1SUNBZ0lHMWhlRVJoZEdVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUcxcGJrUmhkR1U2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTEZ4dUlDQWdJRzF2Ym5Sb2MxTm9iM2R1T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQWdJRzVoYldVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnYjI1Q2JIVnlPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCdmJrTm9ZVzVuWlRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0J2YmxObGJHVmpkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2IyNVhaV1ZyVTJWc1pXTjBPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCdmJrTnNhV05yVDNWMGMybGtaVG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2IyNURhR0Z1WjJWU1lYYzZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUc5dVJtOWpkWE02SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lHOXVTVzV3ZFhSRGJHbGphem9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2IyNUxaWGxFYjNkdU9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J2YmsxdmJuUm9RMmhoYm1kbE9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J2YmxsbFlYSkRhR0Z1WjJVNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzl1U1c1d2RYUkZjbkp2Y2pvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdiM0JsYmpvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdiMjVEWVd4bGJtUmhjazl3Wlc0NklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzl1UTJGc1pXNWtZWEpEYkc5elpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYjNCbGJsUnZSR0YwWlRvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrc1hHNGdJQ0FnY0dWbGEwNWxlSFJOYjI1MGFEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnY0d4aFkyVm9iMnhrWlhKVVpYaDBPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lIQnZjSEJsY2tOdmJuUmhhVzVsY2pvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdjRzl3Y0dWeVEyeGhjM05PWVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxDQXZMeUE4VUc5d2NHVnlRMjl0Y0c5dVpXNTBMejRnY0hKdmNITmNiaUFnSUNCd2IzQndaWEpOYjJScFptbGxjbk02SUZCeWIzQlVlWEJsY3k1aGNuSmhlVTltS0ZCeWIzQlVlWEJsY3k1dlltcGxZM1FwTENBdkx5QThVRzl3Y0dWeVEyOXRjRzl1Wlc1MEx6NGdjSEp2Y0hOY2JpQWdJQ0J3YjNCd1pYSlFiR0ZqWlcxbGJuUTZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFppaHdiM0J3WlhKUWJHRmpaVzFsYm5SUWIzTnBkR2x2Ym5NcExDQXZMeUE4VUc5d2NHVnlRMjl0Y0c5dVpXNTBMejRnY0hKdmNITmNiaUFnSUNCd2IzQndaWEpRY205d2N6b2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDeGNiaUFnSUNCd2NtVjJaVzUwVDNCbGJrOXVSbTlqZFhNNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSEpsWVdSUGJteDVPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCeVpYRjFhWEpsWkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMk55YjJ4c1lXSnNaVmxsWVhKRWNtOXdaRzkzYmpvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMk55YjJ4c1lXSnNaVTF2Ym5Sb1dXVmhja1J5YjNCa2IzZHVPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCelpXeGxZM1JsWkRvZ1VISnZjRlI1Y0dWekxtbHVjM1JoYm1ObFQyWW9SR0YwWlNrc1hHNGdJQ0FnYzJWc1pXTjBjMFZ1WkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMlZzWldOMGMxTjBZWEowT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnpaV3hsWTNSelVtRnVaMlU2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITmxiR1ZqZEhORWFYTmhZbXhsWkVSaGVYTkpibEpoYm1kbE9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6Wld4bFkzUnpUWFZzZEdsd2JHVTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUhObGJHVmpkR1ZrUkdGMFpYTTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVVOW1LRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0VSaGRHVXBLU3hjYmlBZ0lDQnphRzkzVFc5dWRHaEVjbTl3Wkc5M2Jqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzJodmQxQnlaWFpwYjNWelRXOXVkR2h6T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnphRzkzVFc5dWRHaFpaV0Z5UkhKdmNHUnZkMjQ2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITm9iM2RYWldWclRuVnRZbVZ5Y3pvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMmh2ZDFsbFlYSkVjbTl3Wkc5M2Jqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzNSeWFXTjBVR0Z5YzJsdVp6b2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzNkaGNGSmhibWRsT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQm1iM0pqWlZOb2IzZE5iMjUwYUU1aGRtbG5ZWFJwYjI0NklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSE5vYjNkRWFYTmhZbXhsWkUxdmJuUm9UbUYyYVdkaGRHbHZiam9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2MzUmhjblJFWVhSbE9pQlFjbTl3Vkhsd1pYTXVhVzV6ZEdGdVkyVlBaaWhFWVhSbEtTeGNiaUFnSUNCemRHRnlkRTl3Wlc0NklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSFJoWWtsdVpHVjRPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lIUnBiV1ZEWVhCMGFXOXVPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lIUnBkR3hsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJSFJ2WkdGNVFuVjBkRzl1T2lCUWNtOXdWSGx3WlhNdWJtOWtaU3hjYmlBZ0lDQjFjMlZYWldWclpHRjVjMU5vYjNKME9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JtYjNKdFlYUlhaV1ZyUkdGNU9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0IyWVd4MVpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCM1pXVnJUR0ZpWld3NklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnZDJsMGFGQnZjblJoYkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjRzl5ZEdGc1NXUTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2NHOXlkR0ZzU0c5emREb2dVSEp2Y0ZSNWNHVnpMbWx1YzNSaGJtTmxUMllvVTJoaFpHOTNVbTl2ZENrc1hHNGdJQ0FnZVdWaGNrbDBaVzFPZFcxaVpYSTZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUNBZ2VXVmhja1J5YjNCa2IzZHVTWFJsYlU1MWJXSmxjam9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ0lDQnphRzkxYkdSRGJHOXpaVTl1VTJWc1pXTjBPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCemFHOTNWR2x0WlVsdWNIVjBPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCemFHOTNUVzl1ZEdoWlpXRnlVR2xqYTJWeU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6YUc5M1JuVnNiRTF2Ym5Sb1dXVmhjbEJwWTJ0bGNqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYzJodmQxUjNiME52YkhWdGJrMXZiblJvV1dWaGNsQnBZMnRsY2pvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMmh2ZDBadmRYSkRiMngxYlc1TmIyNTBhRmxsWVhKUWFXTnJaWEk2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITm9iM2RaWldGeVVHbGphMlZ5T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnphRzkzVVhWaGNuUmxjbGxsWVhKUWFXTnJaWEk2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lITm9iM2RYWldWclVHbGphMlZ5T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnphRzkzUkdGMFpWTmxiR1ZqZERvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdjMmh2ZDFScGJXVlRaV3hsWTNRNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSE5vYjNkVWFXMWxVMlZzWldOMFQyNXNlVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2RHbHRaVVp2Y20xaGREb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCMGFXMWxTVzUwWlhKMllXeHpPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lHMXBibFJwYldVNklGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRVJoZEdVcExGeHVJQ0FnSUcxaGVGUnBiV1U2SUZCeWIzQlVlWEJsY3k1cGJuTjBZVzVqWlU5bUtFUmhkR1VwTEZ4dUlDQWdJR1Y0WTJ4MVpHVlVhVzFsY3pvZ1VISnZjRlI1Y0dWekxtRnljbUY1TEZ4dUlDQWdJR1pwYkhSbGNsUnBiV1U2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lIVnpaVk5vYjNKMFRXOXVkR2hKYmtSeWIzQmtiM2R1T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQmpiR1ZoY2tKMWRIUnZibFJwZEd4bE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdOc1pXRnlRblYwZEc5dVEyeGhjM05PWVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUhCeVpYWnBiM1Z6VFc5dWRHaEJjbWxoVEdGaVpXdzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2NISmxkbWx2ZFhOTmIyNTBhRUoxZEhSdmJreGhZbVZzT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdGNiaUFnSUNBZ0lGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnSUNCUWNtOXdWSGx3WlhNdWJtOWtaU3hjYmlBZ0lDQmRLU3hjYmlBZ0lDQnVaWGgwVFc5dWRHaEJjbWxoVEdGaVpXdzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2JtVjRkRTF2Ym5Sb1FuVjBkRzl1VEdGaVpXdzZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFpsUjVjR1VvVzF4dUlDQWdJQ0FnVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJRkJ5YjNCVWVYQmxjeTV1YjJSbExGeHVJQ0FnSUYwcExGeHVJQ0FnSUhCeVpYWnBiM1Z6V1dWaGNrRnlhV0ZNWVdKbGJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCd2NtVjJhVzkxYzFsbFlYSkNkWFIwYjI1TVlXSmxiRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQnVaWGgwV1dWaGNrRnlhV0ZNWVdKbGJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCdVpYaDBXV1ZoY2tKMWRIUnZia3hoWW1Wc09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUhScGJXVkpibkIxZEV4aFltVnNPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lISmxibVJsY2tOMWMzUnZiVWhsWVdSbGNqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnY21WdVpHVnlSR0Y1UTI5dWRHVnVkSE02SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lISmxibVJsY2sxdmJuUm9RMjl1ZEdWdWREb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnY21WdVpHVnlVWFZoY25SbGNrTnZiblJsYm5RNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJSEpsYm1SbGNsbGxZWEpEYjI1MFpXNTBPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCM2NtRndjR1Z5UTJ4aGMzTk9ZVzFsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR1p2WTNWelUyVnNaV04wWldSTmIyNTBhRG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2IyNUVZWGxOYjNWelpVVnVkR1Z5T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQnZiazF2Ym5Sb1RXOTFjMlZNWldGMlpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYjI1WlpXRnlUVzkxYzJWRmJuUmxjam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2IyNVpaV0Z5VFc5MWMyVk1aV0YyWlRvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdjMmh2ZDFCdmNIQmxja0Z5Y205M09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JsZUdOc2RXUmxVMk55YjJ4c1ltRnlPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCbGJtRmliR1ZVWVdKTWIyOXdPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCamRYTjBiMjFVYVcxbFNXNXdkWFE2SUZCeWIzQlVlWEJsY3k1bGJHVnRaVzUwTEZ4dUlDQWdJSGRsWld0QmNtbGhUR0ZpWld4UWNtVm1hWGc2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdiVzl1ZEdoQmNtbGhUR0ZpWld4UWNtVm1hWGc2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdkWE5sVUc5cGJuUmxja1YyWlc1ME9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0I1WldGeVEyeGhjM05PWVcxbE9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdmVHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3Y205d2N5a2dlMXh1SUNBZ0lITjFjR1Z5S0hCeWIzQnpLVHRjYmlBZ0lDQjBhR2x6TG5OMFlYUmxJRDBnZEdocGN5NWpZV3hqU1c1cGRHbGhiRk4wWVhSbEtDazdYRzRnSUNBZ2RHaHBjeTV3Y21WMlpXNTBSbTlqZFhOVWFXMWxiM1YwSUQwZ2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUdOdmJYQnZibVZ1ZEVScFpFMXZkVzUwS0NrZ2UxeHVJQ0FnSUhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpYzJOeWIyeHNYQ0lzSUhSb2FYTXViMjVUWTNKdmJHd3NJSFJ5ZFdVcE8xeHVJQ0I5WEc1Y2JpQWdZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxLSEJ5WlhaUWNtOXdjeXdnY0hKbGRsTjBZWFJsS1NCN1hHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ2NISmxkbEJ5YjNCekxtbHViR2x1WlNBbUpseHVJQ0FnSUNBZ2FHRnpVSEpsVTJWc1pXTjBhVzl1UTJoaGJtZGxaQ2h3Y21WMlVISnZjSE11YzJWc1pXTjBaV1FzSUhSb2FYTXVjSEp2Y0hNdWMyVnNaV04wWldRcFhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbk5sZEZCeVpWTmxiR1ZqZEdsdmJpaDBhR2x6TG5CeWIzQnpMbk5sYkdWamRHVmtLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaUzV0YjI1MGFGTmxiR1ZqZEdWa1NXNGdJVDA5SUhWdVpHVm1hVzVsWkNBbUpseHVJQ0FnSUNBZ2NISmxkbEJ5YjNCekxtMXZiblJvYzFOb2IzZHVJQ0U5UFNCMGFHbHpMbkJ5YjNCekxtMXZiblJvYzFOb2IzZHVYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ2JXOXVkR2hUWld4bFkzUmxaRWx1T2lBd0lIMHBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jSEpsZGxCeWIzQnpMbWhwWjJoc2FXZG9kRVJoZEdWeklDRTlQU0IwYUdsekxuQnliM0J6TG1ocFoyaHNhV2RvZEVSaGRHVnpLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIdGNiaUFnSUNBZ0lDQWdhR2xuYUd4cFoyaDBSR0YwWlhNNklHZGxkRWhwWjJoMFRHbG5hSFJFWVhselRXRndLSFJvYVhNdWNISnZjSE11YUdsbmFHeHBaMmgwUkdGMFpYTXBMRnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0Z3Y21WMlUzUmhkR1V1Wm05amRYTmxaQ0FtSmx4dUlDQWdJQ0FnSVdselJYRjFZV3dvY0hKbGRsQnliM0J6TG5ObGJHVmpkR1ZrTENCMGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEdWa0tWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV6WlhSVGRHRjBaU2g3SUdsdWNIVjBWbUZzZFdVNklHNTFiR3dnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIQnlaWFpUZEdGMFpTNXZjR1Z1SUNFOVBTQjBhR2x6TG5OMFlYUmxMbTl3Wlc0cElIdGNiaUFnSUNBZ0lHbG1JQ2h3Y21WMlUzUmhkR1V1YjNCbGJpQTlQVDBnWm1Gc2MyVWdKaVlnZEdocGN5NXpkR0YwWlM1dmNHVnVJRDA5UFNCMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNURZV3hsYm1SaGNrOXdaVzRvS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSEJ5WlhaVGRHRjBaUzV2Y0dWdUlEMDlQU0IwY25WbElDWW1JSFJvYVhNdWMzUmhkR1V1YjNCbGJpQTlQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJrTmhiR1Z1WkdGeVEyeHZjMlVvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCamIyMXdiMjVsYm5SWGFXeHNWVzV0YjNWdWRDZ3BJSHRjYmlBZ0lDQjBhR2x6TG1Oc1pXRnlVSEpsZG1WdWRFWnZZM1Z6VkdsdFpXOTFkQ2dwTzF4dUlDQWdJSGRwYm1SdmR5NXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLRndpYzJOeWIyeHNYQ0lzSUhSb2FYTXViMjVUWTNKdmJHd3NJSFJ5ZFdVcE8xeHVJQ0I5WEc1Y2JpQWdaMlYwVUhKbFUyVnNaV04wYVc5dUlEMGdLQ2tnUFQ1Y2JpQWdJQ0IwYUdsekxuQnliM0J6TG05d1pXNVViMFJoZEdWY2JpQWdJQ0FnSUQ4Z2RHaHBjeTV3Y205d2N5NXZjR1Z1Vkc5RVlYUmxYRzRnSUNBZ0lDQTZJSFJvYVhNdWNISnZjSE11YzJWc1pXTjBjMFZ1WkNBbUppQjBhR2x6TG5CeWIzQnpMbk4wWVhKMFJHRjBaVnh1SUNBZ0lDQWdJQ0EvSUhSb2FYTXVjSEp2Y0hNdWMzUmhjblJFWVhSbFhHNGdJQ0FnSUNBZ0lEb2dkR2hwY3k1d2NtOXdjeTV6Wld4bFkzUnpVM1JoY25RZ0ppWWdkR2hwY3k1d2NtOXdjeTVsYm1SRVlYUmxYRzRnSUNBZ0lDQWdJQ0FnUHlCMGFHbHpMbkJ5YjNCekxtVnVaRVJoZEdWY2JpQWdJQ0FnSUNBZ0lDQTZJRzVsZDBSaGRHVW9LVHRjYmx4dUlDQXZMeUJEYjI1MlpYSjBJSFJvWlNCa1lYUmxJR1p5YjIwZ2MzUnlhVzVuSUdadmNtMWhkQ0IwYnlCemRHRnVaR0Z5WkNCRVlYUmxJR1p2Y20xaGRGeHVJQ0J0YjJScFpubEliMnhwWkdGNWN5QTlJQ2dwSUQwK1hHNGdJQ0FnZEdocGN5NXdjbTl3Y3k1b2IyeHBaR0Y1Y3o4dWNtVmtkV05sS0NoaFkyTjFiWFZzWVhSdmNpd2dhRzlzYVdSaGVTa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdaR0YwWlNBOUlHNWxkeUJFWVhSbEtHaHZiR2xrWVhrdVpHRjBaU2s3WEc0Z0lDQWdJQ0JwWmlBb0lXbHpWbUZzYVdRb1pHRjBaU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGalkzVnRkV3hoZEc5eU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1d5NHVMbUZqWTNWdGRXeGhkRzl5TENCN0lDNHVMbWh2Ykdsa1lYa3NJR1JoZEdVZ2ZWMDdYRzRnSUNBZ2ZTd2dXMTBwTzF4dVhHNGdJR05oYkdOSmJtbDBhV0ZzVTNSaGRHVWdQU0FvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnWkdWbVlYVnNkRkJ5WlZObGJHVmpkR2x2YmlBOUlIUm9hWE11WjJWMFVISmxVMlZzWldOMGFXOXVLQ2s3WEc0Z0lDQWdZMjl1YzNRZ2JXbHVSR0YwWlNBOUlHZGxkRVZtWm1WamRHbDJaVTFwYmtSaGRHVW9kR2hwY3k1d2NtOXdjeWs3WEc0Z0lDQWdZMjl1YzNRZ2JXRjRSR0YwWlNBOUlHZGxkRVZtWm1WamRHbDJaVTFoZUVSaGRHVW9kR2hwY3k1d2NtOXdjeWs3WEc0Z0lDQWdZMjl1YzNRZ1ltOTFibVJsWkZCeVpWTmxiR1ZqZEdsdmJpQTlYRzRnSUNBZ0lDQnRhVzVFWVhSbElDWW1JR2x6UW1WbWIzSmxLR1JsWm1GMWJIUlFjbVZUWld4bFkzUnBiMjRzSUhOMFlYSjBUMlpFWVhrb2JXbHVSR0YwWlNrcFhHNGdJQ0FnSUNBZ0lEOGdiV2x1UkdGMFpWeHVJQ0FnSUNBZ0lDQTZJRzFoZUVSaGRHVWdKaVlnYVhOQlpuUmxjaWhrWldaaGRXeDBVSEpsVTJWc1pXTjBhVzl1TENCbGJtUlBaa1JoZVNodFlYaEVZWFJsS1NsY2JpQWdJQ0FnSUNBZ0lDQS9JRzFoZUVSaGRHVmNiaUFnSUNBZ0lDQWdJQ0E2SUdSbFptRjFiSFJRY21WVFpXeGxZM1JwYjI0N1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJRzl3Wlc0NklIUm9hWE11Y0hKdmNITXVjM1JoY25SUGNHVnVJSHg4SUdaaGJITmxMRnh1SUNBZ0lDQWdjSEpsZG1WdWRFWnZZM1Z6T2lCbVlXeHpaU3hjYmlBZ0lDQWdJSEJ5WlZObGJHVmpkR2x2YmpwY2JpQWdJQ0FnSUNBZ0tIUm9hWE11Y0hKdmNITXVjMlZzWldOMGMxSmhibWRsWEc0Z0lDQWdJQ0FnSUNBZ1B5QjBhR2x6TG5CeWIzQnpMbk4wWVhKMFJHRjBaVnh1SUNBZ0lDQWdJQ0FnSURvZ2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSbFpDa2dQejhnWW05MWJtUmxaRkJ5WlZObGJHVmpkR2x2Yml4Y2JpQWdJQ0FnSUM4dklIUnlZVzV6Wm05eWJXbHVaeUJvYVdkb2JHbG5hSFJsWkNCa1lYbHpJQ2h3WlhKb1lYQnpJRzVsYzNSbFpDQmhjbkpoZVNsY2JpQWdJQ0FnSUM4dklIUnZJR1pzWVhRZ1RXRndJR1p2Y2lCbVlYTjBaWElnWVdOalpYTnpJR2x1SUdSaGVTNXFjM2hjYmlBZ0lDQWdJR2hwWjJoc2FXZG9kRVJoZEdWek9pQm5aWFJJYVdkb2RFeHBaMmgwUkdGNWMwMWhjQ2gwYUdsekxuQnliM0J6TG1ocFoyaHNhV2RvZEVSaGRHVnpLU3hjYmlBZ0lDQWdJR1p2WTNWelpXUTZJR1poYkhObExGeHVJQ0FnSUNBZ0x5OGdkWE5sWkNCMGJ5Qm1iMk4xY3lCa1lYa2dhVzRnYVc1c2FXNWxJSFpsY25OcGIyNGdZV1owWlhJZ2JXOXVkR2dnYUdGeklHTm9ZVzVuWldRc0lHSjFkQ0J1YjNRZ2IyNWNiaUFnSUNBZ0lDOHZJR2x1YVhScFlXd2djbVZ1WkdWeVhHNGdJQ0FnSUNCemFHOTFiR1JHYjJOMWMwUmhlVWx1YkdsdVpUb2dabUZzYzJVc1hHNGdJQ0FnSUNCcGMxSmxibVJsY2tGeWFXRk1hWFpsVFdWemMyRm5aVG9nWm1Gc2MyVXNYRzRnSUNBZ2ZUdGNiaUFnZlR0Y2JseHVJQ0JqYkdWaGNsQnlaWFpsYm5SR2IyTjFjMVJwYldWdmRYUWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNISmxkbVZ1ZEVadlkzVnpWR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdZMnhsWVhKVWFXMWxiM1YwS0hSb2FYTXVjSEpsZG1WdWRFWnZZM1Z6VkdsdFpXOTFkQ2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUhObGRFWnZZM1Z6SUQwZ0tDa2dQVDRnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbWx1Y0hWMElDWW1JSFJvYVhNdWFXNXdkWFF1Wm05amRYTXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWFXNXdkWFF1Wm05amRYTW9leUJ3Y21WMlpXNTBVMk55YjJ4c09pQjBjblZsSUgwcE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQnpaWFJDYkhWeUlEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1sdWNIVjBJQ1ltSUhSb2FYTXVhVzV3ZFhRdVlteDFjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NXBibkIxZEM1aWJIVnlLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1allXNWpaV3hHYjJOMWMwbHVjSFYwS0NrN1hHNGdJSDA3WEc1Y2JpQWdjMlYwVDNCbGJpQTlJQ2h2Y0dWdUxDQnphMmx3VTJWMFFteDFjaUE5SUdaaGJITmxLU0E5UGlCN1hHNGdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaGNiaUFnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdiM0JsYmpvZ2IzQmxiaXhjYmlBZ0lDQWdJQ0FnY0hKbFUyVnNaV04wYVc5dU9seHVJQ0FnSUNBZ0lDQWdJRzl3Wlc0Z0ppWWdkR2hwY3k1emRHRjBaUzV2Y0dWdVhHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUhSb2FYTXVjM1JoZEdVdWNISmxVMlZzWldOMGFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNBNklIUm9hWE11WTJGc1kwbHVhWFJwWVd4VGRHRjBaU2dwTG5CeVpWTmxiR1ZqZEdsdmJpeGNiaUFnSUNBZ0lDQWdiR0Z6ZEZCeVpWTmxiR1ZqZEVOb1lXNW5aVG9nVUZKRlUwVk1SVU5VWDBOSVFVNUhSVjlXU1VGZlRrRldTVWRCVkVVc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9JVzl3Wlc0cElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0hCeVpYWXBJRDArSUNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdadlkzVnpaV1E2SUhOcmFYQlRaWFJDYkhWeUlEOGdjSEpsZGk1bWIyTjFjMlZrSURvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSVhOcmFYQlRaWFJDYkhWeUlDWW1JSFJvYVhNdWMyVjBRbXgxY2lncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCcGJuQjFkRlpoYkhWbE9pQnVkV3hzSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ2s3WEc0Z0lIMDdYRzRnSUdsdWNIVjBUMnNnUFNBb0tTQTlQaUJwYzBSaGRHVW9kR2hwY3k1emRHRjBaUzV3Y21WVFpXeGxZM1JwYjI0cE8xeHVYRzRnSUdselEyRnNaVzVrWVhKUGNHVnVJRDBnS0NrZ1BUNWNiaUFnSUNCMGFHbHpMbkJ5YjNCekxtOXdaVzRnUFQwOUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUNBZ1B5QjBhR2x6TG5OMFlYUmxMbTl3Wlc0Z0ppWWdJWFJvYVhNdWNISnZjSE11WkdsellXSnNaV1FnSmlZZ0lYUm9hWE11Y0hKdmNITXVjbVZoWkU5dWJIbGNiaUFnSUNBZ0lEb2dkR2hwY3k1d2NtOXdjeTV2Y0dWdU8xeHVYRzRnSUdoaGJtUnNaVVp2WTNWeklEMGdLR1YyWlc1MEtTQTlQaUI3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbk4wWVhSbExuQnlaWFpsYm5SR2IyTjFjeWtnZTF4dUlDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJrWnZZM1Z6S0dWMlpXNTBLVHRjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTV3Y205d2N5NXdjbVYyWlc1MFQzQmxiazl1Um05amRYTWdKaVlnSVhSb2FYTXVjSEp2Y0hNdWNtVmhaRTl1YkhrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUlBjR1Z1S0hSeWRXVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnWm05amRYTmxaRG9nZEhKMVpTQjlLVHRjYmlBZ2ZUdGNibHh1SUNCelpXNWtSbTlqZFhOQ1lXTnJWRzlKYm5CMWRDQTlJQ2dwSUQwK0lIdGNiaUFnSUNBdkx5QkRiR1ZoY2lCd2NtVjJhVzkxY3lCMGFXMWxiM1YwSUdsbUlHbDBJR1Y0YVhOMGMxeHVJQ0FnSUdsbUlDaDBhR2x6TG5CeVpYWmxiblJHYjJOMWMxUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lIUm9hWE11WTJ4bFlYSlFjbVYyWlc1MFJtOWpkWE5VYVcxbGIzVjBLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWTJ4dmMyVWdkR2hsSUhCdmNIQmxjaUJoYm1RZ2NtVm1iMk4xY3lCMGFHVWdhVzV3ZFhSY2JpQWdJQ0F2THlCemRHOXdJSFJvWlNCcGJuQjFkQ0JtY205dElHRjFkRzhnYjNCbGJtbHVaeUJ2YmtadlkzVnpYRzRnSUNBZ0x5OGdjMlYwUm05amRYTWdkRzhnZEdobElHbHVjSFYwWEc0Z0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lIQnlaWFpsYm5SR2IyTjFjem9nZEhKMVpTQjlMQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TG5CeVpYWmxiblJHYjJOMWMxUnBiV1Z2ZFhRZ1BTQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkdiMk4xY3lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ2NISmxkbVZ1ZEVadlkzVnpPaUJtWVd4elpTQjlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlPMXh1WEc0Z0lHTmhibU5sYkVadlkzVnpTVzV3ZFhRZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnWTJ4bFlYSlVhVzFsYjNWMEtIUm9hWE11YVc1d2RYUkdiMk4xYzFScGJXVnZkWFFwTzF4dUlDQWdJSFJvYVhNdWFXNXdkWFJHYjJOMWMxUnBiV1Z2ZFhRZ1BTQnVkV3hzTzF4dUlDQjlPMXh1WEc0Z0lHUmxabVZ5Um05amRYTkpibkIxZENBOUlDZ3BJRDArSUh0Y2JpQWdJQ0IwYUdsekxtTmhibU5sYkVadlkzVnpTVzV3ZFhRb0tUdGNiaUFnSUNCMGFHbHpMbWx1Y0hWMFJtOWpkWE5VYVcxbGIzVjBJRDBnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUIwYUdsekxuTmxkRVp2WTNWektDa3NJREVwTzF4dUlDQjlPMXh1WEc0Z0lHaGhibVJzWlVSeWIzQmtiM2R1Um05amRYTWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2RHaHBjeTVqWVc1alpXeEdiMk4xYzBsdWNIVjBLQ2s3WEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsUW14MWNpQTlJQ2hsZG1WdWRDa2dQVDRnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTV6ZEdGMFpTNXZjR1Z1SUh4OElIUm9hWE11Y0hKdmNITXVkMmwwYUZCdmNuUmhiQ0I4ZkNCMGFHbHpMbkJ5YjNCekxuTm9iM2RVYVcxbFNXNXdkWFFwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNUNiSFZ5S0dWMlpXNTBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ1ptOWpkWE5sWkRvZ1ptRnNjMlVnZlNrN1hHNGdJSDA3WEc1Y2JpQWdhR0Z1Wkd4bFEyRnNaVzVrWVhKRGJHbGphMDkxZEhOcFpHVWdQU0FvWlhabGJuUXBJRDArSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11Y0hKdmNITXVhVzVzYVc1bEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRFOXdaVzRvWm1Gc2MyVXBPMXh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbkJ5YjNCekxtOXVRMnhwWTJ0UGRYUnphV1JsS0dWMlpXNTBLVHRjYmlBZ0lDQnBaaUFvZEdocGN5NXdjbTl3Y3k1M2FYUm9VRzl5ZEdGc0tTQjdYRzRnSUNBZ0lDQmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCb1lXNWtiR1ZEYUdGdVoyVWdQU0FvTGk0dVlXeHNRWEpuY3lrZ1BUNGdlMXh1SUNBZ0lHeGxkQ0JsZG1WdWRDQTlJR0ZzYkVGeVozTmJNRjA3WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdWIyNURhR0Z1WjJWU1lYY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YjI1RGFHRnVaMlZTWVhjdVlYQndiSGtvZEdocGN5d2dZV3hzUVhKbmN5azdYRzRnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUhSNWNHVnZaaUJsZG1WdWRDNXBjMFJsWm1GMWJIUlFjbVYyWlc1MFpXUWdJVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQjhmRnh1SUNBZ0lDQWdJQ0JsZG1WdWRDNXBjMFJsWm1GMWJIUlFjbVYyWlc1MFpXUW9LVnh1SUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV6WlhSVGRHRjBaU2g3WEc0Z0lDQWdJQ0JwYm5CMWRGWmhiSFZsT2lCbGRtVnVkQzUwWVhKblpYUXVkbUZzZFdVc1hHNGdJQ0FnSUNCc1lYTjBVSEpsVTJWc1pXTjBRMmhoYm1kbE9pQlFVa1ZUUlV4RlExUmZRMGhCVGtkRlgxWkpRVjlKVGxCVlZDeGNiaUFnSUNCOUtUdGNiaUFnSUNCc1pYUWdaR0YwWlNBOUlIQmhjbk5sUkdGMFpTaGNiaUFnSUNBZ0lHVjJaVzUwTG5SaGNtZGxkQzUyWVd4MVpTeGNiaUFnSUNBZ0lIUm9hWE11Y0hKdmNITXVaR0YwWlVadmNtMWhkQ3hjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11Ykc5allXeGxMRnh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTV6ZEhKcFkzUlFZWEp6YVc1bkxGeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXRhVzVFWVhSbExGeHVJQ0FnSUNrN1hHNGdJQ0FnTHk4Z1ZYTmxJR1JoZEdVZ1puSnZiU0JnYzJWc1pXTjBaV1JnSUhCeWIzQWdkMmhsYmlCdFlXNXBjSFZzWVhScGJtY2diMjVzZVNCMGFXMWxJR1p2Y2lCcGJuQjFkQ0IyWVd4MVpWeHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lIUm9hWE11Y0hKdmNITXVjMmh2ZDFScGJXVlRaV3hsWTNSUGJteDVJQ1ltWEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG5ObGJHVmpkR1ZrSUNZbVhHNGdJQ0FnSUNCa1lYUmxJQ1ltWEc0Z0lDQWdJQ0FoYVhOVFlXMWxSR0Y1S0dSaGRHVXNJSFJvYVhNdWNISnZjSE11YzJWc1pXTjBaV1FwWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0JrWVhSbElEMGdjMlYwS0hSb2FYTXVjSEp2Y0hNdWMyVnNaV04wWldRc0lIdGNiaUFnSUNBZ0lDQWdhRzkxY25NNklHZGxkRWh2ZFhKektHUmhkR1VwTEZ4dUlDQWdJQ0FnSUNCdGFXNTFkR1Z6T2lCblpYUk5hVzUxZEdWektHUmhkR1VwTEZ4dUlDQWdJQ0FnSUNCelpXTnZibVJ6T2lCblpYUlRaV052Ym1SektHUmhkR1VwTEZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoa1lYUmxJSHg4SUNGbGRtVnVkQzUwWVhKblpYUXVkbUZzZFdVcElIdGNiaUFnSUNBZ0lIUm9hWE11YzJWMFUyVnNaV04wWldRb1pHRjBaU3dnWlhabGJuUXNJSFJ5ZFdVcE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQm9ZVzVrYkdWVFpXeGxZM1FnUFNBb1pHRjBaU3dnWlhabGJuUXNJRzF2Ym5Sb1UyVnNaV04wWldSSmJpa2dQVDRnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxuTm9iM1ZzWkVOc2IzTmxUMjVUWld4bFkzUWdKaVlnSVhSb2FYTXVjSEp2Y0hNdWMyaHZkMVJwYldWVFpXeGxZM1FwSUh0Y2JpQWdJQ0FnSUM4dklGQnlaWFpsYm5ScGJtY2diMjVHYjJOMWN5QmxkbVZ1ZENCMGJ5Qm1hWGdnYVhOemRXVmNiaUFnSUNBZ0lDOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlJWVdOclpYSXdlREF4TDNKbFlXTjBMV1JoZEdWd2FXTnJaWEl2YVhOemRXVnpMell5T0Z4dUlDQWdJQ0FnZEdocGN5NXpaVzVrUm05amRYTkNZV05yVkc5SmJuQjFkQ2dwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEdocGN5NXdjbTl3Y3k1dmJrTm9ZVzVuWlZKaGR5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTV2YmtOb1lXNW5aVkpoZHlobGRtVnVkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11YzJWMFUyVnNaV04wWldRb1pHRjBaU3dnWlhabGJuUXNJR1poYkhObExDQnRiMjUwYUZObGJHVmpkR1ZrU1c0cE8xeHVJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbk5vYjNkRVlYUmxVMlZzWldOMEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ2FYTlNaVzVrWlhKQmNtbGhUR2wyWlUxbGMzTmhaMlU2SUhSeWRXVWdmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2doZEdocGN5NXdjbTl3Y3k1emFHOTFiR1JEYkc5elpVOXVVMlZzWldOMElIeDhJSFJvYVhNdWNISnZjSE11YzJodmQxUnBiV1ZUWld4bFkzUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWMyVjBVSEpsVTJWc1pXTjBhVzl1S0dSaGRHVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9JWFJvYVhNdWNISnZjSE11YVc1c2FXNWxLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lYUm9hWE11Y0hKdmNITXVjMlZzWldOMGMxSmhibWRsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFQzQmxiaWhtWVd4elpTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR052Ym5OMElIc2djM1JoY25SRVlYUmxMQ0JsYm1SRVlYUmxJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ0lDQnBaaUFvYzNSaGNuUkVZWFJsSUNZbUlDRmxibVJFWVhSbElDWW1JQ0ZwYzBSaGRHVkNaV1p2Y21Vb1pHRjBaU3dnYzNSaGNuUkVZWFJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFOXdaVzRvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0J6WlhSVFpXeGxZM1JsWkNBOUlDaGtZWFJsTENCbGRtVnVkQ3dnYTJWbGNFbHVjSFYwTENCdGIyNTBhRk5sYkdWamRHVmtTVzRwSUQwK0lIdGNiaUFnSUNCc1pYUWdZMmhoYm1kbFpFUmhkR1VnUFNCa1lYUmxPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdWMyaHZkMWxsWVhKUWFXTnJaWElwSUh0Y2JpQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdZMmhoYm1kbFpFUmhkR1VnSVQwOUlHNTFiR3dnSmlaY2JpQWdJQ0FnSUNBZ2FYTlpaV0Z5UkdsellXSnNaV1FvWjJWMFdXVmhjaWhqYUdGdVoyVmtSR0YwWlNrc0lIUm9hWE11Y0hKdmNITXBYRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1d2NtOXdjeTV6YUc5M1RXOXVkR2haWldGeVVHbGphMlZ5S1NCN1hHNGdJQ0FnSUNCcFppQW9ZMmhoYm1kbFpFUmhkR1VnSVQwOUlHNTFiR3dnSmlZZ2FYTk5iMjUwYUVScGMyRmliR1ZrS0dOb1lXNW5aV1JFWVhSbExDQjBhR2x6TG5CeWIzQnpLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1JQ2hqYUdGdVoyVmtSR0YwWlNBaFBUMGdiblZzYkNBbUppQnBjMFJoZVVScGMyRmliR1ZrS0dOb1lXNW5aV1JFWVhSbExDQjBhR2x6TG5CeWIzQnpLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2UxeHVJQ0FnSUNBZ2IyNURhR0Z1WjJVc1hHNGdJQ0FnSUNCelpXeGxZM1J6VW1GdVoyVXNYRzRnSUNBZ0lDQnpkR0Z5ZEVSaGRHVXNYRzRnSUNBZ0lDQmxibVJFWVhSbExGeHVJQ0FnSUNBZ2MyVnNaV04wYzAxMWJIUnBjR3hsTEZ4dUlDQWdJQ0FnYzJWc1pXTjBaV1JFWVhSbGN5eGNiaUFnSUNBZ0lHMXBibFJwYldVc1hHNGdJQ0FnSUNCemQyRndVbUZ1WjJVc1hHNGdJQ0FnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzVjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FoYVhORmNYVmhiQ2gwYUdsekxuQnliM0J6TG5ObGJHVmpkR1ZrTENCamFHRnVaMlZrUkdGMFpTa2dmSHhjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11WVd4c2IzZFRZVzFsUkdGNUlIeDhYRzRnSUNBZ0lDQnpaV3hsWTNSelVtRnVaMlVnZkh4Y2JpQWdJQ0FnSUhObGJHVmpkSE5OZFd4MGFYQnNaVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdhV1lnS0dOb1lXNW5aV1JFWVhSbElDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbk5sYkdWamRHVmtJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0tDRnJaV1Z3U1c1d2RYUWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ2hkR2hwY3k1d2NtOXdjeTV6YUc5M1ZHbHRaVk5sYkdWamRDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWhkR2hwY3k1d2NtOXdjeTV6YUc5M1ZHbHRaVk5sYkdWamRFOXViSGtnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSVhSb2FYTXVjSEp2Y0hNdWMyaHZkMVJwYldWSmJuQjFkQ2twWEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05vWVc1blpXUkVZWFJsSUQwZ2MyVjBWR2x0WlNoamFHRnVaMlZrUkdGMFpTd2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FHOTFjam9nWjJWMFNHOTFjbk1vZEdocGN5NXdjbTl3Y3k1elpXeGxZM1JsWkNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YVc1MWRHVTZJR2RsZEUxcGJuVjBaWE1vZEdocGN5NXdjbTl3Y3k1elpXeGxZM1JsWkNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WldOdmJtUTZJR2RsZEZObFkyOXVaSE1vZEdocGN5NXdjbTl3Y3k1elpXeGxZM1JsWkNrc1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJKWmlCdGFXNVVhVzFsSUdseklIQnlaWE5sYm5RZ2RHaGxiaUJ6WlhRZ2RHaGxJSFJwYldVZ2RHOGdiV2x1VkdsdFpWeHVJQ0FnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lXdGxaWEJKYm5CMWRDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNoMGFHbHpMbkJ5YjNCekxuTm9iM2RVYVcxbFUyVnNaV04wSUh4OElIUm9hWE11Y0hKdmNITXVjMmh2ZDFScGJXVlRaV3hsWTNSUGJteDVLVnh1SUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYldsdVZHbHRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoYm1kbFpFUmhkR1VnUFNCelpYUlVhVzFsS0dOb1lXNW5aV1JFWVhSbExDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHaHZkWEk2SUcxcGJsUnBiV1V1WjJWMFNHOTFjbk1vS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsdWRYUmxPaUJ0YVc1VWFXMWxMbWRsZEUxcGJuVjBaWE1vS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWamIyNWtPaUJ0YVc1VWFXMWxMbWRsZEZObFkyOXVaSE1vS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1d2NtOXdjeTVwYm14cGJtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnlaVk5sYkdWamRHbHZiam9nWTJoaGJtZGxaRVJoZEdVc1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuQnliM0J6TG1adlkzVnpVMlZzWldOMFpXUk5iMjUwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2V5QnRiMjUwYUZObGJHVmpkR1ZrU1c0NklHMXZiblJvVTJWc1pXTjBaV1JKYmlCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hObGJHVmpkSE5TWVc1blpTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnViMUpoYm1kbGN5QTlJQ0Z6ZEdGeWRFUmhkR1VnSmlZZ0lXVnVaRVJoZEdVN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdoaGMxTjBZWEowVW1GdVoyVWdQU0J6ZEdGeWRFUmhkR1VnSmlZZ0lXVnVaRVJoZEdVN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdselVtRnVaMlZHYVd4c1pXUWdQU0J6ZEdGeWRFUmhkR1VnSmlZZ1pXNWtSR0YwWlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzV2VW1GdVoyVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IyNURhR0Z1WjJVb1cyTm9ZVzVuWldSRVlYUmxMQ0J1ZFd4c1hTd2daWFpsYm5RcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2hoYzFOMFlYSjBVbUZ1WjJVcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1kyaGhibWRsWkVSaGRHVWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVRMmhoYm1kbEtGdHVkV3hzTENCdWRXeHNYU3dnWlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTkVZWFJsUW1WbWIzSmxLR05vWVc1blpXUkVZWFJsTENCemRHRnlkRVJoZEdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM2RoY0ZKaGJtZGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJoaGJtZGxLRnRqYUdGdVoyVmtSR0YwWlN3Z2MzUmhjblJFWVhSbFhTd2daWFpsYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVEYUdGdVoyVW9XMk5vWVc1blpXUkVZWFJsTENCdWRXeHNYU3dnWlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlNoYmMzUmhjblJFWVhSbExDQmphR0Z1WjJWa1JHRjBaVjBzSUdWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dselVtRnVaMlZHYVd4c1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlNoYlkyaGhibWRsWkVSaGRHVXNJRzUxYkd4ZExDQmxkbVZ1ZENrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jMlZzWldOMGMwMTFiSFJwY0d4bEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGMyVnNaV04wWldSRVlYUmxjejh1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IyNURhR0Z1WjJVb1cyTm9ZVzVuWldSRVlYUmxYU3dnWlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR2x6UTJoaGJtZGxaRVJoZEdWQmJISmxZV1I1VTJWc1pXTjBaV1FnUFNCelpXeGxZM1JsWkVSaGRHVnpMbk52YldVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvYzJWc1pXTjBaV1JFWVhSbEtTQTlQaUJwYzFOaGJXVkVZWGtvYzJWc1pXTjBaV1JFWVhSbExDQmphR0Z1WjJWa1JHRjBaU2tzWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBjME5vWVc1blpXUkVZWFJsUVd4eVpXRmtlVk5sYkdWamRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdVpYaDBSR0YwWlhNZ1BTQnpaV3hsWTNSbFpFUmhkR1Z6TG1acGJIUmxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdLSE5sYkdWamRHVmtSR0YwWlNrZ1BUNGdJV2x6VTJGdFpVUmhlU2h6Wld4bFkzUmxaRVJoZEdVc0lHTm9ZVzVuWldSRVlYUmxLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVRMmhoYm1kbEtHNWxlSFJFWVhSbGN5d2daWFpsYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlNoYkxpNHVjMlZzWldOMFpXUkVZWFJsY3l3Z1kyaGhibWRsWkVSaGRHVmRMQ0JsZG1WdWRDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCdmJrTm9ZVzVuWlNoamFHRnVaMlZrUkdGMFpTd2daWFpsYm5RcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2hhMlZsY0VsdWNIVjBLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG05dVUyVnNaV04wS0dOb1lXNW5aV1JFWVhSbExDQmxkbVZ1ZENrN1hHNGdJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnYVc1d2RYUldZV3gxWlRvZ2JuVnNiQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ0x5OGdWMmhsYmlCamFHVmphMmx1WnlCd2NtVlRaV3hsWTNScGIyNGdkbWxoSUcxcGJpOXRZWGhFWVhSbExDQjBhVzFsY3lCdVpXVmtJSFJ2SUdKbElHMWhibWx3ZFd4aGRHVmtJSFpwWVNCemRHRnlkRTltUkdGNUwyVnVaRTltUkdGNVhHNGdJSE5sZEZCeVpWTmxiR1ZqZEdsdmJpQTlJQ2hrWVhSbEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2FHRnpUV2x1UkdGMFpTQTlJSFI1Y0dWdlppQjBhR2x6TG5CeWIzQnpMbTFwYmtSaGRHVWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSTdYRzRnSUNBZ1kyOXVjM1FnYUdGelRXRjRSR0YwWlNBOUlIUjVjR1Z2WmlCMGFHbHpMbkJ5YjNCekxtMWhlRVJoZEdVZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJN1hHNGdJQ0FnYkdWMElHbHpWbUZzYVdSRVlYUmxVMlZzWldOMGFXOXVJRDBnZEhKMVpUdGNiaUFnSUNCcFppQW9aR0YwWlNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWkdGMFpWTjBZWEowVDJaRVlYa2dQU0J6ZEdGeWRFOW1SR0Y1S0dSaGRHVXBPMXh1SUNBZ0lDQWdhV1lnS0doaGMwMXBia1JoZEdVZ0ppWWdhR0Z6VFdGNFJHRjBaU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QnBjMFJoZVVsdVVtRnVaMlVnZFhObGN5QnpkR0Z5ZEU5bVJHRjVJR2x1ZEdWeWJtRnNiSGtzSUhOdklHNXZkQ0J1WldObGMzTmhjbmtnZEc4Z2JXRnVhWEIxYkdGMFpTQjBhVzFsY3lCb1pYSmxYRzRnSUNBZ0lDQWdJR2x6Vm1Gc2FXUkVZWFJsVTJWc1pXTjBhVzl1SUQwZ2FYTkVZWGxKYmxKaGJtZGxLRnh1SUNBZ0lDQWdJQ0FnSUdSaGRHVXNYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dGFXNUVZWFJsTEZ4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXViV0Y0UkdGMFpTeGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYUdGelRXbHVSR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdGFXNUVZWFJsVTNSaGNuUlBaa1JoZVNBOUlITjBZWEowVDJaRVlYa29kR2hwY3k1d2NtOXdjeTV0YVc1RVlYUmxLVHRjYmlBZ0lDQWdJQ0FnYVhOV1lXeHBaRVJoZEdWVFpXeGxZM1JwYjI0Z1BWeHVJQ0FnSUNBZ0lDQWdJR2x6UVdaMFpYSW9aR0YwWlN3Z2JXbHVSR0YwWlZOMFlYSjBUMlpFWVhrcElIeDhYRzRnSUNBZ0lDQWdJQ0FnYVhORmNYVmhiQ2hrWVhSbFUzUmhjblJQWmtSaGVTd2diV2x1UkdGMFpWTjBZWEowVDJaRVlYa3BPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hvWVhOTllYaEVZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUcxaGVFUmhkR1ZGYm1SUFprUmhlU0E5SUdWdVpFOW1SR0Y1S0hSb2FYTXVjSEp2Y0hNdWJXRjRSR0YwWlNrN1hHNGdJQ0FnSUNBZ0lHbHpWbUZzYVdSRVlYUmxVMlZzWldOMGFXOXVJRDFjYmlBZ0lDQWdJQ0FnSUNCcGMwSmxabTl5WlNoa1lYUmxMQ0J0WVhoRVlYUmxSVzVrVDJaRVlYa3BJSHg4WEc0Z0lDQWdJQ0FnSUNBZ2FYTkZjWFZoYkNoa1lYUmxVM1JoY25SUFprUmhlU3dnYldGNFJHRjBaVVZ1WkU5bVJHRjVLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6Vm1Gc2FXUkVZWFJsVTJWc1pXTjBhVzl1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHRjYmlBZ0lDQWdJQ0FnY0hKbFUyVnNaV04wYVc5dU9pQmtZWFJsTEZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lIUnZaMmRzWlVOaGJHVnVaR0Z5SUQwZ0tDa2dQVDRnZTF4dUlDQWdJSFJvYVhNdWMyVjBUM0JsYmlnaGRHaHBjeTV6ZEdGMFpTNXZjR1Z1S1R0Y2JpQWdmVHRjYmx4dUlDQm9ZVzVrYkdWVWFXMWxRMmhoYm1kbElEMGdLSFJwYldVcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCelpXeGxZM1JsWkNBOUlIUm9hWE11Y0hKdmNITXVjMlZzWldOMFpXUmNiaUFnSUNBZ0lEOGdkR2hwY3k1d2NtOXdjeTV6Wld4bFkzUmxaRnh1SUNBZ0lDQWdPaUIwYUdsekxtZGxkRkJ5WlZObGJHVmpkR2x2YmlncE8xeHVJQ0FnSUd4bGRDQmphR0Z1WjJWa1JHRjBaU0E5SUhSb2FYTXVjSEp2Y0hNdWMyVnNaV04wWldSY2JpQWdJQ0FnSUQ4Z2RHbHRaVnh1SUNBZ0lDQWdPaUJ6WlhSVWFXMWxLSE5sYkdWamRHVmtMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ2FHOTFjam9nWjJWMFNHOTFjbk1vZEdsdFpTa3NYRzRnSUNBZ0lDQWdJQ0FnYldsdWRYUmxPaUJuWlhSTmFXNTFkR1Z6S0hScGJXVXBMRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9lMXh1SUNBZ0lDQWdjSEpsVTJWc1pXTjBhVzl1T2lCamFHRnVaMlZrUkdGMFpTeGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lIUm9hWE11Y0hKdmNITXViMjVEYUdGdVoyVW9ZMmhoYm1kbFpFUmhkR1VwTzF4dUlDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxuTm9iM1ZzWkVOc2IzTmxUMjVUWld4bFkzUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWMyVnVaRVp2WTNWelFtRmphMVJ2U1c1d2RYUW9LVHRjYmlBZ0lDQWdJSFJvYVhNdWMyVjBUM0JsYmlobVlXeHpaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG5Ob2IzZFVhVzFsU1c1d2RYUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWMyVjBUM0JsYmloMGNuVmxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWNISnZjSE11YzJodmQxUnBiV1ZUWld4bFkzUlBibXg1SUh4OElIUm9hWE11Y0hKdmNITXVjMmh2ZDFScGJXVlRaV3hsWTNRcElIdGNiaUFnSUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCcGMxSmxibVJsY2tGeWFXRk1hWFpsVFdWemMyRm5aVG9nZEhKMVpTQjlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV6WlhSVGRHRjBaU2g3SUdsdWNIVjBWbUZzZFdVNklHNTFiR3dnZlNrN1hHNGdJSDA3WEc1Y2JpQWdiMjVKYm5CMWRFTnNhV05ySUQwZ0tDa2dQVDRnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTV3Y205d2N5NWthWE5oWW14bFpDQW1KaUFoZEdocGN5NXdjbTl3Y3k1eVpXRmtUMjVzZVNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV6WlhSUGNHVnVLSFJ5ZFdVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNUpibkIxZEVOc2FXTnJLQ2s3WEc0Z0lIMDdYRzVjYmlBZ2IyNUpibkIxZEV0bGVVUnZkMjRnUFNBb1pYWmxiblFwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbkJ5YjNCekxtOXVTMlY1Ukc5M2JpaGxkbVZ1ZENrN1hHNGdJQ0FnWTI5dWMzUWdaWFpsYm5STFpYa2dQU0JsZG1WdWRDNXJaWGs3WEc1Y2JpQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBaGRHaHBjeTV6ZEdGMFpTNXZjR1Z1SUNZbVhHNGdJQ0FnSUNBaGRHaHBjeTV3Y205d2N5NXBibXhwYm1VZ0ppWmNiaUFnSUNBZ0lDRjBhR2x6TG5CeWIzQnpMbkJ5WlhabGJuUlBjR1Z1VDI1R2IyTjFjMXh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNCbGRtVnVkRXRsZVNBOVBUMGdYQ0pCY25KdmQwUnZkMjVjSWlCOGZGeHVJQ0FnSUNBZ0lDQmxkbVZ1ZEV0bGVTQTlQVDBnWENKQmNuSnZkMVZ3WENJZ2ZIeGNiaUFnSUNBZ0lDQWdaWFpsYm5STFpYa2dQVDA5SUZ3aVJXNTBaWEpjSWx4dUlDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1SmJuQjFkRU5zYVdOcktDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2FXWWdZMkZzWlc1a1lYSWdhWE1nYjNCbGJpd2dkR2hsYzJVZ2EyVjVjeUIzYVd4c0lHWnZZM1Z6SUhSb1pTQnpaV3hsWTNSbFpDQnBkR1Z0WEc0Z0lDQWdhV1lnS0hSb2FYTXVjM1JoZEdVdWIzQmxiaWtnZTF4dUlDQWdJQ0FnYVdZZ0tHVjJaVzUwUzJWNUlEMDlQU0JjSWtGeWNtOTNSRzkzYmx3aUlIeDhJR1YyWlc1MFMyVjVJRDA5UFNCY0lrRnljbTkzVlhCY0lpa2dlMXh1SUNBZ0lDQWdJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpXeGxZM1J2Y2xOMGNtbHVaeUE5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXphRzkzVjJWbGExQnBZMnRsY2lBbUppQjBhR2x6TG5CeWIzQnpMbk5vYjNkWFpXVnJUblZ0WW1WeWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnUHlBbkxuSmxZV04wTFdSaGRHVndhV05yWlhKZlgzZGxaV3N0Ym5WdFltVnlXM1JoWW1sdVpHVjRQVndpTUZ3aVhTZGNiaUFnSUNBZ0lDQWdJQ0FnSURvZ0p5NXlaV0ZqZEMxa1lYUmxjR2xqYTJWeVgxOWtZWGxiZEdGaWFXNWtaWGc5WENJd1hDSmRKenRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMlZzWldOMFpXUkpkR1Z0SUQxY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJHVnVaR0Z5TG1OdmJYQnZibVZ1ZEU1dlpHVWdKaVpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5oYkdWdVpHRnlMbU52YlhCdmJtVnVkRTV2WkdVdWNYVmxjbmxUWld4bFkzUnZjaWh6Wld4bFkzUnZjbE4wY21sdVp5azdYRzRnSUNBZ0lDQWdJSE5sYkdWamRHVmtTWFJsYlNBbUppQnpaV3hsWTNSbFpFbDBaVzB1Wm05amRYTW9leUJ3Y21WMlpXNTBVMk55YjJ4c09pQjBjblZsSUgwcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZMjl1YzNRZ1kyOXdlU0E5SUc1bGQwUmhkR1VvZEdocGN5NXpkR0YwWlM1d2NtVlRaV3hsWTNScGIyNHBPMXh1SUNBZ0lDQWdhV1lnS0dWMlpXNTBTMlY1SUQwOVBTQmNJa1Z1ZEdWeVhDSXBJSHRjYmlBZ0lDQWdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YVc1d2RYUlBheWdwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRHRjBaUzVzWVhOMFVISmxVMlZzWldOMFEyaGhibWRsSUQwOVBTQlFVa1ZUUlV4RlExUmZRMGhCVGtkRlgxWkpRVjlPUVZaSlIwRlVSVnh1SUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVk5sYkdWamRDaGpiM0I1TENCbGRtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lYUm9hWE11Y0hKdmNITXVjMmh2ZFd4a1EyeHZjMlZQYmxObGJHVmpkQ0FtSmlCMGFHbHpMbk5sZEZCeVpWTmxiR1ZqZEdsdmJpaGpiM0I1S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFOXdaVzRvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dWMlpXNTBTMlY1SUQwOVBTQmNJa1Z6WTJGd1pWd2lLU0I3WEc0Z0lDQWdJQ0FnSUdWMlpXNTBMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRVp2WTNWelFtRmphMVJ2U1c1d2RYUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJQY0dWdUtHWmhiSE5sS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pYWmxiblJMWlhrZ1BUMDlJRndpVkdGaVhDSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJQY0dWdUtHWmhiSE5sS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtbHVjSFYwVDJzb0tTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG05dVNXNXdkWFJGY25KdmNpaDdJR052WkdVNklERXNJRzF6WnpvZ1NVNVFWVlJmUlZKU1h6RWdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUc5dVVHOXlkR0ZzUzJWNVJHOTNiaUE5SUNobGRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR1YyWlc1MFMyVjVJRDBnWlhabGJuUXVhMlY1TzF4dUlDQWdJR2xtSUNobGRtVnVkRXRsZVNBOVBUMGdYQ0pGYzJOaGNHVmNJaWtnZTF4dUlDQWdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQndjbVYyWlc1MFJtOWpkWE02SUhSeWRXVXNYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEU5d1pXNG9abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSR2IyTjFjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lIQnlaWFpsYm5SR2IyTjFjem9nWm1Gc2MyVWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdkx5QnJaWGxFYjNkdUlHVjJaVzUwY3lCd1lYTnpaV1FnWkc5M2JpQjBieUJrWVhrdWFuTjRYRzRnSUc5dVJHRjVTMlY1Ukc5M2JpQTlJQ2hsZG1WdWRDa2dQVDRnZTF4dUlDQWdJSFJvYVhNdWNISnZjSE11YjI1TFpYbEViM2R1S0dWMlpXNTBLVHRjYmlBZ0lDQmpiMjV6ZENCbGRtVnVkRXRsZVNBOUlHVjJaVzUwTG10bGVUdGNiaUFnSUNCamIyNXpkQ0JwYzFOb2FXWjBTMlY1UVdOMGFYWmxJRDBnWlhabGJuUXVjMmhwWm5STFpYazdYRzVjYmlBZ0lDQmpiMjV6ZENCamIzQjVJRDBnYm1WM1JHRjBaU2gwYUdsekxuTjBZWFJsTG5CeVpWTmxiR1ZqZEdsdmJpazdYRzRnSUNBZ2FXWWdLR1YyWlc1MFMyVjVJRDA5UFNCY0lrVnVkR1Z5WENJcElIdGNiaUFnSUNBZ0lHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0IwYUdsekxtaGhibVJzWlZObGJHVmpkQ2hqYjNCNUxDQmxkbVZ1ZENrN1hHNGdJQ0FnSUNBaGRHaHBjeTV3Y205d2N5NXphRzkxYkdSRGJHOXpaVTl1VTJWc1pXTjBJQ1ltSUhSb2FYTXVjMlYwVUhKbFUyVnNaV04wYVc5dUtHTnZjSGtwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWlhabGJuUkxaWGtnUFQwOUlGd2lSWE5qWVhCbFhDSXBJSHRjYmlBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNWNiaUFnSUNBZ0lIUm9hWE11YzJWMFQzQmxiaWhtWVd4elpTazdYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVhVzV3ZFhSUGF5Z3BLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNUpibkIxZEVWeWNtOXlLSHNnWTI5a1pUb2dNU3dnYlhObk9pQkpUbEJWVkY5RlVsSmZNU0I5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0NGMGFHbHpMbkJ5YjNCekxtUnBjMkZpYkdWa1MyVjVZbTloY21ST1lYWnBaMkYwYVc5dUtTQjdYRzRnSUNBZ0lDQnNaWFFnYm1WM1UyVnNaV04wYVc5dU8xeHVJQ0FnSUNBZ2MzZHBkR05vSUNobGRtVnVkRXRsZVNrZ2UxeHVJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVFYSnliM2RNWldaMFhDSTZYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVjMmh2ZDFkbFpXdFFhV05yWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGQxTmxiR1ZqZEdsdmJpQTlJSE4xWWxkbFpXdHpLR052Y0hrc0lERXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGRUWld4bFkzUnBiMjRnUFNCemRXSkVZWGx6S0dOdmNIa3NJREVwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdZMkZ6WlNCY0lrRnljbTkzVW1sbmFIUmNJanBjYmlBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTV6YUc5M1YyVmxhMUJwWTJ0bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNVMlZzWldOMGFXOXVJRDBnWVdSa1YyVmxhM01vWTI5d2VTd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZDFObGJHVmpkR2x2YmlBOUlHRmtaRVJoZVhNb1kyOXdlU3dnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElGd2lRWEp5YjNkVmNGd2lPbHh1SUNBZ0lDQWdJQ0FnSUc1bGQxTmxiR1ZqZEdsdmJpQTlJSE4xWWxkbFpXdHpLR052Y0hrc0lERXBPMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElGd2lRWEp5YjNkRWIzZHVYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ2JtVjNVMlZzWldOMGFXOXVJRDBnWVdSa1YyVmxhM01vWTI5d2VTd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdYQ0pRWVdkbFZYQmNJanBjYmlBZ0lDQWdJQ0FnSUNCdVpYZFRaV3hsWTNScGIyNGdQU0JwYzFOb2FXWjBTMlY1UVdOMGFYWmxYRzRnSUNBZ0lDQWdJQ0FnSUNBL0lITjFZbGxsWVhKektHTnZjSGtzSURFcFhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUhOMVlrMXZiblJvY3loamIzQjVMQ0F4S1R0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0JjSWxCaFoyVkViM2R1WENJNlhHNGdJQ0FnSUNBZ0lDQWdibVYzVTJWc1pXTjBhVzl1SUQwZ2FYTlRhR2xtZEV0bGVVRmpkR2wyWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQeUJoWkdSWlpXRnljeWhqYjNCNUxDQXhLVnh1SUNBZ0lDQWdJQ0FnSUNBZ09pQmhaR1JOYjI1MGFITW9ZMjl3ZVN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJR05oYzJVZ1hDSkliMjFsWENJNlhHNGdJQ0FnSUNBZ0lDQWdibVYzVTJWc1pXTjBhVzl1SUQwZ1oyVjBVM1JoY25SUFpsZGxaV3NvWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM0I1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVzYjJOaGJHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtTmhiR1Z1WkdGeVUzUmhjblJFWVhrc1hHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnWTJGelpTQmNJa1Z1WkZ3aU9seHVJQ0FnSUNBZ0lDQWdJRzVsZDFObGJHVmpkR2x2YmlBOUlHZGxkRVZ1WkU5bVYyVmxheWhqYjNCNUtUdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0J1WlhkVFpXeGxZM1JwYjI0Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tDRnVaWGRUWld4bFkzUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNISnZjSE11YjI1SmJuQjFkRVZ5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJrbHVjSFYwUlhKeWIzSW9leUJqYjJSbE9pQXhMQ0J0YzJjNklFbE9VRlZVWDBWU1VsOHhJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdWMlpXNTBMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ2JHRnpkRkJ5WlZObGJHVmpkRU5vWVc1blpUb2dVRkpGVTBWTVJVTlVYME5JUVU1SFJWOVdTVUZmVGtGV1NVZEJWRVVnZlNrN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1d2NtOXdjeTVoWkdwMWMzUkVZWFJsVDI1RGFHRnVaMlVwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSVFpXeGxZM1JsWkNodVpYZFRaV3hsWTNScGIyNHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k1elpYUlFjbVZUWld4bFkzUnBiMjRvYm1WM1UyVnNaV04wYVc5dUtUdGNiaUFnSUNBZ0lDOHZJRzVsWldRZ2RHOGdabWxuZFhKbElHOTFkQ0IzYUdWMGFHVnlJRzF2Ym5Sb0lHaGhjeUJqYUdGdVoyVmtJSFJ2SUdadlkzVnpJR1JoZVNCcGJpQnBibXhwYm1VZ2RtVnljMmx2Ymx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVhVzVzYVc1bEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIQnlaWFpOYjI1MGFDQTlJR2RsZEUxdmJuUm9LR052Y0hrcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdVpYZE5iMjUwYUNBOUlHZGxkRTF2Ym5Sb0tHNWxkMU5sYkdWamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJ5WlhaWlpXRnlJRDBnWjJWMFdXVmhjaWhqYjNCNUtUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtVjNXV1ZoY2lBOUlHZGxkRmxsWVhJb2JtVjNVMlZzWldOMGFXOXVLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9jSEpsZGsxdmJuUm9JQ0U5UFNCdVpYZE5iMjUwYUNCOGZDQndjbVYyV1dWaGNpQWhQVDBnYm1WM1dXVmhjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRzF2Ym5Sb0lHaGhjeUJqYUdGdVoyVmtYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdJSE5vYjNWc1pFWnZZM1Z6UkdGNVNXNXNhVzVsT2lCMGNuVmxJSDBwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRzF2Ym5Sb0lHaGhjMjRuZENCamFHRnVaMlZrWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSVGRHRjBaU2g3SUhOb2IzVnNaRVp2WTNWelJHRjVTVzVzYVc1bE9pQm1ZV3h6WlNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0F2THlCb1lXNWtiR1VnWjJWdVpYSnBZeUJyWlhrZ1pHOTNiaUJsZG1WdWRITWdhVzRnZEdobElIQnZjSEJsY2lCMGFHRjBJR1J2SUc1dmRDQmhaR3AxYzNRZ2IzSWdjMlZzWldOMElHUmhkR1Z6WEc0Z0lDOHZJR1Y0T2lCM2FHbHNaU0JtYjJOMWMybHVaeUJ3Y21WMklHRnVaQ0J1WlhoMElHMXZiblJvSUdKMWRIUnZibk5jYmlBZ2IyNVFiM0J3WlhKTFpYbEViM2R1SUQwZ0tHVjJaVzUwS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnWlhabGJuUkxaWGtnUFNCbGRtVnVkQzVyWlhrN1hHNGdJQ0FnYVdZZ0tHVjJaVzUwUzJWNUlEMDlQU0JjSWtWelkyRndaVndpS1NCN1hHNGdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdkR2hwY3k1elpXNWtSbTlqZFhOQ1lXTnJWRzlKYm5CMWRDZ3BPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0J2YmtOc1pXRnlRMnhwWTJzZ1BTQW9aWFpsYm5RcElEMCtJSHRjYmlBZ0lDQnBaaUFvWlhabGJuUXBJSHRjYmlBZ0lDQWdJR2xtSUNobGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDa2dlMXh1SUNBZ0lDQWdJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVjMlZ1WkVadlkzVnpRbUZqYTFSdlNXNXdkWFFvS1R0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbk5sYkdWamRITlNZVzVuWlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXZia05vWVc1blpTaGJiblZzYkN3Z2JuVnNiRjBzSUdWMlpXNTBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXZia05vWVc1blpTaHVkV3hzTENCbGRtVnVkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCcGJuQjFkRlpoYkhWbE9pQnVkV3hzSUgwcE8xeHVJQ0I5TzF4dVhHNGdJR05zWldGeUlEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUhSb2FYTXViMjVEYkdWaGNrTnNhV05yS0NrN1hHNGdJSDA3WEc1Y2JpQWdiMjVUWTNKdmJHd2dQU0FvWlhabGJuUXBJRDArSUh0Y2JpQWdJQ0JwWmlBb1hHNGdJQ0FnSUNCMGVYQmxiMllnZEdocGN5NXdjbTl3Y3k1amJHOXpaVTl1VTJOeWIyeHNJRDA5UFNCY0ltSnZiMnhsWVc1Y0lpQW1KbHh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVqYkc5elpVOXVVMk55YjJ4c1hHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJR1YyWlc1MExuUmhjbWRsZENBOVBUMGdaRzlqZFcxbGJuUWdmSHhjYmlBZ0lDQWdJQ0FnWlhabGJuUXVkR0Z5WjJWMElEMDlQU0JrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUWdmSHhjYmlBZ0lDQWdJQ0FnWlhabGJuUXVkR0Z5WjJWMElEMDlQU0JrYjJOMWJXVnVkQzVpYjJSNVhHNGdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUlBjR1Z1S0daaGJITmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQjBhR2x6TG5CeWIzQnpMbU5zYjNObFQyNVRZM0p2Ykd3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNISnZjSE11WTJ4dmMyVlBibE5qY205c2JDaGxkbVZ1ZENrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUlBjR1Z1S0daaGJITmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlRMkZzWlc1a1lYSWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxuQnliM0J6TG1sdWJHbHVaU0FtSmlBaGRHaHBjeTVwYzBOaGJHVnVaR0Z5VDNCbGJpZ3BLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeFhjbUZ3Y0dWa1EyRnNaVzVrWVhKY2JpQWdJQ0FnSUNBZ2NtVm1QWHNvWld4bGJTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WTJGc1pXNWtZWElnUFNCbGJHVnRPMXh1SUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNCc2IyTmhiR1U5ZTNSb2FYTXVjSEp2Y0hNdWJHOWpZV3hsZlZ4dUlDQWdJQ0FnSUNCallXeGxibVJoY2xOMFlYSjBSR0Y1UFh0MGFHbHpMbkJ5YjNCekxtTmhiR1Z1WkdGeVUzUmhjblJFWVhsOVhHNGdJQ0FnSUNBZ0lHTm9iMjl6WlVSaGVVRnlhV0ZNWVdKbGJGQnlaV1pwZUQxN2RHaHBjeTV3Y205d2N5NWphRzl2YzJWRVlYbEJjbWxoVEdGaVpXeFFjbVZtYVhoOVhHNGdJQ0FnSUNBZ0lHUnBjMkZpYkdWa1JHRjVRWEpwWVV4aFltVnNVSEpsWm1sNFBYdDBhR2x6TG5CeWIzQnpMbVJwYzJGaWJHVmtSR0Y1UVhKcFlVeGhZbVZzVUhKbFptbDRmVnh1SUNBZ0lDQWdJQ0IzWldWclFYSnBZVXhoWW1Wc1VISmxabWw0UFh0MGFHbHpMbkJ5YjNCekxuZGxaV3RCY21saFRHRmlaV3hRY21WbWFYaDlYRzRnSUNBZ0lDQWdJRzF2Ym5Sb1FYSnBZVXhoWW1Wc1VISmxabWw0UFh0MGFHbHpMbkJ5YjNCekxtMXZiblJvUVhKcFlVeGhZbVZzVUhKbFptbDRmVnh1SUNBZ0lDQWdJQ0JoWkdwMWMzUkVZWFJsVDI1RGFHRnVaMlU5ZTNSb2FYTXVjSEp2Y0hNdVlXUnFkWE4wUkdGMFpVOXVRMmhoYm1kbGZWeHVJQ0FnSUNBZ0lDQnpaWFJQY0dWdVBYdDBhR2x6TG5ObGRFOXdaVzU5WEc0Z0lDQWdJQ0FnSUhOb2IzVnNaRU5zYjNObFQyNVRaV3hsWTNROWUzUm9hWE11Y0hKdmNITXVjMmh2ZFd4a1EyeHZjMlZQYmxObGJHVmpkSDFjYmlBZ0lDQWdJQ0FnWkdGMFpVWnZjbTFoZEQxN2RHaHBjeTV3Y205d2N5NWtZWFJsUm05eWJXRjBRMkZzWlc1a1lYSjlYRzRnSUNBZ0lDQWdJSFZ6WlZkbFpXdGtZWGx6VTJodmNuUTllM1JvYVhNdWNISnZjSE11ZFhObFYyVmxhMlJoZVhOVGFHOXlkSDFjYmlBZ0lDQWdJQ0FnWm05eWJXRjBWMlZsYTBSaGVUMTdkR2hwY3k1d2NtOXdjeTVtYjNKdFlYUlhaV1ZyUkdGNWZWeHVJQ0FnSUNBZ0lDQmtjbTl3Wkc5M2JrMXZaR1U5ZTNSb2FYTXVjSEp2Y0hNdVpISnZjR1J2ZDI1TmIyUmxmVnh1SUNBZ0lDQWdJQ0J6Wld4bFkzUmxaRDE3ZEdocGN5NXdjbTl3Y3k1elpXeGxZM1JsWkgxY2JpQWdJQ0FnSUNBZ2NISmxVMlZzWldOMGFXOXVQWHQwYUdsekxuTjBZWFJsTG5CeVpWTmxiR1ZqZEdsdmJuMWNiaUFnSUNBZ0lDQWdiMjVUWld4bFkzUTllM1JvYVhNdWFHRnVaR3hsVTJWc1pXTjBmVnh1SUNBZ0lDQWdJQ0J2YmxkbFpXdFRaV3hsWTNROWUzUm9hWE11Y0hKdmNITXViMjVYWldWclUyVnNaV04wZlZ4dUlDQWdJQ0FnSUNCdmNHVnVWRzlFWVhSbFBYdDBhR2x6TG5CeWIzQnpMbTl3Wlc1VWIwUmhkR1Y5WEc0Z0lDQWdJQ0FnSUcxcGJrUmhkR1U5ZTNSb2FYTXVjSEp2Y0hNdWJXbHVSR0YwWlgxY2JpQWdJQ0FnSUNBZ2JXRjRSR0YwWlQxN2RHaHBjeTV3Y205d2N5NXRZWGhFWVhSbGZWeHVJQ0FnSUNBZ0lDQnpaV3hsWTNSelUzUmhjblE5ZTNSb2FYTXVjSEp2Y0hNdWMyVnNaV04wYzFOMFlYSjBmVnh1SUNBZ0lDQWdJQ0J6Wld4bFkzUnpSVzVrUFh0MGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEhORmJtUjlYRzRnSUNBZ0lDQWdJSE5sYkdWamRITlNZVzVuWlQxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSelVtRnVaMlY5WEc0Z0lDQWdJQ0FnSUhObGJHVmpkSE5OZFd4MGFYQnNaVDE3ZEdocGN5NXdjbTl3Y3k1elpXeGxZM1J6VFhWc2RHbHdiR1Y5WEc0Z0lDQWdJQ0FnSUhObGJHVmpkR1ZrUkdGMFpYTTllM1JvYVhNdWNISnZjSE11YzJWc1pXTjBaV1JFWVhSbGMzMWNiaUFnSUNBZ0lDQWdjM1JoY25SRVlYUmxQWHQwYUdsekxuQnliM0J6TG5OMFlYSjBSR0YwWlgxY2JpQWdJQ0FnSUNBZ1pXNWtSR0YwWlQxN2RHaHBjeTV3Y205d2N5NWxibVJFWVhSbGZWeHVJQ0FnSUNBZ0lDQmxlR05zZFdSbFJHRjBaWE05ZTNSb2FYTXVjSEp2Y0hNdVpYaGpiSFZrWlVSaGRHVnpmVnh1SUNBZ0lDQWdJQ0JsZUdOc2RXUmxSR0YwWlVsdWRHVnlkbUZzY3oxN2RHaHBjeTV3Y205d2N5NWxlR05zZFdSbFJHRjBaVWx1ZEdWeWRtRnNjMzFjYmlBZ0lDQWdJQ0FnWm1sc2RHVnlSR0YwWlQxN2RHaHBjeTV3Y205d2N5NW1hV3gwWlhKRVlYUmxmVnh1SUNBZ0lDQWdJQ0J2YmtOc2FXTnJUM1YwYzJsa1pUMTdkR2hwY3k1b1lXNWtiR1ZEWVd4bGJtUmhja05zYVdOclQzVjBjMmxrWlgxY2JpQWdJQ0FnSUNBZ1ptOXliV0YwVjJWbGEwNTFiV0psY2oxN2RHaHBjeTV3Y205d2N5NW1iM0p0WVhSWFpXVnJUblZ0WW1WeWZWeHVJQ0FnSUNBZ0lDQm9hV2RvYkdsbmFIUkVZWFJsY3oxN2RHaHBjeTV6ZEdGMFpTNW9hV2RvYkdsbmFIUkVZWFJsYzMxY2JpQWdJQ0FnSUNBZ2FHOXNhV1JoZVhNOWUyZGxkRWh2Ykdsa1lYbHpUV0Z3S0hSb2FYTXViVzlrYVdaNVNHOXNhV1JoZVhNb0tTbDlYRzRnSUNBZ0lDQWdJR2x1WTJ4MVpHVkVZWFJsY3oxN2RHaHBjeTV3Y205d2N5NXBibU5zZFdSbFJHRjBaWE45WEc0Z0lDQWdJQ0FnSUdsdVkyeDFaR1ZFWVhSbFNXNTBaWEoyWVd4elBYdDBhR2x6TG5CeWIzQnpMbWx1WTJ4MVpHVkVZWFJsU1c1MFpYSjJZV3h6ZlZ4dUlDQWdJQ0FnSUNCcGJtTnNkV1JsVkdsdFpYTTllM1JvYVhNdWNISnZjSE11YVc1amJIVmtaVlJwYldWemZWeHVJQ0FnSUNBZ0lDQnBibXBsWTNSVWFXMWxjejE3ZEdocGN5NXdjbTl3Y3k1cGJtcGxZM1JVYVcxbGMzMWNiaUFnSUNBZ0lDQWdhVzVzYVc1bFBYdDBhR2x6TG5CeWIzQnpMbWx1YkdsdVpYMWNiaUFnSUNBZ0lDQWdjMmh2ZFd4a1JtOWpkWE5FWVhsSmJteHBibVU5ZTNSb2FYTXVjM1JoZEdVdWMyaHZkV3hrUm05amRYTkVZWGxKYm14cGJtVjlYRzRnSUNBZ0lDQWdJSEJsWld0T1pYaDBUVzl1ZEdnOWUzUm9hWE11Y0hKdmNITXVjR1ZsYTA1bGVIUk5iMjUwYUgxY2JpQWdJQ0FnSUNBZ2MyaHZkMDF2Ym5Sb1JISnZjR1J2ZDI0OWUzUm9hWE11Y0hKdmNITXVjMmh2ZDAxdmJuUm9SSEp2Y0dSdmQyNTlYRzRnSUNBZ0lDQWdJSE5vYjNkUWNtVjJhVzkxYzAxdmJuUm9jejE3ZEdocGN5NXdjbTl3Y3k1emFHOTNVSEpsZG1sdmRYTk5iMjUwYUhOOVhHNGdJQ0FnSUNBZ0lIVnpaVk5vYjNKMFRXOXVkR2hKYmtSeWIzQmtiM2R1UFh0MGFHbHpMbkJ5YjNCekxuVnpaVk5vYjNKMFRXOXVkR2hKYmtSeWIzQmtiM2R1ZlZ4dUlDQWdJQ0FnSUNCemFHOTNUVzl1ZEdoWlpXRnlSSEp2Y0dSdmQyNDllM1JvYVhNdWNISnZjSE11YzJodmQwMXZiblJvV1dWaGNrUnliM0JrYjNkdWZWeHVJQ0FnSUNBZ0lDQnphRzkzVjJWbGEwNTFiV0psY25NOWUzUm9hWE11Y0hKdmNITXVjMmh2ZDFkbFpXdE9kVzFpWlhKemZWeHVJQ0FnSUNBZ0lDQnphRzkzV1dWaGNrUnliM0JrYjNkdVBYdDBhR2x6TG5CeWIzQnpMbk5vYjNkWlpXRnlSSEp2Y0dSdmQyNTlYRzRnSUNBZ0lDQWdJSGRwZEdoUWIzSjBZV3c5ZTNSb2FYTXVjSEp2Y0hNdWQybDBhRkJ2Y25SaGJIMWNiaUFnSUNBZ0lDQWdabTl5WTJWVGFHOTNUVzl1ZEdoT1lYWnBaMkYwYVc5dVBYdDBhR2x6TG5CeWIzQnpMbVp2Y21ObFUyaHZkMDF2Ym5Sb1RtRjJhV2RoZEdsdmJuMWNiaUFnSUNBZ0lDQWdjMmh2ZDBScGMyRmliR1ZrVFc5dWRHaE9ZWFpwWjJGMGFXOXVQWHQwYUdsekxuQnliM0J6TG5Ob2IzZEVhWE5oWW14bFpFMXZiblJvVG1GMmFXZGhkR2x2Ym4xY2JpQWdJQ0FnSUNBZ2MyTnliMnhzWVdKc1pWbGxZWEpFY205d1pHOTNiajE3ZEdocGN5NXdjbTl3Y3k1elkzSnZiR3hoWW14bFdXVmhja1J5YjNCa2IzZHVmVnh1SUNBZ0lDQWdJQ0J6WTNKdmJHeGhZbXhsVFc5dWRHaFpaV0Z5UkhKdmNHUnZkMjQ5ZTNSb2FYTXVjSEp2Y0hNdWMyTnliMnhzWVdKc1pVMXZiblJvV1dWaGNrUnliM0JrYjNkdWZWeHVJQ0FnSUNBZ0lDQjBiMlJoZVVKMWRIUnZiajE3ZEdocGN5NXdjbTl3Y3k1MGIyUmhlVUoxZEhSdmJuMWNiaUFnSUNBZ0lDQWdkMlZsYTB4aFltVnNQWHQwYUdsekxuQnliM0J6TG5kbFpXdE1ZV0psYkgxY2JpQWdJQ0FnSUNBZ2IzVjBjMmxrWlVOc2FXTnJTV2R1YjNKbFEyeGhjM005ZTI5MWRITnBaR1ZEYkdsamEwbG5ibTl5WlVOc1lYTnpmVnh1SUNBZ0lDQWdJQ0JtYVhobFpFaGxhV2RvZEQxN2RHaHBjeTV3Y205d2N5NW1hWGhsWkVobGFXZG9kSDFjYmlBZ0lDQWdJQ0FnYlc5dWRHaHpVMmh2ZDI0OWUzUm9hWE11Y0hKdmNITXViVzl1ZEdoelUyaHZkMjU5WEc0Z0lDQWdJQ0FnSUcxdmJuUm9VMlZzWldOMFpXUkpiajE3ZEdocGN5NXpkR0YwWlM1dGIyNTBhRk5sYkdWamRHVmtTVzU5WEc0Z0lDQWdJQ0FnSUc5dVJISnZjR1J2ZDI1R2IyTjFjejE3ZEdocGN5NW9ZVzVrYkdWRWNtOXdaRzkzYmtadlkzVnpmVnh1SUNBZ0lDQWdJQ0J2YmsxdmJuUm9RMmhoYm1kbFBYdDBhR2x6TG5CeWIzQnpMbTl1VFc5dWRHaERhR0Z1WjJWOVhHNGdJQ0FnSUNBZ0lHOXVXV1ZoY2tOb1lXNW5aVDE3ZEdocGN5NXdjbTl3Y3k1dmJsbGxZWEpEYUdGdVoyVjlYRzRnSUNBZ0lDQWdJR1JoZVVOc1lYTnpUbUZ0WlQxN2RHaHBjeTV3Y205d2N5NWtZWGxEYkdGemMwNWhiV1Y5WEc0Z0lDQWdJQ0FnSUhkbFpXdEVZWGxEYkdGemMwNWhiV1U5ZTNSb2FYTXVjSEp2Y0hNdWQyVmxhMFJoZVVOc1lYTnpUbUZ0WlgxY2JpQWdJQ0FnSUNBZ2JXOXVkR2hEYkdGemMwNWhiV1U5ZTNSb2FYTXVjSEp2Y0hNdWJXOXVkR2hEYkdGemMwNWhiV1Y5WEc0Z0lDQWdJQ0FnSUhScGJXVkRiR0Z6YzA1aGJXVTllM1JvYVhNdWNISnZjSE11ZEdsdFpVTnNZWE56VG1GdFpYMWNiaUFnSUNBZ0lDQWdjMmh2ZDBSaGRHVlRaV3hsWTNROWUzUm9hWE11Y0hKdmNITXVjMmh2ZDBSaGRHVlRaV3hsWTNSOVhHNGdJQ0FnSUNBZ0lITm9iM2RVYVcxbFUyVnNaV04wUFh0MGFHbHpMbkJ5YjNCekxuTm9iM2RVYVcxbFUyVnNaV04wZlZ4dUlDQWdJQ0FnSUNCemFHOTNWR2x0WlZObGJHVmpkRTl1YkhrOWUzUm9hWE11Y0hKdmNITXVjMmh2ZDFScGJXVlRaV3hsWTNSUGJteDVmVnh1SUNBZ0lDQWdJQ0J2YmxScGJXVkRhR0Z1WjJVOWUzUm9hWE11YUdGdVpHeGxWR2x0WlVOb1lXNW5aWDFjYmlBZ0lDQWdJQ0FnZEdsdFpVWnZjbTFoZEQxN2RHaHBjeTV3Y205d2N5NTBhVzFsUm05eWJXRjBmVnh1SUNBZ0lDQWdJQ0IwYVcxbFNXNTBaWEoyWVd4elBYdDBhR2x6TG5CeWIzQnpMblJwYldWSmJuUmxjblpoYkhOOVhHNGdJQ0FnSUNBZ0lHMXBibFJwYldVOWUzUm9hWE11Y0hKdmNITXViV2x1VkdsdFpYMWNiaUFnSUNBZ0lDQWdiV0Y0VkdsdFpUMTdkR2hwY3k1d2NtOXdjeTV0WVhoVWFXMWxmVnh1SUNBZ0lDQWdJQ0JsZUdOc2RXUmxWR2x0WlhNOWUzUm9hWE11Y0hKdmNITXVaWGhqYkhWa1pWUnBiV1Z6ZlZ4dUlDQWdJQ0FnSUNCbWFXeDBaWEpVYVcxbFBYdDBhR2x6TG5CeWIzQnpMbVpwYkhSbGNsUnBiV1Y5WEc0Z0lDQWdJQ0FnSUhScGJXVkRZWEIwYVc5dVBYdDBhR2x6TG5CeWIzQnpMblJwYldWRFlYQjBhVzl1ZlZ4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUzUm9hWE11Y0hKdmNITXVZMkZzWlc1a1lYSkRiR0Z6YzA1aGJXVjlYRzRnSUNBZ0lDQWdJR052Ym5SaGFXNWxjajE3ZEdocGN5NXdjbTl3Y3k1allXeGxibVJoY2tOdmJuUmhhVzVsY24xY2JpQWdJQ0FnSUNBZ2VXVmhja2wwWlcxT2RXMWlaWEk5ZTNSb2FYTXVjSEp2Y0hNdWVXVmhja2wwWlcxT2RXMWlaWEo5WEc0Z0lDQWdJQ0FnSUhsbFlYSkVjbTl3Wkc5M2JrbDBaVzFPZFcxaVpYSTllM1JvYVhNdWNISnZjSE11ZVdWaGNrUnliM0JrYjNkdVNYUmxiVTUxYldKbGNuMWNiaUFnSUNBZ0lDQWdjSEpsZG1sdmRYTk5iMjUwYUVGeWFXRk1ZV0psYkQxN2RHaHBjeTV3Y205d2N5NXdjbVYyYVc5MWMwMXZiblJvUVhKcFlVeGhZbVZzZlZ4dUlDQWdJQ0FnSUNCd2NtVjJhVzkxYzAxdmJuUm9RblYwZEc5dVRHRmlaV3c5ZTNSb2FYTXVjSEp2Y0hNdWNISmxkbWx2ZFhOTmIyNTBhRUoxZEhSdmJreGhZbVZzZlZ4dUlDQWdJQ0FnSUNCdVpYaDBUVzl1ZEdoQmNtbGhUR0ZpWld3OWUzUm9hWE11Y0hKdmNITXVibVY0ZEUxdmJuUm9RWEpwWVV4aFltVnNmVnh1SUNBZ0lDQWdJQ0J1WlhoMFRXOXVkR2hDZFhSMGIyNU1ZV0psYkQxN2RHaHBjeTV3Y205d2N5NXVaWGgwVFc5dWRHaENkWFIwYjI1TVlXSmxiSDFjYmlBZ0lDQWdJQ0FnY0hKbGRtbHZkWE5aWldGeVFYSnBZVXhoWW1Wc1BYdDBhR2x6TG5CeWIzQnpMbkJ5WlhacGIzVnpXV1ZoY2tGeWFXRk1ZV0psYkgxY2JpQWdJQ0FnSUNBZ2NISmxkbWx2ZFhOWlpXRnlRblYwZEc5dVRHRmlaV3c5ZTNSb2FYTXVjSEp2Y0hNdWNISmxkbWx2ZFhOWlpXRnlRblYwZEc5dVRHRmlaV3g5WEc0Z0lDQWdJQ0FnSUc1bGVIUlpaV0Z5UVhKcFlVeGhZbVZzUFh0MGFHbHpMbkJ5YjNCekxtNWxlSFJaWldGeVFYSnBZVXhoWW1Wc2ZWeHVJQ0FnSUNBZ0lDQnVaWGgwV1dWaGNrSjFkSFJ2Ymt4aFltVnNQWHQwYUdsekxuQnliM0J6TG01bGVIUlpaV0Z5UW5WMGRHOXVUR0ZpWld4OVhHNGdJQ0FnSUNBZ0lIUnBiV1ZKYm5CMWRFeGhZbVZzUFh0MGFHbHpMbkJ5YjNCekxuUnBiV1ZKYm5CMWRFeGhZbVZzZlZ4dUlDQWdJQ0FnSUNCa2FYTmhZbXhsWkV0bGVXSnZZWEprVG1GMmFXZGhkR2x2YmoxN2RHaHBjeTV3Y205d2N5NWthWE5oWW14bFpFdGxlV0p2WVhKa1RtRjJhV2RoZEdsdmJuMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVEzVnpkRzl0U0dWaFpHVnlQWHQwYUdsekxuQnliM0J6TG5KbGJtUmxja04xYzNSdmJVaGxZV1JsY24xY2JpQWdJQ0FnSUNBZ2NHOXdjR1Z5VUhKdmNITTllM1JvYVhNdWNISnZjSE11Y0c5d2NHVnlVSEp2Y0hOOVhHNGdJQ0FnSUNBZ0lISmxibVJsY2tSaGVVTnZiblJsYm5SelBYdDBhR2x6TG5CeWIzQnpMbkpsYm1SbGNrUmhlVU52Ym5SbGJuUnpmVnh1SUNBZ0lDQWdJQ0J5Wlc1a1pYSk5iMjUwYUVOdmJuUmxiblE5ZTNSb2FYTXVjSEp2Y0hNdWNtVnVaR1Z5VFc5dWRHaERiMjUwWlc1MGZWeHVJQ0FnSUNBZ0lDQnlaVzVrWlhKUmRXRnlkR1Z5UTI5dWRHVnVkRDE3ZEdocGN5NXdjbTl3Y3k1eVpXNWtaWEpSZFdGeWRHVnlRMjl1ZEdWdWRIMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVdXVmhja052Ym5SbGJuUTllM1JvYVhNdWNISnZjSE11Y21WdVpHVnlXV1ZoY2tOdmJuUmxiblI5WEc0Z0lDQWdJQ0FnSUc5dVJHRjVUVzkxYzJWRmJuUmxjajE3ZEdocGN5NXdjbTl3Y3k1dmJrUmhlVTF2ZFhObFJXNTBaWEo5WEc0Z0lDQWdJQ0FnSUc5dVRXOXVkR2hOYjNWelpVeGxZWFpsUFh0MGFHbHpMbkJ5YjNCekxtOXVUVzl1ZEdoTmIzVnpaVXhsWVhabGZWeHVJQ0FnSUNBZ0lDQnZibGxsWVhKTmIzVnpaVVZ1ZEdWeVBYdDBhR2x6TG5CeWIzQnpMbTl1V1dWaGNrMXZkWE5sUlc1MFpYSjlYRzRnSUNBZ0lDQWdJRzl1V1dWaGNrMXZkWE5sVEdWaGRtVTllM1JvYVhNdWNISnZjSE11YjI1WlpXRnlUVzkxYzJWTVpXRjJaWDFjYmlBZ0lDQWdJQ0FnYzJWc1pXTjBjMFJwYzJGaWJHVmtSR0Y1YzBsdVVtRnVaMlU5ZTNSb2FYTXVjSEp2Y0hNdWMyVnNaV04wYzBScGMyRmliR1ZrUkdGNWMwbHVVbUZ1WjJWOVhHNGdJQ0FnSUNBZ0lITm9iM2RVYVcxbFNXNXdkWFE5ZTNSb2FYTXVjSEp2Y0hNdWMyaHZkMVJwYldWSmJuQjFkSDFjYmlBZ0lDQWdJQ0FnYzJodmQwMXZiblJvV1dWaGNsQnBZMnRsY2oxN2RHaHBjeTV3Y205d2N5NXphRzkzVFc5dWRHaFpaV0Z5VUdsamEyVnlmVnh1SUNBZ0lDQWdJQ0J6YUc5M1JuVnNiRTF2Ym5Sb1dXVmhjbEJwWTJ0bGNqMTdkR2hwY3k1d2NtOXdjeTV6YUc5M1JuVnNiRTF2Ym5Sb1dXVmhjbEJwWTJ0bGNuMWNiaUFnSUNBZ0lDQWdjMmh2ZDFSM2IwTnZiSFZ0YmsxdmJuUm9XV1ZoY2xCcFkydGxjajE3ZEdocGN5NXdjbTl3Y3k1emFHOTNWSGR2UTI5c2RXMXVUVzl1ZEdoWlpXRnlVR2xqYTJWeWZWeHVJQ0FnSUNBZ0lDQnphRzkzUm05MWNrTnZiSFZ0YmsxdmJuUm9XV1ZoY2xCcFkydGxjajE3ZEdocGN5NXdjbTl3Y3k1emFHOTNSbTkxY2tOdmJIVnRiazF2Ym5Sb1dXVmhjbEJwWTJ0bGNuMWNiaUFnSUNBZ0lDQWdjMmh2ZDFsbFlYSlFhV05yWlhJOWUzUm9hWE11Y0hKdmNITXVjMmh2ZDFsbFlYSlFhV05yWlhKOVhHNGdJQ0FnSUNBZ0lITm9iM2RSZFdGeWRHVnlXV1ZoY2xCcFkydGxjajE3ZEdocGN5NXdjbTl3Y3k1emFHOTNVWFZoY25SbGNsbGxZWEpRYVdOclpYSjlYRzRnSUNBZ0lDQWdJSE5vYjNkWFpXVnJVR2xqYTJWeVBYdDBhR2x6TG5CeWIzQnpMbk5vYjNkWFpXVnJVR2xqYTJWeWZWeHVJQ0FnSUNBZ0lDQmxlR05zZFdSbFUyTnliMnhzWW1GeVBYdDBhR2x6TG5CeWIzQnpMbVY0WTJ4MVpHVlRZM0p2Ykd4aVlYSjlYRzRnSUNBZ0lDQWdJR2hoYm1Sc1pVOXVTMlY1Ukc5M2JqMTdkR2hwY3k1d2NtOXdjeTV2Ymt0bGVVUnZkMjU5WEc0Z0lDQWdJQ0FnSUdoaGJtUnNaVTl1UkdGNVMyVjVSRzkzYmoxN2RHaHBjeTV2YmtSaGVVdGxlVVJ2ZDI1OVhHNGdJQ0FnSUNBZ0lHbHpTVzV3ZFhSR2IyTjFjMlZrUFh0MGFHbHpMbk4wWVhSbExtWnZZM1Z6WldSOVhHNGdJQ0FnSUNBZ0lHTjFjM1J2YlZScGJXVkpibkIxZEQxN2RHaHBjeTV3Y205d2N5NWpkWE4wYjIxVWFXMWxTVzV3ZFhSOVhHNGdJQ0FnSUNBZ0lITmxkRkJ5WlZObGJHVmpkR2x2YmoxN2RHaHBjeTV6WlhSUWNtVlRaV3hsWTNScGIyNTlYRzRnSUNBZ0lDQWdJSFZ6WlZCdmFXNTBaWEpGZG1WdWREMTdkR2hwY3k1d2NtOXdjeTUxYzJWUWIybHVkR1Z5UlhabGJuUjlYRzRnSUNBZ0lDQWdJSGxsWVhKRGJHRnpjMDVoYldVOWUzUm9hWE11Y0hKdmNITXVlV1ZoY2tOc1lYTnpUbUZ0WlgxY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ2UzUm9hWE11Y0hKdmNITXVZMmhwYkdSeVpXNTlYRzRnSUNBZ0lDQThMMWR5WVhCd1pXUkRZV3hsYm1SaGNqNWNiaUFnSUNBcE8xeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNrRnlhV0ZNYVhabFVtVm5hVzl1SUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2daR0YwWlVadmNtMWhkQ3dnYkc5allXeGxJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUdOdmJuTjBJR2x6UTI5dWRHRnBibk5VYVcxbElEMWNiaUFnSUNBZ0lIUm9hWE11Y0hKdmNITXVjMmh2ZDFScGJXVkpibkIxZENCOGZDQjBhR2x6TG5CeWIzQnpMbk5vYjNkVWFXMWxVMlZzWldOME8xeHVJQ0FnSUdOdmJuTjBJR3h2Ym1kRVlYUmxSbTl5YldGMElEMGdhWE5EYjI1MFlXbHVjMVJwYldVZ1B5QmNJbEJRVUZCd1hDSWdPaUJjSWxCUVVGQmNJanRjYmlBZ0lDQnNaWFFnWVhKcFlVeHBkbVZOWlhOellXZGxPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdWMyVnNaV04wYzFKaGJtZGxLU0I3WEc0Z0lDQWdJQ0JoY21saFRHbDJaVTFsYzNOaFoyVWdQU0JnVTJWc1pXTjBaV1FnYzNSaGNuUWdaR0YwWlRvZ0pIdHpZV1psUkdGMFpVWnZjbTFoZENoY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXpkR0Z5ZEVSaGRHVXNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNCa1lYUmxSbTl5YldGME9pQnNiMjVuUkdGMFpVWnZjbTFoZEN4Y2JpQWdJQ0FnSUNBZ0lDQnNiMk5oYkdVc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQXBmUzRnSkh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NWxibVJFWVhSbFhHNGdJQ0FnSUNBZ0lDQWdQeUJjSWtWdVpDQmtZWFJsT2lCY0lpQXJYRzRnSUNBZ0lDQWdJQ0FnSUNCellXWmxSR0YwWlVadmNtMWhkQ2gwYUdsekxuQnliM0J6TG1WdVpFUmhkR1VzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFpVWnZjbTFoZERvZ2JHOXVaMFJoZEdWR2IzSnRZWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGc1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDQWdPaUJjSWx3aVhHNGdJQ0FnSUNCOVlEdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVjMmh2ZDFScGJXVlRaV3hsWTNSUGJteDVLU0I3WEc0Z0lDQWdJQ0FnSUdGeWFXRk1hWFpsVFdWemMyRm5aU0E5SUdCVFpXeGxZM1JsWkNCMGFXMWxPaUFrZTNOaFptVkVZWFJsUm05eWJXRjBLRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyVnNaV04wWldRc1hHNGdJQ0FnSUNBZ0lDQWdleUJrWVhSbFJtOXliV0YwTENCc2IyTmhiR1VnZlN4Y2JpQWdJQ0FnSUNBZ0tYMWdPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxuQnliM0J6TG5Ob2IzZFpaV0Z5VUdsamEyVnlLU0I3WEc0Z0lDQWdJQ0FnSUdGeWFXRk1hWFpsVFdWemMyRm5aU0E5SUdCVFpXeGxZM1JsWkNCNVpXRnlPaUFrZTNOaFptVkVZWFJsUm05eWJXRjBLRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyVnNaV04wWldRc1hHNGdJQ0FnSUNBZ0lDQWdleUJrWVhSbFJtOXliV0YwT2lCY0lubDVlWGxjSWl3Z2JHOWpZV3hsSUgwc1hHNGdJQ0FnSUNBZ0lDbDlZRHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdocGN5NXdjbTl3Y3k1emFHOTNUVzl1ZEdoWlpXRnlVR2xqYTJWeUtTQjdYRzRnSUNBZ0lDQWdJR0Z5YVdGTWFYWmxUV1Z6YzJGblpTQTlJR0JUWld4bFkzUmxaQ0J0YjI1MGFEb2dKSHR6WVdabFJHRjBaVVp2Y20xaGRDaGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG5ObGJHVmpkR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lIc2daR0YwWlVadmNtMWhkRG9nWENKTlRVMU5JSGw1ZVhsY0lpd2diRzlqWVd4bElIMHNYRzRnSUNBZ0lDQWdJQ2w5WUR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTV3Y205d2N5NXphRzkzVVhWaGNuUmxjbGxsWVhKUWFXTnJaWElwSUh0Y2JpQWdJQ0FnSUNBZ1lYSnBZVXhwZG1WTlpYTnpZV2RsSUQwZ1lGTmxiR1ZqZEdWa0lIRjFZWEowWlhJNklDUjdjMkZtWlVSaGRHVkdiM0p0WVhRb1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTV6Wld4bFkzUmxaQ3hjYmlBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSbFJtOXliV0YwT2lCY0lubDVlWGtzSUZGUlVWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOWpZV3hsTEZ4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ2w5WUR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdGeWFXRk1hWFpsVFdWemMyRm5aU0E5SUdCVFpXeGxZM1JsWkNCa1lYUmxPaUFrZTNOaFptVkVZWFJsUm05eWJXRjBLRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyVnNaV04wWldRc1hHNGdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBaVVp2Y20xaGREb2diRzl1WjBSaGRHVkdiM0p0WVhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOaGJHVXNYRzRnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0tYMWdPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOGMzQmhibHh1SUNBZ0lDQWdJQ0J5YjJ4bFBWd2lZV3hsY25SY0lseHVJQ0FnSUNBZ0lDQmhjbWxoTFd4cGRtVTlYQ0p3YjJ4cGRHVmNJbHh1SUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5aGNtbGhMV3hwZG1WY0lseHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQjdZWEpwWVV4cGRtVk5aWE56WVdkbGZWeHVJQ0FnSUNBZ1BDOXpjR0Z1UGx4dUlDQWdJQ2s3WEc0Z0lIMDdYRzVjYmlBZ2NtVnVaR1Z5UkdGMFpVbHVjSFYwSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHTnNZWE56VG1GdFpTQTlJR05zYzNnb2RHaHBjeTV3Y205d2N5NWpiR0Z6YzA1aGJXVXNJSHRjYmlBZ0lDQWdJRnR2ZFhSemFXUmxRMnhwWTJ0SloyNXZjbVZEYkdGemMxMDZJSFJvYVhNdWMzUmhkR1V1YjNCbGJpeGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHTnZibk4wSUdOMWMzUnZiVWx1Y0hWMElEMGdkR2hwY3k1d2NtOXdjeTVqZFhOMGIyMUpibkIxZENCOGZDQThhVzV3ZFhRZ2RIbHdaVDFjSW5SbGVIUmNJaUF2UGp0Y2JpQWdJQ0JqYjI1emRDQmpkWE4wYjIxSmJuQjFkRkpsWmlBOUlIUm9hWE11Y0hKdmNITXVZM1Z6ZEc5dFNXNXdkWFJTWldZZ2ZId2dYQ0p5WldaY0lqdGNiaUFnSUNCamIyNXpkQ0JwYm5CMWRGWmhiSFZsSUQxY2JpQWdJQ0FnSUhSNWNHVnZaaUIwYUdsekxuQnliM0J6TG5aaGJIVmxJRDA5UFNCY0luTjBjbWx1WjF3aVhHNGdJQ0FnSUNBZ0lEOGdkR2hwY3k1d2NtOXdjeTUyWVd4MVpWeHVJQ0FnSUNBZ0lDQTZJSFI1Y0dWdlppQjBhR2x6TG5OMFlYUmxMbWx1Y0hWMFZtRnNkV1VnUFQwOUlGd2ljM1J5YVc1blhDSmNiaUFnSUNBZ0lDQWdJQ0EvSUhSb2FYTXVjM1JoZEdVdWFXNXdkWFJXWVd4MVpWeHVJQ0FnSUNBZ0lDQWdJRG9nZEdocGN5NXdjbTl3Y3k1elpXeGxZM1J6VW1GdVoyVmNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z2MyRm1aVVJoZEdWU1lXNW5aVVp2Y20xaGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbk4wWVhKMFJHRjBaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1WdVpFUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdPaUIwYUdsekxuQnliM0J6TG5ObGJHVmpkSE5OZFd4MGFYQnNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JSE5oWm1WTmRXeDBhWEJzWlVSaGRHVnpSbTl5YldGMEtIUm9hWE11Y0hKdmNITXVjMlZzWldOMFpXUkVZWFJsY3l3Z2RHaHBjeTV3Y205d2N5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ09pQnpZV1psUkdGMFpVWnZjbTFoZENoMGFHbHpMbkJ5YjNCekxuTmxiR1ZqZEdWa0xDQjBhR2x6TG5CeWIzQnpLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQlNaV0ZqZEM1amJHOXVaVVZzWlcxbGJuUW9ZM1Z6ZEc5dFNXNXdkWFFzSUh0Y2JpQWdJQ0FnSUZ0amRYTjBiMjFKYm5CMWRGSmxabDA2SUNocGJuQjFkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdWNIVjBJRDBnYVc1d2RYUTdYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdkbUZzZFdVNklHbHVjSFYwVm1Gc2RXVXNYRzRnSUNBZ0lDQnZia0pzZFhJNklIUm9hWE11YUdGdVpHeGxRbXgxY2l4Y2JpQWdJQ0FnSUc5dVEyaGhibWRsT2lCMGFHbHpMbWhoYm1Sc1pVTm9ZVzVuWlN4Y2JpQWdJQ0FnSUc5dVEyeHBZMnM2SUhSb2FYTXViMjVKYm5CMWRFTnNhV05yTEZ4dUlDQWdJQ0FnYjI1R2IyTjFjem9nZEdocGN5NW9ZVzVrYkdWR2IyTjFjeXhjYmlBZ0lDQWdJRzl1UzJWNVJHOTNiam9nZEdocGN5NXZia2x1Y0hWMFMyVjVSRzkzYml4Y2JpQWdJQ0FnSUdsa09pQjBhR2x6TG5CeWIzQnpMbWxrTEZ4dUlDQWdJQ0FnYm1GdFpUb2dkR2hwY3k1d2NtOXdjeTV1WVcxbExGeHVJQ0FnSUNBZ1ptOXliVG9nZEdocGN5NXdjbTl3Y3k1bWIzSnRMRnh1SUNBZ0lDQWdZWFYwYjBadlkzVnpPaUIwYUdsekxuQnliM0J6TG1GMWRHOUdiMk4xY3l4Y2JpQWdJQ0FnSUhCc1lXTmxhRzlzWkdWeU9pQjBhR2x6TG5CeWIzQnpMbkJzWVdObGFHOXNaR1Z5VkdWNGRDeGNiaUFnSUNBZ0lHUnBjMkZpYkdWa09pQjBhR2x6TG5CeWIzQnpMbVJwYzJGaWJHVmtMRnh1SUNBZ0lDQWdZWFYwYjBOdmJYQnNaWFJsT2lCMGFHbHpMbkJ5YjNCekxtRjFkRzlEYjIxd2JHVjBaU3hjYmlBZ0lDQWdJR05zWVhOelRtRnRaVG9nWTJ4emVDaGpkWE4wYjIxSmJuQjFkQzV3Y205d2N5NWpiR0Z6YzA1aGJXVXNJR05zWVhOelRtRnRaU2tzWEc0Z0lDQWdJQ0IwYVhSc1pUb2dkR2hwY3k1d2NtOXdjeTUwYVhSc1pTeGNiaUFnSUNBZ0lISmxZV1JQYm14NU9pQjBhR2x6TG5CeWIzQnpMbkpsWVdSUGJteDVMRnh1SUNBZ0lDQWdjbVZ4ZFdseVpXUTZJSFJvYVhNdWNISnZjSE11Y21WeGRXbHlaV1FzWEc0Z0lDQWdJQ0IwWVdKSmJtUmxlRG9nZEdocGN5NXdjbTl3Y3k1MFlXSkpibVJsZUN4Y2JpQWdJQ0FnSUZ3aVlYSnBZUzFrWlhOamNtbGlaV1JpZVZ3aU9pQjBhR2x6TG5CeWIzQnpMbUZ5YVdGRVpYTmpjbWxpWldSQ2VTeGNiaUFnSUNBZ0lGd2lZWEpwWVMxcGJuWmhiR2xrWENJNklIUm9hWE11Y0hKdmNITXVZWEpwWVVsdWRtRnNhV1FzWEc0Z0lDQWdJQ0JjSW1GeWFXRXRiR0ZpWld4c1pXUmllVndpT2lCMGFHbHpMbkJ5YjNCekxtRnlhV0ZNWVdKbGJHeGxaRUo1TEZ4dUlDQWdJQ0FnWENKaGNtbGhMWEpsY1hWcGNtVmtYQ0k2SUhSb2FYTXVjSEp2Y0hNdVlYSnBZVkpsY1hWcGNtVmtMRnh1SUNBZ0lIMHBPMXh1SUNCOU8xeHVYRzRnSUhKbGJtUmxja05zWldGeVFuVjBkRzl1SUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lHbHpRMnhsWVhKaFlteGxMRnh1SUNBZ0lDQWdaR2x6WVdKc1pXUXNYRzRnSUNBZ0lDQnpaV3hsWTNSbFpDeGNiaUFnSUNBZ0lITjBZWEowUkdGMFpTeGNiaUFnSUNBZ0lHVnVaRVJoZEdVc1hHNGdJQ0FnSUNCamJHVmhja0oxZEhSdmJsUnBkR3hsTEZ4dUlDQWdJQ0FnWTJ4bFlYSkNkWFIwYjI1RGJHRnpjMDVoYldVZ1BTQmNJbHdpTEZ4dUlDQWdJQ0FnWVhKcFlVeGhZbVZzUTJ4dmMyVWdQU0JjSWtOc2IzTmxYQ0lzWEc0Z0lDQWdJQ0J6Wld4bFkzUmxaRVJoZEdWekxGeHVJQ0FnSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJR2x6UTJ4bFlYSmhZbXhsSUNZbVhHNGdJQ0FnSUNBb2MyVnNaV04wWldRZ0lUMGdiblZzYkNCOGZGeHVJQ0FnSUNBZ0lDQnpkR0Z5ZEVSaGRHVWdJVDBnYm5Wc2JDQjhmRnh1SUNBZ0lDQWdJQ0JsYm1SRVlYUmxJQ0U5SUc1MWJHd2dmSHhjYmlBZ0lDQWdJQ0FnYzJWc1pXTjBaV1JFWVhSbGN6OHViR1Z1WjNSb0tWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ1BHSjFkSFJ2Ymx4dUlDQWdJQ0FnSUNBZ0lIUjVjR1U5WENKaWRYUjBiMjVjSWx4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdZMnh6ZUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmWTJ4dmMyVXRhV052Ymx3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSkNkWFIwYjI1RGJHRnpjMDVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3SUZ3aWNtVmhZM1F0WkdGMFpYQnBZMnRsY2w5ZlkyeHZjMlV0YVdOdmJpMHRaR2x6WVdKc1pXUmNJam9nWkdsellXSnNaV1FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUdScGMyRmliR1ZrUFh0a2FYTmhZbXhsWkgxY2JpQWdJQ0FnSUNBZ0lDQmhjbWxoTFd4aFltVnNQWHRoY21saFRHRmlaV3hEYkc5elpYMWNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHQwYUdsekxtOXVRMnhsWVhKRGJHbGphMzFjYmlBZ0lDQWdJQ0FnSUNCMGFYUnNaVDE3WTJ4bFlYSkNkWFIwYjI1VWFYUnNaWDFjYmlBZ0lDQWdJQ0FnSUNCMFlXSkpibVJsZUQxN0xURjlYRzRnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlTVzV3ZFhSRGIyNTBZV2x1WlhJb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCemFHOTNTV052Yml3Z2FXTnZiaXdnWTJGc1pXNWtZWEpKWTI5dVEyeGhjM051WVcxbExDQjBiMmRuYkdWRFlXeGxibVJoY2s5dVNXTnZia05zYVdOcklIMGdQVnh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCN0lHOXdaVzRnZlNBOUlIUm9hWE11YzNSaGRHVTdYRzVjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTJCeVpXRmpkQzFrWVhSbGNHbGphMlZ5WDE5cGJuQjFkQzFqYjI1MFlXbHVaWElrZTF4dUlDQWdJQ0FnSUNBZ0lITm9iM2RKWTI5dUlEOGdYQ0lnY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmZG1sbGR5MWpZV3hsYm1SaGNpMXBZMjl1WENJZ09pQmNJbHdpWEc0Z0lDQWdJQ0FnSUgxZ2ZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQjdjMmh2ZDBsamIyNGdKaVlnS0Z4dUlDQWdJQ0FnSUNBZ0lEeERZV3hsYm1SaGNrbGpiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGpiMjQ5ZTJsamIyNTlYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyQWtlMk5oYkdWdVpHRnlTV052YmtOc1lYTnpibUZ0WlgwZ0pIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2IzQmxiaUFtSmlCY0luSmxZV04wTFdSaGRHVndhV05yWlhJdGFXZHViM0psTFc5dVkyeHBZMnR2ZFhSemFXUmxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2V5NHVMaWgwYjJkbmJHVkRZV3hsYm1SaGNrOXVTV052YmtOc2FXTnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphem9nZEdocGN5NTBiMmRuYkdWRFlXeGxibVJoY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2JuVnNiQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnZTNSb2FYTXVjM1JoZEdVdWFYTlNaVzVrWlhKQmNtbGhUR2wyWlUxbGMzTmhaMlVnSmlZZ2RHaHBjeTV5Wlc1a1pYSkJjbWxoVEdsMlpWSmxaMmx2YmlncGZWeHVJQ0FnSUNBZ0lDQjdkR2hwY3k1eVpXNWtaWEpFWVhSbFNXNXdkWFFvS1gxY2JpQWdJQ0FnSUNBZ2UzUm9hWE11Y21WdVpHVnlRMnhsWVhKQ2RYUjBiMjRvS1gxY2JpQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0J5Wlc1a1pYSW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ1kyRnNaVzVrWVhJZ1BTQjBhR2x6TG5KbGJtUmxja05oYkdWdVpHRnlLQ2s3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV3Y205d2N5NXBibXhwYm1VcElISmxkSFZ5YmlCallXeGxibVJoY2p0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbmRwZEdoUWIzSjBZV3dwSUh0Y2JpQWdJQ0FnSUd4bGRDQndiM0owWVd4RGIyNTBZV2x1WlhJZ1BTQjBhR2x6TG5OMFlYUmxMbTl3Wlc0Z1B5QW9YRzRnSUNBZ0lDQWdJRHhVWVdKTWIyOXdJR1Z1WVdKc1pWUmhZa3h2YjNBOWUzUm9hWE11Y0hKdmNITXVaVzVoWW14bFZHRmlURzl2Y0gwK1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpY21WaFkzUXRaR0YwWlhCcFkydGxjbDlmY0c5eWRHRnNYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmhZa2x1WkdWNFBYc3RNWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVTMlY1Ukc5M2JqMTdkR2hwY3k1dmJsQnZjblJoYkV0bGVVUnZkMjU5WEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnZTJOaGJHVnVaR0Z5ZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBOEwxUmhZa3h2YjNBK1hHNGdJQ0FnSUNBcElEb2diblZzYkR0Y2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWMzUmhkR1V1YjNCbGJpQW1KaUIwYUdsekxuQnliM0J6TG5CdmNuUmhiRWxrS1NCN1hHNGdJQ0FnSUNBZ0lIQnZjblJoYkVOdmJuUmhhVzVsY2lBOUlDaGNiaUFnSUNBZ0lDQWdJQ0E4VUc5eWRHRnNYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzSjBZV3hKWkQxN2RHaHBjeTV3Y205d2N5NXdiM0owWVd4SlpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmNuUmhiRWh2YzNROWUzUm9hWE11Y0hKdmNITXVjRzl5ZEdGc1NHOXpkSDFjYmlBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3Y0c5eWRHRnNRMjl1ZEdGcGJtVnlmVnh1SUNBZ0lDQWdJQ0FnSUR3dlVHOXlkR0ZzUGx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQThaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lIdDBhR2x6TG5KbGJtUmxja2x1Y0hWMFEyOXVkR0ZwYm1WeUtDbDlYRzRnSUNBZ0lDQWdJQ0FnZTNCdmNuUmhiRU52Ym5SaGFXNWxjbjFjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOFVHOXdjR1Z5UTI5dGNHOXVaVzUwWEc0Z0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN2RHaHBjeTV3Y205d2N5NXdiM0J3WlhKRGJHRnpjMDVoYldWOVhHNGdJQ0FnSUNBZ0lIZHlZWEJ3WlhKRGJHRnpjMDVoYldVOWUzUm9hWE11Y0hKdmNITXVkM0poY0hCbGNrTnNZWE56VG1GdFpYMWNiaUFnSUNBZ0lDQWdhR2xrWlZCdmNIQmxjajE3SVhSb2FYTXVhWE5EWVd4bGJtUmhjazl3Wlc0b0tYMWNiaUFnSUNBZ0lDQWdjRzl5ZEdGc1NXUTllM1JvYVhNdWNISnZjSE11Y0c5eWRHRnNTV1I5WEc0Z0lDQWdJQ0FnSUhCdmNuUmhiRWh2YzNROWUzUm9hWE11Y0hKdmNITXVjRzl5ZEdGc1NHOXpkSDFjYmlBZ0lDQWdJQ0FnY0c5d2NHVnlUVzlrYVdacFpYSnpQWHQwYUdsekxuQnliM0J6TG5CdmNIQmxjazF2WkdsbWFXVnljMzFjYmlBZ0lDQWdJQ0FnZEdGeVoyVjBRMjl0Y0c5dVpXNTBQWHQwYUdsekxuSmxibVJsY2tsdWNIVjBRMjl1ZEdGcGJtVnlLQ2w5WEc0Z0lDQWdJQ0FnSUhCdmNIQmxja052Ym5SaGFXNWxjajE3ZEdocGN5NXdjbTl3Y3k1d2IzQndaWEpEYjI1MFlXbHVaWEo5WEc0Z0lDQWdJQ0FnSUhCdmNIQmxja052YlhCdmJtVnVkRDE3WTJGc1pXNWtZWEo5WEc0Z0lDQWdJQ0FnSUhCdmNIQmxjbEJzWVdObGJXVnVkRDE3ZEdocGN5NXdjbTl3Y3k1d2IzQndaWEpRYkdGalpXMWxiblI5WEc0Z0lDQWdJQ0FnSUhCdmNIQmxjbEJ5YjNCelBYdDBhR2x6TG5CeWIzQnpMbkJ2Y0hCbGNsQnliM0J6ZlZ4dUlDQWdJQ0FnSUNCd2IzQndaWEpQYmt0bGVVUnZkMjQ5ZTNSb2FYTXViMjVRYjNCd1pYSkxaWGxFYjNkdWZWeHVJQ0FnSUNBZ0lDQmxibUZpYkdWVVlXSk1iMjl3UFh0MGFHbHpMbkJ5YjNCekxtVnVZV0pzWlZSaFlreHZiM0I5WEc0Z0lDQWdJQ0FnSUhOb2IzZEJjbkp2ZHoxN2RHaHBjeTV3Y205d2N5NXphRzkzVUc5d2NHVnlRWEp5YjNkOVhHNGdJQ0FnSUNBdlBseHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JseHVZMjl1YzNRZ1VGSkZVMFZNUlVOVVgwTklRVTVIUlY5V1NVRmZTVTVRVlZRZ1BTQmNJbWx1Y0hWMFhDSTdYRzVqYjI1emRDQlFVa1ZUUlV4RlExUmZRMGhCVGtkRlgxWkpRVjlPUVZaSlIwRlVSU0E5SUZ3aWJtRjJhV2RoZEdWY0lqdGNiaUpkTENKdVlXMWxjeUk2V3lKRVJVWkJWVXhVWDFsRlFWSmZTVlJGVFY5T1ZVMUNSVklpTENKc2IyNW5SbTl5YldGMGRHbHVaMVJ2YTJWdWMxSmxaMFY0Y0NJc0ltNWxkMFJoZEdVaUxDSjJZV3gxWlNJc0ltUWlMQ0pUZEhKcGJtY2lMQ0p3WVhKelpVbFRUeUlzSW5SdlJHRjBaU0lzSWtSaGRHVWlMQ0pwYzFaaGJHbGtJaXdpY0dGeWMyVkVZWFJsSWl3aVpHRjBaVVp2Y20xaGRDSXNJbXh2WTJGc1pTSXNJbk4wY21samRGQmhjbk5wYm1jaUxDSnRhVzVFWVhSbElpd2ljR0Z5YzJWa1JHRjBaU0lzSW14dlkyRnNaVTlpYW1WamRDSXNJbWRsZEV4dlkyRnNaVTlpYW1WamRDSXNJbWRsZEVSbFptRjFiSFJNYjJOaGJHVWlMQ0p6ZEhKcFkzUlFZWEp6YVc1blZtRnNkV1ZOWVhSamFDSXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbVp2Y2tWaFkyZ2lMQ0prWmlJc0luUnllVkJoY25ObFJHRjBaU0lzSW5CaGNuTmxJaXdpZFhObFFXUmthWFJwYjI1aGJGZGxaV3RaWldGeVZHOXJaVzV6SWl3aWRYTmxRV1JrYVhScGIyNWhiRVJoZVU5bVdXVmhjbFJ2YTJWdWN5SXNJbVp2Y20xaGRFUmhkR1VpTENKdFlYUmphQ0lzSW0xaGNDSXNJbk4xWW5OMGNtbHVaeUlzSW1acGNuTjBRMmhoY21GamRHVnlJaXdpYkc5dVowWnZjbTFoZEhSbGNpSXNJbXh2Ym1kR2IzSnRZWFIwWlhKeklpd2labTl5YldGMFRHOXVaeUlzSW1wdmFXNGlMQ0pzWlc1bmRHZ2lMQ0p6YkdsalpTSXNJbVJoZEdVaUxDSnBjMVpoYkdsa1JHRjBaU0lzSW1selFtVm1iM0psSWl3aVptOXliV0YwVTNSeUlpd2labTl5YldGMElpd2liRzlqWVd4bFQySnFJaXdpWTI5dWMyOXNaU0lzSW5kaGNtNGlMQ0pqYjI1allYUWlMQ0p6WVdabFJHRjBaVVp2Y20xaGRDSXNJbDl5WldZaUxDSnpZV1psUkdGMFpWSmhibWRsUm05eWJXRjBJaXdpYzNSaGNuUkVZWFJsSWl3aVpXNWtSR0YwWlNJc0luQnliM0J6SWl3aVptOXliV0YwZEdWa1UzUmhjblJFWVhSbElpd2labTl5YldGMGRHVmtSVzVrUkdGMFpTSXNJbk5oWm1WTmRXeDBhWEJzWlVSaGRHVnpSbTl5YldGMElpd2laR0YwWlhNaUxDSm1iM0p0WVhSMFpXUkdhWEp6ZEVSaGRHVWlMQ0ptYjNKdFlYUjBaV1JUWldOdmJtUkVZWFJsSWl3aVpYaDBjbUZFWVhSbGMwTnZkVzUwSWl3aWMyVjBWR2x0WlNJc0lsOXlaV1l5SWl3aVgzSmxaaklrYUc5MWNpSXNJbWh2ZFhJaUxDSmZjbVZtTWlSdGFXNTFkR1VpTENKdGFXNTFkR1VpTENKZmNtVm1NaVJ6WldOdmJtUWlMQ0p6WldOdmJtUWlMQ0p6WlhSSWIzVnljeUlzSW5ObGRFMXBiblYwWlhNaUxDSnpaWFJUWldOdmJtUnpJaXdpWjJWMFYyVmxheUlzSW1kbGRFbFRUMWRsWldzaUxDSm5aWFJFWVhsUFpsZGxaV3REYjJSbElpd2laR0Y1SWl3aVoyVjBVM1JoY25SUFprUmhlU0lzSW5OMFlYSjBUMlpFWVhraUxDSm5aWFJUZEdGeWRFOW1WMlZsYXlJc0ltTmhiR1Z1WkdGeVUzUmhjblJFWVhraUxDSnpkR0Z5ZEU5bVYyVmxheUlzSW5kbFpXdFRkR0Z5ZEhOUGJpSXNJbWRsZEZOMFlYSjBUMlpOYjI1MGFDSXNJbk4wWVhKMFQyWk5iMjUwYUNJc0ltZGxkRk4wWVhKMFQyWlpaV0Z5SWl3aWMzUmhjblJQWmxsbFlYSWlMQ0puWlhSVGRHRnlkRTltVVhWaGNuUmxjaUlzSW5OMFlYSjBUMlpSZFdGeWRHVnlJaXdpWjJWMFUzUmhjblJQWmxSdlpHRjVJaXdpWjJWMFJXNWtUMlpYWldWcklpd2laVzVrVDJaWFpXVnJJaXdpYVhOVFlXMWxXV1ZoY2lJc0ltUmhkR1V4SWl3aVpHRjBaVElpTENKa1prbHpVMkZ0WlZsbFlYSWlMQ0pwYzFOaGJXVk5iMjUwYUNJc0ltUm1TWE5UWVcxbFRXOXVkR2dpTENKcGMxTmhiV1ZSZFdGeWRHVnlJaXdpWkdaSmMxTmhiV1ZSZFdGeWRHVnlJaXdpYVhOVFlXMWxSR0Y1SWl3aVpHWkpjMU5oYldWRVlYa2lMQ0pwYzBWeGRXRnNJaXdpWkdaSmMwVnhkV0ZzSWl3aWFYTkVZWGxKYmxKaGJtZGxJaXdpZG1Gc2FXUWlMQ0p6ZEdGeWRDSXNJbVZ1WkNJc0ltVnVaRTltUkdGNUlpd2lhWE5YYVhSb2FXNUpiblJsY25aaGJDSXNJbVZ5Y2lJc0luSmxaMmx6ZEdWeVRHOWpZV3hsSWl3aWJHOWpZV3hsVG1GdFpTSXNJbXh2WTJGc1pVUmhkR0VpTENKelkyOXdaU0lzSW5kcGJtUnZkeUlzSW1kc2IySmhiRlJvYVhNaUxDSmZYMnh2WTJGc1pVUmhkR0ZmWHlJc0luTmxkRVJsWm1GMWJIUk1iMk5oYkdVaUxDSmZYMnh2WTJGc1pVbGtYMThpTENKc2IyTmhiR1ZUY0dWaklpd2laMlYwUm05eWJXRjBkR1ZrVjJWbGEyUmhlVWx1VEc5allXeGxJaXdpWm05eWJXRjBSblZ1WXlJc0ltZGxkRmRsWld0a1lYbE5hVzVKYmt4dlkyRnNaU0lzSW1kbGRGZGxaV3RrWVhsVGFHOXlkRWx1VEc5allXeGxJaXdpWjJWMFRXOXVkR2hKYmt4dlkyRnNaU0lzSW0xdmJuUm9JaXdpYzJWMFRXOXVkR2dpTENKblpYUk5iMjUwYUZOb2IzSjBTVzVNYjJOaGJHVWlMQ0puWlhSUmRXRnlkR1Z5VTJodmNuUkpia3h2WTJGc1pTSXNJbkYxWVhKMFpYSWlMQ0p6WlhSUmRXRnlkR1Z5SWl3aWFYTkVZWGxFYVhOaFlteGxaQ0lzSWw5eVpXWXpJaXdpWVhKbmRXMWxiblJ6SWl3aWRXNWtaV1pwYm1Wa0lpd2liV0Y0UkdGMFpTSXNJbVY0WTJ4MVpHVkVZWFJsY3lJc0ltVjRZMngxWkdWRVlYUmxTVzUwWlhKMllXeHpJaXdpYVc1amJIVmtaVVJoZEdWeklpd2lhVzVqYkhWa1pVUmhkR1ZKYm5SbGNuWmhiSE1pTENKbWFXeDBaWEpFWVhSbElpd2lhWE5QZFhSUFprSnZkVzVrY3lJc0luTnZiV1VpTENKbGVHTnNkV1JsUkdGMFpTSXNJbDl5WldZMElpd2lhVzVqYkhWa1pVUmhkR1VpTENKZmNtVm1OU0lzSW1selJHRjVSWGhqYkhWa1pXUWlMQ0pmY21WbU5pSXNJbDl5WldZM0lpd2lhWE5OYjI1MGFFUnBjMkZpYkdWa0lpd2lYM0psWmpnaUxDSmxibVJQWmsxdmJuUm9JaXdpYVhOTmIyNTBhRWx1VW1GdVoyVWlMQ0p0SWl3aWMzUmhjblJFWVhSbFdXVmhjaUlzSW1kbGRGbGxZWElpTENKemRHRnlkRVJoZEdWTmIyNTBhQ0lzSW1kbGRFMXZiblJvSWl3aVpXNWtSR0YwWlZsbFlYSWlMQ0psYm1SRVlYUmxUVzl1ZEdnaUxDSmtZWGxaWldGeUlpd2lhWE5SZFdGeWRHVnlSR2x6WVdKc1pXUWlMQ0pmY21WbU9TSXNJbWx6V1dWaGNrbHVVbUZ1WjJVaUxDSjVaV0Z5SWl3aWMzUmhjblJaWldGeUlpd2laVzVrV1dWaGNpSXNJbWx6V1dWaGNrUnBjMkZpYkdWa0lpd2lYM0psWmpFd0lpd2laVzVrVDJaWlpXRnlJaXdpYVhOUmRXRnlkR1Z5U1c1U1lXNW5aU0lzSW5FaUxDSnpkR0Z5ZEVSaGRHVlJkV0Z5ZEdWeUlpd2laMlYwVVhWaGNuUmxjaUlzSW1WdVpFUmhkR1ZSZFdGeWRHVnlJaXdpWDNKbFpqRXhJaXdpWkdsbVptVnlaVzVqWlVsdVEyRnNaVzVrWVhKRVlYbHpJaXdpYVhOVWFXMWxTVzVNYVhOMElpd2lkR2x0WlNJc0luUnBiV1Z6SWl3aWJHbHpkRlJwYldVaUxDSm5aWFJJYjNWeWN5SXNJbWRsZEUxcGJuVjBaWE1pTENKcGMxUnBiV1ZFYVhOaFlteGxaQ0lzSWw5eVpXWXhNaUlzSW1WNFkyeDFaR1ZVYVcxbGN5SXNJbWx1WTJ4MVpHVlVhVzFsY3lJc0ltWnBiSFJsY2xScGJXVWlMQ0pwYzFScGJXVkpia1JwYzJGaWJHVmtVbUZ1WjJVaUxDSmZjbVZtTVRNaUxDSnRhVzVVYVcxbElpd2liV0Y0VkdsdFpTSXNJa1Z5Y205eUlpd2lZbUZ6WlNJc0ltSmhjMlZVYVcxbElpd2liV2x1SWl3aWJXRjRJaXdpYlc5dWRHaEVhWE5oWW14bFpFSmxabTl5WlNJc0lsOXlaV1l4TkNJc0luQnlaWFpwYjNWelRXOXVkR2dpTENKemRXSk5iMjUwYUhNaUxDSmthV1ptWlhKbGJtTmxTVzVEWVd4bGJtUmhjazF2Ym5Sb2N5SXNJbVYyWlhKNUlpd2liVzl1ZEdoRWFYTmhZbXhsWkVGbWRHVnlJaXdpWDNKbFpqRTFJaXdpYm1WNGRFMXZiblJvSWl3aVlXUmtUVzl1ZEdoeklpd2ljWFZoY25SbGNrUnBjMkZpYkdWa1FtVm1iM0psSWl3aVgzSmxaakUySWl3aVptbHljM1JFWVhSbFQyWlpaV0Z5SWl3aWNISmxkbWx2ZFhOUmRXRnlkR1Z5SWl3aWMzVmlVWFZoY25SbGNuTWlMQ0prYVdabVpYSmxibU5sU1c1RFlXeGxibVJoY2xGMVlYSjBaWEp6SWl3aWNYVmhjblJsY2tScGMyRmliR1ZrUVdaMFpYSWlMQ0pmY21WbU1UY2lMQ0pzWVhOMFJHRjBaVTltV1dWaGNpSXNJbTVsZUhSUmRXRnlkR1Z5SWl3aVlXUmtVWFZoY25SbGNuTWlMQ0o1WldGeVJHbHpZV0pzWldSQ1pXWnZjbVVpTENKZmNtVm1NVGdpTENKd2NtVjJhVzkxYzFsbFlYSWlMQ0p6ZFdKWlpXRnljeUlzSW1ScFptWmxjbVZ1WTJWSmJrTmhiR1Z1WkdGeVdXVmhjbk1pTENKNVpXRnljMFJwYzJGaWJHVmtRbVZtYjNKbElpd2lYM0psWmpFNUlpd2lYM0psWmpFNUpIbGxZWEpKZEdWdFRuVnRZbVZ5SWl3aWVXVmhja2wwWlcxT2RXMWlaWElpTENKZloyVjBXV1ZoY25OUVpYSnBiMlFpTENKblpYUlpaV0Z5YzFCbGNtbHZaQ0lzSW1WdVpGQmxjbWx2WkNJc0ltMXBia1JoZEdWWlpXRnlJaXdpZVdWaGNrUnBjMkZpYkdWa1FXWjBaWElpTENKZmNtVm1NakFpTENKdVpYaDBXV1ZoY2lJc0ltRmtaRmxsWVhKeklpd2llV1ZoY25ORWFYTmhZbXhsWkVGbWRHVnlJaXdpWDNKbFpqSXhJaXdpWDNKbFpqSXhKSGxsWVhKSmRHVnRUblZ0WW1WeUlpd2lYMmRsZEZsbFlYSnpVR1Z5YVc5a01pSXNJbk4wWVhKMFVHVnlhVzlrSWl3aWJXRjRSR0YwWlZsbFlYSWlMQ0puWlhSRlptWmxZM1JwZG1WTmFXNUVZWFJsSWl3aVgzSmxaakl5SWl3aWJXbHVSR0YwWlhNaUxDSm1hV3gwWlhJaUxDSm5aWFJGWm1abFkzUnBkbVZOWVhoRVlYUmxJaXdpWDNKbFpqSXpJaXdpYldGNFJHRjBaWE1pTENKblpYUklhV2RvZEV4cFoyaDBSR0Y1YzAxaGNDSXNJbWhwWjJoc2FXZG9kRVJoZEdWeklpd2laR1ZtWVhWc2RFTnNZWE56VG1GdFpTSXNJbVJoZEdWRGJHRnpjMlZ6SWl3aVRXRndJaXdpYVNJc0lteGxiaUlzSW05aWFpSXNJbWx6UkdGMFpTSXNJbXRsZVNJc0ltTnNZWE56VG1GdFpYTkJjbklpTENKblpYUWlMQ0pwYm1Oc2RXUmxjeUlzSW5CMWMyZ2lMQ0p6WlhRaUxDSmZkSGx3Wlc5bUlpd2lhMlY1Y3lJc0lrOWlhbVZqZENJc0ltTnNZWE56VG1GdFpTSXNJbUZ5Y2s5bVJHRjBaWE1pTENKamIyNXpkSEoxWTNSdmNpSXNJbXNpTENKaGNuSmhlWE5CY21WRmNYVmhiQ0lzSW1GeWNtRjVNU0lzSW1GeWNtRjVNaUlzSW1sdVpHVjRJaXdpWjJWMFNHOXNhV1JoZVhOTllYQWlMQ0pvYjJ4cFpHRjVSR0YwWlhNaUxDSm9iMnhwWkdGNUlpd2laR0YwWlU5aWFpSXNJbWh2Ykdsa1lYbE9ZVzFsSWl3aVkyeGhjM05PWVcxbGMwOWlhaUlzSW1odmJHbGtZWGxPWVcxbFFYSnlJaXdpWDNSdlEyOXVjM1Z0WVdKc1pVRnljbUY1SWl3aWRHbHRaWE5VYjBsdWFtVmpkRUZtZEdWeUlpd2lZM1Z5Y21WdWRGUnBiV1VpTENKamRYSnlaVzUwVFhWc2RHbHdiR2xsY2lJc0ltbHVkR1Z5ZG1Gc2N5SXNJbWx1YW1WamRHVmtWR2x0WlhNaUxDSnNJaXdpYVc1cVpXTjBaV1JVYVcxbElpd2lZV1JrU0c5MWNuTWlMQ0poWkdSTmFXNTFkR1Z6SWl3aVlXUmtVMlZqYjI1a2N5SXNJbWRsZEZObFkyOXVaSE1pTENKdVpYaDBWR2x0WlNJc0ltbHpRV1owWlhJaUxDSmhaR1JhWlhKdklpd2lUV0YwYUNJc0ltTmxhV3dpTENKblpYUkliM1Z5YzBsdVJHRjVJaXdpWjJWMFJuVnNiRmxsWVhJaUxDSm5aWFJFWVhSbElpd2ljM1JoY25SUFpsUm9aVTVsZUhSRVlYa2lMQ0p5YjNWdVpDSXNJbk4wWVhKMFQyWk5hVzUxZEdVaUxDSnpaV052Ym1Seklpd2liV2xzYkdselpXTnZibVJ6SWl3aVoyVjBUV2xzYkdselpXTnZibVJ6SWl3aVoyVjBWR2x0WlNJc0ltbHpVMkZ0WlUxcGJuVjBaU0lzSW1ReElpd2laRElpTENKblpYUk5hV1J1YVdkb2RFUmhkR1VpTENKa1lYUmxWMmwwYUc5MWRGUnBiV1VpTENKcGMwUmhkR1ZDWldadmNtVWlMQ0prWVhSbFZHOURiMjF3WVhKbElpd2liV2xrYm1sbmFIUkVZWFJsSWl3aWJXbGtibWxuYUhSRVlYUmxWRzlEYjIxd1lYSmxJaXdpYVhOVGNHRmpaVXRsZVVSdmQyNGlMQ0psZG1WdWRDSXNJbE5RUVVORlgwdEZXU0lzSW1kbGJtVnlZWFJsV1dWaGNuTWlMQ0p1YjA5bVdXVmhjaUlzSW14cGMzUWlMQ0p1WlhkWlpXRnlJaXdpYVhOSmJsSmhibWRsSWl3aVdXVmhja1J5YjNCa2IzZHVUM0IwYVc5dWN5SXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0pmZEdocGN5SXNJbDlqYkdGemMwTmhiR3hEYUdWamF5SXNJbDlqWVd4c1UzVndaWElpTENKZlpHVm1hVzVsVUhKdmNHVnlkSGtpTENKelpXeGxZM1JsWkZsbFlYSWlMQ0p2Y0hScGIyNXpJaXdpYzNSaGRHVWlMQ0o1WldGeWMweHBjM1FpTENKU1pXRmpkQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0p2YmtOc2FXTnJJaXdpYjI1RGFHRnVaMlVpTENKaWFXNWtJaXdpYldsdVdXVmhjaUlzSW0xaGVGbGxZWElpTENKbWFXNWtJaXdpZFc1emFHbG1kQ0lzSW1sdVkzSmxiV1Z1ZEZsbFlYSnpJaXdpWkdWamNtVnRaVzUwV1dWaGNuTWlMQ0p2YmtOaGJtTmxiQ0lzSW1GdGIzVnVkQ0lzSW5sbFlYSnpJaXdpYzJWMFUzUmhkR1VpTENKemFHbG1kRmxsWVhKeklpd2llV1ZoY2tSeWIzQmtiM2R1U1hSbGJVNTFiV0psY2lJc0luTmpjbTlzYkdGaWJHVlpaV0Z5UkhKdmNHUnZkMjRpTENKa2NtOXdaRzkzYmxKbFppSXNJbU55WldGMFpWSmxaaUlzSWw5cGJtaGxjbWwwY3lJc0lsOWpjbVZoZEdWRGJHRnpjeUlzSW1OdmJYQnZibVZ1ZEVScFpFMXZkVzUwSWl3aVpISnZjR1J2ZDI1RGRYSnlaVzUwSWl3aVkzVnljbVZ1ZENJc0ltUnliM0JrYjNkdVEzVnljbVZ1ZEVOb2FXeGtjbVZ1SWl3aVkyaHBiR1J5Wlc0aUxDSm1jbTl0SWl3aWMyVnNaV04wWldSWlpXRnlUM0IwYVc5dVJXd2lMQ0pqYUdsc1pFVnNJaXdpWVhKcFlWTmxiR1ZqZEdWa0lpd2ljMk55YjJ4c1ZHOXdJaXdpYjJabWMyVjBWRzl3SWl3aVkyeHBaVzUwU0dWcFoyaDBJaXdpYzJOeWIyeHNTR1ZwWjJoMElpd2ljbVZ1WkdWeUlpd2laSEp2Y0dSdmQyNURiR0Z6Y3lJc0ltTnNjM2dpTENKeVpXWWlMQ0p5Wlc1a1pYSlBjSFJwYjI1eklpd2lRMjl0Y0c5dVpXNTBJaXdpVjNKaGNIQmxaRmxsWVhKRWNtOXdaRzkzYms5d2RHbHZibk1pTENKdmJrTnNhV05yVDNWMGMybGtaU0lzSWxsbFlYSkVjbTl3Wkc5M2JpSXNJbDlzWlc0aUxDSmhjbWR6SWl3aVgydGxlU0lzSW1SeWIzQmtiM2R1Vm1semFXSnNaU0lzSW1VaUxDSjBZWEpuWlhRaUxDSnZibE5sYkdWamRFTm9ZVzVuWlNJc0luSmxibVJsY2xObGJHVmpkRTl3ZEdsdmJuTWlMQ0oyYVhOcFlteGxJaXdpYzNSNWJHVWlMQ0oyYVhOcFltbHNhWFI1SWl3aWRHOW5aMnhsUkhKdmNHUnZkMjRpTENKeVpYTjFiSFFpTENKeVpXNWtaWEpTWldGa1ZtbGxkeUlzSW5KbGJtUmxja1J5YjNCa2IzZHVJaXdpWVdScWRYTjBSR0YwWlU5dVEyaGhibWRsSWl3aWFHRnVaR3hsV1dWaGNrTm9ZVzVuWlNJc0ltOXVVMlZzWldOMElpd2ljMlYwVDNCbGJpSXNJbkpsYm1SbGNtVmtSSEp2Y0dSdmQyNGlMQ0prY205d1pHOTNiazF2WkdVaUxDSnlaVzVrWlhKVFkzSnZiR3hOYjJSbElpd2ljbVZ1WkdWeVUyVnNaV04wVFc5a1pTSXNJazF2Ym5Sb1JISnZjR1J2ZDI1UGNIUnBiMjV6SWl3aWJXOXVkR2hPWVcxbGN5SXNJbWx6VTJWc1pXTjBaV1JOYjI1MGFDSXNJbGR5WVhCd1pXUk5iMjUwYUVSeWIzQmtiM2R1VDNCMGFXOXVjeUlzSWsxdmJuUm9SSEp2Y0dSdmQyNGlMQ0pOSWl3aVgzUm9hWE15SWl3aWRYTmxVMmh2Y25STmIyNTBhRWx1UkhKdmNHUnZkMjRpTENKMWRHbHNjeUlzSW1kbGJtVnlZWFJsVFc5dWRHaFpaV0Z5Y3lJc0ltTjFjbkpFWVhSbElpd2liR0Z6ZEVSaGRHVWlMQ0pOYjI1MGFGbGxZWEpFY205d1pHOTNiazl3ZEdsdmJuTWlMQ0p0YjI1MGFGbGxZWEp6VEdsemRDSXNJbTF2Ym5Sb1dXVmhjaUlzSW0xdmJuUm9XV1ZoY2xCdmFXNTBJaXdpYVhOVFlXMWxUVzl1ZEdoWlpXRnlJaXdpYzJOeWIyeHNZV0pzWlUxdmJuUm9XV1ZoY2tSeWIzQmtiM2R1SWl3aVYzSmhjSEJsWkUxdmJuUm9XV1ZoY2tSeWIzQmtiM2R1VDNCMGFXOXVjeUlzSWsxdmJuUm9XV1ZoY2tSeWIzQmtiM2R1SWl3aWRHbHRaVkJ2YVc1MElpd2llV1ZoY2sxdmJuUm9JaXdpWTJoaGJtZGxaRVJoZEdVaUxDSndZWEp6WlVsdWRDSXNJa1JoZVNJc0ltbHpSR2x6WVdKc1pXUWlMQ0p2YmsxdmRYTmxSVzUwWlhJaUxDSmxkbVZ1ZEV0bGVTSXNJbkJ5WlhabGJuUkVaV1poZFd4MElpd2lhR0Z1Wkd4bFQyNUxaWGxFYjNkdUlpd2liM1JvWlhJaUxDSmZkR2hwY3lSd2NtOXdjeVJ6Wld4bFkzUmxaRVFpTENKa2FYTmhZbXhsWkV0bGVXSnZZWEprVG1GMmFXZGhkR2x2YmlJc0ltbHpVMlZzWldOMFpXUkVZWFJsSWl3aWMyVnNaV04wYzAxMWJIUnBjR3hsSWl3aWMyVnNaV04wWldSRVlYUmxjeUlzSW1selUyRnRaVVJoZVU5eVYyVmxheUlzSW5ObGJHVmpkR1ZrSWl3aWNISmxVMlZzWldOMGFXOXVJaXdpYzJodmQxZGxaV3RRYVdOclpYSWlMQ0pwYzFOaGJXVlhaV1ZySWl3aVgzUm9hWE1rY0hKdmNITWlMQ0prWVhsVGRISWlMQ0pmZEdocGN5UndjbTl3Y3pJaUxDSm9iMnhwWkdGNWN5SXNJbWhoY3lJc0lsOTBhR2x6SkhCeWIzQnpNeUlzSWw5MGFHbHpKSEJ5YjNCekpITmxiR1ZqZEdsdVp5SXNJbDkwYUdsekpIQnliM0J6TkNJc0luTmxiR1ZqZEhOVGRHRnlkQ0lzSW5ObGJHVmpkSE5GYm1RaUxDSnpaV3hsWTNSelVtRnVaMlVpTENKelpXeGxZM1J6UkdsellXSnNaV1JFWVhselNXNVNZVzVuWlNJc0luTmxiR1ZqZEdsdVowUmhkR1VpTENKZmRHaHBjeVJ3Y205d2N5UnpaV3hsWTNScGJtY3lJaXdpYVhOSmJsTmxiR1ZqZEdsdVoxSmhibWRsSWl3aVgzUm9hWE1rY0hKdmNITTFJaXdpWDNSb2FYTWtjSEp2Y0hNa2MyVnNaV04wYVc1bk15SXNJbDkwYUdsekpIQnliM0J6TmlJc0lsOTBhR2x6SkhCeWIzQnpOeUlzSWw5MGFHbHpKSEJ5YjNCek9DSXNJbmRsWld0a1lYa2lMQ0puWlhSRVlYa2lMQ0pmZEdocGN5UndjbTl3Y3lSelpXeGxZM1JsWkVReUlpd2laR0Y1UTJ4aGMzTk9ZVzFsSWl3aWFYTkZlR05zZFdSbFpDSXNJbWx6VTJWc1pXTjBaV1FpTENKcGMwdGxlV0p2WVhKa1UyVnNaV04wWldRaUxDSnBjMUpoYm1kbFUzUmhjblFpTENKcGMxSmhibWRsUlc1a0lpd2lhWE5UWld4bFkzUnBibWRTWVc1blpWTjBZWEowSWl3aWFYTlRaV3hsWTNScGJtZFNZVzVuWlVWdVpDSXNJbWx6UTNWeWNtVnVkRVJoZVNJc0ltbHpWMlZsYTJWdVpDSXNJbWx6UVdaMFpYSk5iMjUwYUNJc0ltbHpRbVZtYjNKbFRXOXVkR2dpTENKblpYUklhV2RvVEdsbmFIUmxaRU5zWVhOeklpd2laMlYwU0c5c2FXUmhlWE5EYkdGemN5SXNJbDkwYUdsekpIQnliM0J6T1NJc0lsOTBhR2x6SkhCeWIzQnpPU1JoY21saFRHRmlaU0lzSW1GeWFXRk1ZV0psYkZCeVpXWnBlRmRvWlc1RmJtRmliR1ZrSWl3aVgzUm9hWE1rY0hKdmNITTVKR0Z5YVdGTVlXSmxNaUlzSW1GeWFXRk1ZV0psYkZCeVpXWnBlRmRvWlc1RWFYTmhZbXhsWkNJc0luQnlaV1pwZUNJc0lsOTBhR2x6SkhCeWIzQnpNVEFpTENKZmRHaHBjeVJ3Y205d2N6RXdKR2h2Ykdsa1lYa2lMQ0pqYjIxd1lYSmxSSFFpTENKMGFYUnNaWE1pTENKaGNIQnNlU0lzSW1odmJHbGtZWGxPWVcxbGN5SXNJbTFsYzNOaFoyVWlMQ0p6Wld4bFkzUmxaRVJoZVNJc0luQnlaVk5sYkdWamRHbHZia1JoZVNJc0luUmhZa2x1WkdWNElpd2ljMmh2ZDFkbFpXdE9kVzFpWlhJaUxDSnBjMU4wWVhKMFQyWlhaV1ZySWl3aVgzUm9hWE1rWkdGNVJXd2tZM1Z5Y21WdWRDSXNJbkJ5WlhaUWNtOXdjeUlzSW5Ob2IzVnNaRVp2WTNWelJHRjVJaXdpWjJWMFZHRmlTVzVrWlhnaUxDSnBjMGx1Y0hWMFJtOWpkWE5sWkNJc0ltUnZZM1Z0Wlc1MElpd2lZV04wYVhabFJXeGxiV1Z1ZENJc0ltSnZaSGtpTENKcGJteHBibVVpTENKemFHOTFiR1JHYjJOMWMwUmhlVWx1YkdsdVpTSXNJbU52Ym5SaGFXNWxjbEpsWmlJc0ltTnZiblJoYVc1eklpd2lZMnhoYzNOTWFYTjBJaXdpYlc5dWRHaFRhRzkzYzBSMWNHeHBZMkYwWlVSaGVYTkZibVFpTENKdGIyNTBhRk5vYjNkelJIVndiR2xqWVhSbFJHRjVjMU4wWVhKMElpd2laR0Y1Uld3aUxDSm1iMk4xY3lJc0luQnlaWFpsYm5SVFkzSnZiR3dpTENKeVpXNWtaWEpFWVhsRGIyNTBaVzUwY3lJc0ltZGxkRU5zWVhOelRtRnRaWE1pTENKdmJrdGxlVVJ2ZDI0aUxDSm9ZVzVrYkdWRGJHbGpheUlzSW5WelpWQnZhVzUwWlhKRmRtVnVkQ0lzSW1oaGJtUnNaVTF2ZFhObFJXNTBaWElpTENKdmJsQnZhVzUwWlhKRmJuUmxjaUlzSW1kbGRFRnlhV0ZNWVdKbGJDSXNJbkp2YkdVaUxDSjBhWFJzWlNJc0ltZGxkRlJwZEd4bElpd2lhR0Z1Wkd4bFJtOWpkWE5FWVhraUxDSmpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVWlMQ0pYWldWclRuVnRZbVZ5SWl3aWMyaHZkV3hrUm05amRYTlhaV1ZyVG5WdFltVnlJaXdpZDJWbGEwNTFiV0psY2tWc0lpd2lhR0Z1Wkd4bFJtOWpkWE5YWldWclRuVnRZbVZ5SWl3aWQyVmxhMDUxYldKbGNpSXNJbDkwYUdsekpIQnliM0J6SkdGeWFXRk1ZV0psYkNJc0ltRnlhV0ZNWVdKbGJGQnlaV1pwZUNJc0luZGxaV3RPZFcxaVpYSkRiR0Z6YzJWeklpd2lWMlZsYXlJc0ltOXVSR0Y1UTJ4cFkyc2lMQ0p2YmtSaGVVMXZkWE5sUlc1MFpYSWlMQ0p2YmxkbFpXdFRaV3hsWTNRaUxDSm9ZVzVrYkdWRVlYbERiR2xqYXlJc0luTm9iM1ZzWkVOc2IzTmxUMjVUWld4bFkzUWlMQ0ptYjNKdFlYUlhaV1ZyVG5WdFltVnlJaXdpWkdGNWN5SXNJbTl1UTJ4cFkydEJZM1JwYjI0aUxDSm9ZVzVrYkdWWFpXVnJRMnhwWTJzaUxDSnZabVp6WlhRaUxDSmhaR1JFWVhseklpd2lZMmh2YjNObFJHRjVRWEpwWVV4aFltVnNVSEpsWm1sNElpd2laR2x6WVdKc1pXUkVZWGxCY21saFRHRmlaV3hRY21WbWFYZ2lMQ0oyWVd4MVpVOW1JaXdpYUdGdVpHeGxSR0Y1VFc5MWMyVkZiblJsY2lJc0luSmxibVJsY2tSaGVYTWlMQ0pHU1ZoRlJGOUlSVWxIU0ZSZlUxUkJUa1JCVWtSZlYwVkZTMTlEVDFWT1ZDSXNJazFQVGxSSVgwTlBURlZOVGxOZlRFRlpUMVZVSWl3aVZGZFBYME5QVEZWTlRsTWlMQ0pVU0ZKRlJWOURUMHhWVFU1VElpd2lSazlWVWw5RFQweFZUVTVUSWl3aVRVOU9WRWhmUTA5TVZVMU9VeUlzSW1keWFXUWlMQ0oyWlhKMGFXTmhiRTVoZG1sbllYUnBiMjVQWm1aelpYUWlMQ0pOVDA1VVNGOU9RVlpKUjBGVVNVOU9YMGhQVWtsYVQwNVVRVXhmVDBaR1UwVlVJaXdpWjJWMFRXOXVkR2hEYjJ4MWJXNXpUR0Y1YjNWMElpd2ljMmh2ZDBadmRYSkRiMngxYlc1TmIyNTBhRmxsWVhKUWFXTnJaWElpTENKemFHOTNWSGR2UTI5c2RXMXVUVzl1ZEdoWlpXRnlVR2xqYTJWeUlpd2lUVzl1ZEdnaUxDSnZjbVJsY2tsdVJHbHpjR3hoZVNJc0ltOXVUVzkxYzJWTVpXRjJaU0lzSW1selNXNVRaV3hsWTNScGJtZFNZVzVuWlUxdmJuUm9JaXdpWDIxdmJuUm9JaXdpWDNSb2FYTWtjSEp2Y0hNa2MyVnNaV04wYVc1bk5DSXNJbmRsWld0eklpd2lhWE5HYVhobFpFaGxhV2RvZENJc0ltWnBlR1ZrU0dWcFoyaDBJaXdpWW5KbFlXdEJablJsY2s1bGVIUlFkWE5vSWl3aVkzVnljbVZ1ZEZkbFpXdFRkR0Z5ZENJc0luZGxaV3RCY21saFRHRmlaV3hRY21WbWFYZ2lMQ0p6YUc5M1YyVmxhMDUxYldKbGNuTWlMQ0pwYzBacGVHVmtRVzVrUm1sdVlXeFhaV1ZySWl3aWFYTk9iMjVHYVhobFpFRnVaRTkxZEU5bVRXOXVkR2dpTENKcGMxZGxaV3RKYmsxdmJuUm9JaXdpY0dWbGEwNWxlSFJOYjI1MGFDSXNJbXhoWW1Wc1JHRjBaU0lzSW01bGQwMXZiblJvSWl3aWMyVjBVSEpsVTJWc1pXTjBhVzl1SWl3aVRVOU9WRWhmVWtWR1V5SXNJbWhoYm1Sc1pVOXVUVzl1ZEdoTFpYbEViM2R1SWl3aWJXOXVkR2hEYjJ4MWJXNXpUR0Y1YjNWMElpd2lkbVZ5ZEdsallXeFBabVp6WlhRaUxDSnRiMjUwYUhOSGNtbGtJaXdpYjI1TmIyNTBhRU5zYVdOcklpd2lhR0Z1Wkd4bFRXOXVkR2hPWVhacFoyRjBhVzl1SWl3aWJtVjNVWFZoY25SbGNpSXNJbEZWUVZKVVJWSmZVa1ZHVXlJc0ltOXVVWFZoY25SbGNrTnNhV05ySWl3aWFHRnVaR3hsVVhWaGNuUmxjazVoZG1sbllYUnBiMjRpTENKdGIyNTBhRU5zWVhOelRtRnRaU0lzSWw5dGIyNTBhRU5zWVhOelRtRnRaU0lzSW1selVtRnVaMlZUZEdGeWRFMXZiblJvSWl3aWFYTlNZVzVuWlVWdVpFMXZiblJvSWl3aWFYTlRaV3hsWTNScGJtZE5iMjUwYUZKaGJtZGxVM1JoY25RaUxDSnBjMU5sYkdWamRHbHVaMDF2Ym5Sb1VtRnVaMlZGYm1RaUxDSnBjME4xY25KbGJuUk5iMjUwYUNJc0luQnlaVk5sYkdWamRHVmtUVzl1ZEdnaUxDSndjbVZUWld4bFkzUmxaRkYxWVhKMFpYSWlMQ0pmZEdocGN5UndjbTl3Y3pFeElpd2lYM1JvYVhNa2NISnZjSE14TVNSamFHOXZjMlZFSWl3aVgzUm9hWE1rY0hKdmNITXhNU1JrYVhOaFlteGxJaXdpWDNSb2FYTWtjSEp2Y0hNeE1pSXNJbWx6VTJWc1pXTjBaV1JSZFdGeWRHVnlJaXdpYVhOSmJsTmxiR1ZqZEdsdVoxSmhibWRsVVhWaGNuUmxjaUlzSW1selVtRnVaMlZUZEdGeWRGRjFZWEowWlhJaUxDSnBjMUpoYm1kbFJXNWtVWFZoY25SbGNpSXNJbDkwYUdsekpIQnliM0J6TVRNaUxDSnphRzkzUm5Wc2JFMXZiblJvV1dWaGNsQnBZMnRsY2lJc0luSmxibVJsY2sxdmJuUm9RMjl1ZEdWdWRDSXNJbk5vYjNKMFRXOXVkR2hVWlhoMElpd2lablZzYkUxdmJuUm9WR1Y0ZENJc0lsOTBhR2x6SkhCeWIzQnpNVFFpTENKeVpXNWtaWEpSZFdGeWRHVnlRMjl1ZEdWdWRDSXNJbk5vYjNKMFVYVmhjblJsY2lJc0lsOTBhR2x6SkhCeWIzQnpNVFVpTENKdGIyNTBhRU52YkhWdGJuTWlMQ0pxSWl3aVpYWWlMQ0p2YmsxdmJuUm9TMlY1Ukc5M2JpSXNJbTl1VFc5dWRHaE5iM1Z6WlVWdWRHVnlJaXdpWjJWMFRXOXVkR2hEYkdGemMwNWhiV1Z6SWl3aVoyVjBUVzl1ZEdoRGIyNTBaVzUwSWl3aVgzUm9hWE1rY0hKdmNITXhOaUlzSW5GMVlYSjBaWEp6SWl3aWIyNVJkV0Z5ZEdWeVMyVjVSRzkzYmlJc0ltOXVVWFZoY25SbGNrMXZkWE5sUlc1MFpYSWlMQ0puWlhSUmRXRnlkR1Z5UTJ4aGMzTk9ZVzFsY3lJc0ltZGxkRkYxWVhKMFpYSlVZV0pKYm1SbGVDSXNJbWx6UTNWeWNtVnVkRkYxWVhKMFpYSWlMQ0puWlhSUmRXRnlkR1Z5UTI5dWRHVnVkQ0lzSWw5MGFHbHpKSEJ5YjNCek1UY2lMQ0p6YUc5M1RXOXVkR2haWldGeVVHbGphMlZ5SWl3aWMyaHZkMUYxWVhKMFpYSlpaV0Z5VUdsamEyVnlJaXdpWDNSb2FYTWtjSEp2Y0hNeE9DSXNJbDkwYUdsekpIQnliM0J6TVRna1lYSnBZVXhoWWlJc0ltWnZjbTFoZEhSbFpFRnlhV0ZNWVdKbGJGQnlaV1pwZUNJc0luUnlhVzBpTENKb1lXNWtiR1ZOYjNWelpVeGxZWFpsSWl3aWIyNVFiMmx1ZEdWeVRHVmhkbVVpTENKeVpXNWtaWEpOYjI1MGFITWlMQ0p5Wlc1a1pYSlJkV0Z5ZEdWeWN5SXNJbkpsYm1SbGNsZGxaV3R6SWl3aVZHbHRaU0lzSW1obGFXZG9kQ0lzSW5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTSXNJbU5sYm5SbGNreHBJaXdpWTJGc1kwTmxiblJsY2xCdmMybDBhVzl1SWl3aWJXOXVkR2hTWldZaUxDSm9aV0ZrWlhJaUxDSmpiR0Z6YzJWeklpd2lkR2x0WlVOc1lYTnpUbUZ0WlNJc0ltbHpVMlZzWldOMFpXUlVhVzFsSWl3aWFYTkVhWE5oWW14bFpGUnBiV1VpTENKcGJtcGxZM1JVYVcxbGN5SXNJbkJ5WlhacGIzVnpVMmxpYkdsdVp5SXNJbTVsZUhSVGFXSnNhVzVuSWl3aVlXTjBhWFpsUkdGMFpTSXNJbTl3Wlc1VWIwUmhkR1VpTENKemIzSjBaV1JKYm1wbFkzUlVhVzFsY3lJc0luTnZjblFpTENKaElpd2lZaUlzSW0xcGJuVjBaWE5KYmtSaGVTSXNJbTExYkhScGNHeHBaWElpTENKMGFXMWxjMVJ2U1c1cVpXTjBJaXdpZEdsdFpWUnZSbTlqZFhNaUxDSnlaV1IxWTJVaUxDSndjbVYySWl3aWJHbERiR0Z6YzJWeklpd2liR2tpTENKelkzSnZiR3hVYjFSb1pWTmxiR1ZqZEdWa1ZHbHRaU0lzSW5SdlpHRjVRblYwZEc5dUlpd2ljMmh2ZDFScGJXVlRaV3hsWTNSUGJteDVJaXdpZEdsdFpVTmhjSFJwYjI0aUxDSnlaVzVrWlhKVWFXMWxjeUlzSW05dVZHbHRaVU5vWVc1blpTSXNJbXhwYzNSSVpXbG5hSFFpTENKalpXNTBaWEpNYVZKbFppSXNJbGxsWVhJaUxDSnlaV1pKYm1SbGVDSXNJbmRoYVhSR2IzSlNaVkpsYm1SbGNpSXNJbGxGUVZKZlVrVkdVeUlzSWw5MWRHbHNjeVJuWlhSWlpXRnljMUJsY21sdlpDSXNJblZ3WkdGMFpVWnZZM1Z6VDI1UVlXZHBibUYwWlNJc0lua2lMQ0pmZVdWaGNpSXNJbWhoYm1Sc1pWbGxZWEpEYkdsamF5SXNJbTl1V1dWaGNrTnNhV05ySWl3aWFHRnVaR3hsV1dWaGNrNWhkbWxuWVhScGIyNGlMQ0o1WldGeVEyeGhjM05PWVcxbElpd2lhWE5EZFhKeVpXNTBXV1ZoY2lJc0luQnlaVk5sYkdWamRHVmtJaXdpY21WdVpHVnlXV1ZoY2tOdmJuUmxiblFpTENKdmJsbGxZWEpOYjNWelpVVnVkR1Z5SWl3aWIyNVpaV0Z5VFc5MWMyVk1aV0YyWlNJc0lsOTFkR2xzY3lSblpYUlpaV0Z5YzFCbGNtbHZaRElpTENKZmJHOXZjQ0lzSW05dVdXVmhja3RsZVVSdmQyNGlMQ0puWlhSWlpXRnlWR0ZpU1c1a1pYZ2lMQ0puWlhSWlpXRnlRMnhoYzNOT1lXMWxjeUlzSW1kbGRGbGxZWEpEYjI1MFpXNTBJaXdpWjJWMFdXVmhja052Ym5SaGFXNWxja05zWVhOelRtRnRaWE1pTENKamJHVmhjbE5sYkdWamRHbHVaMFJoZEdVaUxDSnBibkIxZEZScGJXVWlMQ0p3Y205d1JHRjBaU0lzSW1selVISnZjRVJoZEdWV1lXeHBaQ0lzSW1selRtRk9JaXdpYzNCc2FYUWlMQ0owYVcxbFUzUnlhVzVuSWl3aVkzVnpkRzl0VkdsdFpVbHVjSFYwSWl3aVkyeHZibVZGYkdWdFpXNTBJaXdpZEhsd1pTSXNJbkJzWVdObGFHOXNaR1Z5SWl3aWJtRnRaU0lzSW5KbGNYVnBjbVZrSWl3aWRHbHRaVWx1Y0hWMFRHRmlaV3dpTENKeVpXNWtaWEpVYVcxbFNXNXdkWFFpTENKblpYUkVaWEpwZG1Wa1UzUmhkR1ZHY205dFVISnZjSE1pTENKRFlXeGxibVJoY2tOdmJuUmhhVzVsY2lJc0lsOXlaV1lrYzJodmQxUnBiV1ZUWld4bFkzUlBiaUlzSWw5eVpXWWtjMmh2ZDFScGJXVWlMQ0p6YUc5M1ZHbHRaU0lzSW1GeWFXRk1ZV0psYkNJc0lrUlNUMUJFVDFkT1gwWlBRMVZUWDBOTVFWTlRUa0ZOUlZNaUxDSnBjMFJ5YjNCa2IzZHVVMlZzWldOMElpd2laV3hsYldWdWRDSXNJbU5zWVhOelRtRnRaWE1pTENKMFpYTjBRMnhoYzNOdVlXMWxJaXdpYVc1a1pYaFBaaUlzSWtOaGJHVnVaR0Z5SWl3aWIyNUVjbTl3Wkc5M2JrWnZZM1Z6SWl3aWFXNXBkR2xoYkVSaGRHVWlMQ0pvWVc1a2JHVk5iMjUwYUVOb1lXNW5aU0lzSW0xdmJuUm9VMlZzWldOMFpXUkpiaUlzSW05dVRXOXVkR2hOYjNWelpVeGxZWFpsSWl3aWMyVjBXV1ZoY2lJc0ltOXVXV1ZoY2tOb1lXNW5aU0lzSW1selVtVnVaR1Z5UVhKcFlVeHBkbVZOWlhOellXZGxJaXdpYUdGdVpHeGxRM1Z6ZEc5dFRXOXVkR2hEYUdGdVoyVWlMQ0p2YmsxdmJuUm9RMmhoYm1kbElpd2lhR0Z1Wkd4bFRXOXVkR2haWldGeVEyaGhibWRsSWl3aVpHRjVUbUZ0WlhNaUxDSjNaV1ZyVEdGaVpXd2lMQ0ozWldWclJHRjVUbUZ0WlNJc0ltWnZjbTFoZEZkbFpXdGtZWGtpTENKM1pXVnJSR0Y1UTJ4aGMzTk9ZVzFsSWl3aVptOXliV0YwVjJWbGEwUmhlU0lzSW5WelpWZGxaV3RrWVhselUyaHZjblFpTENKemFHOTNXV1ZoY2xCcFkydGxjaUlzSW5KbGJtUmxja04xYzNSdmJVaGxZV1JsY2lJc0ltRnNiRkJ5WlhaRVlYbHpSR2x6WVdKc1pXUWlMQ0ptYjNKalpWTm9iM2ROYjI1MGFFNWhkbWxuWVhScGIyNGlMQ0p6YUc5M1JHbHpZV0pzWldSTmIyNTBhRTVoZG1sbllYUnBiMjRpTENKcFkyOXVRMnhoYzNObGN5SXNJbU5zYVdOclNHRnVaR3hsY2lJc0ltUmxZM0psWVhObFRXOXVkR2dpTENKa1pXTnlaV0Z6WlZsbFlYSWlMQ0pwYzBadmNsbGxZWElpTENKd2NtVjJhVzkxYzAxdmJuUm9RblYwZEc5dVRHRmlaV3dpTENKd2NtVjJhVzkxYzFsbFlYSkNkWFIwYjI1TVlXSmxiQ0lzSWw5MGFHbHpKSEJ5YjNCek15UndjbVYyYVc5MWN5SXNJbkJ5WlhacGIzVnpUVzl1ZEdoQmNtbGhUR0ZpWld3aUxDSmZkR2hwY3lSd2NtOXdjek1rY0hKbGRtbHZkWE15SWl3aWNISmxkbWx2ZFhOWlpXRnlRWEpwWVV4aFltVnNJaXdpWVd4c1RtVjRkRVJoZVhORWFYTmhZbXhsWkNJc0luTm9iM2RVYVcxbFUyVnNaV04wSWl3aWFXNWpjbVZoYzJWTmIyNTBhQ0lzSW1sdVkzSmxZWE5sV1dWaGNpSXNJbTVsZUhSTmIyNTBhRUoxZEhSdmJreGhZbVZzSWl3aWJtVjRkRmxsWVhKQ2RYUjBiMjVNWVdKbGJDSXNJbDkwYUdsekpIQnliM0J6TlNSdVpYaDBUVzl1ZENJc0ltNWxlSFJOYjI1MGFFRnlhV0ZNWVdKbGJDSXNJbDkwYUdsekpIQnliM0J6TlNSdVpYaDBXV1ZoY2lJc0ltNWxlSFJaWldGeVFYSnBZVXhoWW1Wc0lpd2ljMmh2ZDFsbFlYSkVjbTl3Wkc5M2JpSXNJbk5vYjNkTmIyNTBhRVJ5YjNCa2IzZHVJaXdpYzJodmQwMXZiblJvV1dWaGNrUnliM0JrYjNkdUlpd2liM1psY25KcFpHVklhV1JsSWl3aVkyaGhibWRsV1dWaGNpSXNJbU5vWVc1blpVMXZiblJvSWl3aVkyaGhibWRsVFc5dWRHaFpaV0Z5SWl3aWFHRnVaR3hsVkc5a1lYbENkWFIwYjI1RGJHbGpheUlzSW0xdmJuUm9SR0YwWlNJc0luSmxibVJsY2tOMWNuSmxiblJOYjI1MGFDSXNJbTl1Um05amRYTWlMQ0pvWVc1a2JHVkVjbTl3Wkc5M2JrWnZZM1Z6SWl3aWNtVnVaR1Z5VFc5dWRHaEVjbTl3Wkc5M2JpSXNJbkpsYm1SbGNrMXZiblJvV1dWaGNrUnliM0JrYjNkdUlpd2ljbVZ1WkdWeVdXVmhja1J5YjNCa2IzZHVJaXdpYUdWaFpHVnlRWEpuY3lJc0ltMXZiblJvUTI5dWRHRnBibVZ5SWl3aWNISmxkazF2Ym5Sb1FuVjBkRzl1UkdsellXSnNaV1FpTENKdVpYaDBUVzl1ZEdoQ2RYUjBiMjVFYVhOaFlteGxaQ0lzSW5CeVpYWlpaV0Z5UW5WMGRHOXVSR2x6WVdKc1pXUWlMQ0p1WlhoMFdXVmhja0oxZEhSdmJrUnBjMkZpYkdWa0lpd2ljMmh2ZDBSaGVVNWhiV1Z6SWl3aVgyOWlhbVZqZEZOd2NtVmhaQ0lzSW1OMWMzUnZiVWhsWVdSbGNrTnZkVzUwSWl3aWNtVnVaR1Z5V1dWaGNraGxZV1JsY2lJc0luSmxibVJsY2tSbFptRjFiSFJJWldGa1pYSWlMQ0pmZEdocGN5UndjbTl3Y3lSdGIyNTBhRk5sYkdVaUxDSnRiMjUwYUV4cGMzUWlMQ0p0YjI1MGFITlViMU4xWW5SeVlXTjBJaXdpYzJodmQxQnlaWFpwYjNWelRXOXVkR2h6SWl3aWJXOXVkR2h6VTJodmQyNGlMQ0ptY205dFRXOXVkR2hFWVhSbElpd2liVzl1ZEdoelZHOUJaR1FpTENKdGIyNTBhRXRsZVNJc0ltUnBkaUlzSW5KbGJtUmxja2hsWVdSbGNpSXNJbTF2Ym5Sb1FYSnBZVXhoWW1Wc1VISmxabWw0SWl3aWFHRnVaR3hsVDI1RVlYbExaWGxFYjNkdUlpd2lhR0Z1Wkd4bFRXOXVkR2hOYjNWelpVeGxZWFpsSWl3aVgyVjRkR1Z1WkhNaUxDSm9ZVzVrYkdWWlpXRnlUVzkxYzJWRmJuUmxjaUlzSW1oaGJtUnNaVmxsWVhKTmIzVnpaVXhsWVhabElpd2lkR2x0WlVadmNtMWhkQ0lzSW5ScGJXVkpiblJsY25aaGJITWlMQ0ozYVhSb1VHOXlkR0ZzSWl3aWRHbHRaVlpoYkdsa0lpd2lRbTl2YkdWaGJpSXNJbk5vYjNkVWFXMWxTVzV3ZFhRaUxDSkpibkIxZEZScGJXVWlMQ0poY21saFRHbDJaVTFsYzNOaFoyVWlMQ0puWlhSRVlYUmxTVzVXYVdWM0lpd2lZWE56YVdkdVRXOXVkR2hEYjI1MFlXbHVaWElpTENKZmRHaHBjek1pTENKb1lYTk5iMjUwYUVOb1lXNW5aV1FpTENKRGIyNTBZV2x1WlhJaUxDSmpiMjUwWVdsdVpYSWlMQ0prYVhOd2JHRjVJaXdpY21WdVpHVnlRWEpwWVV4cGRtVlNaV2RwYjI0aUxDSnlaVzVrWlhKUWNtVjJhVzkxYzBKMWRIUnZiaUlzSW5KbGJtUmxjazVsZUhSQ2RYUjBiMjRpTENKeVpXNWtaWEpaWldGeWN5SXNJbkpsYm1SbGNsUnZaR0Y1UW5WMGRHOXVJaXdpY21WdVpHVnlWR2x0WlZObFkzUnBiMjRpTENKeVpXNWtaWEpKYm5CMWRGUnBiV1ZUWldOMGFXOXVJaXdpY21WdVpHVnlRMmhwYkdSeVpXNGlMQ0pEWVd4bGJtUmhja2xqYjI0aUxDSnBZMjl1SWl3aVgzSmxaaVJqYkdGemMwNWhiV1VpTENKa1pXWmhkV3gwUTJ4aGMzTWlMQ0pwYzFaaGJHbGtSV3hsYldWdWRDSXNJbmh0Ykc1eklpd2lkbWxsZDBKdmVDSXNJbEJ2Y25SaGJDSXNJbVZzSWl3aWNHOXlkR0ZzVW05dmRDSXNJbkJ2Y25SaGJFaHZjM1FpTENKblpYUkZiR1Z0Wlc1MFFubEpaQ0lzSW5CdmNuUmhiRWxrSWl3aWMyVjBRWFIwY21saWRYUmxJaXdpWVhCd1pXNWtRMmhwYkdRaUxDSmpiMjF3YjI1bGJuUlhhV3hzVlc1dGIzVnVkQ0lzSW5KbGJXOTJaVU5vYVd4a0lpd2lVbVZoWTNSRVQwMGlMQ0pqY21WaGRHVlFiM0owWVd3aUxDSm1iMk4xYzJGaWJHVkZiR1Z0Wlc1MGMxTmxiR1ZqZEc5eUlpd2labTlqZFhOaFlteGxSbWxzZEdWeUlpd2libTlrWlNJc0ltUnBjMkZpYkdWa0lpd2lWR0ZpVEc5dmNDSXNJbkJ5YjNSdmRIbHdaU0lzSW1OaGJHd2lMQ0owWVdKTWIyOXdVbVZtSWl3aWNYVmxjbmxUWld4bFkzUnZja0ZzYkNJc0luUmhZa05vYVd4a2NtVnVJaXdpWjJWMFZHRmlRMmhwYkdSeVpXNGlMQ0psYm1GaWJHVlVZV0pNYjI5d0lpd2lhR0Z1Wkd4bFJtOWpkWE5UZEdGeWRDSXNJbWhoYm1Sc1pVWnZZM1Z6Ulc1a0lpd2lkMmwwYUVac2IyRjBhVzVuSWl3aVYybDBhRVpzYjJGMGFXNW5JaXdpWVd4MFgzQnliM0J6SWl3aWNHOXdjR1Z5VFc5a2FXWnBaWEp6SWl3aWNHOXdjR1Z5VUhKdmNITWlMQ0pvYVdSbFVHOXdjR1Z5SWl3aVlYSnliM2RTWldZaUxDSjFjMlZTWldZaUxDSm1iRzloZEdsdVoxQnliM0J6SWl3aWRYTmxSbXh2WVhScGJtY2lMQ0p2Y0dWdUlpd2lkMmhwYkdWRmJHVnRaVzUwYzAxdmRXNTBaV1FpTENKaGRYUnZWWEJrWVhSbElpd2ljR3hoWTJWdFpXNTBJaXdpY0c5d2NHVnlVR3hoWTJWdFpXNTBJaXdpYldsa1pHeGxkMkZ5WlNJc0ltWnNhWEFpTENKd1lXUmthVzVuSWl3aVlYSnliM2NpTENKUWIzQndaWEpEYjIxd2IyNWxiblFpTENKM2NtRndjR1Z5UTJ4aGMzTk9ZVzFsSWl3aWNHOXdjR1Z5UTI5dGNHOXVaVzUwSWl3aWRHRnlaMlYwUTI5dGNHOXVaVzUwSWl3aWNHOXdjR1Z5VDI1TFpYbEViM2R1SWl3aWMyaHZkMEZ5Y205M0lpd2ljRzl3Y0dWeUlpd2ljbVZtY3lJc0luTmxkRVpzYjJGMGFXNW5JaXdpWm14dllYUnBibWRUZEhsc1pYTWlMQ0pHYkc5aGRHbHVaMEZ5Y205M0lpd2lZMjl1ZEdWNGRDSXNJbVpwYkd3aUxDSnpkSEp2YTJWWGFXUjBhQ0lzSW5kcFpIUm9JaXdpZEhKaGJuTm1iM0p0SWl3aWNHOXdjR1Z5UTI5dWRHRnBibVZ5SWl3aWQzSmhjSEJsY2tOc1lYTnpaWE1pTENKR2NtRm5iV1Z1ZENJc0luTmxkRkpsWm1WeVpXNWpaU0lzSW05MWRITnBaR1ZEYkdsamEwbG5ibTl5WlVOc1lYTnpJaXdpVjNKaGNIQmxaRU5oYkdWdVpHRnlJaXdpYUdGelVISmxVMlZzWldOMGFXOXVRMmhoYm1kbFpDSXNJa2xPVUZWVVgwVlNVbDh4SWl3aVJHRjBaVkJwWTJ0bGNpSXNJbDkwYUdsekpIQnliM0J6SkdodmJHbGtZWGx6SWl3aVlXTmpkVzExYkdGMGIzSWlMQ0prWldaaGRXeDBVSEpsVTJWc1pXTjBhVzl1SWl3aVoyVjBVSEpsVTJWc1pXTjBhVzl1SWl3aVltOTFibVJsWkZCeVpWTmxiR1ZqZEdsdmJpSXNJbk4wWVhKMFQzQmxiaUlzSW5CeVpYWmxiblJHYjJOMWN5SXNJbVp2WTNWelpXUWlMQ0p3Y21WMlpXNTBSbTlqZFhOVWFXMWxiM1YwSWl3aVkyeGxZWEpVYVcxbGIzVjBJaXdpYVc1d2RYUWlMQ0ppYkhWeUlpd2lZMkZ1WTJWc1JtOWpkWE5KYm5CMWRDSXNJbk5yYVhCVFpYUkNiSFZ5SWl3aVkyRnNZMGx1YVhScFlXeFRkR0YwWlNJc0lteGhjM1JRY21WVFpXeGxZM1JEYUdGdVoyVWlMQ0pRVWtWVFJVeEZRMVJmUTBoQlRrZEZYMVpKUVY5T1FWWkpSMEZVUlNJc0luTmxkRUpzZFhJaUxDSnBibkIxZEZaaGJIVmxJaXdpY21WaFpFOXViSGtpTENKd2NtVjJaVzUwVDNCbGJrOXVSbTlqZFhNaUxDSmpiR1ZoY2xCeVpYWmxiblJHYjJOMWMxUnBiV1Z2ZFhRaUxDSnpaWFJVYVcxbGIzVjBJaXdpYzJWMFJtOWpkWE1pTENKcGJuQjFkRVp2WTNWelZHbHRaVzkxZENJc0ltOXVRbXgxY2lJc0ltRnNiRUZ5WjNNaUxDSnZia05vWVc1blpWSmhkeUlzSW1selJHVm1ZWFZzZEZCeVpYWmxiblJsWkNJc0lsQlNSVk5GVEVWRFZGOURTRUZPUjBWZlZrbEJYMGxPVUZWVUlpd2lhRzkxY25NaUxDSnRhVzUxZEdWeklpd2ljMlYwVTJWc1pXTjBaV1FpTENKelpXNWtSbTlqZFhOQ1lXTnJWRzlKYm5CMWRDSXNJbk5vYjNkRVlYUmxVMlZzWldOMElpd2lhMlZsY0VsdWNIVjBJaXdpYzNkaGNGSmhibWRsSWl3aVlXeHNiM2RUWVcxbFJHRjVJaXdpWm05amRYTlRaV3hsWTNSbFpFMXZiblJvSWl3aWJtOVNZVzVuWlhNaUxDSm9ZWE5UZEdGeWRGSmhibWRsSWl3aWFYTlNZVzVuWlVacGJHeGxaQ0lzSW1selEyaGhibWRsWkVSaGRHVkJiSEpsWVdSNVUyVnNaV04wWldRaUxDSnpaV3hsWTNSbFpFUmhkR1VpTENKdVpYaDBSR0YwWlhNaUxDSm9ZWE5OYVc1RVlYUmxJaXdpYUdGelRXRjRSR0YwWlNJc0ltbHpWbUZzYVdSRVlYUmxVMlZzWldOMGFXOXVJaXdpWkdGMFpWTjBZWEowVDJaRVlYa2lMQ0p0YVc1RVlYUmxVM1JoY25SUFprUmhlU0lzSW0xaGVFUmhkR1ZGYm1SUFprUmhlU0lzSW05dVNXNXdkWFJEYkdsamF5SXNJbk5sYkdWamRHOXlVM1J5YVc1bklpd2ljMlZzWldOMFpXUkpkR1Z0SWl3aVkyRnNaVzVrWVhJaUxDSmpiMjF3YjI1bGJuUk9iMlJsSWl3aWNYVmxjbmxUWld4bFkzUnZjaUlzSW1OdmNIa2lMQ0pwYm5CMWRFOXJJaXdpYUdGdVpHeGxVMlZzWldOMElpd2liMjVKYm5CMWRFVnljbTl5SWl3aVkyOWtaU0lzSW0xelp5SXNJbWx6VTJocFpuUkxaWGxCWTNScGRtVWlMQ0p6YUdsbWRFdGxlU0lzSW01bGQxTmxiR1ZqZEdsdmJpSXNJbk4xWWxkbFpXdHpJaXdpYzNWaVJHRjVjeUlzSW1Ga1pGZGxaV3R6SWl3aWNISmxkazF2Ym5Sb0lpd2ljSEpsZGxsbFlYSWlMQ0p2YmtOc1pXRnlRMnhwWTJzaUxDSmpiRzl6WlU5dVUyTnliMnhzSWl3aVpHOWpkVzFsYm5SRmJHVnRaVzUwSWl3aWFYTkRZV3hsYm1SaGNrOXdaVzRpTENKbGJHVnRJaXdpWkdGMFpVWnZjbTFoZEVOaGJHVnVaR0Z5SWl3aWFHRnVaR3hsUTJGc1pXNWtZWEpEYkdsamEwOTFkSE5wWkdVaUxDSnRiMlJwWm5sSWIyeHBaR0Y1Y3lJc0ltaGhibVJzWlZScGJXVkRhR0Z1WjJVaUxDSmpZV3hsYm1SaGNrTnNZWE56VG1GdFpTSXNJbU5oYkdWdVpHRnlRMjl1ZEdGcGJtVnlJaXdpWlhoamJIVmtaVk5qY205c2JHSmhjaUlzSW05dVJHRjVTMlY1Ukc5M2JpSXNJbWx6UTI5dWRHRnBibk5VYVcxbElpd2liRzl1WjBSaGRHVkdiM0p0WVhRaUxDSmZVbVZoWTNRa1kyeHZibVZGYkdWdFpXNTBJaXdpWTNWemRHOXRTVzV3ZFhRaUxDSmpkWE4wYjIxSmJuQjFkRkpsWmlJc0ltaGhibVJzWlVKc2RYSWlMQ0pvWVc1a2JHVkRhR0Z1WjJVaUxDSm9ZVzVrYkdWR2IyTjFjeUlzSW05dVNXNXdkWFJMWlhsRWIzZHVJaXdpYVdRaUxDSm1iM0p0SWl3aVlYVjBiMFp2WTNWeklpd2ljR3hoWTJWb2IyeGtaWEpVWlhoMElpd2lZWFYwYjBOdmJYQnNaWFJsSWl3aVlYSnBZVVJsYzJOeWFXSmxaRUo1SWl3aVlYSnBZVWx1ZG1Gc2FXUWlMQ0poY21saFRHRmlaV3hzWldSQ2VTSXNJbUZ5YVdGU1pYRjFhWEpsWkNJc0ltbHpRMnhsWVhKaFlteGxJaXdpWTJ4bFlYSkNkWFIwYjI1VWFYUnNaU0lzSWw5MGFHbHpKSEJ5YjNCek5DUmpiR1ZoY2tKMWRDSXNJbU5zWldGeVFuVjBkRzl1UTJ4aGMzTk9ZVzFsSWl3aVgzUm9hWE1rY0hKdmNITTBKR0Z5YVdGTVlXSmxJaXdpWVhKcFlVeGhZbVZzUTJ4dmMyVWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpYjI1VFkzSnZiR3dpTENKd2NtVjJVM1JoZEdVaUxDSnZia05oYkdWdVpHRnlUM0JsYmlJc0ltOXVRMkZzWlc1a1lYSkRiRzl6WlNJc0luSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0p5Wlc1a1pYSkpibkIxZEVOdmJuUmhhVzVsY2lJc0luTm9iM2RKWTI5dUlpd2lZMkZzWlc1a1lYSkpZMjl1UTJ4aGMzTnVZVzFsSWl3aWRHOW5aMnhsUTJGc1pXNWtZWEpQYmtsamIyNURiR2xqYXlJc0luUnZaMmRzWlVOaGJHVnVaR0Z5SWl3aWNtVnVaR1Z5UkdGMFpVbHVjSFYwSWl3aWNtVnVaR1Z5UTJ4bFlYSkNkWFIwYjI0aUxDSnlaVzVrWlhKRFlXeGxibVJoY2lJc0luQnZjblJoYkVOdmJuUmhhVzVsY2lJc0ltOXVVRzl5ZEdGc1MyVjVSRzkzYmlJc0luQnZjSEJsY2tOc1lYTnpUbUZ0WlNJc0ltOXVVRzl3Y0dWeVMyVjVSRzkzYmlJc0luTm9iM2RRYjNCd1pYSkJjbkp2ZHlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVFeVJFOHNTVUZCVFVFc2QwSkJRWGRDTEVkQlFVY3NSVUZCUlN4RFFVRkJPenRCUVVVeFF6dEJRVU5CTzBGQlEwRXNTVUZCVFVNc01FSkJRVEJDTEVkQlFVY3NiVU5CUVcxRExFTkJRVUU3TzBGQlJYUkZPenRCUVVWUExGTkJRVk5ETEU5QlFVOUJMRU5CUVVORExFdEJRVXNzUlVGQlJUdEZRVU0zUWl4SlFVRk5ReXhEUVVGRExFZEJRVWRFTEV0QlFVc3NSMEZEV0N4UFFVRlBRU3hMUVVGTExFdEJRVXNzVVVGQlVTeEpRVUZKUVN4TFFVRkxMRmxCUVZsRkxFMUJRVTBzUjBGRGJFUkRMRkZCUVZFc1EwRkJRMGdzUzBGQlN5eERRVUZETEVkQlEyWkpMRTFCUVUwc1EwRkJRMG9zUzBGQlN5eERRVUZETEVkQlEyWXNTVUZCU1Vzc1NVRkJTU3hGUVVGRkxFTkJRVUU3UVVGRFpDeEZRVUZCTEU5QlFVOURMRTlCUVU4c1EwRkJRMHdzUTBGQlF5eERRVUZETEVkQlFVZEJMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVUU3UVVGRE9VSXNRMEZCUVR0QlFVVlBMRk5CUVZOTkxGTkJRVk5CTEVOQlFVTlFMRXRCUVVzc1JVRkJSVkVzVlVGQlZTeEZRVUZGUXl4TlFVRk5MRVZCUVVWRExHRkJRV0VzUlVGQlJVTXNUMEZCVHl4RlFVRkZPMFZCUXpORkxFbEJRVWxETEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVFN1FVRkRja0lzUlVGQlFTeEpRVUZKUXl4WlFVRlpMRWRCUTJSRExHVkJRV1VzUTBGQlEwd3NUVUZCVFN4RFFVRkRMRWxCUVVsTExHVkJRV1VzUTBGQlEwTXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF5eERRVUZCTzBWQlEyaEZMRWxCUVVsRExIVkNRVUYxUWl4SFFVRkhMRWxCUVVrc1EwRkJRVHRCUVVOc1F5eEZRVUZCTEVsQlFVbERMRXRCUVVzc1EwRkJRME1zVDBGQlR5eERRVUZEVml4VlFVRlZMRU5CUVVNc1JVRkJSVHRCUVVNM1FrRXNTVUZCUVVFc1ZVRkJWU3hEUVVGRFZ5eFBRVUZQTEVOQlFVTXNWVUZCUTBNc1JVRkJSU3hGUVVGTE8wRkJRM3BDTEUxQlFVRXNTVUZCU1VNc1dVRkJXU3hIUVVGSFF5eExRVUZMTEVOQlFVTjBRaXhMUVVGTExFVkJRVVZ2UWl4RlFVRkZMRVZCUVVVc1NVRkJTV1lzU1VGQlNTeEZRVUZGTEVWQlFVVTdRVUZET1VOSkxGRkJRVUZCTEUxQlFVMHNSVUZCUlVrc1dVRkJXVHRCUVVOd1FsVXNVVUZCUVVFc01rSkJRVEpDTEVWQlFVVXNTVUZCU1R0QlFVTnFRME1zVVVGQlFVRXNORUpCUVRSQ0xFVkJRVVVzU1VGQlFUdEJRVU5vUXl4UFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOR0xFMUJRVUVzU1VGQlNXUXNZVUZCWVN4RlFVRkZPMEZCUTJwQ1RTeFJRVUZCUVN4MVFrRkJkVUlzUjBGRGNrSldMRTlCUVU4c1EwRkJRMlVzV1VGQldTeEZRVUZGVml4UFFVRlBMRU5CUVVNc1NVRkRPVUpZTEV0QlFVc3NTMEZCUzNsQ0xGVkJRVlVzUTBGQlEwb3NXVUZCV1N4RlFVRkZSQ3hGUVVGRkxFVkJRVVZZTEUxQlFVMHNRMEZCUXl4RFFVRkJPMEZCUTJ4RUxFOUJRVUU3VFVGRFFTeEpRVUZKU0N4UFFVRlBMRU5CUVVObExGbEJRVmtzUlVGQlJWWXNUMEZCVHl4RFFVRkRMRWxCUVVsTExIVkNRVUYxUWl4RlFVRkZPMEZCUXpkRVNpeFJRVUZCUVN4VlFVRlZMRWRCUVVkVExGbEJRVmtzUTBGQlFUdEJRVU16UWl4UFFVRkJPMEZCUTBZc1MwRkJReXhEUVVGRExFTkJRVUU3UVVGRFJpeEpRVUZCTEU5QlFVOVVMRlZCUVZVc1EwRkJRVHRCUVVOdVFpeEhRVUZCTzBWQlJVRkJMRlZCUVZVc1IwRkJSMVVzUzBGQlN5eERRVUZEZEVJc1MwRkJTeXhGUVVGRlVTeFZRVUZWTEVWQlFVVXNTVUZCU1Vnc1NVRkJTU3hGUVVGRkxFVkJRVVU3UVVGRGFFUkpMRWxCUVVGQkxFMUJRVTBzUlVGQlJVa3NXVUZCV1R0QlFVTndRbFVzU1VGQlFVRXNNa0pCUVRKQ0xFVkJRVVVzU1VGQlNUdEJRVU5xUTBNc1NVRkJRVUVzTkVKQlFUUkNMRVZCUVVVc1NVRkJRVHRCUVVOb1F5eEhRVUZETEVOQlFVTXNRMEZCUVR0QlFVVkdMRVZCUVVFc1NVRkJTV1FzWVVGQllTeEZRVUZGTzBGQlEycENUU3hKUVVGQlFTeDFRa0ZCZFVJc1IwRkRja0pXTEU5QlFVOHNRMEZCUTAwc1ZVRkJWU3hEUVVGRExFbEJRMjVDV2l4TFFVRkxMRXRCUVV0NVFpeFZRVUZWTEVOQlFVTmlMRlZCUVZVc1JVRkJSVW9zVlVGQlZTeEZRVUZGUXl4TlFVRk5MRU5CUVVNc1EwRkJRVHRCUVVONFJDeEhRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRTQ3hQUVVGUExFTkJRVU5OTEZWQlFWVXNRMEZCUXl4RlFVRkZPMEZCUXk5Q1NpeEpRVUZCUVN4VlFVRlZMRWRCUVVkQkxGVkJRVlVzUTBGRGNFSnJRaXhMUVVGTExFTkJRVU0xUWl3d1FrRkJNRUlzUTBGQlF5eERRVU5xUXpaQ0xFZEJRVWNzUTBGQlF5eFZRVUZWUXl4VFFVRlRMRVZCUVVVN1FVRkRlRUlzVFVGQlFTeEpRVUZOUXl4alFVRmpMRWRCUVVkRUxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTnVReXhOUVVGQkxFbEJRVWxETEdOQlFXTXNTMEZCU3l4SFFVRkhMRWxCUVVsQkxHTkJRV01zUzBGQlN5eEhRVUZITEVWQlFVVTdRVUZEY0VRc1VVRkJRU3hKUVVGTlF5eGhRVUZoTEVkQlFVZERMR05CUVdNc1EwRkJRMFlzWTBGQll5eERRVUZETEVOQlFVRTdVVUZEY0VRc1QwRkJUMmhDTEZsQlFWa3NSMEZEWm1sQ0xHRkJRV0VzUTBGQlEwWXNVMEZCVXl4RlFVRkZaaXhaUVVGWkxFTkJRVU50UWl4VlFVRlZMRU5CUVVNc1IwRkRha1JJTEdOQlFXTXNRMEZCUVR0QlFVTndRaXhQUVVGQk8wRkJRMEVzVFVGQlFTeFBRVUZQUkN4VFFVRlRMRU5CUVVFN1FVRkRiRUlzUzBGQlF5eERRVUZETEVOQlEwUkxMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlFUdEJRVVZZTEVsQlFVRXNTVUZCU1dwRExFdEJRVXNzUTBGQlEydERMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVVU3VFVGRGNFSjBRaXhWUVVGVkxFZEJRVWRWTEV0QlFVc3NRMEZCUTNSQ0xFdEJRVXNzUlVGQlJWRXNWVUZCVlN4RFFVRkRNa0lzUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlc1RExFdEJRVXNzUTBGQlEydERMRTFCUVUwc1EwRkJReXhGUVVGRkxFbEJRVWszUWl4SlFVRkpMRVZCUVVVc1JVRkJSVHRCUVVOMlJXdENMRkZCUVVGQkxESkNRVUV5UWl4RlFVRkZMRWxCUVVrN1FVRkRha05ETEZGQlFVRkJMRFJDUVVFMFFpeEZRVUZGTEVsQlFVRTdRVUZEYUVNc1QwRkJReXhEUVVGRExFTkJRVUU3UVVGRFNpeExRVUZCTzBGQlJVRXNTVUZCUVN4SlFVRkpMRU5CUVVOc1FpeFBRVUZQTEVOQlFVTk5MRlZCUVZVc1EwRkJReXhGUVVGRk8wRkJRM2hDUVN4TlFVRkJRU3hWUVVGVkxFZEJRVWNzU1VGQlNWQXNTVUZCU1N4RFFVRkRUQ3hMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU01UWl4TFFVRkJPMEZCUTBZc1IwRkJRVHRGUVVWQkxFOUJRVTlOTEU5QlFVOHNRMEZCUTAwc1ZVRkJWU3hEUVVGRExFbEJRVWxKTEhWQ1FVRjFRaXhIUVVGSFNpeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkJPMEZCUXpORkxFTkJRVUU3UVVGTlR5eFRRVUZUVGl4UFFVRlBRU3hEUVVGRE9FSXNTVUZCU1N4RlFVRkZla0lzVDBGQlR5eEZRVUZGTzBWQlEzSkRRU3hQUVVGUExFZEJRVWRCTEU5QlFVOHNSMEZCUjBFc1QwRkJUeXhIUVVGSExFbEJRVWxPTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRGUVVOc1JDeFBRVUZQWjBNc1UwRkJWeXhEUVVGRFJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRSU3hSUVVGUkxFTkJRVU5HTEVsQlFVa3NSVUZCUlhwQ0xFOUJRVThzUTBGQlF5eERRVUZCTzBGQlEzUkVMRU5CUVVFN08wRkJSVUU3TzBGQlJVOHNVMEZCVTJNc1ZVRkJWVUVzUTBGQlExY3NTVUZCU1N4RlFVRkZSeXhUUVVGVExFVkJRVVU1UWl4TlFVRk5MRVZCUVVVN1JVRkRiRVFzU1VGQlNVRXNUVUZCVFN4TFFVRkxMRWxCUVVrc1JVRkJSVHRCUVVOdVFpeEpRVUZCTEU5QlFVOHJRaXhOUVVGTkxFTkJRVU5LTEVsQlFVa3NSVUZCUlVjc1UwRkJVeXhGUVVGRk8wRkJRemRDYUVJc1RVRkJRVUVzTWtKQlFUSkNMRVZCUVVVc1NVRkJTVHRCUVVOcVEwTXNUVUZCUVVFc05FSkJRVFJDTEVWQlFVVXNTVUZCUVR0QlFVTm9ReXhMUVVGRExFTkJRVU1zUTBGQlFUdEJRVU5LTEVkQlFVRTdRVUZEUVN4RlFVRkJMRWxCUVVscFFpeFRRVUZUTEVkQlFVY3pRaXhsUVVGbExFTkJRVU5NTEUxQlFVMHNRMEZCUXl4RFFVRkJPMEZCUTNaRExFVkJRVUVzU1VGQlNVRXNUVUZCVFN4SlFVRkpMRU5CUVVOblF5eFRRVUZUTEVWQlFVVTdRVUZEZUVKRExFbEJRVUZCTEU5QlFVOHNRMEZCUTBNc1NVRkJTU3hEUVVGQkxESkVRVUZCTEVOQlFVRkRMRTFCUVVFc1EwRkRhVVJ1UXl4TlFVRk5MRk5CUTI1RkxFTkJRVU1zUTBGQlFUdEJRVU5JTEVkQlFVRTdRVUZEUVN4RlFVRkJMRWxCUTBVc1EwRkJRMmRETEZOQlFWTXNTVUZEVml4RFFVRkRMRU5CUVVNeFFpeG5Ra0ZCWjBJc1JVRkJSU3hKUVVOd1FpeERRVUZETEVOQlFVTkVMR1ZCUVdVc1EwRkJRME1zWjBKQlFXZENMRVZCUVVVc1EwRkJReXhGUVVOeVF6dEJRVU5CTUVJc1NVRkJRVUVzVTBGQlV5eEhRVUZITTBJc1pVRkJaU3hEUVVGRFF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExFTkJRVUU3UVVGRGFrUXNSMEZCUVR0QlFVTkJMRVZCUVVFc1QwRkJUM2xDTEUxQlFVMHNRMEZCUTBvc1NVRkJTU3hGUVVGRlJ5eFRRVUZUTEVWQlFVVTdRVUZETjBJNVFpeEpRVUZCUVN4TlFVRk5MRVZCUVVWblF5eFRRVUZUTEVkQlFVZEJMRk5CUVZNc1IwRkJSeXhKUVVGSk8wRkJRM0JEYkVJc1NVRkJRVUVzTWtKQlFUSkNMRVZCUVVVc1NVRkJTVHRCUVVOcVEwTXNTVUZCUVVFc05FSkJRVFJDTEVWQlFVVXNTVUZCUVR0QlFVTm9ReXhIUVVGRExFTkJRVU1zUTBGQlFUdEJRVU5LTEVOQlFVRTdRVUZGVHl4VFFVRlRjVUlzWTBGQlkwRXNRMEZCUTFRc1NVRkJTU3hGUVVGQlZTeEpRVUZCTEVWQlFUQkNPMEZCUVVFc1JVRkJRU3hKUVVGMFFuUkRMRlZCUVZVc1IwRkJRWE5ETEVsQlFVRXNRMEZCVm5SRExGVkJRVlU3U1VGQlJVTXNUVUZCVFN4SFFVRkJjVU1zU1VGQlFTeERRVUZPY2tNc1RVRkJUU3hEUVVGQk8wVkJRM1pFTEU5QlEwY3lRaXhKUVVGSkxFbEJRMGhZTEZWQlFWVXNRMEZEVWxjc1NVRkJTU3hGUVVOS2JrSXNTMEZCU3l4RFFVRkRReXhQUVVGUExFTkJRVU5XTEZWQlFWVXNRMEZCUXl4SFFVRkhRU3hWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVZEJMRlZCUVZVc1JVRkRkRVJETEUxQlEwWXNRMEZCUXl4SlFVTklMRVZCUVVVc1EwRkJRVHRCUVVWT0xFTkJRVUU3UVVGRlR5eFRRVUZUYzBNc2JVSkJRVzFDUVN4RFFVRkRReXhUUVVGVExFVkJRVVZETEU5QlFVOHNSVUZCUlVNc1MwRkJTeXhGUVVGRk8wVkJRemRFTEVsQlFVa3NRMEZCUTBZc1UwRkJVeXhGUVVGRk8wRkJRMlFzU1VGQlFTeFBRVUZQTEVWQlFVVXNRMEZCUVR0QlFVTllMRWRCUVVFN1FVRkZRU3hGUVVGQkxFbEJRVTFITEd0Q1FVRnJRaXhIUVVGSFRpeGpRVUZqTEVOQlFVTkhMRk5CUVZNc1JVRkJSVVVzUzBGQlN5eERRVUZETEVOQlFVRTdSVUZETTBRc1NVRkJUVVVzWjBKQlFXZENMRWRCUVVkSUxFOUJRVThzUjBGQlIwb3NZMEZCWXl4RFFVRkRTU3hQUVVGUExFVkJRVVZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRVHRCUVVWMFJTeEZRVUZCTEU5QlFVRXNSVUZCUVN4RFFVRkJUaXhOUVVGQkxFTkJRVlZQTEd0Q1FVRnJRaXhGUVVGQlVDeExRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeE5RVUZCTEVOQlFVMVJMR2RDUVVGblFpeERRVUZCTEVOQlFVRTdRVUZEY0VRc1EwRkJRVHRCUVVWUExGTkJRVk5ETEhWQ1FVRjFRa0VzUTBGQlEwTXNTMEZCU3l4RlFVRkZTaXhMUVVGTExFVkJRVVU3UlVGRGNFUXNTVUZCU1N4RlFVRkRTU3hMUVVGTExFdEJRVXhCTEVsQlFVRkJMRWxCUVVGQkxFdEJRVXNzWlVGQlRFRXNTMEZCU3l4RFFVRkZjRUlzVFVGQlRTeERRVUZGTEVWQlFVRTdRVUZEYkVJc1NVRkJRU3hQUVVGUExFVkJRVVVzUTBGQlFUdEJRVU5ZTEVkQlFVRTdSVUZEUVN4SlFVRk5jVUlzYTBKQlFXdENMRWRCUVVkV0xHTkJRV01zUTBGQlExTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRlNpeExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVTXhSQ3hGUVVGQkxFbEJRVWxKTEV0QlFVc3NRMEZCUTNCQ0xFMUJRVTBzUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEZEVJc1NVRkJRU3hQUVVGUGNVSXNhMEpCUVd0Q0xFTkJRVUU3UVVGRE0wSXNSMEZCUVR0QlFVTkJMRVZCUVVFc1NVRkJTVVFzUzBGQlN5eERRVUZEY0VJc1RVRkJUU3hMUVVGTExFTkJRVU1zUlVGQlJUdEpRVU4wUWl4SlFVRk5jMElzYlVKQlFXMUNMRWRCUVVkWUxHTkJRV01zUTBGQlExTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRlNpeExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVTXpSQ3hKUVVGQkxFOUJRVUVzUlVGQlFTeERRVUZCVGl4TlFVRkJMRU5CUVZWWExHdENRVUZyUWl4RlFVRkJXQ3hKUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hOUVVGQkxFTkJRVXRaTEcxQ1FVRnRRaXhEUVVGQkxFTkJRVUU3UVVGRGRFUXNSMEZCUVR0QlFVVkJMRVZCUVVFc1NVRkJUVU1zWlVGQlpTeEhRVUZIU0N4TFFVRkxMRU5CUVVOd1FpeE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkJPMEZCUTNoRExFVkJRVUVzVDBGQlFTeEZRVUZCTEVOQlFVRlZMRTFCUVVFc1EwRkJWVmNzYTBKQlFXdENMRVZCUVVGWUxFdEJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFMUJRVUVzUTBGQlRXRXNaVUZCWlN4RlFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGQk8wRkJRMjVFTEVOQlFVRTdPMEZCUlVFN08wRkJSVThzVTBGQlUwTXNUMEZCVDBFc1EwRkJRM1JDTEVsQlFVa3NSVUZCUVhWQ0xFdEJRVUVzUlVGQmQwTTdRVUZCUVN4RlFVRkJMRWxCUVVGRExGVkJRVUVzUjBGQlFVUXNTMEZCUVN4RFFVRndRMFVzU1VGQlNUdEJRVUZLUVN4SlFVRkJRU3hKUVVGSkxFZEJRVUZFTEZWQlFVRXNTMEZCUnl4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGRExFZEJRVUZCTEZWQlFVRTdTVUZCUVVVc1dVRkJRU3hIUVVGQlNDeExRVUZCTEVOQlFVVkpMRTFCUVUwN1FVRkJUa0VzU1VGQlFVRXNUVUZCVFN4SFFVRkJSQ3haUVVGQkxFdEJRVWNzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUXl4SFFVRkJRU3haUVVGQk8wbEJRVUZGTEZsQlFVRXNSMEZCUVV3c1MwRkJRU3hEUVVGRlRTeE5RVUZOTzBGQlFVNUJMRWxCUVVGQkxFMUJRVTBzUjBGQlFVUXNXVUZCUVN4TFFVRkhMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVU1zUjBGQlFVRXNXVUZCUVN4RFFVRkJPMEZCUXpsRUxFVkJRVUVzVDBGQlQwVXNVVUZCVVN4RFFVRkRReXhWUVVGVkxFTkJRVU5ETEZWQlFWVXNRMEZCUTJoRExFbEJRVWtzUlVGQlJUWkNMRTFCUVUwc1EwRkJReXhGUVVGRlJpeE5RVUZOTEVOQlFVTXNSVUZCUlVZc1NVRkJTU3hEUVVGRExFTkJRVUU3UVVGRGNrVXNRMEZCUVR0QlFXMUNUeXhUUVVGVFVTeFBRVUZQUVN4RFFVRkRha01zU1VGQlNTeEZRVUZGTTBJc1RVRkJUU3hGUVVGRk8wRkJRM0JETEVWQlFVRXNTVUZCU1dkRExGTkJRVk1zUjBGRFZtaERMRTFCUVUwc1NVRkJTVXNzWlVGQlpTeERRVUZEVEN4TlFVRk5MRU5CUVVNc1NVRkRha05OTEdkQ1FVRm5RaXhGUVVGRkxFbEJRVWxFTEdWQlFXVXNRMEZCUTBNc1owSkJRV2RDTEVWQlFVVXNRMEZCUlN4RFFVRkJPMEZCUXpkRUxFVkJRVUVzVDBGQlQzVkVMRlZCUVZVc1EwRkJRMnhETEVsQlFVa3NSVUZCUlVzc1UwRkJVeXhIUVVGSE8wRkJRVVZvUXl4SlFVRkJRU3hOUVVGTkxFVkJRVVZuUXl4VFFVRkJRVHRIUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVRTdRVUZEYmtVc1EwRkJRVHRCUVVWUExGTkJRVk00UWl4blFrRkJaMEpCTEVOQlFVTkRMRWRCUVVjc1JVRkJSUzlFTEUxQlFVMHNSVUZCUlR0QlFVTTFReXhGUVVGQkxFOUJRVTluUWl4VlFVRlZMRU5CUVVNclF5eEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMMFFzVFVGQlRTeERRVUZETEVOQlFVRTdRVUZEZGtNc1EwRkJRVHM3UVVGRlFUczdRVUZGVHl4VFFVRlRaMFVzWVVGQllVRXNRMEZCUTNKRExFbEJRVWtzUlVGQlJUdEZRVU5zUXl4UFFVRlBjME1zVlVGQlZTeERRVUZEZEVNc1NVRkJTU3hEUVVGRExFTkJRVUU3UVVGRGVrSXNRMEZCUVR0QlFVVlBMRk5CUVZOMVF5eGpRVUZqUVN4RFFVRkRka01zU1VGQlNTeEZRVUZGTTBJc1RVRkJUU3hGUVVGRmJVVXNaMEpCUVdkQ0xFVkJRVVU3UVVGRE4wUXNSVUZCUVN4SlFVRkpia01zVTBGQlV5eEhRVUZIYUVNc1RVRkJUU3hIUVVOc1Frc3NaVUZCWlN4RFFVRkRUQ3hOUVVGTkxFTkJRVU1zUjBGRGRrSkxMR1ZCUVdVc1EwRkJRME1zWjBKQlFXZENMRVZCUVVVc1EwRkJReXhEUVVGQk8wVkJRM1pETEU5QlFVODRSQ3hYUVVGWExFTkJRVU42UXl4SlFVRkpMRVZCUVVVN1FVRkRka0l6UWl4SlFVRkJRU3hOUVVGTkxFVkJRVVZuUXl4VFFVRlRPMEZCUTJwQ2NVTXNTVUZCUVVFc1dVRkJXU3hGUVVGRlJpeG5Ra0ZCUVVFN1FVRkRhRUlzUjBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4RFFVRkJPMEZCUlU4c1UwRkJVMGNzWlVGQlpVRXNRMEZCUXpORExFbEJRVWtzUlVGQlJUdEZRVU53UXl4UFFVRlBORU1zV1VGQldTeERRVUZETlVNc1NVRkJTU3hEUVVGRExFTkJRVUU3UVVGRE0wSXNRMEZCUVR0QlFVVlBMRk5CUVZNMlF5eGpRVUZqUVN4RFFVRkROME1zU1VGQlNTeEZRVUZGTzBWQlEyNURMRTlCUVU4NFF5eFhRVUZYTEVOQlFVTTVReXhKUVVGSkxFTkJRVU1zUTBGQlFUdEJRVU14UWl4RFFVRkJPMEZCUlU4c1UwRkJVeXRETEdsQ1FVRnBRa0VzUTBGQlF5OURMRWxCUVVrc1JVRkJSVHRGUVVOMFF5eFBRVUZQWjBRc1kwRkJZeXhEUVVGRGFFUXNTVUZCU1N4RFFVRkRMRU5CUVVFN1FVRkROMElzUTBGQlFUdEJRVVZQTEZOQlFWTnBSQ3hsUVVGbFFTeEhRVUZITzBGQlEyaERMRVZCUVVFc1QwRkJUMWdzVlVGQlZTeERRVUZETTBVc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlFUdEJRVU01UWl4RFFVRkJPenRCUVVWQk96dEJRVVZQTEZOQlFWTjFSaXhaUVVGWlFTeERRVUZEYkVRc1NVRkJTU3hGUVVGRk8wVkJRMnBETEU5QlFVOXRSQ3hUUVVGVExFTkJRVU51UkN4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVONFFpeERRVUZCTzBGQk5FSlBMRk5CUVZOdlJDeFZRVUZWUVN4RFFVRkRReXhMUVVGTExFVkJRVVZETEV0QlFVc3NSVUZCUlR0RlFVTjJReXhKUVVGSlJDeExRVUZMTEVsQlFVbERMRXRCUVVzc1JVRkJSVHRCUVVOc1FpeEpRVUZCTEU5QlFVOURMRmxCUVZrc1EwRkJRMFlzUzBGQlN5eEZRVUZGUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRCUVVOdVF5eEhRVUZETEUxQlFVMDdRVUZEVEN4SlFVRkJMRTlCUVU4c1EwRkJRMFFzUzBGQlN5eEpRVUZKTEVOQlFVTkRMRXRCUVVzc1EwRkJRVHRCUVVONlFpeEhRVUZCTzBGQlEwWXNRMEZCUVR0QlFVVlBMRk5CUVZORkxGZEJRVmRCTEVOQlFVTklMRXRCUVVzc1JVRkJSVU1zUzBGQlN5eEZRVUZGTzBWQlEzaERMRWxCUVVsRUxFdEJRVXNzU1VGQlNVTXNTMEZCU3l4RlFVRkZPMEZCUTJ4Q0xFbEJRVUVzVDBGQlQwY3NZVUZCWVN4RFFVRkRTaXhMUVVGTExFVkJRVVZETEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUTNCRExFZEJRVU1zVFVGQlRUdEJRVU5NTEVsQlFVRXNUMEZCVHl4RFFVRkRSQ3hMUVVGTExFbEJRVWtzUTBGQlEwTXNTMEZCU3l4RFFVRkJPMEZCUTNwQ0xFZEJRVUU3UVVGRFJpeERRVUZCTzBGQlJVOHNVMEZCVTBrc1lVRkJZVUVzUTBGQlEwd3NTMEZCU3l4RlFVRkZReXhMUVVGTExFVkJRVVU3UlVGRE1VTXNTVUZCU1VRc1MwRkJTeXhKUVVGSlF5eExRVUZMTEVWQlFVVTdRVUZEYkVJc1NVRkJRU3hQUVVGUFN5eGxRVUZsTEVOQlFVTk9MRXRCUVVzc1JVRkJSVU1zUzBGQlN5eERRVUZETEVOQlFVRTdRVUZEZEVNc1IwRkJReXhOUVVGTk8wRkJRMHdzU1VGQlFTeFBRVUZQTEVOQlFVTkVMRXRCUVVzc1NVRkJTU3hEUVVGRFF5eExRVUZMTEVOQlFVRTdRVUZEZWtJc1IwRkJRVHRCUVVOR0xFTkJRVUU3UVVGRlR5eFRRVUZUVFN4VFFVRlRRU3hEUVVGRFVDeExRVUZMTEVWQlFVVkRMRXRCUVVzc1JVRkJSVHRGUVVOMFF5eEpRVUZKUkN4TFFVRkxMRWxCUVVsRExFdEJRVXNzUlVGQlJUdEJRVU5zUWl4SlFVRkJMRTlCUVU5UExGZEJRVmNzUTBGQlExSXNTMEZCU3l4RlFVRkZReXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU5zUXl4SFFVRkRMRTFCUVUwN1FVRkRUQ3hKUVVGQkxFOUJRVThzUTBGQlEwUXNTMEZCU3l4SlFVRkpMRU5CUVVORExFdEJRVXNzUTBGQlFUdEJRVU42UWl4SFFVRkJPMEZCUTBZc1EwRkJRVHRCUVVWUExGTkJRVk5STEU5QlFVOUJMRU5CUVVOVUxFdEJRVXNzUlVGQlJVTXNTMEZCU3l4RlFVRkZPMFZCUTNCRExFbEJRVWxFTEV0QlFVc3NTVUZCU1VNc1MwRkJTeXhGUVVGRk8wRkJRMnhDTEVsQlFVRXNUMEZCVDFNc1UwRkJVeXhEUVVGRFZpeExRVUZMTEVWQlFVVkRMRXRCUVVzc1EwRkJReXhEUVVGQk8wRkJRMmhETEVkQlFVTXNUVUZCVFR0QlFVTk1MRWxCUVVFc1QwRkJUeXhEUVVGRFJDeExRVUZMTEVsQlFVa3NRMEZCUTBNc1MwRkJTeXhEUVVGQk8wRkJRM3BDTEVkQlFVRTdRVUZEUml4RFFVRkJPMEZCUlU4c1UwRkJVMVVzV1VGQldVRXNRMEZCUXpWQ0xFZEJRVWNzUlVGQlJYaENMRk5CUVZNc1JVRkJSVU1zVDBGQlR5eEZRVUZGTzBGQlEzQkVMRVZCUVVFc1NVRkJTVzlFTEV0QlFVc3NRMEZCUVR0QlFVTlVMRVZCUVVFc1NVRkJUVU1zUzBGQlN5eEhRVUZITlVJc1ZVRkJWU3hEUVVGRE1VSXNVMEZCVXl4RFFVRkRMRU5CUVVFN1FVRkRia01zUlVGQlFTeEpRVUZOZFVRc1IwRkJSeXhIUVVGSFF5eFJRVUZSTEVOQlFVTjJSQ3hQUVVGUExFTkJRVU1zUTBGQlFUdEZRVVUzUWl4SlFVRkpPMEZCUTBadlJDeEpRVUZCUVN4TFFVRkxMRWRCUVVkSkxHZENRVUZuUWl4RFFVRkRha01zUjBGQlJ5eEZRVUZGTzBGQlFVVTRRaXhOUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCUVVzN1FVRkJSVU1zVFVGQlFVRXNSMEZCUnl4RlFVRklRU3hIUVVGQlFUdEJRVUZKTEV0QlFVTXNRMEZCUXl4RFFVRkJPMGRCUXpsRExFTkJRVU1zVDBGQlQwY3NSMEZCUnl4RlFVRkZPMEZCUTFwTUxFbEJRVUZCTEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVFN1FVRkRaaXhIUVVGQk8wRkJRMEVzUlVGQlFTeFBRVUZQUVN4TFFVRkxMRU5CUVVFN1FVRkRaQ3hEUVVGQk96dEJRVkZCT3p0QlFVVlBMRk5CUVZOTkxHTkJRV05CTEVOQlFVTkRMRlZCUVZVc1JVRkJSVU1zVlVGQlZTeEZRVUZGTzBWQlEzSkVMRWxCUVUxRExFdEJRVXNzUjBGQlJ5eFBRVUZQUXl4TlFVRk5MRXRCUVVzc1YwRkJWeXhIUVVGSFFTeE5RVUZOTEVkQlFVZERMRlZCUVZVc1EwRkJRVHRCUVVWcVJTeEZRVUZCTEVsQlFVa3NRMEZCUTBZc1MwRkJTeXhEUVVGRFJ5eGpRVUZqTEVWQlFVVTdRVUZEZWtKSUxFbEJRVUZCTEV0QlFVc3NRMEZCUTBjc1kwRkJZeXhIUVVGSExFVkJRVVVzUTBGQlFUdEJRVU16UWl4SFFVRkJPMEZCUTBGSUxFVkJRVUZCTEV0QlFVc3NRMEZCUTBjc1kwRkJZeXhEUVVGRFRDeFZRVUZWTEVOQlFVTXNSMEZCUjBNc1ZVRkJWU3hEUVVGQk8wRkJReTlETEVOQlFVRTdRVUZGVHl4VFFVRlRTeXhuUWtGQlowSkJMRU5CUVVOT0xGVkJRVlVzUlVGQlJUdEZRVU16UXl4SlFVRk5SU3hMUVVGTExFZEJRVWNzVDBGQlQwTXNUVUZCVFN4TFFVRkxMRmRCUVZjc1IwRkJSMEVzVFVGQlRTeEhRVUZIUXl4VlFVRlZMRU5CUVVFN1JVRkZha1ZHTEV0QlFVc3NRMEZCUTBzc1dVRkJXU3hIUVVGSFVDeFZRVUZWTEVOQlFVRTdRVUZEYWtNc1EwRkJRVHRCUVVWUExGTkJRVk0zUml4blFrRkJaMEpCTEVkQlFVYzdSVUZEYWtNc1NVRkJUU3RHTEV0QlFVc3NSMEZCUnl4UFFVRlBReXhOUVVGTkxFdEJRVXNzVjBGQlZ5eEhRVUZIUVN4TlFVRk5MRWRCUVVkRExGVkJRVlVzUTBGQlFUdEZRVVZxUlN4UFFVRlBSaXhMUVVGTExFTkJRVU5MTEZsQlFWa3NRMEZCUVR0QlFVTXpRaXhEUVVGQk8wRkJSVThzVTBGQlUzSkhMR1ZCUVdWQkxFTkJRVU56Unl4VlFVRlZMRVZCUVVVN1FVRkRNVU1zUlVGQlFTeEpRVUZKTEU5QlFVOUJMRlZCUVZVc1MwRkJTeXhSUVVGUkxFVkJRVVU3UVVGRGJFTTdTVUZEUVN4SlFVRk5UaXhMUVVGTExFZEJRVWNzVDBGQlQwTXNUVUZCVFN4TFFVRkxMRmRCUVZjc1IwRkJSMEVzVFVGQlRTeEhRVUZIUXl4VlFVRlZMRU5CUVVFN1NVRkRha1VzVDBGQlQwWXNTMEZCU3l4RFFVRkRSeXhqUVVGakxFZEJRVWRJTEV0QlFVc3NRMEZCUTBjc1kwRkJZeXhEUVVGRFJ5eFZRVUZWTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVFN1FVRkRka1VzUjBGQlF5eE5RVUZOTzBGQlEwdzdRVUZEUVN4SlFVRkJMRTlCUVU5QkxGVkJRVlVzUTBGQlFUdEJRVU51UWl4SFFVRkJPMEZCUTBZc1EwRkJRVHRCUVVWUExGTkJRVk5ETERKQ1FVRXlRa0VzUTBGQlEycEdMRWxCUVVrc1JVRkJSV3RHTEZWQlFWVXNSVUZCUlRkSExFMUJRVTBzUlVGQlJUdEZRVU53UlN4UFFVRlBOa2NzVlVGQlZTeERRVUZETjBZc1ZVRkJWU3hEUVVGRFZ5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RlFVRkZNMElzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTnlSQ3hEUVVGQk8wRkJSVThzVTBGQlV6aEhMSEZDUVVGeFFrRXNRMEZCUTI1R0xFbEJRVWtzUlVGQlJUTkNMRTFCUVUwc1JVRkJSVHRCUVVOc1JDeEZRVUZCTEU5QlFVOW5RaXhWUVVGVkxFTkJRVU5YTEVsQlFVa3NSVUZCUlN4UlFVRlJMRVZCUVVVelFpeE5RVUZOTEVOQlFVTXNRMEZCUVR0QlFVTXpReXhEUVVGQk8wRkJSVThzVTBGQlV5dEhMSFZDUVVGMVFrRXNRMEZCUTNCR0xFbEJRVWtzUlVGQlJUTkNMRTFCUVUwc1JVRkJSVHRCUVVOd1JDeEZRVUZCTEU5QlFVOW5RaXhWUVVGVkxFTkJRVU5YTEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVelFpeE5RVUZOTEVOQlFVTXNRMEZCUVR0QlFVTjRReXhEUVVGQk8wRkJSVThzVTBGQlUyZElMR2RDUVVGblFrRXNRMEZCUTBNc1MwRkJTeXhGUVVGRmFrZ3NUVUZCVFN4RlFVRkZPMEZCUXpsRExFVkJRVUVzVDBGQlQyZENMRlZCUVZVc1EwRkJRMnRITEZGQlFWRXNRMEZCUXpWSUxFOUJRVThzUlVGQlJTeEZRVUZGTWtnc1MwRkJTeXhEUVVGRExFVkJRVVVzVFVGQlRTeEZRVUZGYWtnc1RVRkJUU3hEUVVGRExFTkJRVUU3UVVGREwwUXNRMEZCUVR0QlFVVlBMRk5CUVZOdFNDeHhRa0ZCY1VKQkxFTkJRVU5HTEV0QlFVc3NSVUZCUldwSUxFMUJRVTBzUlVGQlJUdEJRVU51UkN4RlFVRkJMRTlCUVU5blFpeFZRVUZWTEVOQlFVTnJSeXhSUVVGUkxFTkJRVU0xU0N4UFFVRlBMRVZCUVVVc1JVRkJSVEpJTEV0QlFVc3NRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSV3BJTEUxQlFVMHNRMEZCUXl4RFFVRkJPMEZCUXpsRUxFTkJRVUU3UVVGRlR5eFRRVUZUYjBnc2RVSkJRWFZDUVN4RFFVRkRReXhQUVVGUExFVkJRVVZ5U0N4TlFVRk5MRVZCUVVVN1FVRkRka1FzUlVGQlFTeFBRVUZQWjBJc1ZVRkJWU3hEUVVGRGMwY3NWVUZCVlN4RFFVRkRhRWtzVDBGQlR5eEZRVUZGTEVWQlFVVXJTQ3hQUVVGUExFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVnlTQ3hOUVVGTkxFTkJRVU1zUTBGQlFUdEJRVU5zUlN4RFFVRkJPenRCUVVWQk96dEJRVVZQTEZOQlFWTjFTQ3hoUVVGaFFTeERRVU16UW5oRUxFZEJRVWNzUlVGVlNEdEJRVUZCTEVWQlFVRXNTVUZCUVhsRUxFdEJRVUVzUjBGQlFVTXNVMEZCUVN4RFFVRkJhRWNzVFVGQlFTeEhRVUZCTEVOQlFVRXNTVUZCUVdkSExGTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTMEZCUVVNc1UwRkJRU3hIUVVGQlJDeFRRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRWRCUkVrc1JVRkJSVHRKUVZCS2RrZ3NUMEZCVHl4SFFVRkJjMGdzUzBGQlFTeERRVUZRZEVnc1QwRkJUenRKUVVOUWVVZ3NUMEZCVHl4SFFVRkJTQ3hMUVVGQkxFTkJRVkJITEU5QlFVODdTVUZEVUVNc1dVRkJXU3hIUVVGQlNpeExRVUZCTEVOQlFWcEpMRmxCUVZrN1NVRkRXa01zYjBKQlFXOUNMRWRCUVVGTUxFdEJRVUVzUTBGQmNFSkxMRzlDUVVGdlFqdEpRVU53UWtNc1dVRkJXU3hIUVVGQlRpeExRVUZCTEVOQlFWcE5MRmxCUVZrN1NVRkRXa01zYjBKQlFXOUNMRWRCUVVGUUxFdEJRVUVzUTBGQmNFSlBMRzlDUVVGdlFqdEpRVU53UWtNc1ZVRkJWU3hIUVVGQlVpeExRVUZCTEVOQlFWWlJMRlZCUVZVc1EwRkJRVHRGUVVkYUxFOUJRMFZETEdGQlFXRXNRMEZCUTJ4RkxFZEJRVWNzUlVGQlJUdEJRVUZGTjBRc1NVRkJRVUVzVDBGQlR5eEZRVUZRUVN4UFFVRlBPMEZCUVVWNVNDeEpRVUZCUVN4UFFVRlBMRVZCUVZCQkxFOUJRVUZCTzBkQlFWTXNRMEZCUXl4SlFVTjJRME1zV1VGQldTeEpRVU5ZUVN4WlFVRlpMRU5CUVVOTkxFbEJRVWtzUTBGQlF5eFZRVUZEUXl4WFFVRlhMRVZCUVVFN1FVRkJRU3hKUVVGQkxFOUJRelZDTlVNc1UwRkJVeXhEUVVGRGVFSXNSMEZCUnl4RlFVRkZiMFVzVjBGQlZ5eERRVUZEZUVjc1NVRkJTU3hIUVVGSGQwY3NWMEZCVnl4RFFVRkRlRWNzU1VGQlNTeEhRVUZIZDBjc1YwRkJWeXhEUVVGRExFTkJRVUU3UjBGRGJrVXNRMEZCUlN4SlFVTklUaXh2UWtGQmIwSXNTVUZEYmtKQkxHOUNRVUZ2UWl4RFFVRkRTeXhKUVVGSkxFTkJRVU1zVlVGQlFVVXNTMEZCUVN4RlFVRkJPMEZCUVVFc1NVRkJRU3hKUVVGSGRrTXNTMEZCU3l4SFFVRkJkVU1zUzBGQlFTeERRVUZNZGtNc1MwRkJTenROUVVGRlF5eEhRVUZITEVkQlFVRnpReXhMUVVGQkxFTkJRVWgwUXl4SFFVRkhMRU5CUVVFN1NVRkJRU3hQUVVOeVEwVXNaMEpCUVdkQ0xFTkJRVU5xUXl4SFFVRkhMRVZCUVVVN1FVRkJSVGhDTEUxQlFVRkJMRXRCUVVzc1JVRkJURUVzUzBGQlN6dEJRVUZGUXl4TlFVRkJRU3hIUVVGSExFVkJRVWhCTEVkQlFVRkJPMEZCUVVrc1MwRkJReXhEUVVGRExFTkJRVUU3UjBGRGRrTXNRMEZCUlN4SlFVTklaME1zV1VGQldTeEpRVU5ZTEVOQlFVTkJMRmxCUVZrc1EwRkJRMGtzU1VGQlNTeERRVUZETEZWQlFVTkhMRmRCUVZjc1JVRkJRVHRCUVVGQkxFbEJRVUVzVDBGQlN6bERMRk5CUVZNc1EwRkJRM2hDTEVkQlFVY3NSVUZCUlhORkxGZEJRVmNzUTBGQlF5eERRVUZCTzBkQlFVVXNRMEZCUVN4SlFVTnNSVTRzYjBKQlFXOUNMRWxCUTI1Q0xFTkJRVU5CTEc5Q1FVRnZRaXhEUVVGRFJ5eEpRVUZKTEVOQlFVTXNWVUZCUVVrc1MwRkJRU3hGUVVGQk8wRkJRVUVzU1VGQlFTeEpRVUZIZWtNc1MwRkJTeXhIUVVGQmVVTXNTMEZCUVN4RFFVRk1la01zUzBGQlN6dE5RVUZGUXl4SFFVRkhMRWRCUVVGM1F5eExRVUZCTEVOQlFVaDRReXhIUVVGSExFTkJRVUU3U1VGQlFTeFBRVU4wUTBVc1owSkJRV2RDTEVOQlFVTnFReXhIUVVGSExFVkJRVVU3UVVGQlJUaENMRTFCUVVGQkxFdEJRVXNzUlVGQlRFRXNTMEZCU3p0QlFVRkZReXhOUVVGQlFTeEhRVUZITEVWQlFVaEJMRWRCUVVGQk8wRkJRVWtzUzBGQlF5eERRVUZETEVOQlFVRTdRVUZCUVN4SFFVTjJReXhEUVVGRkxFbEJRMGhyUXl4VlFVRlZMRWxCUVVrc1EwRkJRMEVzVlVGQlZTeERRVUZETVVrc1QwRkJUeXhEUVVGRGVVVXNSMEZCUnl4RFFVRkRMRU5CUVVVc1NVRkRla01zUzBGQlN5eERRVUZCTzBGQlJWUXNRMEZCUVR0QlFVVlBMRk5CUVZOM1JTeGhRVUZoUVN4RFFVTXpRbmhGTEVkQlFVY3NSVUZGU0R0QlFVRkJMRVZCUVVFc1NVRkJRWGxGTEV0QlFVRXNSMEZCUVdZc1UwRkJRU3hEUVVGQmFFY3NUVUZCUVN4SFFVRkJMRU5CUVVFc1NVRkJRV2RITEZOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1MwRkJRVU1zVTBGQlFTeEhRVUZCUkN4VFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFZEJSSGxETEVWQlFVVTdTVUZCZWtOSExGbEJRVmtzUjBGQlFWa3NTMEZCUVN4RFFVRmFXaXhaUVVGWk8wbEJRVVZETEc5Q1FVRnZRaXhIUVVGQlZ5eExRVUZCTEVOQlFYQkNXQ3h2UWtGQmIwSXNRMEZCUVR0QlFVVndReXhGUVVGQkxFbEJRVWxCTEc5Q1FVRnZRaXhKUVVGSlFTeHZRa0ZCYjBJc1EwRkJRM0JITEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVN1FVRkRNMFFzU1VGQlFTeFBRVUZQYjBjc2IwSkJRVzlDTEVOQlFVTkxMRWxCUVVrc1EwRkJReXhWUVVGQlR5eExRVUZCTEVWQlFVRTdRVUZCUVN4TlFVRkJMRWxCUVVjMVF5eExRVUZMTEVkQlFVRTBReXhMUVVGQkxFTkJRVXcxUXl4TFFVRkxPMUZCUVVWRExFZEJRVWNzUjBGQlFUSkRMRXRCUVVFc1EwRkJTRE5ETEVkQlFVY3NRMEZCUVR0TlFVRkJMRTlCUXpWRFJTeG5Ra0ZCWjBJc1EwRkJRMnBETEVkQlFVY3NSVUZCUlR0QlFVRkZPRUlzVVVGQlFVRXNTMEZCU3l4RlFVRk1RU3hMUVVGTE8wRkJRVVZETEZGQlFVRkJMRWRCUVVjc1JVRkJTRUVzUjBGQlFVRTdRVUZCU1N4UFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVGQkxFdEJRM1pETEVOQlFVTXNRMEZCUVR0QlFVTklMRWRCUVVFN1FVRkRRU3hGUVVGQkxFOUJRMGM0UWl4WlFVRlpMRWxCUTFoQkxGbEJRVmtzUTBGQlEwMHNTVUZCU1N4RFFVRkRMRlZCUVVORExGZEJRVmNzUlVGQlFUdEJRVUZCTEVsQlFVRXNUMEZETlVJMVF5eFRRVUZUTEVOQlFVTjRRaXhIUVVGSExFVkJRVVZ2UlN4WFFVRlhMRU5CUVVONFJ5eEpRVUZKTEVkQlFVZDNSeXhYUVVGWExFTkJRVU40Unl4SlFVRkpMRWRCUVVkM1J5eFhRVUZYTEVOQlFVTXNRMEZCUVR0SFFVTnVSU3hEUVVGRExFbEJRMGdzUzBGQlN5eERRVUZCTzBGQlJWUXNRMEZCUVR0QlFVVlBMRk5CUVZOUExHVkJRV1ZCTEVOQlF6ZENla0lzUzBGQlN5eEZRVVZNTzBGQlFVRXNSVUZCUVN4SlFVRkJNRUlzUzBGQlFTeEhRVUZCYkVJc1UwRkJRU3hEUVVGQmFFY3NUVUZCUVN4SFFVRkJMRU5CUVVFc1NVRkJRV2RITEZOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1MwRkJRVU1zVTBGQlFTeEhRVUZCUkN4VFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFZEJSQ3RFTEVWQlFVVTdTVUZCTDBSMlNDeFBRVUZQTEVkQlFVRjVTU3hMUVVGQkxFTkJRVkI2U1N4UFFVRlBPMGxCUVVWNVNDeFBRVUZQTEVkQlFVRm5RaXhMUVVGQkxFTkJRVkJvUWl4UFFVRlBPMGxCUVVWRExGbEJRVmtzUjBGQlFXVXNTMEZCUVN4RFFVRmFaaXhaUVVGWk8wbEJRVVZGTEZsQlFWa3NSMEZCUVdFc1MwRkJRU3hEUVVGYVlpeFpRVUZaTzBsQlFVVkZMRlZCUVZVc1IwRkJRVmNzUzBGQlFTeERRVUZXV0N4VlFVRlZMRU5CUVVFN1JVRkZNVVFzVDBGRFJVTXNZVUZCWVN4RFFVRkRhRUlzUzBGQlN5eEZRVUZGTzBGQlEyNUNMMGNzU1VGQlFVRXNUMEZCVHl4RlFVRkZjVVVzV1VGQldTeERRVUZEY2tVc1QwRkJUeXhEUVVGRE8wbEJRemxDZVVnc1QwRkJUeXhGUVVGRmFVSXNWVUZCVlN4RFFVRkRha0lzVDBGQlR5eERRVUZCTzBkQlF6VkNMRU5CUVVNc1NVRkRSRU1zV1VGQldTeEpRVU5ZUVN4WlFVRlpMRU5CUVVOTkxFbEJRVWtzUTBGQlF5eFZRVUZEUXl4WFFVRlhMRVZCUVVFN1FVRkJRU3hKUVVGQkxFOUJRVXRvUkN4WFFVRlhMRU5CUVVNNFFpeExRVUZMTEVWQlFVVnJRaXhYUVVGWExFTkJRVU1zUTBGQlFUdEhRVUZGTEVOQlFVRXNTVUZEY2tWTUxGbEJRVmtzU1VGRFdDeERRVUZEUVN4WlFVRlpMRU5CUVVOSkxFbEJRVWtzUTBGQlF5eFZRVUZEUnl4WFFVRlhMRVZCUVVFN1FVRkJRU3hKUVVGQkxFOUJRVXRzUkN4WFFVRlhMRU5CUVVNNFFpeExRVUZMTEVWQlFVVnZRaXhYUVVGWExFTkJRVU1zUTBGQlFUdEJRVUZCTEVkQlFVRXNRMEZCUlN4SlFVTjBSVXdzVlVGQlZTeEpRVUZKTEVOQlFVTkJMRlZCUVZVc1EwRkJRekZKTEU5QlFVOHNRMEZCUXpKSUxFdEJRVXNzUTBGQlF5eERRVUZGTEVsQlF6TkRMRXRCUVVzc1EwRkJRVHRCUVVWVUxFTkJRVUU3UVVGRlR5eFRRVUZUTkVJc1kwRkJZMEVzUTBGQlEzUkhMRk5CUVZNc1JVRkJSVU1zVDBGQlR5eEZRVUZGYzBjc1EwRkJReXhGUVVGRkwwVXNSMEZCUnl4RlFVRkZPMEZCUTNwRUxFVkJRVUVzU1VGQlRXZEdMR0ZCUVdFc1IwRkJSME1zVDBGQlR5eERRVUZEZWtjc1UwRkJVeXhEUVVGRExFTkJRVUU3UVVGRGVFTXNSVUZCUVN4SlFVRk5NRWNzWTBGQll5eEhRVUZIUXl4UlFVRlJMRU5CUVVNelJ5eFRRVUZUTEVOQlFVTXNRMEZCUVR0QlFVTXhReXhGUVVGQkxFbEJRVTAwUnl4WFFVRlhMRWRCUVVkSUxFOUJRVThzUTBGQlEzaEhMRTlCUVU4c1EwRkJReXhEUVVGQk8wRkJRM0JETEVWQlFVRXNTVUZCVFRSSExGbEJRVmtzUjBGQlIwWXNVVUZCVVN4RFFVRkRNVWNzVDBGQlR5eERRVUZETEVOQlFVRTdRVUZEZEVNc1JVRkJRU3hKUVVGTk5rY3NUMEZCVHl4SFFVRkhUQ3hQUVVGUExFTkJRVU5xUml4SFFVRkhMRU5CUVVNc1EwRkJRVHRCUVVNMVFpeEZRVUZCTEVsQlFVbG5SaXhoUVVGaExFdEJRVXRKTEZkQlFWY3NTVUZCU1Vvc1lVRkJZU3hMUVVGTFRTeFBRVUZQTEVWQlFVVTdRVUZET1VRc1NVRkJRU3hQUVVGUFNpeGpRVUZqTEVsQlFVbElMRU5CUVVNc1NVRkJTVUVzUTBGQlF5eEpRVUZKVFN4WlFVRlpMRU5CUVVFN1FVRkRha1FzUjBGQlF5eE5RVUZOTEVsQlFVbE1MR0ZCUVdFc1IwRkJSMGtzVjBGQlZ5eEZRVUZGTzBsQlEzUkRMRTlCUTBkRkxFOUJRVThzUzBGQlMwNHNZVUZCWVN4SlFVRkpSU3hqUVVGakxFbEJRVWxJTEVOQlFVTXNTVUZEYUVSUExFOUJRVThzUzBGQlMwWXNWMEZCVnl4SlFVRkpReXhaUVVGWkxFbEJRVWxPTEVOQlFVVXNTVUZETjBOUExFOUJRVThzUjBGQlIwWXNWMEZCVnl4SlFVRkpSU3hQUVVGUExFZEJRVWRPTEdGQlFXTXNRMEZCUVR0QlFVVjBSQ3hIUVVGQk8wRkJRMFlzUTBGQlFUdEJRVVZQTEZOQlFWTlBMR2xDUVVGcFFrRXNRMEZETDBKcVF5eFBRVUZQTEVWQlJWQTdRVUZCUVN4RlFVRkJMRWxCUVVGclF5eExRVUZCTEVkQlFVRTVRaXhUUVVGQkxFTkJRVUZvUnl4TlFVRkJMRWRCUVVFc1EwRkJRU3hKUVVGQlowY3NVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hMUVVGQlF5eFRRVUZCTEVkQlFVRkVMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUjBGRUswUXNSVUZCUlR0SlFVRXZSSFpJTEU5QlFVOHNSMEZCUVhGS0xFdEJRVUVzUTBGQlVISktMRTlCUVU4N1NVRkJSWGxJTEU5QlFVOHNSMEZCUVRSQ0xFdEJRVUVzUTBGQlVEVkNMRTlCUVU4N1NVRkJSVU1zV1VGQldTeEhRVUZCTWtJc1MwRkJRU3hEUVVGYU0wSXNXVUZCV1R0SlFVRkZSU3haUVVGWkxFZEJRVUY1UWl4TFFVRkJMRU5CUVZwNlFpeFpRVUZaTzBsQlFVVkZMRlZCUVZVc1IwRkJRWFZDTEV0QlFVRXNRMEZCVm5aQ0xGVkJRVlVzUTBGQlFUdEZRVVV4UkN4UFFVTkZReXhoUVVGaExFTkJRVU5hTEU5QlFVOHNSVUZCUlR0QlFVRkZia2dzU1VGQlFVRXNUMEZCVHl4RlFVRlFRU3hQUVVGUE8wRkJRVVY1U0N4SlFVRkJRU3hQUVVGUExFVkJRVkJCTEU5QlFVRkJPMGRCUVZNc1EwRkJReXhKUVVNelEwTXNXVUZCV1N4SlFVTllRU3haUVVGWkxFTkJRVU5OTEVsQlFVa3NRMEZCUXl4VlFVRkRReXhYUVVGWExFVkJRVUU3UVVGQlFTeEpRVUZCTEU5QlF6VkNPVU1zWVVGQllTeERRVUZEWjBNc1QwRkJUeXhGUVVGRll5eFhRVUZYTEVOQlFVTXNRMEZCUVR0SFFVTnlReXhEUVVGRkxFbEJRMGhNTEZsQlFWa3NTVUZEV0N4RFFVRkRRU3haUVVGWkxFTkJRVU5KTEVsQlFVa3NRMEZCUXl4VlFVRkRSeXhYUVVGWExFVkJRVUU3UVVGQlFTeEpRVUZCTEU5QlF6ZENhRVFzWVVGQllTeERRVUZEWjBNc1QwRkJUeXhGUVVGRlowSXNWMEZCVnl4RFFVRkRMRU5CUVVFN1FVRkJRU3hIUVVOeVF5eERRVUZGTEVsQlEwaE1MRlZCUVZVc1NVRkJTU3hEUVVGRFFTeFZRVUZWTEVOQlFVTXhTU3hQUVVGUExFTkJRVU1yU0N4UFFVRlBMRU5CUVVNc1EwRkJSU3hKUVVNM1F5eExRVUZMTEVOQlFVRTdRVUZGVkN4RFFVRkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTlBMRk5CUVZOdFF5eGhRVUZoUVN4RFFVRkRReXhKUVVGSkxFVkJRVVUxUkN4TFFVRkxMRVZCUVVWRExFZEJRVWNzUlVGQlJUdEJRVU01UXl4RlFVRkJMRWxCUVVrc1EwRkJRMnhGTEZOQlFWY3NRMEZCUTJsRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTnFSU3hUUVVGWExFTkJRVU5yUlN4SFFVRkhMRU5CUVVNc1JVRkJSU3hQUVVGUExFdEJRVXNzUTBGQlFUdEJRVU14UkN4RlFVRkJMRWxCUVUwMFJDeFRRVUZUTEVkQlFVZFdMRTlCUVU4c1EwRkJRMjVFTEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUTJoRExFVkJRVUVzU1VGQlRUaEVMRTlCUVU4c1IwRkJSMWdzVDBGQlR5eERRVUZEYkVRc1IwRkJSeXhEUVVGRExFTkJRVUU3UVVGRk5VSXNSVUZCUVN4UFFVRlBORVFzVTBGQlV5eEpRVUZKUkN4SlFVRkpMRWxCUVVsRkxFOUJRVThzU1VGQlNVWXNTVUZCU1N4RFFVRkJPMEZCUXpkRExFTkJRVUU3UVVGRlR5eFRRVUZUUnl4alFVRmpRU3hEUVVNMVFrZ3NTVUZCU1N4RlFVVktPMEZCUVVFc1JVRkJRU3hKUVVGQlNTeE5RVUZCTEVkQlFVRndReXhUUVVGQkxFTkJRVUZvUnl4TlFVRkJMRWRCUVVFc1EwRkJRU3hKUVVGQlowY3NVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hMUVVGQlF5eFRRVUZCTEVkQlFVRkVMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUjBGRUswUXNSVUZCUlR0SlFVRXZSSFpJTEU5QlFVOHNSMEZCUVRKS0xFMUJRVUVzUTBGQlVETktMRTlCUVU4N1NVRkJSWGxJTEU5QlFVOHNSMEZCUVd0RExFMUJRVUVzUTBGQlVHeERMRTlCUVU4N1NVRkJSVU1zV1VGQldTeEhRVUZCYVVNc1RVRkJRU3hEUVVGYWFrTXNXVUZCV1R0SlFVRkZSU3haUVVGWkxFZEJRVUVyUWl4TlFVRkJMRU5CUVZvdlFpeFpRVUZaTzBsQlFVVkZMRlZCUVZVc1IwRkJRVFpDTEUxQlFVRXNRMEZCVmpkQ0xGVkJRVlVzUTBGQlFUdEZRVVV4UkN4SlFVRk5ja2NzU1VGQlNTeEhRVUZITEVsQlFVa3ZRaXhKUVVGSkxFTkJRVU0yU2l4SlFVRkpMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZCTzBWQlEycERMRTlCUTBWNFFpeGhRVUZoTEVOQlFVTjBSeXhKUVVGSkxFVkJRVVU3UVVGRGJFSjZRaXhKUVVGQlFTeFBRVUZQTEVWQlFVVjFSU3hYUVVGWExFTkJRVU4yUlN4UFFVRlBMRU5CUVVNN1NVRkROMEo1U0N4UFFVRlBMRVZCUVVWdFF5eFRRVUZUTEVOQlFVTnVReXhQUVVGUExFTkJRVUU3UjBGRE0wSXNRMEZCUXl4SlFVTkVReXhaUVVGWkxFbEJRMWhCTEZsQlFWa3NRMEZCUTAwc1NVRkJTU3hEUVVGRExGVkJRVU5ETEZkQlFWY3NSVUZCUVR0QlFVRkJMRWxCUVVFc1QwRkJTM0JFTEZWQlFWVXNRMEZCUTNCRUxFbEJRVWtzUlVGQlJYZEhMRmRCUVZjc1EwRkJReXhEUVVGQk8wZEJRVVVzUTBGQlFTeEpRVU51UlV3c1dVRkJXU3hKUVVOWUxFTkJRVU5CTEZsQlFWa3NRMEZCUTBrc1NVRkJTU3hEUVVGRExGVkJRVU5ITEZkQlFWY3NSVUZCUVR0QlFVRkJMRWxCUVVFc1QwRkJTM1JFTEZWQlFWVXNRMEZCUTNCRUxFbEJRVWtzUlVGQlJUQkhMRmRCUVZjc1EwRkJReXhEUVVGQk8wRkJRVUVzUjBGQlFTeERRVUZGTEVsQlEzQkZUQ3hWUVVGVkxFbEJRVWtzUTBGQlEwRXNWVUZCVlN4RFFVRkRNVWtzVDBGQlR5eERRVUZEY1VNc1NVRkJTU3hEUVVGRExFTkJRVVVzU1VGRE1VTXNTMEZCU3l4RFFVRkJPMEZCUlZRc1EwRkJRVHRCUVVWUExGTkJRVk52U1N4blFrRkJaMEpCTEVOQlFVTjRTQ3hUUVVGVExFVkJRVVZETEU5QlFVOHNSVUZCUlhkSUxFTkJRVU1zUlVGQlJXcEhMRWRCUVVjc1JVRkJSVHRCUVVNelJDeEZRVUZCTEVsQlFVMW5SaXhoUVVGaExFZEJRVWRETEU5QlFVOHNRMEZCUTNwSExGTkJRVk1zUTBGQlF5eERRVUZCTzBGQlEzaERMRVZCUVVFc1NVRkJUVEJJTEdkQ1FVRm5RaXhIUVVGSFF5eFZRVUZWTEVOQlFVTXpTQ3hUUVVGVExFTkJRVU1zUTBGQlFUdEJRVU01UXl4RlFVRkJMRWxCUVUwMFJ5eFhRVUZYTEVkQlFVZElMRTlCUVU4c1EwRkJRM2hITEU5QlFVOHNRMEZCUXl4RFFVRkJPMEZCUTNCRExFVkJRVUVzU1VGQlRUSklMR05CUVdNc1IwRkJSMFFzVlVGQlZTeERRVUZETVVnc1QwRkJUeXhEUVVGRExFTkJRVUU3UVVGRE1VTXNSVUZCUVN4SlFVRk5Oa2NzVDBGQlR5eEhRVUZIVEN4UFFVRlBMRU5CUVVOcVJpeEhRVUZITEVOQlFVTXNRMEZCUVR0QlFVTTFRaXhGUVVGQkxFbEJRVWxuUml4aFFVRmhMRXRCUVV0SkxGZEJRVmNzU1VGQlNVb3NZVUZCWVN4TFFVRkxUU3hQUVVGUExFVkJRVVU3UVVGRE9VUXNTVUZCUVN4UFFVRlBXU3huUWtGQlowSXNTVUZCU1VRc1EwRkJReXhKUVVGSlFTeERRVUZETEVsQlFVbEhMR05CUVdNc1EwRkJRVHRCUVVOeVJDeEhRVUZETEUxQlFVMHNTVUZCU1hCQ0xHRkJRV0VzUjBGQlIwa3NWMEZCVnl4RlFVRkZPMGxCUTNSRExFOUJRMGRGTEU5QlFVOHNTMEZCUzA0c1lVRkJZU3hKUVVGSmEwSXNaMEpCUVdkQ0xFbEJRVWxFTEVOQlFVTXNTVUZEYkVSWUxFOUJRVThzUzBGQlMwWXNWMEZCVnl4SlFVRkpaMElzWTBGQll5eEpRVUZKU0N4RFFVRkZMRWxCUXk5RFdDeFBRVUZQTEVkQlFVZEdMRmRCUVZjc1NVRkJTVVVzVDBGQlR5eEhRVUZIVGl4aFFVRmpMRU5CUVVFN1FVRkZkRVFzUjBGQlFUdEJRVU5HTEVOQlFVRTdRVUZGVHl4VFFVRlRaQ3hoUVVGaFFTeERRVUZEYkVVc1IwRkJSeXhGUVVFMlFqdEJRVUZCTEVWQlFVRXNTVUZCUVhGSExFMUJRVUVzUjBGQlFUTkRMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNSMEZCUVN4RFFVRkJMRWxCUVVGblJ5eFRRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRXRCUVVGRExGTkJRVUVzUjBGQlFVUXNVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hIUVVGS0xFVkJRVVU3U1VGQmRrSjJTQ3hQUVVGUExFZEJRVUZyU3l4TlFVRkJMRU5CUVZCc1N5eFBRVUZQTzBsQlFVVjVTQ3hQUVVGUExFZEJRVUY1UXl4TlFVRkJMRU5CUVZCNlF5eFBRVUZQTEVOQlFVRTdSVUZEYmtRc1QwRkRSM3BJTEU5QlFVOHNTVUZCU1cxTExIZENRVUYzUWl4RFFVRkRkRWNzUjBGQlJ5eEZRVUZGTjBRc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVU55UkhsSUxFOUJRVThzU1VGQlNUQkRMSGRDUVVGM1FpeERRVUZEZEVjc1IwRkJSeXhGUVVGRk5FUXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJSU3hEUVVGQk8wRkJSVE5FTEVOQlFVRTdRVUZGVHl4VFFVRlRNa01zV1VGQldVRXNRMEZCUTBNc1NVRkJTU3hGUVVGRlF5eExRVUZMTEVWQlFVVTdRVUZEZUVNc1JVRkJRU3hQUVVGUFFTeExRVUZMTEVOQlFVTjBReXhKUVVGSkxFTkJRMllzVlVGQlEzVkRMRkZCUVZFc1JVRkJRVHRCUVVGQkxFbEJRVUVzVDBGRFVFTXNVVUZCVVN4RFFVRkRSQ3hSUVVGUkxFTkJRVU1zUzBGQlMwTXNVVUZCVVN4RFFVRkRTQ3hKUVVGSkxFTkJRVU1zU1VGRGNrTkpMRlZCUVZVc1EwRkJRMFlzVVVGQlVTeERRVUZETEV0QlFVdEZMRlZCUVZVc1EwRkJRMG9zU1VGQlNTeERRVUZETEVOQlFVRTdRVUZCUVN4SFFVTTNReXhEUVVGRExFTkJRVUU3UVVGRFNDeERRVUZCTzBGQlJVOHNVMEZCVTBzc1kwRkJZMEVzUTBGRE5VSk1MRWxCUVVrc1JVRkZTanRCUVVGQkxFVkJRVUVzU1VGQlFVMHNUVUZCUVN4SFFVRkJjRVFzVTBGQlFTeERRVUZCYUVjc1RVRkJRU3hIUVVGQkxFTkJRVUVzU1VGQlFXZEhMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUzBGQlFVTXNVMEZCUVN4SFFVRkJSQ3hUUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVkQlJEWkRMRVZCUVVVN1NVRkJOME54UkN4WlFVRlpMRWRCUVVGRUxFMUJRVUVzUTBGQldrTXNXVUZCV1R0SlFVRkZReXhaUVVGWkxFZEJRVUZHTEUxQlFVRXNRMEZCV2tVc1dVRkJXVHRKUVVGRlF5eFZRVUZWTEVkQlFVRklMRTFCUVVFc1EwRkJWa2NzVlVGQlZTeERRVUZCTzBWQlJYaERMRTlCUTBkR0xGbEJRVmtzU1VGQlNWSXNXVUZCV1N4RFFVRkRReXhKUVVGSkxFVkJRVVZQTEZsQlFWa3NRMEZCUXl4SlFVTm9SRU1zV1VGQldTeEpRVUZKTEVOQlFVTlVMRmxCUVZrc1EwRkJRME1zU1VGQlNTeEZRVUZGVVN4WlFVRlpMRU5CUVVVc1NVRkRiRVJETEZWQlFWVXNTVUZCU1N4RFFVRkRRU3hWUVVGVkxFTkJRVU5VTEVsQlFVa3NRMEZCUlN4SlFVTnFReXhMUVVGTExFTkJRVUU3UVVGRlZDeERRVUZCTzBGQlJVOHNVMEZCVTFVc2NVSkJRWEZDUVN4RFFVRkRWaXhKUVVGSkxFVkJRVUZYTEUxQlFVRXNSVUZCZDBJN1FVRkJRU3hGUVVGQkxFbEJRWEJDUXl4UFFVRlBMRWRCUVVGRUxFMUJRVUVzUTBGQlVFTXNUMEZCVHp0SlFVRkZReXhQUVVGUExFZEJRVUZHTEUxQlFVRXNRMEZCVUVVc1QwRkJUeXhEUVVGQk8wRkJRelZFTEVWQlFVRXNTVUZCU1N4RFFVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlEwTXNUMEZCVHl4RlFVRkZPMEZCUTNoQ0xFbEJRVUVzVFVGQlRTeEpRVUZKUXl4TFFVRkxMRU5CUVVNc2VVTkJRWGxETEVOQlFVTXNRMEZCUVR0QlFVTTFSQ3hIUVVGQk8wRkJRMEVzUlVGQlFTeEpRVUZOUXl4SlFVRkpMRWRCUVVkb1RTeFBRVUZQTEVWQlFVVXNRMEZCUVR0QlFVTjBRaXhGUVVGQkxFbEJRVTFwVFN4UlFVRlJMRWRCUVVjNVNDeFJRVUZSTEVOQlFVTkRMRlZCUVZVc1EwRkJRelJJTEVsQlFVa3NSVUZCUlZnc1ZVRkJWU3hEUVVGRFNpeEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkZSeXhSUVVGUkxFTkJRVU5JTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkROMFVzUlVGQlFTeEpRVUZOYVVJc1IwRkJSeXhIUVVGSEwwZ3NVVUZCVVN4RFFVTnNRa01zVlVGQlZTeERRVUZETkVnc1NVRkJTU3hGUVVGRldDeFZRVUZWTEVOQlFVTlJMRTlCUVU4c1EwRkJReXhEUVVGRExFVkJRM0pEVkN4UlFVRlJMRU5CUVVOVExFOUJRVThzUTBGRGJFSXNRMEZCUXl4RFFVRkJPMEZCUTBRc1JVRkJRU3hKUVVGTlRTeEhRVUZITEVkQlFVZG9TU3hSUVVGUkxFTkJRMnhDUXl4VlFVRlZMRU5CUVVNMFNDeEpRVUZKTEVWQlFVVllMRlZCUVZVc1EwRkJRMU1zVDBGQlR5eERRVUZETEVOQlFVTXNSVUZEY2tOV0xGRkJRVkVzUTBGQlExVXNUMEZCVHl4RFFVTnNRaXhEUVVGRExFTkJRVUU3UVVGRlJDeEZRVUZCTEVsQlFVbDRSaXhMUVVGTExFTkJRVUU3UlVGRFZDeEpRVUZKTzBGQlEwWkJMRWxCUVVGQkxFdEJRVXNzUjBGQlJ5eERRVUZEU1N4blFrRkJaMElzUTBGQlEzVkdMRkZCUVZFc1JVRkJSVHRCUVVGRk1VWXNUVUZCUVVFc1MwRkJTeXhGUVVGRk1rWXNSMEZCUnp0QlFVRkZNVVlzVFVGQlFVRXNSMEZCUnl4RlFVRkZNa1lzUjBGQlFVRTdRVUZCU1N4TFFVRkRMRU5CUVVNc1EwRkJRVHRIUVVNNVJDeERRVUZETEU5QlFVOTRSaXhIUVVGSExFVkJRVVU3UVVGRFdrd3NTVUZCUVVFc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlFUdEJRVU5tTEVkQlFVRTdRVUZEUVN4RlFVRkJMRTlCUVU5QkxFdEJRVXNzUTBGQlFUdEJRVU5rTEVOQlFVRTdRVUZGVHl4VFFVRlRPRVlzYlVKQlFXMUNRU3hEUVVGRE0wZ3NSMEZCUnl4RlFVRnJRenRCUVVGQkxFVkJRVUVzU1VGQlFUUklMRTFCUVVFc1IwRkJRV3hGTEZOQlFVRXNRMEZCUVdoSExFMUJRVUVzUjBGQlFTeERRVUZCTEVsQlFVRm5SeXhUUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEV0QlFVRkRMRk5CUVVFc1IwRkJRVVFzVTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SFFVRktMRVZCUVVVN1NVRkJOVUoyU0N4UFFVRlBMRWRCUVVGNVRDeE5RVUZCTEVOQlFWQjZUQ3hQUVVGUE8wbEJRVVUwU0N4WlFVRlpMRWRCUVVFMlJDeE5RVUZCTEVOQlFWbzNSQ3haUVVGWkxFTkJRVUU3UVVGRE9VUXNSVUZCUVN4SlFVRk5PRVFzWVVGQllTeEhRVUZIUXl4VFFVRlRMRU5CUVVNNVNDeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRka01zUlVGQlFTeFBRVU5ITjBRc1QwRkJUeXhKUVVGSk5Fd3NNRUpCUVRCQ0xFTkJRVU0xVEN4UFFVRlBMRVZCUVVVd1RDeGhRVUZoTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUTJwRk9VUXNXVUZCV1N4SlFVTllRU3haUVVGWkxFTkJRVU5wUlN4TFFVRkxMRU5CUTJoQ0xGVkJRVU14UkN4WFFVRlhMRVZCUVVFN1FVRkJRU3hKUVVGQkxFOUJRMVo1UkN3d1FrRkJNRUlzUTBGQlEzcEVMRmRCUVZjc1JVRkJSWFZFTEdGQlFXRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRIUVVNNVJDeERRVUZGTEVsQlEwb3NTMEZCU3l4RFFVRkJPMEZCUlZRc1EwRkJRVHRCUVVWUExGTkJRVk5KTEd0Q1FVRnJRa0VzUTBGQlEycEpMRWRCUVVjc1JVRkJhME03UVVGQlFTeEZRVUZCTEVsQlFVRnJTU3hOUVVGQkxFZEJRVUY0UlN4VFFVRkJMRU5CUVVGb1J5eE5RVUZCTEVkQlFVRXNRMEZCUVN4SlFVRkJaMGNzVTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4TFFVRkJReXhUUVVGQkxFZEJRVUZFTEZOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1IwRkJTaXhGUVVGRk8wbEJRVFZDUlN4UFFVRlBMRWRCUVVGelJTeE5RVUZCTEVOQlFWQjBSU3hQUVVGUE8wbEJRVVZITEZsQlFWa3NSMEZCUVcxRkxFMUJRVUVzUTBGQldtNUZMRmxCUVZrc1EwRkJRVHRCUVVNM1JDeEZRVUZCTEVsQlFVMXZSU3hUUVVGVExFZEJRVWRETEZOQlFWTXNRMEZCUTNCSkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTnVReXhGUVVGQkxFOUJRMGMwUkN4UFFVRlBMRWxCUVVsdFJTd3dRa0ZCTUVJc1EwRkJRMGtzVTBGQlV5eEZRVUZGZGtVc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVU0zUkVjc1dVRkJXU3hKUVVOWVFTeFpRVUZaTEVOQlFVTnBSU3hMUVVGTExFTkJRMmhDTEZWQlFVTXhSQ3hYUVVGWExFVkJRVUU3UVVGQlFTeEpRVUZCTEU5QlFVdDVSQ3d3UWtGQk1FSXNRMEZCUTBrc1UwRkJVeXhGUVVGRk4wUXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wZEJRM3BGTEVOQlFVVXNTVUZEU2l4TFFVRkxMRU5CUVVFN1FVRkZWQ3hEUVVGQk8wRkJSVThzVTBGQlV5dEVMSEZDUVVGeFFrRXNRMEZCUTNwTExFbEJRVWtzUlVGQmEwTTdRVUZCUVN4RlFVRkJMRWxCUVVFd1N5eE5RVUZCTEVkQlFVRTFSU3hUUVVGQkxFTkJRVUZvUnl4TlFVRkJMRWRCUVVFc1EwRkJRU3hKUVVGQlowY3NVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hMUVVGQlF5eFRRVUZCTEVkQlFVRkVMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUjBGQlNpeEZRVUZGTzBsQlFUVkNka2dzVDBGQlR5eEhRVUZCYlUwc1RVRkJRU3hEUVVGUWJrMHNUMEZCVHp0SlFVRkZORWdzV1VGQldTeEhRVUZCZFVVc1RVRkJRU3hEUVVGYWRrVXNXVUZCV1N4RFFVRkJPMEZCUTJwRkxFVkJRVUVzU1VGQlRYZEZMR1ZCUVdVc1IwRkJSemRJTEZkQlFWY3NRMEZCUXpsRExFbEJRVWtzUTBGQlF5eERRVUZCTzBGQlEzcERMRVZCUVVFc1NVRkJUVFJMTEdWQlFXVXNSMEZCUjBNc1YwRkJWeXhEUVVGRFJpeGxRVUZsTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkZka1FzUlVGQlFTeFBRVU5IY0Uwc1QwRkJUeXhKUVVGSmRVMHNORUpCUVRSQ0xFTkJRVU4yVFN4UFFVRlBMRVZCUVVWeFRTeGxRVUZsTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUTNKRmVrVXNXVUZCV1N4SlFVTllRU3haUVVGWkxFTkJRVU5wUlN4TFFVRkxMRU5CUTJoQ0xGVkJRVU14UkN4WFFVRlhMRVZCUVVFN1FVRkJRU3hKUVVGQkxFOUJRMVp2UlN3MFFrRkJORUlzUTBGQlEzQkZMRmRCUVZjc1JVRkJSV3RGTEdWQlFXVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRIUVVOc1JTeERRVUZGTEVsQlEwb3NTMEZCU3l4RFFVRkJPMEZCUlZRc1EwRkJRVHRCUVVWUExGTkJRVk5ITEc5Q1FVRnZRa0VzUTBGQlF5OUxMRWxCUVVrc1JVRkJhME03UVVGQlFTeEZRVUZCTEVsQlFVRm5UQ3hOUVVGQkxFZEJRVUZzUml4VFFVRkJMRU5CUVVGb1J5eE5RVUZCTEVkQlFVRXNRMEZCUVN4SlFVRkJaMGNzVTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4TFFVRkJReXhUUVVGQkxFZEJRVUZFTEZOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1IwRkJTaXhGUVVGRk8wbEJRVFZDUlN4UFFVRlBMRWRCUVVGblJpeE5RVUZCTEVOQlFWQm9SaXhQUVVGUE8wbEJRVVZITEZsQlFWa3NSMEZCUVRaRkxFMUJRVUVzUTBGQldqZEZMRmxCUVZrc1EwRkJRVHRCUVVOb1JTeEZRVUZCTEVsQlFVMDRSU3hqUVVGakxFZEJRVWM1UXl4VFFVRlRMRU5CUVVOdVNTeEpRVUZKTEVOQlFVTXNRMEZCUVR0QlFVTjBReXhGUVVGQkxFbEJRVTFyVEN4WFFVRlhMRWRCUVVkRExGZEJRVmNzUTBGQlEwWXNZMEZCWXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJSV3hFTEVWQlFVRXNUMEZEUjJwR0xFOUJRVThzU1VGQlNUaEZMRFJDUVVFMFFpeERRVUZEU1N4WFFVRlhMRVZCUVVWc1JpeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUTJwRlJ5eFpRVUZaTEVsQlExaEJMRmxCUVZrc1EwRkJRMmxGTEV0QlFVc3NRMEZEYUVJc1ZVRkJRekZFTEZkQlFWY3NSVUZCUVR0QlFVRkJMRWxCUVVFc1QwRkRWbTlGTERSQ1FVRTBRaXhEUVVGRFNTeFhRVUZYTEVWQlFVVjRSU3hYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdSMEZET1VRc1EwRkJSU3hKUVVOS0xFdEJRVXNzUTBGQlFUdEJRVVZVTEVOQlFVRTdRVUZGVHl4VFFVRlRNRVVzYTBKQlFXdENRU3hEUVVGRGFFb3NSMEZCUnl4RlFVRnJRenRCUVVGQkxFVkJRVUVzU1VGQlFXbEtMRTFCUVVFc1IwRkJRWFpHTEZOQlFVRXNRMEZCUVdoSExFMUJRVUVzUjBGQlFTeERRVUZCTEVsQlFVRm5SeXhUUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEV0QlFVRkRMRk5CUVVFc1IwRkJRVVFzVTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SFFVRktMRVZCUVVVN1NVRkJOVUoyU0N4UFFVRlBMRWRCUVVFNFRTeE5RVUZCTEVOQlFWQTVUU3hQUVVGUE8wbEJRVVUwU0N4WlFVRlpMRWRCUVVGclJpeE5RVUZCTEVOQlFWcHNSaXhaUVVGWkxFTkJRVUU3UVVGRE4wUXNSVUZCUVN4SlFVRk5iVVlzV1VGQldTeEhRVUZIUXl4UlFVRlJMRU5CUVVOdVNpeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRja01zUlVGQlFTeFBRVU5ITjBRc1QwRkJUeXhKUVVGSmFVNHNlVUpCUVhsQ0xFTkJRVU5xVGl4UFFVRlBMRVZCUVVVclRTeFpRVUZaTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUXk5RWJrWXNXVUZCV1N4SlFVTllRU3haUVVGWkxFTkJRVU5wUlN4TFFVRkxMRU5CUTJoQ0xGVkJRVU14UkN4WFFVRlhMRVZCUVVFN1FVRkJRU3hKUVVGQkxFOUJRMVk0UlN4NVFrRkJlVUlzUTBGQlF6bEZMRmRCUVZjc1JVRkJSVFJGTEZsQlFWa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRIUVVNMVJDeERRVUZGTEVsQlEwb3NTMEZCU3l4RFFVRkJPMEZCUlZRc1EwRkJRVHRCUVVWUExGTkJRVk5ITEcxQ1FVRnRRa0VzUTBGRGFrTnlTaXhIUVVGSExFVkJSVWc3UVVGQlFTeEZRVUZCTEVsQlFVRnpTaXhOUVVGQkxFZEJRVUUxUml4VFFVRkJMRU5CUVVGb1J5eE5RVUZCTEVkQlFVRXNRMEZCUVN4SlFVRkJaMGNzVTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4TFFVRkJReXhUUVVGQkxFZEJRVUZFTEZOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1IwRkVlVVFzUlVGQlJUdEpRVUY2UkhaSUxFOUJRVThzUjBGQlFXMU9MRTFCUVVFc1EwRkJVRzVPTEU5QlFVODdTVUZCUVc5T0xIRkNRVUZCTEVkQlFVRkVMRTFCUVVFc1EwRkJSVVVzWTBGQll6dEJRVUZrUVN4SlFVRkJRU3hqUVVGakxFZEJRVUZFTEhGQ1FVRkJMRXRCUVVkc1R5eExRVUZCUVN4RFFVRkJRU3hIUVVGQlFTeDNRa0ZCZDBJc1IwRkJRV3RQTEhGQ1FVRkJMRU5CUVVFN1JVRkZjRVFzU1VGQlRVd3NXVUZCV1N4SFFVRkhla2tzWTBGQll5eERRVUZETUVrc1VVRkJVU3hEUVVGRGJrb3NSMEZCUnl4RlFVRkZkMG9zWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTnNSU3hGUVVGQkxFbEJRVUZETEdWQlFVRXNSMEZCYzBKRExHTkJRV01zUTBGQlExSXNXVUZCV1N4RlFVRkZUU3hqUVVGakxFTkJRVU03U1VGQk1VUkhMRk5CUVZNc1IwRkJRVVlzWlVGQlFTeERRVUZVUlN4VFFVRlRMRU5CUVVFN1FVRkRha0lzUlVGQlFTeEpRVUZOUXl4WFFVRlhMRWRCUVVkNlRpeFBRVUZQTEVsQlFVazRTU3hQUVVGUExFTkJRVU01U1N4UFFVRlBMRU5CUVVNc1EwRkJRVHRCUVVNdlF5eEZRVUZCTEU5QlFWRjVUaXhYUVVGWExFbEJRVWxCTEZkQlFWY3NSMEZCUjBRc1UwRkJVeXhKUVVGTExFdEJRVXNzUTBGQlFUdEJRVU14UkN4RFFVRkJPMEZCUlU4c1UwRkJVMFVzYVVKQlFXbENRU3hEUVVGRE4wb3NSMEZCUnl4RlFVRnJRenRCUVVGQkxFVkJRVUVzU1VGQlFUaEtMRTFCUVVFc1IwRkJRWEJITEZOQlFVRXNRMEZCUVdoSExFMUJRVUVzUjBGQlFTeERRVUZCTEVsQlFVRm5SeXhUUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEV0QlFVRkRMRk5CUVVFc1IwRkJRVVFzVTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SFFVRktMRVZCUVVVN1NVRkJOVUpGTEU5QlFVOHNSMEZCUVd0SExFMUJRVUVzUTBGQlVHeEhMRTlCUVU4N1NVRkJSVWNzV1VGQldTeEhRVUZCSzBZc1RVRkJRU3hEUVVGYUwwWXNXVUZCV1N4RFFVRkJPMEZCUXpWRUxFVkJRVUVzU1VGQlRXZEhMRkZCUVZFc1IwRkJSME1zVVVGQlVTeERRVUZEYUVzc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEycERMRVZCUVVFc1QwRkRSelJFTEU5QlFVOHNTVUZCU1hkR0xIbENRVUY1UWl4RFFVRkRWeXhSUVVGUkxFVkJRVVZ1Unl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRek5FUnl4WlFVRlpMRWxCUTFoQkxGbEJRVmtzUTBGQlEybEZMRXRCUVVzc1EwRkRhRUlzVlVGQlF6RkVMRmRCUVZjc1JVRkJRVHRCUVVGQkxFbEJRVUVzVDBGQlN6aEZMSGxDUVVGNVFpeERRVUZEVnl4UlFVRlJMRVZCUVVWNlJpeFhRVUZYTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1IwRkRka1VzUTBGQlJTeEpRVU5LTEV0QlFVc3NRMEZCUVR0QlFVVlVMRU5CUVVFN1FVRkZUeXhUUVVGVE1rWXNhMEpCUVd0Q1FTeERRVU5vUTJwTExFZEJRVWNzUlVGRlNEdEJRVUZCTEVWQlFVRXNTVUZCUVd0TExFMUJRVUVzUjBGQlFYaEhMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNSMEZCUVN4RFFVRkJMRWxCUVVGblJ5eFRRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRXRCUVVGRExGTkJRVUVzUjBGQlFVUXNVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hIUVVSNVJDeEZRVUZGTzBsQlFYcEVSU3hQUVVGUExFZEJRVUZ6Unl4TlFVRkJMRU5CUVZCMFJ5eFBRVUZQTzBsQlFVRjFSeXh4UWtGQlFTeEhRVUZCUkN4TlFVRkJMRU5CUVVWV0xHTkJRV003UVVGQlpFRXNTVUZCUVVFc1kwRkJZeXhIUVVGQlZ5eHhRa0ZCUVN4TFFVRkhPVThzUzBGQlFVRXNRMEZCUVVFc1IwRkJRVUVzZDBKQlFYZENMRWRCUVVFNFR5eHhRa0ZCUVN4RFFVRkJPMEZCUlhCRUxFVkJRVUVzU1VGQlRVb3NVVUZCVVN4SFFVRkhReXhSUVVGUkxFTkJRVU5vU3l4SFFVRkhMRVZCUVVWM1NpeGpRVUZqTEVOQlFVTXNRMEZCUVR0QlFVTTVReXhGUVVGQkxFbEJRVUZaTEdkQ1FVRkJMRWRCUVhkQ1ZpeGpRVUZqTEVOQlFVTkxMRkZCUVZFc1JVRkJSVkFzWTBGQll5eERRVUZETzBsQlFYaEVZU3hYUVVGWExFZEJRVUZFTEdkQ1FVRkJMRU5CUVZoRExGZEJRVmNzUTBGQlFUdEJRVU51UWl4RlFVRkJMRWxCUVUxRExGZEJRVmNzUjBGQlJ6RkhMRTlCUVU4c1NVRkJTWEZDTEU5QlFVOHNRMEZCUTNKQ0xFOUJRVThzUTBGQlF5eERRVUZCTzBGQlF5OURMRVZCUVVFc1QwRkJVVEJITEZkQlFWY3NTVUZCU1VFc1YwRkJWeXhIUVVGSFJDeFhRVUZYTEVsQlFVc3NTMEZCU3l4RFFVRkJPMEZCUXpWRUxFTkJRVUU3UVVGRlR5eFRRVUZUUlN4dFFrRkJiVUpCTEVOQlFVRkRMRTFCUVVFc1JVRkJORUk3UVVGQlFTeEZRVUZCTEVsQlFYcENjazhzVDBGQlR5eEhRVUZCY1U4c1RVRkJRU3hEUVVGUWNrOHNUMEZCVHp0SlFVRkZORWdzV1VGQldTeEhRVUZCZVVjc1RVRkJRU3hEUVVGYWVrY3NXVUZCV1N4RFFVRkJPMFZCUTNwRUxFbEJRVWxCTEZsQlFWa3NTVUZCU1RWSUxFOUJRVThzUlVGQlJUdEJRVU16UWl4SlFVRkJMRWxCUVVselR5eFJRVUZSTEVkQlFVY3hSeXhaUVVGWkxFTkJRVU15Unl4TlFVRk5MRU5CUTJoRExGVkJRVU53Unl4WFFVRlhMRVZCUVVFN1FVRkJRU3hOUVVGQkxFOUJRVXRuUXl4M1FrRkJkMElzUTBGQlEyaERMRmRCUVZjc1JVRkJSVzVKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVGQkxFdEJRM1JGTEVOQlFVTXNRMEZCUVR0SlFVTkVMRTlCUVU5elRDeEhRVUZITEVOQlFVTm5SQ3hSUVVGUkxFTkJRVU1zUTBGQlFUdEhRVU55UWl4TlFVRk5MRWxCUVVreFJ5eFpRVUZaTEVWQlFVVTdTVUZEZGtJc1QwRkJUekJFTEVkQlFVY3NRMEZCUXpGRUxGbEJRVmtzUTBGQlF5eERRVUZCTzBGQlF6RkNMRWRCUVVNc1RVRkJUVHRCUVVOTUxFbEJRVUVzVDBGQlR6VklMRTlCUVU4c1EwRkJRVHRCUVVOb1FpeEhRVUZCTzBGQlEwWXNRMEZCUVR0QlFVVlBMRk5CUVZOM1R5eHRRa0ZCYlVKQkxFTkJRVUZETEUxQlFVRXNSVUZCTkVJN1FVRkJRU3hGUVVGQkxFbEJRWHBDYUVnc1QwRkJUeXhIUVVGQlowZ3NUVUZCUVN4RFFVRlFhRWdzVDBGQlR6dEpRVUZGUnl4WlFVRlpMRWRCUVVFMlJ5eE5RVUZCTEVOQlFWbzNSeXhaUVVGWkxFTkJRVUU3UlVGRGVrUXNTVUZCU1VFc1dVRkJXU3hKUVVGSlNDeFBRVUZQTEVWQlFVVTdRVUZETTBJc1NVRkJRU3hKUVVGSmFVZ3NVVUZCVVN4SFFVRkhPVWNzV1VGQldTeERRVUZETWtjc1RVRkJUU3hEUVVOb1F5eFZRVUZEY0Vjc1YwRkJWeXhGUVVGQk8wRkJRVUVzVFVGQlFTeFBRVUZMWjBNc2QwSkJRWGRDTEVOQlFVTm9ReXhYUVVGWExFVkJRVVZXTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVGQkxFdEJRM1JGTEVOQlFVTXNRMEZCUVR0SlFVTkVMRTlCUVU4NFJDeEhRVUZITEVOQlFVTnRSQ3hSUVVGUkxFTkJRVU1zUTBGQlFUdEhRVU55UWl4TlFVRk5MRWxCUVVrNVJ5eFpRVUZaTEVWQlFVVTdTVUZEZGtJc1QwRkJUekpFTEVkQlFVY3NRMEZCUXpORUxGbEJRVmtzUTBGQlF5eERRVUZCTzBGQlF6RkNMRWRCUVVNc1RVRkJUVHRCUVVOTUxFbEJRVUVzVDBGQlQwZ3NUMEZCVHl4RFFVRkJPMEZCUTJoQ0xFZEJRVUU3UVVGRFJpeERRVUZCTzBGQlJVOHNVMEZCVTJ0SUxHOUNRVUZ2UWtFc1IwRkhiRU03UVVGQlFTeEZRVUZCTEVsQlJrRkRMR05CUVdNc1IwRkJRWEpJTEZOQlFVRXNRMEZCUVdoSExFMUJRVUVzUjBGQlFTeERRVUZCTEVsQlFVRm5SeXhUUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEV0QlFVRkRMRk5CUVVFc1IwRkJRVVFzVTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SFFVRkhMRVZCUVVVc1EwRkJRVHRCUVVGQkxFVkJRVUVzU1VGRGJrSnpTQ3huUWtGQlowSXNSMEZCUVhSSUxGTkJRVUVzUTBGQlFXaEhMRTFCUVVFc1IwRkJRU3hEUVVGQkxFbEJRVUZuUnl4VFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFdEJRVUZETEZOQlFVRXNSMEZCUVVRc1UwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeEhRVUZITEc5RFFVRnZReXhEUVVGQk8wRkJSWFpFTEVWQlFVRXNTVUZCVFhWSUxGZEJRVmNzUjBGQlJ5eEpRVUZKUXl4SFFVRkhMRVZCUVVVc1EwRkJRVHRCUVVNM1FpeEZRVUZCTEV0QlFVc3NTVUZCU1VNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJVTXNSMEZCUnl4SFFVRkhUQ3hqUVVGakxFTkJRVU55VGl4TlFVRk5MRVZCUVVWNVRpeERRVUZETEVkQlFVZERMRWRCUVVjc1JVRkJSVVFzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZEZWtRc1NVRkJRU3hKUVVGTlJTeEhRVUZITEVkQlFVZE9MR05CUVdNc1EwRkJRMGtzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZETjBJc1NVRkJRU3hKUVVGSlJ5eE5RVUZOTEVOQlFVTkVMRWRCUVVjc1EwRkJReXhGUVVGRk8wRkJRMllzVFVGQlFTeEpRVUZOUlN4SFFVRkhMRWRCUVVkMFR5eFZRVUZWTEVOQlFVTnZUeXhIUVVGSExFVkJRVVVzV1VGQldTeERRVUZETEVOQlFVRTdUVUZEZWtNc1NVRkJUVWNzWVVGQllTeEhRVUZIVUN4WFFVRlhMRU5CUVVOUkxFZEJRVWNzUTBGQlEwWXNSMEZCUnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGQk8wRkJRMmhFTEUxQlFVRXNTVUZCU1N4RFFVRkRReXhoUVVGaExFTkJRVU5GTEZGQlFWRXNRMEZCUTFZc1owSkJRV2RDTEVOQlFVTXNSVUZCUlR0QlFVTTNRMUVzVVVGQlFVRXNZVUZCWVN4RFFVRkRSeXhKUVVGSkxFTkJRVU5ZTEdkQ1FVRm5RaXhEUVVGRExFTkJRVUU3UVVGRGNFTkRMRkZCUVVGQkxGZEJRVmNzUTBGQlExY3NSMEZCUnl4RFFVRkRUQ3hIUVVGSExFVkJRVVZETEdGQlFXRXNRMEZCUXl4RFFVRkJPMEZCUTNKRExFOUJRVUU3UVVGRFJpeExRVUZETEUxQlFVMHNTVUZCU1Vzc1QwRkJRU3hEUVVGUFVpeEhRVUZITEVOQlFVRXNTMEZCU3l4UlFVRlJMRVZCUVVVN1FVRkRiRU1zVFVGQlFTeEpRVUZOVXl4SlFVRkpMRWRCUVVkRExFMUJRVTBzUTBGQlEwUXNTVUZCU1N4RFFVRkRWQ3hIUVVGSExFTkJRVU1zUTBGQlFUdEJRVU0zUWl4TlFVRkJMRWxCUVUxWExGTkJRVk1zUjBGQlIwWXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wMUJRM3BDTEVsQlFVMUhMRlZCUVZVc1IwRkJSMW9zUjBGQlJ5eERRVUZEVXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdE5RVU12UWl4SlFVRkpMRTlCUVU5RkxGTkJRVk1zUzBGQlN5eFJRVUZSTEVsQlFVbERMRlZCUVZVc1EwRkJRME1zVjBGQlZ5eExRVUZMZWxBc1MwRkJTeXhGUVVGRk8wRkJRM0pGTEZGQlFVRXNTMEZCU3l4SlFVRkpNRkFzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUldZc1NVRkJSeXhIUVVGSFlTeFZRVUZWTEVOQlFVTjJUeXhOUVVGTkxFVkJRVVY1VHl4RFFVRkRMRWRCUVVkbUxFbEJRVWNzUlVGQlJXVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1ZVRkRja1FzU1VGQlRWb3NTVUZCUnl4SFFVRkhkRThzVlVGQlZTeERRVUZEWjFBc1ZVRkJWU3hEUVVGRFJTeERRVUZETEVOQlFVTXNSVUZCUlN4WlFVRlpMRU5CUVVNc1EwRkJRVHRWUVVOdVJDeEpRVUZOV0N4alFVRmhMRWRCUVVkUUxGZEJRVmNzUTBGQlExRXNSMEZCUnl4RFFVRkRSaXhKUVVGSExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVRTdRVUZEYUVRc1ZVRkJRU3hKUVVGSkxFTkJRVU5ETEdOQlFXRXNRMEZCUTBVc1VVRkJVU3hEUVVGRFRTeFRRVUZUTEVOQlFVTXNSVUZCUlR0QlFVTjBRMUlzV1VGQlFVRXNZMEZCWVN4RFFVRkRSeXhKUVVGSkxFTkJRVU5MTEZOQlFWTXNRMEZCUXl4RFFVRkJPMEZCUXpkQ1ppeFpRVUZCUVN4WFFVRlhMRU5CUVVOWExFZEJRVWNzUTBGQlEwd3NTVUZCUnl4RlFVRkZReXhqUVVGaExFTkJRVU1zUTBGQlFUdEJRVU55UXl4WFFVRkJPMEZCUTBZc1UwRkJRVHRCUVVOR0xFOUJRVUU3UVVGRFJpeExRVUZCTzBGQlEwWXNSMEZCUVR0QlFVTkJMRVZCUVVFc1QwRkJUMUFzVjBGQlZ5eERRVUZCTzBGQlEzQkNMRU5CUVVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTA4c1UwRkJVMjFDTEdOQlFXTkJMRU5CUVVORExFMUJRVTBzUlVGQlJVTXNUVUZCVFN4RlFVRkZPMEZCUXpkRExFVkJRVUVzU1VGQlNVUXNUVUZCVFN4RFFVRkRNMDhzVFVGQlRTeExRVUZMTkU4c1RVRkJUU3hEUVVGRE5VOHNUVUZCVFN4RlFVRkZPMEZCUTI1RExFbEJRVUVzVDBGQlR5eExRVUZMTEVOQlFVRTdRVUZEWkN4SFFVRkJPMEZCUlVFc1JVRkJRU3hQUVVGUE1rOHNUVUZCVFN4RFFVRkRja1VzUzBGQlN5eERRVUZETEZWQlFVTjRUU3hMUVVGTExFVkJRVVVyVVN4TFFVRkxMRVZCUVVFN1FVRkJRU3hKUVVGQkxFOUJRVXN2VVN4TFFVRkxMRXRCUVVzNFVTeE5RVUZOTEVOQlFVTkRMRXRCUVVzc1EwRkJReXhEUVVGQk8wZEJRVU1zUTBGQlFTeERRVUZCTzBGQlEyaEZMRU5CUVVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTA4c1UwRkJVME1zWTBGQlkwRXNSMEZITlVJN1FVRkJRU3hGUVVGQkxFbEJSa0ZETEZsQlFWa3NSMEZCUVM5SkxGTkJRVUVzUTBGQlFXaEhMRTFCUVVFc1IwRkJRU3hEUVVGQkxFbEJRVUZuUnl4VFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFdEJRVUZETEZOQlFVRXNSMEZCUVVRc1UwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeEhRVUZITEVWQlFVVXNRMEZCUVR0QlFVRkJMRVZCUVVFc1NVRkRha0p6U0N4blFrRkJaMElzUjBGQlFYUklMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNSMEZCUVN4RFFVRkJMRWxCUVVGblJ5eFRRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRXRCUVVGRExGTkJRVUVzUjBGQlFVUXNVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hIUVVGSExHbERRVUZwUXl4RFFVRkJPMEZCUlhCRUxFVkJRVUVzU1VGQlRYVklMRmRCUVZjc1IwRkJSeXhKUVVGSlF5eEhRVUZITEVWQlFVVXNRMEZCUVR0QlFVTTNRblZDTEVWQlFVRkJMRmxCUVZrc1EwRkJRemxRTEU5QlFVOHNRMEZCUXl4VlFVRkRLMUFzVDBGQlR5eEZRVUZMTzBGQlEyaERMRWxCUVVFc1NVRkJZME1zVDBGQlR5eEhRVUZyUWtRc1QwRkJUeXhEUVVGMFF6bFBMRWxCUVVrN1RVRkJWMmRRTEZkQlFWY3NSMEZCUzBZc1QwRkJUeXhEUVVGMlFrVXNWMEZCVnl4RFFVRkJPMEZCUTJ4RExFbEJRVUVzU1VGQlNTeERRVUZEZEVJc1RVRkJUU3hEUVVGRGNVSXNUMEZCVHl4RFFVRkRMRVZCUVVVN1FVRkRjRUlzVFVGQlFTeFBRVUZCTzBGQlEwWXNTMEZCUVR0QlFVVkJMRWxCUVVFc1NVRkJUWEJDTEVkQlFVY3NSMEZCUjNSUExGVkJRVlVzUTBGQlF6QlFMRTlCUVU4c1JVRkJSU3haUVVGWkxFTkJRVU1zUTBGQlFUdEpRVU0zUXl4SlFVRk5SU3hoUVVGaExFZEJRVWMxUWl4WFFVRlhMRU5CUVVOUkxFZEJRVWNzUTBGQlEwWXNSMEZCUnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGQk8wbEJRMmhFTEVsQlEwVXNWMEZCVnl4SlFVRkpjMElzWVVGQllTeEpRVU0xUWtFc1lVRkJZU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTjBJc1owSkJRV2RDTEVsQlF5OURiMElzWTBGQll5eERRVUZEVXl4aFFVRmhMRU5CUVVNc1kwRkJZeXhEUVVGRExFVkJRVVVzUTBGQlEwUXNWMEZCVnl4RFFVRkRMRU5CUVVNc1JVRkROVVE3UVVGRFFTeE5RVUZCTEU5QlFVRTdRVUZEUml4TFFVRkJPMEZCUlVGRExFbEJRVUZCTEdGQlFXRXNRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSemRDTEdkQ1FVRm5RaXhEUVVGQk8wRkJRemRETEVsQlFVRXNTVUZCVFRoQ0xHTkJRV01zUjBGQlIwUXNZVUZCWVN4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGQk8wRkJRM0JFUVN4SlFVRkJRU3hoUVVGaExFTkJRVU1zWTBGQll5eERRVUZETEVkQlFVZERMR05CUVdNc1RVRkJRVEZQTEUxQlFVRXNRMEZCUVRKUExHdENRVUZCTEVOQlEzUkRSQ3hqUVVGakxFTkJRVVZHTEVWQlFVRkJMRU5CUVVGQkxGZEJRVmNzUTBGREwwSXNRMEZCUVN4SFFVRkJMRU5CUVVOQkxGZEJRVmNzUTBGQlF5eERRVUZCTzBGQlEycENNMElzU1VGQlFVRXNWMEZCVnl4RFFVRkRWeXhIUVVGSExFTkJRVU5NTEVkQlFVY3NSVUZCUlhOQ0xHRkJRV0VzUTBGQlF5eERRVUZCTzBGQlEzSkRMRWRCUVVNc1EwRkJReXhEUVVGQk8wRkJRMFlzUlVGQlFTeFBRVUZQTlVJc1YwRkJWeXhEUVVGQk8wRkJRM0JDTEVOQlFVRTdRVUZGVHl4VFFVRlRLMElzYTBKQlFXdENRU3hEUVVOb1F6bE5MRlZCUVZVc1JVRkRWaXROTEZkQlFWY3NSVUZEV0VNc2FVSkJRV2xDTEVWQlEycENReXhUUVVGVExFVkJRMVJETEdGQlFXRXNSVUZEWWp0QlFVTkJMRVZCUVVFc1NVRkJUVU1zUTBGQlF5eEhRVUZIUkN4aFFVRmhMRU5CUVVNeFVDeE5RVUZOTEVOQlFVRTdSVUZET1VJc1NVRkJUU3RKTEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVFN1JVRkRhRUlzUzBGQlN5eEpRVUZKTUVVc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJVRXNRMEZCUXl4SFFVRkhhME1zUTBGQlF5eEZRVUZGYkVNc1EwRkJReXhGUVVGRkxFVkJRVVU3U1VGRE1VSXNTVUZCU1cxRExGbEJRVmtzUjBGQlIzQk9MRlZCUVZVc1EwRkJRVHRCUVVNM1FtOU9MRWxCUVVGQkxGbEJRVmtzUjBGQlIwTXNVVUZCVVN4RFFVRkRSQ3haUVVGWkxFVkJRVVV6Unl4UlFVRlJMRU5CUVVONVJ5eGhRVUZoTEVOQlFVTnFReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEYWtWdFF5eEpRVUZCUVN4WlFVRlpMRWRCUVVkRkxGVkJRVlVzUTBGQlEwWXNXVUZCV1N4RlFVRkZNVWNzVlVGQlZTeERRVUZEZDBjc1lVRkJZU3hEUVVGRGFrTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRM0pGYlVNc1NVRkJRVUVzV1VGQldTeEhRVUZIUnl4VlFVRlZMRU5CUVVOSUxGbEJRVmtzUlVGQlJVa3NWVUZCVlN4RFFVRkRUaXhoUVVGaExFTkJRVU5xUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRmNrVXNTVUZCUVN4SlFVRk5kME1zVVVGQlVTeEhRVUZIU0N4VlFVRlZMRU5CUTNwQ2RFNHNWVUZCVlN4RlFVTldMRU5CUVVOblRpeHBRa0ZCYVVJc1IwRkJSeXhEUVVGRExFbEJRVWxETEZOQlF6VkNMRU5CUVVNc1EwRkJRVHRCUVVWRUxFbEJRVUVzU1VGRFJWTXNUMEZCVHl4RFFVRkRUaXhaUVVGWkxFVkJRVVZNTEZkQlFWY3NRMEZCUXl4SlFVTnNRMjVRTEZGQlFWRXNRMEZCUTNkUUxGbEJRVmtzUlVGQlJVc3NVVUZCVVN4RFFVRkRMRVZCUTJoRE8wRkJRMEZzU0N4TlFVRkJRU3hMUVVGTExFTkJRVU5yUml4SlFVRkpMRU5CUVVONVFpeGhRVUZoTEVOQlFVTnFReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlF6bENMRXRCUVVFN1FVRkRSaXhIUVVGQk8wRkJSVUVzUlVGQlFTeFBRVUZQTVVVc1MwRkJTeXhEUVVGQk8wRkJRMlFzUTBGQlFUdEJRVVZQTEZOQlFWTnZTQ3hQUVVGUFFTeERRVUZETVVNc1EwRkJReXhGUVVGRk8wVkJRM3BDTEU5QlFVOUJMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVUV2VFN4SFFVRkJRU3hEUVVGQlFTeE5RVUZCTEVOQlFVOHJUU3hEUVVGRExFTkJRVUV2VFN4SFFVRkJRU3hGUVVGQlFTeERRVUZCUVN4TlFVRkJMRU5CUVZFclRTeERRVUZETEVOQlFVVXNRMEZCUVR0QlFVTnNReXhEUVVGQk8wRkJSVThzVTBGQlUzcENMR05CUVdOQkxFTkJRelZDT1V3c1NVRkJTU3hGUVVWS08wRkJRVUVzUlVGQlFTeEpRVVJCTkV3c1kwRkJZeXhIUVVGQk9VWXNVMEZCUVN4RFFVRkJhRWNzVFVGQlFTeEhRVUZCTEVOQlFVRXNTVUZCUVdkSExGTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTMEZCUVVNc1UwRkJRU3hIUVVGQlJDeFRRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRWRCUVVkeVNTeDNRa0ZCZDBJc1EwRkJRVHRCUVVWNlF5eEZRVUZCTEVsQlFVMXpUeXhUUVVGVExFZEJRVWR0UlN4SlFVRkpMRU5CUVVORExFbEJRVWtzUTBGQlF6bEpMRTlCUVU4c1EwRkJRM0pJTEVsQlFVa3NRMEZCUXl4SFFVRkhORXdzWTBGQll5eERRVUZETEVkQlFVZEJMR05CUVdNc1EwRkJRVHRCUVVNMVJTeEZRVUZCTEVsQlFVMWhMRmRCUVZjc1IwRkJSMVlzVTBGQlV5eEpRVUZKU0N4alFVRmpMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVUU3UlVGRGNFUXNUMEZCVHp0QlFVRkZZU3hKUVVGQlFTeFhRVUZYTEVWQlFWaEJMRmRCUVZjN1FVRkJSVllzU1VGQlFVRXNVMEZCVXl4RlFVRlVRU3hUUVVGQlFUdEhRVUZYTEVOQlFVRTdRVUZEYmtNc1EwRkJRVHRCUVVWUExGTkJRVk54UlN4aFFVRmhRU3hEUVVGRGRsTXNRMEZCUXl4RlFVRkZPMFZCUXk5Q0xFbEJRVTE1UlN4VlFVRlZMRWRCUVVjc1NVRkJTWEpGTEVsQlFVa3NRMEZCUTBvc1EwRkJReXhEUVVGRGQxTXNWMEZCVnl4RlFVRkZMRVZCUVVWNFV5eERRVUZETEVOQlFVTXdTaXhSUVVGUkxFVkJRVVVzUlVGQlJURktMRU5CUVVNc1EwRkJRM2xUTEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVFN1JVRkRka1VzU1VGQlRVTXNhVUpCUVdsQ0xFZEJRVWNzU1VGQlNYUlRMRWxCUVVrc1EwRkRhRU5LTEVOQlFVTXNRMEZCUTNkVExGZEJRVmNzUlVGQlJTeEZRVU5tZUZNc1EwRkJReXhEUVVGRE1Fb3NVVUZCVVN4RlFVRkZMRVZCUTFveFNpeERRVUZETEVOQlFVTjVVeXhQUVVGUExFVkJRVVVzUlVGRFdDeEZRVU5HTEVOQlFVTXNRMEZCUVR0QlFVVkVMRVZCUVVFc1QwRkJUMG9zU1VGQlNTeERRVUZEVFN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRFJDeHBRa0ZCYVVJc1IwRkJSeXhEUVVGRGFrOHNWVUZCVlN4SlFVRkpMRTlCUVZNc1EwRkJReXhEUVVGQk8wRkJRMjVGTEVOQlFVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMDhzVTBGQlUyMVBMR0ZCUVdGQkxFTkJRVU0xVXl4RFFVRkRMRVZCUVVVN1FVRkRMMElzUlVGQlFTeEpRVUZOTmxNc1QwRkJUeXhIUVVGSE4xTXNRMEZCUXl4RFFVRkRhVk1zVlVGQlZTeEZRVUZGTEVOQlFVRTdRVUZET1VJc1JVRkJRU3hKUVVGTllTeFpRVUZaTEVkQlFVYzVVeXhEUVVGRExFTkJRVU1yVXl4bFFVRmxMRVZCUVVVc1EwRkJRVHRCUVVWNFF5eEZRVUZCTEU5QlFVODFVeXhOUVVGTkxFTkJRVU5JTEVOQlFVTXNRMEZCUTJkVUxFOUJRVThzUlVGQlJTeEhRVUZIU0N4UFFVRlBMRWRCUVVjc1NVRkJTU3hIUVVGSFF5eFpRVUZaTEVOQlFVTXNRMEZCUVR0QlFVTTFSQ3hEUVVGQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5QTEZOQlFWTkhMRmxCUVZsQkxFTkJRVU5ETEVWQlFVVXNSVUZCUlVNc1JVRkJSU3hGUVVGRk8wRkJRMjVETEVWQlFVRXNUMEZCVDFBc1lVRkJZU3hEUVVGRFRTeEZRVUZGTEVOQlFVTXNRMEZCUTBZc1QwRkJUeXhGUVVGRkxFdEJRVXRLTEdGQlFXRXNRMEZCUTA4c1JVRkJSU3hEUVVGRExFTkJRVU5JTEU5QlFVOHNSVUZCUlN4RFFVRkJPMEZCUTNCRkxFTkJRVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFR5eFRRVUZUU1N4bFFVRmxRU3hEUVVGRGFsSXNTVUZCU1N4RlFVRkZPMEZCUTNCRExFVkJRVUVzU1VGQlNTeERRVUZETUU0c1RVRkJUU3hEUVVGRE1VNHNTVUZCU1N4RFFVRkRMRVZCUVVVN1FVRkRha0lzU1VGQlFTeE5RVUZOTEVsQlFVa3dTaXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVRTdRVUZEYWtNc1IwRkJRVHRCUVVWQkxFVkJRVUVzU1VGQlRYZElMR1ZCUVdVc1IwRkJSeXhKUVVGSmFsUXNTVUZCU1N4RFFVRkRLMElzU1VGQlNTeERRVUZETEVOQlFVRTdSVUZEZEVOclVpeGxRVUZsTEVOQlFVTndVQ3hSUVVGUkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRGNFTXNSVUZCUVN4UFFVRlBiMUFzWlVGQlpTeERRVUZCTzBGQlEzaENMRU5CUVVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5QTEZOQlFWTkRMRmxCUVZsQkxFTkJRVU51VWl4SlFVRkpMRVZCUVVWdlVpeGhRVUZoTEVWQlFVVTdSVUZEYUVRc1NVRkJTU3hEUVVGRE1VUXNUVUZCVFN4RFFVRkRNVTRzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXpCT0xFMUJRVTBzUTBGQlF6QkVMR0ZCUVdFc1EwRkJReXhGUVVGRk8wRkJRek5ETEVsQlFVRXNUVUZCVFN4SlFVRkpNVWdzUzBGQlN5eERRVUZETEhWQ1FVRjFRaXhEUVVGRExFTkJRVUU3UVVGRE1VTXNSMEZCUVR0QlFVVkJMRVZCUVVFc1NVRkJUVEpJTEZsQlFWa3NSMEZCUjBvc1pVRkJaU3hEUVVGRGFsSXNTVUZCU1N4RFFVRkRMRU5CUVVFN1FVRkRNVU1zUlVGQlFTeEpRVUZOYzFJc2NVSkJRWEZDTEVkQlFVZE1MR1ZCUVdVc1EwRkJRMGNzWVVGQllTeERRVUZETEVOQlFVRTdRVUZGTlVRc1JVRkJRU3hQUVVGUGJGSXNVVUZCVVN4RFFVRkRiVklzV1VGQldTeEZRVUZGUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZCTzBGQlEzUkVMRU5CUVVFN1FVRkZUeXhUUVVGVFF5eGpRVUZqUVN4RFFVRkRReXhMUVVGTExFVkJRVVU3UlVGRGNFTXNTVUZCVFVNc1UwRkJVeXhIUVVGSExFZEJRVWNzUTBGQlFUdEJRVU55UWl4RlFVRkJMRTlCUVU5RUxFdEJRVXNzUTBGQlF6ZEVMRWRCUVVjc1MwRkJTemhFTEZOQlFWTXNRMEZCUVR0QlFVTm9RenM3UVVOb09VSkJMRk5CUVZORExHRkJRV0ZCTEVOQlFVTTFTaXhKUVVGSkxFVkJRVVUyU2l4UlFVRlJMRVZCUVVWd1ZDeFBRVUZQTEVWQlFVVjVTQ3hQUVVGUExFVkJRVVU3UlVGRGRrUXNTVUZCVFRSTUxFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVRTdRVUZEWml4RlFVRkJMRXRCUVVzc1NVRkJTWEpGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVWQkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVZHZSU3hSUVVGUkxFZEJRVWNzUTBGQlF5eEZRVUZGY0VVc1EwRkJReXhGUVVGRkxFVkJRVVU3UVVGRGVrTXNTVUZCUVN4SlFVRk5jMFVzVDBGQlR5eEhRVUZITDBvc1NVRkJTU3hIUVVGSE5rb3NVVUZCVVN4SFFVRkhjRVVzUTBGQlF5eERRVUZCTzBsQlEyNURMRWxCUVVsMVJTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkJPMEZCUlhCQ0xFbEJRVUVzU1VGQlNYWlVMRTlCUVU4c1JVRkJSVHRCUVVOWWRWUXNUVUZCUVVFc1UwRkJVeXhIUVVGSGVrc3NUMEZCVHl4RFFVRkRPVWtzVDBGQlR5eERRVUZETEVsQlFVbHpWQ3hQUVVGUExFTkJRVUU3UVVGRGVrTXNTMEZCUVR0SlFVVkJMRWxCUVVrM1RDeFBRVUZQTEVsQlFVazRUQ3hUUVVGVExFVkJRVVU3UVVGRGVFSkJMRTFCUVVGQkxGTkJRVk1zUjBGQlIzcExMRTlCUVU4c1EwRkJRM0pDTEU5QlFVOHNRMEZCUXl4SlFVRkpOa3dzVDBGQlR5eERRVUZCTzBGQlEzcERMRXRCUVVFN1FVRkZRU3hKUVVGQkxFbEJRVWxETEZOQlFWTXNSVUZCUlR0QlFVTmlSaXhOUVVGQlFTeEpRVUZKTEVOQlFVTTNSQ3hKUVVGSkxFTkJRVU00UkN4UFFVRlBMRU5CUVVNc1EwRkJRVHRCUVVOd1FpeExRVUZCTzBGQlEwWXNSMEZCUVR0QlFVVkJMRVZCUVVFc1QwRkJUMFFzU1VGQlNTeERRVUZCTzBGQlEySXNRMEZCUVR0QlFVRkRMRWxCUlc5Q1J5eHRRa0ZCYlVJc01FSkJRVUZETEdkQ1FVRkJMRVZCUVVFN1JVRlhkRU1zVTBGQlFVUXNiVUpCUVVGQkxFTkJRVmxxVWl4TFFVRkxMRVZCUVVVN1FVRkJRU3hKUVVGQkxFbEJRVUZ0VWl4TFFVRkJMRU5CUVVFN1FVRkJRVU1zU1VGQlFVRXNaVUZCUVN4UFFVRkJTQ3h0UWtGQlFTeERRVUZCTEVOQlFVRTdRVUZEYWtKRkxFbEJRVUZCTEV0QlFVRXNSMEZCUVVVc1ZVRkJRU3hEUVVGQlNpeEpRVUZCUVN4RlFVRkJRU3h0UWtGQlFTeEhRVUZOYWxJc1MwRkJTeXhEUVVGQkxFTkJRVUVzUTBGQlFUdEpRVUZGYzFJc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNaVUZCUVN4RlFXMURReXhaUVVGTk8wRkJRM0JDTEUxQlFVRXNTVUZCVFVrc1dVRkJXU3hIUVVGSFNpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5uU0N4SlFVRkpMRU5CUVVFN1RVRkRjRU1zU1VGQlRYZExMRTlCUVU4c1IwRkJSMHdzUzBGQlFTeERRVUZMVFN4TFFVRkxMRU5CUVVORExGTkJRVk1zUTBGQlEycFVMRWRCUVVjc1EwRkJReXhWUVVGRGRVa3NTVUZCU1N4RlFVRkJPMUZCUVVFc2IwSkJRelZETWtzc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMEZCUTBWMFJTeFZRVUZCUVN4VFFVRlRMRVZCUTFCcFJTeFpRVUZaTEV0QlFVdDJTeXhKUVVGSkxFZEJRMnBDTERSRlFVRTBSU3hIUVVNMVJTd3JRa0ZEVER0QlFVTkVOa1lzVlVGQlFVRXNSMEZCUnl4RlFVRkZOMFlzU1VGQlN6dFZRVU5XTmtzc1QwRkJUeXhGUVVGRlZpeExRVUZCTEVOQlFVdFhMRkZCUVZFc1EwRkJRME1zU1VGQlNTeERRVUZCV2l4TFFVRkJMRVZCUVU5dVN5eEpRVUZKTEVOQlFVVTdRVUZEZUVNc1ZVRkJRU3hsUVVGQkxFVkJRV1YxU3l4WlFVRlpMRXRCUVV0MlN5eEpRVUZKTEVkQlFVY3NUVUZCVFN4SFFVRkhMMElzVTBGQlFVRTdRVUZCVlN4VFFVRkJMRVZCUlhwRWMwMHNXVUZCV1N4TFFVRkxka3NzU1VGQlNTeG5Ra0ZEY0VJeVN5eExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUU3UVVGQlRYUkZMRlZCUVVGQkxGTkJRVk1zUlVGQlF5eDVRMEZCUVR0QlFVRjVReXhUUVVGQkxFVkJRVU1zVVVGQlR5eERRVUZETEVkQlJXeEZMRVZCUTBRc1JVRkRRWFJITEVsQlEwVXNRMEZCUXl4RFFVRkJPMEZCUVVFc1QwRkRVQ3hEUVVGRExFTkJRVUU3UVVGRlJpeE5RVUZCTEVsQlFVMW5UQ3hQUVVGUExFZEJRVWRpTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzWkRMRTlCUVU4c1IwRkJSemhKTEU5QlFVOHNRMEZCUXpSTExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM1pETEU5QlFVOHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJRVHRCUVVOMlJTeE5RVUZCTEVsQlFVMTNWU3hQUVVGUExFZEJRVWRrTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEydEdMRTlCUVU4c1IwRkJSM0ZDTEU5QlFVOHNRMEZCUXpSTExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMnRHTEU5QlFVOHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJRVHRCUVVWMlJTeE5RVUZCTEVsQlFVa3NRMEZCUXl0TkxFOUJRVThzU1VGQlNTeERRVUZEWkN4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUTBGQlEwTXNVMEZCVXl4RFFVRkRVU3hKUVVGSkxFTkJRVU1zVlVGQlEyeE1MRWxCUVVrc1JVRkJRVHRSUVVGQkxFOUJRVXRCTEVsQlFVa3NTMEZCUzJsTUxFOUJRVThzUTBGQlFUdEJRVUZCTEU5QlFVRXNRMEZCUXl4RlFVRkZPMEZCUTNSRlZDeFJRVUZCUVN4UFFVRlBMRU5CUVVOWExFOUJRVThzWlVGRFlsSXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBGQlEwVjBSU3hWUVVGQlFTeFRRVUZUTEVWQlFVTXNLMEpCUVN0Q08wRkJRM3BEVkN4VlFVRkJRU3hIUVVGSExFVkJRVVVzVlVGQlZ6dFZRVU5vUW1kR0xFOUJRVThzUlVGQlJWWXNTMEZCUVN4RFFVRkxhVUlzWTBGQlFVRTdVMEZGWkZRc1pVRkJRVUVzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQk8wRkJRVWQwUlN4VlFVRkJRU3hUUVVGVExFVkJRVU1zSzBkQlFVRTdVMEZCYVVnc1EwRkRNMGdzUTBGRFVDeERRVUZETEVOQlFVRTdRVUZEU0N4UFFVRkJPMEZCUlVFc1RVRkJRU3hKUVVGSkxFTkJRVU13UlN4UFFVRlBMRWxCUVVrc1EwRkJRMklzUzBGQlFTeERRVUZMVFN4TFFVRkxMRU5CUVVORExGTkJRVk1zUTBGQlExRXNTVUZCU1N4RFFVRkRMRlZCUVVOc1RDeEpRVUZKTEVWQlFVRTdVVUZCUVN4UFFVRkxRU3hKUVVGSkxFdEJRVXRuVEN4UFFVRlBMRU5CUVVFN1FVRkJRU3hQUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU4wUlZJc1VVRkJRVUVzVDBGQlR5eERRVUZEZGtVc1NVRkJTU3hsUVVOV01FVXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBGQlEwVjBSU3hWUVVGQlFTeFRRVUZUTEVWQlFVTXNLMEpCUVN0Q08wRkJRM3BEVkN4VlFVRkJRU3hIUVVGSExFVkJRVVVzVlVGQlZ6dFZRVU5vUW1kR0xFOUJRVThzUlVGQlJWWXNTMEZCUVN4RFFVRkxhMElzWTBGQlFVRTdVMEZGWkZZc1pVRkJRVUVzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQk8wRkJRVWQwUlN4VlFVRkJRU3hUUVVGVExFVkJRVU1zSzBkQlFVRTdVMEZCYVVnc1EwRkRNMGdzUTBGRFVDeERRVUZETEVOQlFVRTdRVUZEU0N4UFFVRkJPMEZCUlVFc1RVRkJRU3hQUVVGUGEwVXNUMEZCVHl4RFFVRkJPMHRCUTJZc1EwRkJRU3hEUVVGQk8wRkJRVUZHTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVVZWTEZWQlFVRXNSVUZCUVN4VlFVRkRia3NzU1VGQlNTeEZRVUZMTzBGQlEyNUNiVXNzVFVGQlFVRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZET0ZJc1VVRkJVU3hEUVVGRE9Vc3NTVUZCU1N4RFFVRkRMRU5CUVVFN1MwRkRNVUlzUTBGQlFTeERRVUZCTzBsQlFVRnpTeXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4dlFrRkJRU3hGUVVWdlFpeFpRVUZOTzBGQlEzcENRU3hOUVVGQlFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56VXl4UlFVRlJMRVZCUVVVc1EwRkJRVHRMUVVOMFFpeERRVUZCTEVOQlFVRTdRVUZCUVdoQ0xFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWWkxGbEJRVUVzUlVGQlFTeFZRVUZEYjBJc1RVRkJUU3hGUVVGTE8wRkJRM1pDTEUxQlFVRXNTVUZCVFVNc1MwRkJTeXhIUVVGSGNrSXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU5ETEZOQlFWTXNRMEZCUTJwVUxFZEJRVWNzUTBGQlF5eFZRVUZWZFVrc1NVRkJTU3hGUVVGRk8xRkJRM0pFTEU5QlFVOUJMRWxCUVVrc1IwRkJSM1ZNTEUxQlFVMHNRMEZCUVR0QlFVTjBRaXhQUVVGRExFTkJRVU1zUTBGQlFUdE5RVVZHY0VJc1MwRkJRU3hEUVVGTGMwSXNVVUZCVVN4RFFVRkRPMEZCUTFwbUxGRkJRVUZCTEZOQlFWTXNSVUZCUldNc1MwRkJRVUU3UVVGRFlpeFBRVUZETEVOQlFVTXNRMEZCUVR0TFFVTklMRU5CUVVFc1EwRkJRVHRKUVVGQmJFSXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzWjBKQlFVRXNSVUZGWjBJc1dVRkJUVHRCUVVOeVFpeE5RVUZCTEU5QlFVOUJMRXRCUVVFc1EwRkJTM1ZDTEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRMUVVNeFFpeERRVUZCTEVOQlFVRTdTVUZCUVhCQ0xHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMR2RDUVVGQkxFVkJSV2RDTEZsQlFVMDdRVUZEY2tJc1RVRkJRU3hQUVVGUFFTeExRVUZCTEVOQlFVdDFRaXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0TFFVTXpRaXhEUVVGQkxFTkJRVUU3UVVFNVIwTXNTVUZCUVN4SlFVRlJReXh6UWtGQmMwSXNSMEZCTmtJelV5eExRVUZMTEVOQlFYaEVNbE1zYzBKQlFYTkNPMDFCUVVWRExITkNRVUZ6UWl4SFFVRkxOVk1zUzBGQlN5eERRVUZvUXpSVExITkNRVUZ6UWl4RFFVRkJPMGxCUTNSRUxFbEJRVTB2UWl4UlFVRlJMRWRCUTFvNFFpeHpRa0ZCYzBJc1MwRkJTME1zYzBKQlFYTkNMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlJUZEVla0lzUzBGQlFTeERRVUZMVFN4TFFVRkxMRWRCUVVjN1RVRkRXRU1zVTBGQlV5eEZRVUZGWkN4aFFVRmhMRU5CUTNSQ1R5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5uU0N4SlFVRkpMRVZCUTJZMlNpeFJRVUZSTEVWQlExSk5MRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNaRExFOUJRVThzUlVGRGJFSXdWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOclJpeFBRVU5pTEVOQlFVRTdTMEZEUkN4RFFVRkJPMEZCUTBScFRTeEpRVUZCUVN4TFFVRkJMRU5CUVVzd1FpeFhRVUZYTEdkQ1FVRkhReXhUUVVGVExFVkJRVVVzUTBGQlFUdEJRVUZETEVsQlFVRXNUMEZCUVROQ0xFdEJRVUVzUTBGQlFUdEJRVU5xUXl4SFFVRkJPMFZCUVVNMFFpeFRRVUZCTEVOQlFVRTVRaXh0UWtGQlFTeEZRVUZCUXl4blFrRkJRU3hEUVVGQkxFTkJRVUU3UlVGQlFTeFBRVUZCT0VJc1dVRkJRU3hEUVVGQkwwSXNiVUpCUVVFc1JVRkJRU3hEUVVGQk8wbEJRVUZ3UlN4SFFVRkJMRVZCUVVFc2JVSkJRVUU3U1VGQlFTOVFMRXRCUVVFc1JVRkZSQ3hUUVVGQmJWY3NhVUpCUVVGQkxFZEJRVzlDTzBGQlEyeENMRTFCUVVFc1NVRkJUVU1zWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUTB3c1YwRkJWeXhEUVVGRFRTeFBRVUZQTEVOQlFVRTdRVUZGYUVRc1RVRkJRU3hKUVVGSlJDeGxRVUZsTEVWQlFVVTdRVUZEYmtJN1FVRkRRU3hSUVVGQkxFbEJRVTFGTEhWQ1FVRjFRaXhIUVVGSFJpeGxRVUZsTEVOQlFVTkhMRkZCUVZFc1IwRkRjRVIwVml4TFFVRkxMRU5CUVVOMVZpeEpRVUZKTEVOQlFVTktMR1ZCUVdVc1EwRkJRMGNzVVVGQlVTeERRVUZETEVkQlEzQkRMRWxCUVVrc1EwRkJRVHRSUVVOU0xFbEJRVTFGTEc5Q1FVRnZRaXhIUVVGSFNDeDFRa0ZCZFVJc1IwRkRhRVJCTEhWQ1FVRjFRaXhEUVVGRGJFSXNTVUZCU1N4RFFVRkRMRlZCUVVOelFpeFBRVUZQTEVWQlFVRTdWVUZCUVN4UFFVRkxRU3hQUVVGUExFTkJRVU5ETEZsQlFWa3NRMEZCUVR0QlFVRkJMRk5CUVVFc1EwRkJReXhIUVVNdlJDeEpRVUZKTEVOQlFVRTdRVUZGVWxBc1VVRkJRVUVzWlVGQlpTeERRVUZEVVN4VFFVRlRMRWRCUVVkSUxHOUNRVUZ2UWl4SFFVTTFRMEVzYjBKQlFXOUNMRU5CUVVOSkxGTkJRVk1zUjBGRE9VSXNRMEZCUTBvc2IwSkJRVzlDTEVOQlFVTkxMRmxCUVZrc1IwRkJSMVlzWlVGQlpTeERRVUZEVlN4WlFVRlpMRWxCUVVrc1EwRkJReXhIUVVOMFJTeERRVUZEVml4bFFVRmxMRU5CUVVOWExGbEJRVmtzUjBGQlIxZ3NaVUZCWlN4RFFVRkRWU3haUVVGWkxFbEJRVWtzUTBGQlF5eERRVUZCTzBGQlEzWkZMRTlCUVVFN1FVRkRSaXhMUVVGQk8wRkJRVU1zUjBGQlFTeEZRVUZCTzBsQlFVRXZSeXhIUVVGQkxFVkJRVUVzVVVGQlFUdEpRVUZCTDFBc1MwRkJRU3hGUVdkR1JDeFRRVUZCWjFnc1RVRkJRVUVzUjBGQlV6dE5RVU5RTEVsQlFVbERMR0ZCUVdFc1IwRkJSME1zU1VGQlNTeERRVUZETzBGQlEzWkNMRkZCUVVFc2FVTkJRV2xETEVWQlFVVXNTVUZCU1R0QlFVTjJReXhSUVVGQkxEWkRRVUUyUXl4RlFVTXpReXhKUVVGSkxFTkJRVU5vVlN4TFFVRkxMRU5CUVVNMFV5eHpRa0ZCUVVFN1FVRkRaaXhQUVVGRExFTkJRVU1zUTBGQlFUdE5RVVZHTEc5Q1FVTkZha0lzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8wRkJRVXQwUlN4UlFVRkJRU3hUUVVGVExFVkJRVVY1Unl4aFFVRmpPMUZCUVVORkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTndRaXhYUVVGQlFUdEJRVUZaTEU5QlFVRXNSVUZEYkVRc1NVRkJTU3hEUVVGRGNVSXNZVUZCWVN4RlFVTm9RaXhEUVVGRExFTkJRVUU3UVVGRlZpeExRVUZCTzBGQlFVTXNSMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFTkJla2s0UTNaRExFTkJRVUZCTEV0QlFVc3NRMEZCUTNkRExGTkJRVk1zUTBGQlFUczdRVU55UW1oRkxFbEJRVTFETERCQ1FVRXdRaXhIUVVGSFF5eGpRVUZqTEVOQlFVTndSQ3h0UWtGQmJVSXNRMEZCUXl4RFFVRkJPMEZCUVVNc1NVRkZiRVJ4UkN4WlFVRlpMREJDUVVGQmNFUXNaMEpCUVVFc1JVRkJRVHRCUVVGQkxFVkJRVUVzVTBGQlFXOUVMRmxCUVVFc1IwRkJRVHRCUVVGQkxFbEJRVUVzU1VGQlFXNUVMRXRCUVVFc1EwRkJRVHRCUVVGQlF5eEpRVUZCUVN4bFFVRkJMRTlCUVVGclJDeFpRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQlF5eEpRVUZCTEVkQlFVRjJVQ3hUUVVGQkxFTkJRVUZvUnl4TlFVRkJMRVZCUVVGM1ZpeEpRVUZCTEVkQlFVRjZWeXhKUVVGQlFTeExRVUZCTEVOQlFVRjNWeXhKUVVGQkxFZEJRVUZGTEVsQlFVRXNSMEZCUVN4RFFVRkJMRVZCUVVGQkxFbEJRVUVzUjBGQlFVWXNTVUZCUVN4RlFVRkJSU3hKUVVGQkxFVkJRVUVzUlVGQlFUdEJRVUZCUkN4TlFVRkJRU3hKUVVGQkxFTkJRVUZETEVsQlFVRXNRMEZCUVhwUUxFZEJRVUZCTEZOQlFVRXNRMEZCUVhsUUxFbEJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRXNTMEZCUVR0QlFVRkJkRVFzU1VGQlFVRXNTMEZCUVN4SFFVRkJSU3hWUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCYVVRc1dVRkJRU3hGUVVGQk5WVXNSVUZCUVVFc1EwRkJRVUVzVFVGQlFTeERRVUZCT0ZVc1NVRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEpRVUZCYkVRc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlpYWkNMRTlCUVVFc1JVRkJRVHRCUVVOT2RVUXNUVUZCUVVFc1pVRkJaU3hGUVVGRkxFdEJRVUU3UzBGRGJFSXNRMEZCUVN4RFFVRkJPMGxCUVVGd1JDeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3h4UWtGQlFTeEZRVVZ4UWl4WlFVRk5PMEZCUXpGQ0xFMUJRVUVzU1VGQlRXRXNUMEZCVHl4SFFVRkhZaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOMlF5eFBRVUZQTEVkQlFVYzRTU3hQUVVGUExFTkJRVU0wU3l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVRTdRVUZEZGtVc1RVRkJRU3hKUVVGTmQxVXNUMEZCVHl4SFFVRkhaQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOclJpeFBRVUZQTEVkQlFVZHhRaXhQUVVGUExFTkJRVU0wU3l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnJSaXhQUVVGUExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVRTdUVUZGZGtVc1NVRkJUWE5OTEU5QlFVOHNSMEZCUnl4RlFVRkZMRU5CUVVFN1RVRkRiRUlzUzBGQlN5eEpRVUZKTDBVc1EwRkJReXhIUVVGSGRVWXNUMEZCVHl4RlFVRkZka1lzUTBGQlF5eEpRVUZKZDBZc1QwRkJUeXhGUVVGRmVFWXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRka01yUlN4UlFVRkJRU3hQUVVGUExFTkJRVU4yUlN4SlFVRkpMR1ZCUTFZd1JTeExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hSUVVGQkxFVkJRVUU3UVVGQlVTOUZMRlZCUVVGQkxFZEJRVWNzUlVGQlJVb3NRMEZCUlR0QlFVRkRNMUFzVlVGQlFVRXNTMEZCU3l4RlFVRkZNbEFzUTBGQlFVRTdVMEZEY0VKQkxFVkJRVUZCTEVOQlEwc3NRMEZEVml4RFFVRkRMRU5CUVVFN1FVRkRTQ3hQUVVGQk8wRkJRMEVzVFVGQlFTeFBRVUZQSzBVc1QwRkJUeXhEUVVGQk8wdEJRMllzUTBGQlFTeERRVUZCTzBGQlFVRkdMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVm5RaXhuUWtGQlFTeEZRVUZCTEZWQlFVTjNSQ3hEUVVGRExFVkJRVXM3VFVGRGRFSjRSQ3hMUVVGQkxFTkJRVXRYTEZGQlFWRXNRMEZCUXpaRExFTkJRVU1zUTBGQlEwTXNUVUZCVFN4RFFVRkRPVmdzUzBGQlN5eERRVUZETEVOQlFVRTdTMEZET1VJc1EwRkJRU3hEUVVGQk8wbEJRVUYzVlN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRmEwSXNhMEpCUVVFc1JVRkJRU3haUVVGQk8wMUJRVUVzYjBKQlEycENVU3hMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4UlFVRkJMRVZCUVVFN1FVRkRSVGxWTEZGQlFVRkJMRXRCUVVzc1JVRkJSWEZWTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyZElMRWxCUVVzN1FVRkRka0p6Unl4UlFVRkJRU3hUUVVGVExFVkJRVU1zSzBKQlFTdENPMUZCUTNwRGQwVXNVVUZCVVN4RlFVRkZXQ3hMUVVGQkxFTkJRVXN3UkN4alFVRkJRVHRCUVVGbExFOUJRVUVzUlVGRk4wSXhSQ3hMUVVGQkxFTkJRVXN5UkN4dFFrRkJiVUlzUlVGRGJrSXNRMEZCUXl4RFFVRkJPMHRCUTFZc1EwRkJRU3hEUVVGQk8wRkJRVUY0UkN4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGWjBJc1owSkJRVUVzUlVGQlFTeFZRVUZETkVRc1QwRkJUeXhGUVVGQk8wMUJRVUVzYjBKQlEzWkNjRVFzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8wRkJRMFV2UlN4UlFVRkJRU3hIUVVGSExFVkJRVU1zVFVGQlRUdEJRVU5XYlVrc1VVRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlFVVkRMRlZCUVVGQkxGVkJRVlVzUlVGQlJVWXNUMEZCVHl4SFFVRkhMRk5CUVZNc1IwRkJSeXhSUVVGQk8xTkJRVmM3UVVGRGRFUjZTQ3hSUVVGQlFTeFRRVUZUTEVWQlFVTXNhME5CUVd0RE8xRkJRelZEZFVVc1QwRkJUeXhGUVVGRkxGTkJRVUZCTEU5QlFVRkJMRU5CUVVOdVFpeExRVUZMTEVWQlFVRTdRVUZCUVN4VlFVRkJMRTlCUVV0VExFdEJRVUVzUTBGQlN5dEVMR05CUVdNc1EwRkJRM2hGTEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUVVFc1UwRkJRVHRQUVVVNVEybENMR1ZCUVVGQkxFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRVHRCUVVGTmRFVXNVVUZCUVVFc1UwRkJVeXhGUVVGRExEaERRVUZCTzBGQlFUaERMRTlCUVVVc1EwRkJReXhsUVVOcVJYRkZMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVR0QlFVRk5kRVVzVVVGQlFVRXNVMEZCVXl4RlFVRkRMR2xFUVVGQk8wRkJRV2xFTEU5QlFVRXNSVUZET1VRMlJDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5uU0N4SlFVTlNMRU5CUTBnc1EwRkJReXhEUVVGQk8wdEJRMUFzUTBGQlFTeERRVUZCTzBsQlFVRnpTeXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGWjBJc1owSkJRVUVzUlVGQlFTeFpRVUZCTzBGQlFVRXNUVUZCUVN4dlFrRkRabEVzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVOM1F5d3dRa0ZCTUVJc1JVRkJRVHRCUVVONlFuWklMRkZCUVVGQkxFZEJRVWNzUlVGQlF5eFZRVUZWTzBGQlEyUTNSaXhSUVVGQlFTeEpRVUZKTEVWQlFVVnRTeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOblNDeEpRVUZMTzFGQlEzUkNPRXNzVVVGQlVTeEZRVUZGV0N4TFFVRkJMRU5CUVV0WExGRkJRVk03VVVGRGVFSlJMRkZCUVZFc1JVRkJSVzVDTEV0QlFVRXNRMEZCU3l0RUxHTkJRV1U3UVVGRE9VSjZXQ3hSUVVGQlFTeFBRVUZQTEVWQlFVVXdWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOMlF5eFBRVUZSTzBGQlF6VkNlVWdzVVVGQlFVRXNUMEZCVHl4RlFVRkZhVTBzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGEwWXNUMEZCVVR0QlFVTTFRakJPTEZGQlFVRkJMSE5DUVVGelFpeEZRVUZGZWtJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRORk1zYzBKQlFYVkNPMEZCUXpGRVJDeFJRVUZCUVN4elFrRkJjMElzUlVGQlJYaENMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpKVExITkNRVUZCUVR0QlFVRjFRaXhQUVVNelJDeERRVUZETEVOQlFVRTdTMEZEU0N4RFFVRkJMRU5CUVVFN1NVRkJRWEpDTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxHdENRVUZCTEVWQlJXdENMRmxCUVUwN1FVRkRka0lzVFVGQlFTeEpRVUZSZFVRc1pVRkJaU3hIUVVGTGRrUXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVGxDYVVRc1pVRkJaU3hEUVVGQk8wMUJRM1pDTEVsQlFVbFRMRTFCUVUwc1IwRkJSeXhEUVVGRGFFVXNTMEZCUVN4RFFVRkxhVVVzWTBGQll5eERRVUZETEVOQlFVTldMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRGNFUXNUVUZCUVN4SlFVRkpRU3hsUVVGbExFVkJRVVU3VVVGRGJrSlRMRTFCUVUwc1EwRkJRMmhFTEU5QlFVOHNRMEZCUTJoQ0xFdEJRVUVzUTBGQlMydEZMR05CUVdNc1JVRkJSU3hEUVVGRExFTkJRVUU3UVVGRGRrTXNUMEZCUVR0QlFVTkJMRTFCUVVFc1QwRkJUMFlzVFVGQlRTeERRVUZCTzB0QlEyUXNRMEZCUVN4RFFVRkJPMEZCUVVFM1JDeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRlZTeFZRVUZCTEVWQlFVRXNWVUZCUTI1TExFbEJRVWtzUlVGQlN6dE5RVU51UW0xTExFdEJRVUVzUTBGQlN5dEVMR05CUVdNc1JVRkJSU3hEUVVGQk8wRkJRM0pDTEUxQlFVRXNTVUZCU1d4UExFbEJRVWtzUzBGQlMyMUxMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJkSUxFbEJRVWtzUlVGQlJTeFBRVUZCTzBGQlF6bENiVXNzVFVGQlFVRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZET0ZJc1VVRkJVU3hEUVVGRE9Vc3NTVUZCU1N4RFFVRkRMRU5CUVVFN1MwRkRNVUlzUTBGQlFTeERRVUZCTzBGQlFVRnpTeXhKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZaMElzWjBKQlFVRXNSVUZCUVN4VlFVRkRWQ3hMUVVGTExFVkJRVXM3VFVGRE1VSlRMRXRCUVVFc1EwRkJTM05DTEZGQlFWRXNRMEZEV0R0QlFVTkZhVU1zVVVGQlFVRXNaVUZCWlN4RlFVRkZMRU5CUVVOMlJDeExRVUZCTEVOQlFVdE5MRXRCUVVzc1EwRkJRMmxFTEdWQlFVRkJPMEZCUXk5Q0xFOUJRVU1zUlVGRFJDeFpRVUZOTzBGQlEwb3NVVUZCUVN4SlFVRkpka1FzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGMxWXNhMEpCUVd0Q0xFVkJRVVU3VlVGRGFrTnVSU3hMUVVGQkxFTkJRVXR2UlN4blFrRkJaMElzUTBGQlEzQkZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJRc1NVRkJTU3hGUVVGRmQxSXNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkRMME1zVTBGQlFUdEJRVU5HTEU5QlEwWXNRMEZCUXl4RFFVRkJPMHRCUTBZc1EwRkJRU3hEUVVGQk8wRkJRVUZaTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVUZCTEd0Q1FVRkJMRVZCUld0Q0xGVkJRVU5xVXl4SlFVRkpMRVZCUVVWM1VpeExRVUZMTEVWQlFVczdRVUZEYkVOVExFMUJRVUZCTEV0QlFVRXNRMEZCUzNGRkxGRkJRVkVzUTBGQlEzUlhMRWxCUVVrc1JVRkJSWGRTTEV0QlFVc3NRMEZCUXl4RFFVRkJPMDFCUXpGQ1V5eExRVUZCTEVOQlFVdHpSU3hQUVVGUExFVkJRVVVzUTBGQlFUdExRVU5tTEVOQlFVRXNRMEZCUVR0QlFVRkJia1VzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzVlVGQlFTeEZRVVZWTEZWQlFVTnFVeXhKUVVGSkxFVkJRVVYzVWl4TFFVRkxMRVZCUVVzN1FVRkRNVUlzVFVGQlFTeEpRVUZKVXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjNWaXhSUVVGUkxFVkJRVVU3VVVGRGRrSnlSU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOM1ZpeFJRVUZSTEVOQlFVTjBWeXhKUVVGSkxFVkJRVVYzVWl4TFFVRkxMRU5CUVVNc1EwRkJRVHRCUVVOc1F5eFBRVUZCTzB0QlEwUXNRMEZCUVN4RFFVRkJPMGxCUVVGWkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMRk5CUVVFc1JVRkZVeXhaUVVGTk8wRkJRMlFzVFVGQlFTeEpRVUZKUVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjVWaXhQUVVGUExFVkJRVVU3UVVGRGRFSjBSU3hSUVVGQlFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU41Vml4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUU3UVVGRE1VSXNUMEZCUVR0TFFVTkVMRU5CUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzVDBGQlFYUkZMRXRCUVVFc1EwRkJRVHRCUVVGQkxFZEJRVUU3UlVGQlFUUkNMRk5CUVVFc1EwRkJRWFZDTEZsQlFVRXNSVUZCUVhCRUxHZENRVUZCTEVOQlFVRXNRMEZCUVR0RlFVRkJMRTlCUVVFNFFpeFpRVUZCTEVOQlFVRnpRaXhaUVVGQkxFVkJRVUVzUTBGQlFUdEpRVUZCZWtnc1IwRkJRU3hGUVVGQkxGRkJRVUU3U1VGQlFTOVFMRXRCUVVFc1JVRkZSQ3hUUVVGQloxZ3NUVUZCUVVFc1IwRkJVenRCUVVOUUxFMUJRVUVzU1VGQlNUUkNMR2RDUVVGblFpeERRVUZCTzBGQlEzQkNMRTFCUVVFc1VVRkJVU3hKUVVGSkxFTkJRVU14Vml4TFFVRkxMRU5CUVVNeVZpeFpRVUZaTzBGQlF6ZENMRkZCUVVFc1MwRkJTeXhSUVVGUk8wRkJRMWhFTEZWQlFVRkJMR2RDUVVGblFpeEhRVUZITEVsQlFVa3NRMEZCUTBVc1owSkJRV2RDTEVWQlFVVXNRMEZCUVR0QlFVTXhReXhWUVVGQkxFMUJRVUU3UVVGRFJpeFJRVUZCTEV0QlFVc3NVVUZCVVR0QlFVTllSaXhWUVVGQlFTeG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU5ITEdkQ1FVRm5RaXhGUVVGRkxFTkJRVUU3UVVGRE1VTXNWVUZCUVN4TlFVRkJPMEZCUTBvc1QwRkJRVHROUVVWQkxHOUNRVU5GYkVVc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMEZCUTBWMFJTeFJRVUZCUVN4VFFVRlRMREJHUVVGQk5VNHNUVUZCUVN4RFFVRXdSaXhKUVVGSkxFTkJRVU5OTEV0QlFVc3NRMEZCUXpKV0xGbEJRVmtzUTBGQlFUdEJRVUZITEU5QlFVRXNSVUZGTlVoRUxHZENRVU5GTEVOQlFVTXNRMEZCUVR0QlFVVldMRXRCUVVFN1FVRkJReXhIUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRXNRMEV4U1hWREwwUXNRMEZCUVVFc1MwRkJTeXhEUVVGRGQwTXNVMEZCVXl4RFFVRkJPenRCUTFCMFFpeEpRVVZrTWtJc2IwSkJRVzlDTERCQ1FVRkJOVVVzWjBKQlFVRXNSVUZCUVR0QlFVRkJMRVZCUVVFc1UwRkJRVFJGTEc5Q1FVRkJMRWRCUVVFN1FVRkJRU3hKUVVGQkxFbEJRVUV6UlN4TFFVRkJMRU5CUVVFN1FVRkJRVU1zU1VGQlFVRXNaVUZCUVN4UFFVRkJNRVVzYjBKQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUYyUWl4SlFVRkJMRWRCUVVGMlVDeFRRVUZCTEVOQlFVRm9SeXhOUVVGQkxFVkJRVUYzVml4SlFVRkJMRWRCUVVGNlZ5eEpRVUZCUVN4TFFVRkJMRU5CUVVGM1Z5eEpRVUZCTEVkQlFVRkZMRWxCUVVFc1IwRkJRU3hEUVVGQkxFVkJRVUZCTEVsQlFVRXNSMEZCUVVZc1NVRkJRU3hGUVVGQlJTeEpRVUZCTEVWQlFVRXNSVUZCUVR0QlFVRkJSQ3hOUVVGQlFTeEpRVUZCTEVOQlFVRkRMRWxCUVVFc1EwRkJRWHBRTEVkQlFVRkJMRk5CUVVFc1EwRkJRWGxRTEVsQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkJRVHRCUVVGQmRFUXNTVUZCUVVFc1MwRkJRU3hIUVVGQlJTeFZRVUZCTEVOQlFVRXNTVUZCUVN4RlFVRkJlVVVzYjBKQlFVRXNSVUZCUVhCWExFVkJRVUZCTEVOQlFVRkJMRTFCUVVFc1EwRkJRVGhWTEVsQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRV3hFTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVkZ5UWl4cFFrRkJRU3hGUVVGQkxGVkJRVU14UlN4RFFVRkRMRVZCUVVFN1FVRkJRU3hOUVVGQkxFOUJRVXN3UlN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjNSU3hMUVVGTExFdEJRVXRwU1N4RFFVRkRMRU5CUVVFN1FVRkJRU3hMUVVGQkxFTkJRVUVzUTBGQlFUdEpRVUZCTmtVc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNaVUZCUVN4RlFVVXZRaXhaUVVGTk8wMUJRM0JDTEU5QlFVOUJMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXl0V0xGVkJRVlVzUTBGQlEzUllMRWRCUVVjc1EwRkJReXhWUVVGREswWXNTMEZCU3l4RlFVRkZhVWtzUTBGQlF5eEZRVUZCTzFGQlFVRXNiMEpCUTNoRGEwWXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzFWQlEwVjBSU3hUUVVGVExFVkJRMUEyUkN4TFFVRkJMRU5CUVVzMlJTeGxRVUZsTEVOQlFVTjJTaXhEUVVGRExFTkJRVU1zUjBGRGJrSXNLMFZCUVN0RkxFZEJReTlGTEdkRFFVTk1PMEZCUTBSSkxGVkJRVUZCTEVkQlFVY3NSVUZCUlhKSkxFdEJRVTA3VlVGRFdIRk9MRTlCUVU4c1JVRkJSVllzUzBGQlFTeERRVUZMVnl4UlFVRlJMRU5CUVVORExFbEJRVWtzUTBGQlFWb3NTMEZCUVN4RlFVRlBNVVVzUTBGQlF5eERRVUZGTzFWQlEzSkRMR1ZCUVdVd1JTeEZRVUZCUVN4TFFVRkJMRU5CUVVzMlJTeGxRVUZsTEVOQlFVTjJTaXhEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVkQlFVZDRTQ3hUUVVGQlFUdFRRVVZxUkd0TkxFVkJRVUZCTEV0QlFVRXNRMEZCU3paRkxHVkJRV1VzUTBGQlEzWktMRU5CUVVNc1EwRkJReXhuUWtGRGRFSnJSaXhMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFN1FVRkJUWFJGTEZWQlFVRkJMRk5CUVZNc1JVRkJReXd3UTBGQlFUdEJRVUV3UXl4VFFVRkJMRVZCUVVNc1VVRkJUeXhEUVVGRExFZEJSVzVGTEVWQlEwUXNSVUZEUVRsSkxFdEJRMFVzUTBGQlF5eERRVUZCTzBGQlFVRXNUMEZEVUN4RFFVRkRMRU5CUVVFN1MwRkRTQ3hEUVVGQkxFTkJRVUU3UVVGQlFUaE5MRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVlZMRlZCUVVFc1JVRkJRU3hWUVVGRE0wMHNTMEZCU3l4RlFVRkJPMEZCUVVFc1RVRkJRU3hQUVVGTE1rMHNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZET0ZJc1VVRkJVU3hEUVVGRGRFNHNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkJRU3hMUVVGQkxFTkJRVUVzUTBGQlFUdEpRVUZCT0Uwc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJUTkNMRzlDUVVGQkxFVkJRVUVzV1VGQlFUdEJRVUZCTEUxQlFVRXNUMEZCVFVFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjMU1zVVVGQlVTeEZRVUZGTEVOQlFVRTdRVUZCUVN4TFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzVDBGQlFXNUNMRXRCUVVFc1EwRkJRVHRCUVVGQkxFZEJRVUU3UlVGQlFUUkNMRk5CUVVFc1EwRkJRU3RETEc5Q1FVRkJMRVZCUVVFMVJTeG5Ra0ZCUVN4RFFVRkJMRU5CUVVFN1JVRkJRU3hQUVVGQk9FSXNXVUZCUVN4RFFVRkJPRU1zYjBKQlFVRXNSVUZCUVN4RFFVRkJPMGxCUVVGcVNpeEhRVUZCTEVWQlFVRXNVVUZCUVR0SlFVRkJMMUFzUzBGQlFTeEZRVVZvUkN4VFFVRkJaMWdzVFVGQlFVRXNSMEZCVXp0TlFVTlFMRzlDUVVORmJrTXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBGQlFVdDBSU3hSUVVGQlFTeFRRVUZUTEVWQlFVTXNhME5CUVVFN1FVRkJhME1zVDBGQlFTeEZRVU01UXl4SlFVRkpMRU5CUVVNMFJ5eGhRVUZoTEVWQlEyaENMRU5CUVVNc1EwRkJRVHRCUVVWV0xFdEJRVUU3UVVGQlF5eEhRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1EwRXhReXREZGtNc1EwRkJRVUVzUzBGQlN5eERRVUZEZDBNc1UwRkJVeXhEUVVGQk96dEJRMGRxUlN4SlFVRk5PRUlzTWtKQlFUSkNMRWRCUVVjMVFpeGpRVUZqTEVOQlFVTjVRaXh2UWtGQmIwSXNRMEZCUXl4RFFVRkJPMEZCUVVNc1NVRkZjRVJKTEdGQlFXRXNNRUpCUVVGb1JpeG5Ra0ZCUVN4RlFVRkJPMEZCUVVFc1JVRkJRU3hUUVVGQlowWXNZVUZCUVN4SFFVRkJPMEZCUVVFc1NVRkJRU3hKUVVGQkwwVXNTMEZCUVN4RFFVRkJPMEZCUVVGRExFbEJRVUZCTEdWQlFVRXNUMEZCUVRoRkxHRkJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFelFpeEpRVUZCTEVkQlFVRjJVQ3hUUVVGQkxFTkJRVUZvUnl4TlFVRkJMRVZCUVVGM1ZpeEpRVUZCTEVkQlFVRjZWeXhKUVVGQlFTeExRVUZCTEVOQlFVRjNWeXhKUVVGQkxFZEJRVUZGTEVsQlFVRXNSMEZCUVN4RFFVRkJMRVZCUVVGQkxFbEJRVUVzUjBGQlFVWXNTVUZCUVN4RlFVRkJSU3hKUVVGQkxFVkJRVUVzUlVGQlFUdEJRVUZCUkN4TlFVRkJRU3hKUVVGQkxFTkJRVUZETEVsQlFVRXNRMEZCUVhwUUxFZEJRVUZCTEZOQlFVRXNRMEZCUVhsUUxFbEJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRXNTMEZCUVR0QlFVRkJkRVFzU1VGQlFVRXNTMEZCUVN4SFFVRkJSU3hWUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCTmtVc1lVRkJRU3hGUVVGQmVGY3NSVUZCUVVFc1EwRkJRVUVzVFVGQlFTeERRVUZCT0ZVc1NVRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEpRVUZCYkVRc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlUzaENMRTlCUVVFc1JVRkJRVHRCUVVOT2RVUXNUVUZCUVVFc1pVRkJaU3hGUVVGRkxFdEJRVUU3UzBGRGJFSXNRMEZCUVN4RFFVRkJPMEZCUVVGd1JDeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRmNVSXNjVUpCUVVFc1JVRkJRU3hWUVVGRE5FVXNWVUZCVlN4RlFVRkJPMEZCUVVFc1RVRkJRU3hQUVVNdlFrRXNWVUZCVlN4RFFVRkRkRmdzUjBGQlJ5eERRVUZETEZWQlFVTXdXQ3hEUVVGRExFVkJRVVV4U2l4RFFVRkRMRVZCUVVFN1VVRkJRU3h2UWtGRGJFSnJSaXhMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4UlFVRkJMRVZCUVVFN1FVRkJVUzlGTEZWQlFVRkJMRWRCUVVjc1JVRkJSVW9zUTBGQlJUdEJRVUZETTFBc1ZVRkJRVUVzUzBGQlN5eEZRVUZGTWxBc1EwRkJRVUU3UVVGQlJTeFRRVUZCTEVWQlEzUkNNRW9zUTBGRFN5eERRVUZETEVOQlFVRTdRVUZCUVN4UFFVTldMRU5CUVVNc1EwRkJRVHRCUVVGQkxFdEJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRTNSU3hKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZaU3hyUWtGQlFTeEZRVUZCTEZWQlFVTTBSU3hWUVVGVkxFVkJRVUU3VFVGQlFTeHZRa0ZETlVKd1JTeExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hSUVVGQkxFVkJRVUU3UVVGRFJUbFZMRkZCUVVGQkxFdEJRVXNzUlVGQlJYRlZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNkRkxFdEJRVTA3UVVGRGVFSTRTU3hSUVVGQlFTeFRRVUZUTEVWQlFVTXNaME5CUVdkRE8xRkJRekZEZDBVc1VVRkJVU3hGUVVGRkxGTkJRVUZCTEZGQlFVRkJMRU5CUVVNMlF5eERRVUZETEVWQlFVRTdWVUZCUVN4UFFVRkxlRVFzUzBGQlFTeERRVUZMVnl4UlFVRlJMRU5CUVVNMlF5eERRVUZETEVOQlFVTkRMRTFCUVUwc1EwRkJRemxZTEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUVVFc1UwRkJRVHRCUVVGRExFOUJRVUVzUlVGRk9VTnhWU3hMUVVGQkxFTkJRVXN5UkN4dFFrRkJiVUlzUTBGQlEybENMRlZCUVZVc1EwRkRPVUlzUTBGQlF5eERRVUZCTzB0QlExWXNRMEZCUVN4RFFVRkJPMEZCUVVGNlJTeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGQlFTeG5Ra0ZCUVN4RlFVVm5RaXhWUVVGRE5FUXNUMEZCVHl4RlFVRkZaMElzVlVGQlZTeEZRVUZCTzAxQlFVRXNiMEpCUTI1RGNFVXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBGQlEwVXZSU3hSUVVGQlFTeEhRVUZITEVWQlFVTXNUVUZCVFR0QlFVTldiVWtzVVVGQlFVRXNTMEZCU3l4RlFVRkZPMEZCUVVWRExGVkJRVUZCTEZWQlFWVXNSVUZCUlVZc1QwRkJUeXhIUVVGSExGTkJRVk1zUjBGQlJ5eFJRVUZCTzFOQlFWYzdRVUZEZEVSNlNDeFJRVUZCUVN4VFFVRlRMRVZCUVVNc2JVTkJRVzFETzFGQlF6ZERkVVVzVDBGQlR5eEZRVUZGVml4TFFVRkJMRU5CUVVzclJDeGpRVUZCUVR0UFFVVmtka1FzWlVGQlFVRXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTzBGQlFVMTBSU3hSUVVGQlFTeFRRVUZUTEVWQlFVTXNLME5CUVVFN1FVRkJLME1zVDBGQlJTeERRVUZETEdWQlEyeEZjVVVzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQk8wRkJRVTEwUlN4UlFVRkJRU3hUUVVGVExFVkJRVU1zYlVSQlFVRTdUMEZEWW5sSkxFVkJRVUZCTEZWQlFWVXNRMEZCUXpWRkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM2RGTEV0QlFVc3NRMEZEZUVJc1EwRkRTQ3hEUVVGRExFTkJRVUU3UzBGRFVDeERRVUZCTEVOQlFVRTdRVUZCUVRoTkxFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWblFpeG5Ra0ZCUVN4RlFVRkJMRlZCUVVNMFJTeFZRVUZWTEVWQlFVRTdRVUZCUVN4TlFVRkJMRzlDUVVNeFFuQkZMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZEY1VVc01rSkJRVEpDTEVWQlFVRTdRVUZETVVKd1NpeFJRVUZCUVN4SFFVRkhMRVZCUVVNc1ZVRkJWVHRCUVVOa2Nra3NVVUZCUVVFc1MwRkJTeXhGUVVGRk1rMHNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZDBVc1MwRkJUVHRCUVVONFFuVlNMRkZCUVVGQkxGVkJRVlVzUlVGQlJVRXNWVUZCVnp0UlFVTjJRbXBGTEZGQlFWRXNSVUZCUlZnc1MwRkJRU3hEUVVGTFZ5eFJRVUZUTzFGQlEzaENVU3hSUVVGUkxFVkJRVVZ1UWl4TFFVRkJMRU5CUVVzclJDeGpRVUZCUVR0QlFVRmxMRTlCUXk5Q0xFTkJRVU1zUTBGQlFUdExRVU5JTEVOQlFVRXNRMEZCUVR0QlFVRkJOVVFzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSV3RDTEd0Q1FVRkJMRVZCUVVFc1ZVRkJRelJGTEZWQlFWVXNSVUZCU3p0QlFVTnFReXhOUVVGQkxFbEJRVkZ5UWl4bFFVRmxMRWRCUVV0MlJDeExRVUZCTEVOQlFVdE5MRXRCUVVzc1EwRkJPVUpwUkN4bFFVRmxMRU5CUVVFN1FVRkRka0lzVFVGQlFTeEpRVUZKVXl4TlFVRk5MRWRCUVVjc1EwRkJRMmhGTEV0QlFVRXNRMEZCUzJsRkxHTkJRV01zUTBGQlF5eERRVUZEVml4bFFVRmxMRVZCUVVWeFFpeFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTJoRkxFMUJRVUVzU1VGQlNYSkNMR1ZCUVdVc1JVRkJSVHRSUVVOdVFsTXNUVUZCVFN4RFFVRkRhRVFzVDBGQlR5eERRVUZEYUVJc1MwRkJRU3hEUVVGTGEwVXNZMEZCWXl4RFFVRkRWU3hWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEycEVMRTlCUVVFN1FVRkRRU3hOUVVGQkxFOUJRVTlhTEUxQlFVMHNRMEZCUVR0TFFVTmtMRU5CUVVFc1EwRkJRVHRCUVVGQk4wUXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJWVXNWVUZCUVN4RlFVRkJMRlZCUVVNelRTeExRVUZMTEVWQlFVczdUVUZEY0VJeVRTeExRVUZCTEVOQlFVc3JSQ3hqUVVGakxFVkJRVVVzUTBGQlFUdEJRVU55UWl4TlFVRkJMRWxCUVVreFVTeExRVUZMTEV0QlFVc3lUU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOM1JTeExRVUZMTEVWQlFVVTdRVUZET1VJeVRTeFJRVUZCUVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTTRVaXhSUVVGUkxFTkJRVU4wVGl4TFFVRkxMRU5CUVVNc1EwRkJRVHRCUVVNMVFpeFBRVUZCTzB0QlEwUXNRMEZCUVN4RFFVRkJPMGxCUVVFNFRTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZaMElzWjBKQlFVRXNSVUZCUVN4WlFVRkJPMDFCUVVFc1QwRkRaa0VzUzBGQlFTeERRVUZMYzBJc1VVRkJVU3hEUVVGRE8wRkJRMXBwUXl4UlFVRkJRU3hsUVVGbExFVkJRVVVzUTBGQlEzWkVMRXRCUVVFc1EwRkJTMDBzUzBGQlN5eERRVUZEYVVRc1pVRkJRVUU3UVVGREwwSXNUMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkJRU3hMUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEVsQlFVRXNUMEZCUVhaRUxFdEJRVUVzUTBGQlFUdEJRVUZCTEVkQlFVRTdSVUZCUVRSQ0xGTkJRVUVzUTBGQlFXMUVMR0ZCUVVFc1JVRkJRV2hHTEdkQ1FVRkJMRU5CUVVFc1EwRkJRVHRGUVVGQkxFOUJRVUU0UWl4WlFVRkJMRU5CUVVGclJDeGhRVUZCTEVWQlFVRXNRMEZCUVR0SlFVRkJja29zUjBGQlFTeEZRVUZCTEZGQlFVRTdTVUZCUVM5UUxFdEJRVUVzUlVGRlNpeFRRVUZCWjFnc1RVRkJRVUVzUjBGQlV6dEJRVUZCTEUxQlFVRXNTVUZCUVhORExFMUJRVUVzUjBGQlFTeEpRVUZCTEVOQlFVRTdRVUZEVUN4TlFVRkJMRWxCUVUxTUxGVkJRVlVzUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU4wV0N4SFFVRkhMRU5CUXpORUxFbEJRVWtzUTBGQlEzVkNMRXRCUVVzc1EwRkJRM0ZYTEhWQ1FVRjFRaXhIUVVNNVFpeFZRVUZEUml4RFFVRkRMRVZCUVVFN1VVRkJRU3hQUVVGTFJ5eHhRa0ZCTWtJc1EwRkJRMGdzUTBGQlF5eEZRVUZGUXl4TlFVRkpMRU5CUVVOd1Z5eExRVUZMTEVOQlFVTjZReXhOUVVGTkxFTkJRVU1zUTBGQlFUdEJRVUZCTEU5QlFVRXNSMEZEZUVRc1ZVRkJRelJaTEVOQlFVTXNSVUZCUVR0UlFVRkJMRTlCUVV0SExHZENRVUZ6UWl4RFFVRkRTQ3hEUVVGRExFVkJRVVZETEUxQlFVa3NRMEZCUTNCWExFdEJRVXNzUTBGQlEzcERMRTFCUVUwc1EwRkJReXhEUVVGQk8wRkJRVUVzVDBGRGVrUXNRMEZCUXl4RFFVRkJPMEZCUlVRc1RVRkJRU3hKUVVGSmJWa3NaMEpCUVdkQ0xFTkJRVUU3UVVGRGNFSXNUVUZCUVN4UlFVRlJMRWxCUVVrc1EwRkJRekZXTEV0QlFVc3NRMEZCUXpKV0xGbEJRVms3UVVGRE4wSXNVVUZCUVN4TFFVRkxMRkZCUVZFN1FVRkRXRVFzVlVGQlFVRXNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeERRVUZEUlN4blFrRkJaMElzUTBGQlEwY3NWVUZCVlN4RFFVRkRMRU5CUVVFN1FVRkRjRVFzVlVGQlFTeE5RVUZCTzBGQlEwWXNVVUZCUVN4TFFVRkxMRkZCUVZFN1FVRkRXRXdzVlVGQlFVRXNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeERRVUZEUnl4blFrRkJaMElzUTBGQlEwVXNWVUZCVlN4RFFVRkRMRU5CUVVFN1FVRkRjRVFzVlVGQlFTeE5RVUZCTzBGQlEwb3NUMEZCUVR0TlFVVkJMRzlDUVVORmNFVXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBGQlEwVjBSU3hSUVVGQlFTeFRRVUZUTERSR1FVRkJOVTRzVFVGQlFTeERRVUUwUml4SlFVRkpMRU5CUVVOTkxFdEJRVXNzUTBGQlF6SldMRmxCUVZrc1EwRkJRVHRCUVVGSExFOUJRVUVzUlVGRk9VaEVMR2RDUVVORkxFTkJRVU1zUTBGQlFUdEJRVVZXTEV0QlFVRTdRVUZCUXl4SFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUVzUTBGdVIzZERMMFFzUTBGQlFVRXNTMEZCU3l4RFFVRkRkME1zVTBGQlV5eERRVUZCT3p0QlEwMHhSQ3hUUVVGVGIwTXNhMEpCUVd0Q1FTeERRVUZET1Zrc1QwRkJUeXhGUVVGRmVVZ3NUMEZCVHl4RlFVRkZPMFZCUXpWRExFbEJRVTAwVEN4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGQk8wRkJSV1lzUlVGQlFTeEpRVUZKTUVZc1VVRkJVU3hIUVVGSE0xVXNaVUZCWlN4RFFVRkRjRVVzVDBGQlR5eERRVUZETEVOQlFVRTdRVUZEZGtNc1JVRkJRU3hKUVVGTloxb3NVVUZCVVN4SFFVRkhOVlVzWlVGQlpTeERRVUZEY1VRc1QwRkJUeXhEUVVGRExFTkJRVUU3UVVGRmVrTXNSVUZCUVN4UFFVRlBMRU5CUVVOblN5eFBRVUZQTEVOQlFVTnpTQ3hSUVVGUkxFVkJRVVZETEZGQlFWRXNRMEZCUXl4RlFVRkZPMEZCUTI1RE0wWXNTVUZCUVVFc1NVRkJTU3hEUVVGRE4wUXNTVUZCU1N4RFFVRkRjRkVzVDBGQlR5eERRVUZETWxvc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlFUdEJRVVUxUWtFc1NVRkJRVUVzVVVGQlVTeEhRVUZIT1Uwc1UwRkJVeXhEUVVGRE9FMHNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMjVETEVkQlFVRTdRVUZEUVN4RlFVRkJMRTlCUVU4eFJpeEpRVUZKTEVOQlFVRTdRVUZEWWl4RFFVRkJPMEZCUVVNc1NVRkZiMEkwUml4M1FrRkJkMElzTUVKQlFVRjRSaXhuUWtGQlFTeEZRVUZCTzBWQldUTkRMRk5CUVVGM1JpeDNRa0ZCUVVFc1EwRkJXVEZYTEV0QlFVc3NSVUZCUlR0QlFVRkJMRWxCUVVFc1NVRkJRVzFTTEV0QlFVRXNRMEZCUVR0QlFVRkJReXhKUVVGQlFTeGxRVUZCTEU5QlFVRnpSaXgzUWtGQlFTeERRVUZCTEVOQlFVRTdRVUZEYWtKMlJpeEpRVUZCUVN4TFFVRkJMRWRCUVVGRkxGVkJRVUVzUTBGQlFYRkdMRWxCUVVGQkxFVkJRVUZCTEhkQ1FVRkJMRWRCUVUweFZ5eExRVUZMTEVOQlFVRXNRMEZCUVN4RFFVRkJPMGxCUVVWelVpeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hsUVVGQkxFVkJWVU1zV1VGQlRUdE5RVU53UWl4UFFVRlBRU3hMUVVGQkxFTkJRVXROTEV0QlFVc3NRMEZCUTJ0R0xHTkJRV01zUTBGQlEyeFpMRWRCUVVjc1EwRkJReXhWUVVGRGJWa3NVMEZCVXl4RlFVRkxPMEZCUTJ4RUxGRkJRVUVzU1VGQlRVTXNZMEZCWXl4SFFVRkhPVWNzVDBGQlR5eERRVUZETmtjc1UwRkJVeXhEUVVGRExFTkJRVUU3VVVGRGVrTXNTVUZCVFVVc1pVRkJaU3hIUVVOdVFuaFZMRlZCUVZVc1EwRkJRelpQTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyUXNTVUZCU1N4RlFVRkZNRmdzVTBGQlV5eERRVUZETEVsQlEzUkRiRlVzVjBGQlZ5eERRVUZEZVU4c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRaQ3hKUVVGSkxFVkJRVVV3V0N4VFFVRlRMRU5CUVVNc1EwRkJRVHRSUVVWNlF5eHZRa0ZEUldwR0xFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRVHRCUVVORmRFVXNWVUZCUVVFc1UwRkJVeXhGUVVOUWQwb3NaVUZCWlN4SFFVTllMREJFUVVFd1JDeEhRVU14UkN4eFEwRkRURHRCUVVORWFrc3NWVUZCUVVFc1IwRkJSeXhGUVVGRlowc3NZMEZCWlR0VlFVTndRbWhHTEU5QlFVOHNSVUZCUlZZc1MwRkJRU3hEUVVGTFZ5eFJRVUZSTEVOQlFVTkRMRWxCUVVrc1EwRkJRVm9zUzBGQlFTeEZRVUZQTUVZc1kwRkJZeXhEUVVGRk8xVkJRMnhFTEdWQlFXVkRMRVZCUVVGQkxHVkJRV1VzUjBGQlJ5eE5RVUZOTEVkQlFVYzNVaXhUUVVGQlFUdEJRVUZWTEZOQlFVRXNSVUZGYmtRMlVpeGxRVUZsTEdkQ1FVTmtia1lzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQk8wRkJRVTEwUlN4VlFVRkJRU3hUUVVGVExFVkJRVU1zSzBOQlFVRTdVMEZCWjBRc1JVRkJRU3hSUVVVeFJDeERRVUZETEVkQlJWQXNSVUZEUkN4RlFVTkJMMDhzVlVGQlZTeERRVUZEY1Zrc1UwRkJVeXhGUVVGRmVrWXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETVVNc1ZVRkJWU3hGUVVGRk5sUXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZWtNc1RVRkJUU3hEUVVNMVJDeERRVUZETEVOQlFVRTdRVUZGVml4UFFVRkRMRU5CUVVNc1EwRkJRVHRMUVVOSUxFTkJRVUVzUTBGQlFUdEJRVUZCSzFRc1NVRkJRVUVzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUlZVc1ZVRkJRU3hGUVVGQkxGVkJRVU41Uml4VFFVRlRMRVZCUVVFN1FVRkJRU3hOUVVGQkxFOUJRVXQ2Uml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTTRVaXhSUVVGUkxFTkJRVU00UlN4VFFVRlRMRU5CUVVNc1EwRkJRVHRCUVVGQkxFdEJRVUVzUTBGQlFTeERRVUZCTzBsQlFVRjBSaXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4dlFrRkJRU3hGUVVWdVF5eFpRVUZOTzBGQlEzcENRU3hOUVVGQlFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56VXl4UlFVRlJMRVZCUVVVc1EwRkJRVHRMUVVOMFFpeERRVUZCTEVOQlFVRTdTVUV6UTBOdVFpeExRVUZCTEVOQlFVdE5MRXRCUVVzc1IwRkJSenRCUVVOWWEwWXNUVUZCUVVFc1kwRkJZeXhGUVVGRlNpeHJRa0ZCYTBJc1EwRkRhRU53Uml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjJReXhQUVVGUExFVkJRMnhDTUZRc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRhMFlzVDBGRFlpeERRVUZCTzB0QlEwUXNRMEZCUVR0QlFVRkRMRWxCUVVFc1QwRkJRV2xOTEV0QlFVRXNRMEZCUVR0QlFVTktMRWRCUVVFN1JVRkJRelJDTEZOQlFVRXNRMEZCUVRKRUxIZENRVUZCTEVWQlFVRjRSaXhuUWtGQlFTeERRVUZCTEVOQlFVRTdSVUZCUVN4UFFVRkJPRUlzV1VGQlFTeERRVUZCTUVRc2QwSkJRVUVzUlVGQlFTeERRVUZCTzBsQlFVRTNTaXhIUVVGQkxFVkJRVUVzVVVGQlFUdEpRVUZCTDFBc1MwRkJRU3hGUVhWRFJDeFRRVUZCWjFnc1RVRkJRVUVzUjBGQlV6dE5RVU5RTEVsQlFVbERMR0ZCUVdFc1IwRkJSME1zU1VGQlNTeERRVUZETzBGQlEzWkNMRkZCUVVFc2RVTkJRWFZETEVWQlFVVXNTVUZCU1R0QlFVTTNReXhSUVVGQkxHMUVRVUZ0UkN4RlFVTnFSQ3hKUVVGSkxFTkJRVU5vVlN4TFFVRkxMRU5CUVVNclZ5d3lRa0ZCUVVFN1FVRkRaaXhQUVVGRExFTkJRVU1zUTBGQlFUdE5RVVZHTEc5Q1FVRlBjRVlzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8wRkJRVXQwUlN4UlFVRkJRU3hUUVVGVExFVkJRVVY1Unl4aFFVRkJRVHRCUVVGakxFOUJRVUVzUlVGQlJTeEpRVUZKTEVOQlFVTkhMR0ZCUVdFc1JVRkJVU3hEUVVGRExFTkJRVUU3UVVGRGNFVXNTMEZCUVR0QlFVRkRMRWRCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeERRWEJGYlVSMlF5eERRVUZCUVN4TFFVRkxMRU5CUVVOM1F5eFRRVUZUTEVOQlFVRTdPMEZEWW5KRkxFbEJRVWsyUXl3clFrRkJLMElzUjBGQlJ6TkRMR05CUVdNc1EwRkJRM0ZETEhkQ1FVRjNRaXhEUVVGRExFTkJRVUU3UVVGQlF5eEpRVVV4UkU4c2FVSkJRV2xDTERCQ1FVRkJMMFlzWjBKQlFVRXNSVUZCUVR0QlFVRkJMRVZCUVVFc1UwRkJRU3RHTEdsQ1FVRkJMRWRCUVVFN1FVRkJRU3hKUVVGQkxFbEJRVUU1Uml4TFFVRkJMRU5CUVVFN1FVRkJRVU1zU1VGQlFVRXNaVUZCUVN4UFFVRkJOa1lzYVVKQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUV4UXl4SlFVRkJMRWRCUVVGMlVDeFRRVUZCTEVOQlFVRm9SeXhOUVVGQkxFVkJRVUYzVml4SlFVRkJMRWRCUVVGNlZ5eEpRVUZCUVN4TFFVRkJMRU5CUVVGM1Z5eEpRVUZCTEVkQlFVRkZMRWxCUVVFc1IwRkJRU3hEUVVGQkxFVkJRVUZCTEVsQlFVRXNSMEZCUVVZc1NVRkJRU3hGUVVGQlJTeEpRVUZCTEVWQlFVRXNSVUZCUVR0QlFVRkJSQ3hOUVVGQlFTeEpRVUZCTEVOQlFVRkRMRWxCUVVFc1EwRkJRWHBRTEVkQlFVRkJMRk5CUVVFc1EwRkJRWGxRTEVsQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkJRVHRCUVVGQmRFUXNTVUZCUVVFc1MwRkJRU3hIUVVGQlJTeFZRVUZCTEVOQlFVRXNTVUZCUVN4RlFVRkJORVlzYVVKQlFVRXNSVUZCUVhaWUxFVkJRVUZCTEVOQlFVRkJMRTFCUVVFc1EwRkJRVGhWTEVsQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1NVRkJRV3hFTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVZrMVFpeFBRVUZCTEVWQlFVRTdRVUZEVG5WRUxFMUJRVUZCTEdWQlFXVXNSVUZCUlN4TFFVRkJPMHRCUTJ4Q0xFTkJRVUVzUTBGQlFUdEpRVUZCY0VRc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNjVUpCUVVFc1JVRkZjVUlzV1VGQlRUdE5RVU14UWl4SlFVRkpjVVlzVVVGQlVTeEhRVUZITTFVc1pVRkJaU3hEUVVGRGMxQXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZGtNc1QwRkJUeXhEUVVGRExFTkJRVUU3VFVGRGJFUXNTVUZCVFdkYUxGRkJRVkVzUjBGQlJ6VlZMR1ZCUVdVc1EwRkJRM05RTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEydEdMRTlCUVU4c1EwRkJReXhEUVVGQk8wMUJRM0JFTEVsQlFVMXpUU3hQUVVGUExFZEJRVWNzUlVGQlJTeERRVUZCTzBGQlJXeENMRTFCUVVFc1QwRkJUeXhEUVVGRGRFTXNUMEZCVHl4RFFVRkRjMGdzVVVGQlVTeEZRVUZGUXl4UlFVRlJMRU5CUVVNc1JVRkJSVHRCUVVOdVF5eFJRVUZCTEVsQlFVMVRMRk5CUVZNc1IwRkJSMjVJTEU5QlFVOHNRMEZCUTNsSExGRkJRVkVzUTBGQlF5eERRVUZCTzBGQlEyNURhRVlzVVVGQlFVRXNUMEZCVHl4RFFVRkRka1VzU1VGQlNTeGxRVU5XTUVVc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNVVUZCUVN4RlFVRkJPMEZCUVZFdlJTeFZRVUZCUVN4SFFVRkhMRVZCUVVWeFN5eFRRVUZWTzBGQlFVTndZU3hWUVVGQlFTeExRVUZMTEVWQlFVVnZZU3hUUVVGQlFUdEJRVUZWTEZOQlFVRXNSVUZEZEVNeldTeFZRVUZWTEVOQlFVTnBXU3hSUVVGUkxFVkJRVVZ5Uml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXhReXhWUVVGVkxFVkJRVVUyVkN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjZReXhOUVVGTkxFTkJRM2hFTEVOQlExWXNRMEZCUXl4RFFVRkJPMEZCUlVScFdpeFJRVUZCUVN4UlFVRlJMRWRCUVVjNVRTeFRRVUZUTEVOQlFVTTRUU3hSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEYmtNc1QwRkJRVHRCUVVWQkxFMUJRVUVzVDBGQlQyaEdMRTlCUVU4c1EwRkJRVHRMUVVObUxFTkJRVUVzUTBGQlFUdEJRVUZCUml4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGWjBJc1owSkJRVUVzUlVGQlFTeFZRVUZEZDBRc1EwRkJReXhGUVVGTE8wMUJRM1JDZUVRc1MwRkJRU3hEUVVGTFZ5eFJRVUZSTEVOQlFVTTJReXhEUVVGRExFTkJRVU5ETEUxQlFVMHNRMEZCUXpsWUxFdEJRVXNzUTBGQlF5eERRVUZCTzB0QlF6bENMRU5CUVVFc1EwRkJRVHRKUVVGQmQxVXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSV3RDTEd0Q1FVRkJMRVZCUVVFc1dVRkJRVHROUVVGQkxHOUNRVU5xUWxFc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNVVUZCUVN4RlFVRkJPMUZCUTBVNVZTeExRVUZMTEVWQlFVVnBWQ3hQUVVGUExFTkJRVU5zVHl4bFFVRmxMRU5CUVVOelVDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5rTEVsQlFVa3NRMEZCUXl4RFFVRkZPMEZCUTJwRWIwOHNVVUZCUVVFc1UwRkJVeXhGUVVGRExIRkRRVUZ4UXp0UlFVTXZRM2RGTEZGQlFWRXNSVUZCUlZnc1MwRkJRU3hEUVVGTE1FUXNZMEZCUVVFN1FVRkJaU3hQUVVGQkxFVkJSVGRDTVVRc1MwRkJRU3hEUVVGTE1rUXNiVUpCUVcxQ0xFVkJRMjVDTEVOQlFVTXNRMEZCUVR0TFFVTldMRU5CUVVFc1EwRkJRVHRCUVVGQmVFUXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJXZENMR2RDUVVGQkxFVkJRVUVzVlVGQlF6UkVMRTlCUVU4c1JVRkJTenROUVVNMVFpeEpRVUZOYjBNc1UwRkJVeXhIUVVGSE5Wa3NWVUZCVlN4RFFVTXhRalJUTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyUXNTVUZCU1N4RlFVTm1hVk1zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1VTXNWVUZCVlN4RlFVTnlRalpVTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzcERMRTFCUTJJc1EwRkJReXhEUVVGQk8wMUJSVVFzYjBKQlEwVnZWU3hMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4TFFVRkJMRVZCUVVFN1FVRkRSUzlGTEZGQlFVRkJMRWRCUVVjc1JVRkJReXhOUVVGTk8wRkJRMVp0U1N4UlFVRkJRU3hMUVVGTExFVkJRVVU3UVVGQlJVTXNWVUZCUVVFc1ZVRkJWU3hGUVVGRlJpeFBRVUZQTEVkQlFVY3NVMEZCVXl4SFFVRkhMRkZCUVVFN1UwRkJWenRCUVVOMFJIcElMRkZCUVVGQkxGTkJRVk1zUlVGQlF5eDNRMEZCZDBNN1VVRkRiRVIxUlN4UFFVRlBMRVZCUVVVc1UwRkJRVUVzVDBGQlFVRXNRMEZCUTI1Q0xFdEJRVXNzUlVGQlFUdEJRVUZCTEZWQlFVRXNUMEZCUzFNc1MwRkJRU3hEUVVGTEswUXNZMEZCWXl4RFFVRkRlRVVzUzBGQlN5eERRVUZETEVOQlFVRTdRVUZCUVN4VFFVRkJPMDlCUlRsRGFVSXNaVUZCUVVFc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNUVUZCUVN4RlFVRkJPMEZCUVUxMFJTeFJRVUZCUVN4VFFVRlRMRVZCUVVNc2IwUkJRVUU3UVVGQmIwUXNUMEZCUlN4RFFVRkRMR1ZCUTNaRmNVVXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTzBGQlFVMTBSU3hSUVVGQlFTeFRRVUZUTEVWQlFVTXNOa1JCUVVFN1QwRkRZalpLTEVWQlFVRkJMRk5CUTBjc1EwRkRTQ3hEUVVGRExFTkJRVUU3UzBGRlZDeERRVUZCTEVOQlFVRTdTVUZCUVRkR0xHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVm5RaXhuUWtGQlFTeEZRVUZCTEZsQlFVRTdRVUZCUVN4TlFVRkJMRzlDUVVObVVTeExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRMjlHTEN0Q1FVRXJRaXhGUVVGQk8wRkJRemxDYmtzc1VVRkJRVUVzUjBGQlJ5eEZRVUZETEZWQlFWVTdRVUZEWkROT0xGRkJRVUZCTEVsQlFVa3NSVUZCUldsVExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMlFzU1VGQlN6dEJRVU4wUWpWQ0xGRkJRVUZCTEZWQlFWVXNSVUZCUlRaVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekZETEZWQlFWYzdVVUZEYkVOM1ZTeFJRVUZSTEVWQlFVVllMRXRCUVVFc1EwRkJTMWNzVVVGQlV6dFJRVU40UWxFc1VVRkJVU3hGUVVGRmJrSXNTMEZCUVN4RFFVRkxLMFFzWTBGQlpUdEJRVU01UW5wWUxGRkJRVUZCTEU5QlFVOHNSVUZCUlRCVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM1pETEU5QlFWRTdRVUZETlVKNVNDeFJRVUZCUVN4UFFVRlBMRVZCUVVWcFRTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5yUml4UFFVRlJPMEZCUXpWQ05sSXNVVUZCUVVFc01rSkJRVEpDTEVWQlFVVTFSaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNclZ5d3lRa0ZCTkVJN1FVRkRjRVY0V2l4UlFVRkJRU3hOUVVGTkxFVkJRVVUwVkN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjZReXhOUVVGQlFUdEJRVUZQTEU5QlF6TkNMRU5CUVVNc1EwRkJRVHRMUVVOSUxFTkJRVUVzUTBGQlFUdEpRVUZCSzFRc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNhMEpCUVVFc1JVRkZhMElzV1VGQlRUdEJRVU4yUWl4TlFVRkJMRWxCUVZGMVJDeGxRVUZsTEVkQlFVdDJSQ3hMUVVGQkxFTkJRVXROTEV0QlFVc3NRMEZCT1VKcFJDeGxRVUZsTEVOQlFVRTdUVUZEZGtJc1NVRkJTVk1zVFVGQlRTeEhRVUZITEVOQlFVTm9SU3hMUVVGQkxFTkJRVXRwUlN4alFVRmpMRU5CUVVNc1EwRkJRMVlzWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTndSQ3hOUVVGQkxFbEJRVWxCTEdWQlFXVXNSVUZCUlR0UlFVTnVRbE1zVFVGQlRTeERRVUZEYUVRc1QwRkJUeXhEUVVGRGFFSXNTMEZCUVN4RFFVRkxhMFVzWTBGQll5eEZRVUZGTEVOQlFVTXNRMEZCUVR0QlFVTjJReXhQUVVGQk8wRkJRMEVzVFVGQlFTeFBRVUZQUml4TlFVRk5MRU5CUVVFN1MwRkRaQ3hEUVVGQkxFTkJRVUU3UVVGQlFUZEVMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVlZMRlZCUVVFc1JVRkJRU3hWUVVGRE1FWXNZMEZCWXl4RlFVRkxPMDFCUXpkQ01VWXNTMEZCUVN4RFFVRkxLMFFzWTBGQll5eEZRVUZGTEVOQlFVRTdUVUZGY2tJc1NVRkJUV3RETEZkQlFWY3NSMEZCUjNaaExFOUJRVThzUTBGQlEzZGhMRkZCUVZFc1EwRkJRMUlzWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUVR0TlFVVnlSQ3hKUVVORmRsVXNWVUZCVlN4RFFVRkROazhzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFpDeEpRVUZKTEVWQlFVVnJXU3hYUVVGWExFTkJRVU1zU1VGRGVFTXhWU3hYUVVGWExFTkJRVU41VHl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTmtMRWxCUVVrc1JVRkJSV3RaTEZkQlFWY3NRMEZCUXl4RlFVTjZRenRCUVVOQkxGRkJRVUVzVDBGQlFUdEJRVU5HTEU5QlFVRTdRVUZGUVdwSExFMUJRVUZCTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6aFNMRkZCUVZFc1EwRkJRM05HTEZkQlFWY3NRMEZCUXl4RFFVRkJPMHRCUTJwRExFTkJRVUVzUTBGQlFUdEpRVUZCT1VZc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJXZENMR2RDUVVGQkxFVkJRVUVzV1VGQlFUdE5RVUZCTEU5QlEyWkJMRXRCUVVFc1EwRkJTM05DTEZGQlFWRXNRMEZCUXp0QlFVTmFhVU1zVVVGQlFVRXNaVUZCWlN4RlFVRkZMRU5CUVVOMlJDeExRVUZCTEVOQlFVdE5MRXRCUVVzc1EwRkJRMmxFTEdWQlFVRkJPMEZCUXk5Q0xFOUJRVU1zUTBGQlF5eERRVUZCTzBGQlFVRXNTMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hKUVVGQkxFOUJRVUYyUkN4TFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVGQk8wVkJRVUUwUWl4VFFVRkJMRU5CUVVGclJTeHBRa0ZCUVN4RlFVRkJMMFlzWjBKQlFVRXNRMEZCUVN4RFFVRkJPMFZCUVVFc1QwRkJRVGhDTEZsQlFVRXNRMEZCUVdsRkxHbENRVUZCTEVWQlFVRXNRMEZCUVR0SlFVRkJjRXNzUjBGQlFTeEZRVUZCTEZGQlFVRTdTVUZCUVM5UUxFdEJRVUVzUlVGRlNpeFRRVUZCWjFnc1RVRkJRVUVzUjBGQlV6dEJRVU5RTEUxQlFVRXNTVUZCU1RSQ0xHZENRVUZuUWl4RFFVRkJPMEZCUTNCQ0xFMUJRVUVzVVVGQlVTeEpRVUZKTEVOQlFVTXhWaXhMUVVGTExFTkJRVU15Vml4WlFVRlpPMEZCUXpkQ0xGRkJRVUVzUzBGQlN5eFJRVUZSTzBGQlExaEVMRlZCUVVGQkxHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1EwRkJRMFVzWjBKQlFXZENMRVZCUVVVc1EwRkJRVHRCUVVNeFF5eFZRVUZCTEUxQlFVRTdRVUZEUml4UlFVRkJMRXRCUVVzc1VVRkJVVHRCUVVOWVJpeFZRVUZCUVN4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTkhMR2RDUVVGblFpeEZRVUZGTEVOQlFVRTdRVUZETVVNc1ZVRkJRU3hOUVVGQk8wRkJRMG9zVDBGQlFUdE5RVVZCTEc5Q1FVTkZiRVVzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8wRkJRMFYwUlN4UlFVRkJRU3hUUVVGVExITkhRVUZCTlU0c1RVRkJRU3hEUVVGelJ5eEpRVUZKTEVOQlFVTk5MRXRCUVVzc1EwRkJRekpXTEZsQlFWa3NRMEZCUVR0QlFVRkhMRTlCUVVFc1JVRkZlRWxFTEdkQ1FVTkZMRU5CUVVNc1EwRkJRVHRCUVVWV0xFdEJRVUU3UVVGQlF5eEhRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1EwRndTVFJETDBRc1EwRkJRVUVzUzBGQlN5eERRVUZEZDBNc1UwRkJVeXhEUVVGQk96dEJRME40UXl4SlFVVkViVVFzUjBGQlJ5d3dRa0ZCUVhCSExHZENRVUZCTEVWQlFVRTdRVUZCUVN4RlFVRkJMRk5CUVVGdlJ5eEhRVUZCTEVkQlFVRTdRVUZCUVN4SlFVRkJMRWxCUVVGdVJ5eExRVUZCTEVOQlFVRTdRVUZCUVVNc1NVRkJRVUVzWlVGQlFTeFBRVUZCYTBjc1IwRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVM5RExFbEJRVUVzUjBGQlFYWlFMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNSVUZCUVhkV0xFbEJRVUVzUjBGQlFYcFhMRWxCUVVGQkxFdEJRVUVzUTBGQlFYZFhMRWxCUVVFc1IwRkJRVVVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSVUZCUVVFc1NVRkJRU3hIUVVGQlJpeEpRVUZCTEVWQlFVRkZMRWxCUVVFc1JVRkJRU3hGUVVGQk8wRkJRVUZFTEUxQlFVRkJMRWxCUVVFc1EwRkJRVU1zU1VGQlFTeERRVUZCZWxBc1IwRkJRVUVzVTBGQlFTeERRVUZCZVZBc1NVRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeExRVUZCTzBGQlFVRjBSQ3hKUVVGQlFTeExRVUZCTEVkQlFVRkZMRlZCUVVFc1EwRkJRU3hKUVVGQkxFVkJRVUZwUnl4SFFVRkJMRVZCUVVFMVdDeEZRVUZCUVN4RFFVRkJRU3hOUVVGQkxFTkJRVUU0VlN4SlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUZzUkN4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4UFFVRkJMR1ZCTkVSa1VTeExRVUZMTEVOQlFVTnRRaXhUUVVGVExFVkJRVVVzUTBGQlFTeERRVUZCTzBGQlFVRjRRaXhKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZXQ3hoUVVGQkxFVkJRVUVzVlVGQlExUXNTMEZCU3l4RlFVRkxPMEZCUTNaQ0xFMUJRVUVzU1VGQlNTeERRVUZEVXl4TFFVRkJMRU5CUVV0dlJ5eFZRVUZWTEVWQlFVVXNTVUZCU1hCSExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelpTTEU5QlFVOHNSVUZCUlR0QlFVTTFRMVlzVVVGQlFVRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETmxJc1QwRkJUeXhEUVVGRGJrSXNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkRNMElzVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0QlFVRkJXU3hKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZhMElzYTBKQlFVRXNSVUZCUVN4VlFVRkRWQ3hMUVVGTExFVkJRVXM3UVVGRE5VSXNUVUZCUVN4SlFVRkpMRU5CUVVOVExFdEJRVUVzUTBGQlMyOUhMRlZCUVZVc1JVRkJSU3hKUVVGSmNFY3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZDFnc1dVRkJXU3hGUVVGRk8wRkJRMnBFY2tjc1VVRkJRVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGQxZ3NXVUZCV1N4RFFVRkRPVWNzUzBGQlN5eERRVUZETEVOQlFVRTdRVUZEYUVNc1QwRkJRVHRMUVVORUxFTkJRVUVzUTBGQlFUdEJRVUZCV1N4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGYVVJc2FVSkJRVUVzUlVGQlFTeFZRVUZEVkN4TFFVRkxMRVZCUVVzN1FVRkRNMElzVFVGQlFTeEpRVUZOSzBjc1VVRkJVU3hIUVVGSEwwY3NTMEZCU3l4RFFVRkROMFFzUjBGQlJ5eERRVUZCTzAxQlF6RkNMRWxCUVVrMFN5eFJRVUZSTEV0QlFVc3NSMEZCUnl4RlFVRkZPMUZCUTNCQ0wwY3NTMEZCU3l4RFFVRkRaMGdzWTBGQll5eEZRVUZGTEVOQlFVRTdVVUZEZEVKb1NDeExRVUZMTEVOQlFVTTNSQ3hIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZCTzBGQlEzSkNMRTlCUVVFN1FVRkZRWE5GTEUxQlFVRkJMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpKWUxHVkJRV1VzUTBGQlEycElMRXRCUVVzc1EwRkJReXhEUVVGQk8wdEJRMnhETEVOQlFVRXNRMEZCUVR0QlFVRkJXU3hKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZWeXhYUVVGQkxFVkJRVUVzVlVGQlEzbEhMRXRCUVVzc1JVRkJRVHROUVVGQkxFOUJRVXM1VlN4VFFVRlRMRU5CUVVOeFR5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56UWl4SFFVRkhMRVZCUVVWelZ5eExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVRkJMRXRCUVVFc1EwRkJRU3hEUVVGQk8wbEJRVUYwUnl4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGQlFTeHZRa0ZCUVN4RlFVVnNReXhaUVVGTk8wRkJRVUVzVFVGQlFTeEpRVUZCTUVjc2NVSkJRVUVzUTBGQlFUdEJRVU42UWl4TlFVRkJMRWxCUVVreFJ5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU00V0N3d1FrRkJNRUlzUlVGQlJUdEJRVU42UXl4UlFVRkJMRTlCUVU4c1MwRkJTeXhEUVVGQk8wRkJRMlFzVDBGQlFUdE5RVVZCTEVsQlFVMURMR05CUVdNc1IwRkJSelZITEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyZFpMR1ZCUVdVc1IwRkJRVWdzUTBGQlFVRXNjVUpCUVVFc1IwRkROME14Unl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnBXU3hoUVVGaExFMUJRVUVzU1VGQlFTeEpRVUZCU2l4eFFrRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRjRRa0VzY1VKQlFVRXNRMEZCTUVKd1V5eEpRVUZKTEVOQlFVTXNWVUZCUTNaSExFbEJRVWtzUlVGQlFUdEJRVUZCTEZGQlFVRXNUMEZCUzJsVExFdEJRVUVzUTBGQlN5dEhMR1ZCUVdVc1EwRkJRMmhhTEVsQlFVa3NRMEZCUXl4RFFVRkJPMDlCUVVNc1EwRkJRU3hIUVVOd1JXbFRMRXRCUVVFc1EwRkJTeXRITEdWQlFXVXNRMEZCUXk5SExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjFaTEZGQlFWRXNRMEZCUXl4RFFVRkJPMEZCUlRkRExFMUJRVUVzVDBGQlR5eERRVUZEU2l4alFVRmpMRWxCUVVrMVJ5eExRVUZCTEVOQlFVc3JSeXhsUVVGbExFTkJRVU12Unl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZXU3haUVVGWkxFTkJRVU1zUTBGQlFUdExRVU40UlN4RFFVRkJMRU5CUVVFN1NVRkJRVGxITEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWWkxGbEJRVUVzUlVGQlFTeFpRVUZCTzAxQlFVRXNUMEZCVFhKTkxHRkJRV0VzUTBGQlEzRk5MRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNOQ0xFZEJRVWNzUlVGQlJUWlFMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUVVFc1MwRkJRU3hEUVVGQkxFTkJRVUU3U1VGQlFYTlNMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVVV2UXl4WlFVRkJMRVZCUVVFc1dVRkJRVHROUVVGQkxFOUJRVTF5VEN4aFFVRmhMRU5CUVVOeFRDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56UWl4SFFVRkhMRVZCUVVVMlVDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJPMGxCUVVGelVpeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZOVU1zWlVGQlFTeEZRVUZCTEZsQlFVRTdRVUZCUVN4TlFVRkJMRTlCUTJSeVR5eFRRVUZUTEVOQlExQnhUeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOelFpeEhRVUZITEVWQlEyUkhMR05CUVdNc1EwRkRXakJRTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzTkNMRWRCUVVjc1JVRkRaRFpRTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzcERMRTFCUVUwc1JVRkRha0kwVkN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXdRaXhuUWtGRFlpeERRVU5HTEVOQlFVTXNRMEZCUVR0QlFVRkJMRXRCUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUUwVUN4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGVlN4WlFVRkJMRVZCUVVFc1ZVRkJRM2xITEV0QlFVc3NSVUZCUVR0QlFVRkJMRTFCUVVFc1QwRkRha0o2Unl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhXU3hqUVVGakxFbEJRM3BDZGxZc1UwRkJVeXhEUVVOUU9GVXNTMEZCU3l4RlFVTk1ibGNzWTBGQll5eERRVU5hTUZBc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjMElzUjBGQlJ5eEZRVU5rTmxBc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRla01zVFVGQlRTeEZRVU5xUWpSVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekJDTEdkQ1FVTmlMRU5CUTBZc1EwRkJReXhEUVVGQk8wRkJRVUVzUzBGQlFTeERRVUZCTEVOQlFVRTdRVUZCUVRSUUxFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWbExHbENRVUZCTEVWQlFVRXNWVUZCUTNsSExFdEJRVXNzUlVGQlFUdEJRVUZCTEUxQlFVRXNUMEZCUzNwSExFdEJRVUVzUTBGQlMzSlBMRk5CUVZNc1EwRkJRemhWTEV0QlFVc3NRMEZCUXl4SlFVRkpla2NzUzBGQlFTeERRVUZMYlVnc1ZVRkJWU3hEUVVGRFZpeExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVRkJMRXRCUVVFc1EwRkJRU3hEUVVGQk8wbEJRVUYwUnl4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGQlFTeHhRa0ZCUVN4RlFVVjBSQ3haUVVGTk8wRkJRekZDTEUxQlFVRXNTVUZCUVc5SUxGZEJRVUVzUjBGQlowTndTQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxPMUZCUVd4RGMwSXNSMEZCUnl4SFFVRkJhVmdzVjBGQlFTeERRVUZJYWxnc1IwRkJSenRSUVVGRkswc3NZMEZCWXl4SFFVRkJhMDBzVjBGQlFTeERRVUZrYkUwc1kwRkJZeXhEUVVGQk8wMUJSVE5DTEVsQlFVa3NRMEZCUTBFc1kwRkJZeXhGUVVGRk8wRkJRMjVDTEZGQlFVRXNUMEZCVHl4TFFVRkxMRU5CUVVFN1FVRkRaQ3hQUVVGQk96dEJRVVZCTzBGQlEwRXNUVUZCUVN4SlFVRk5iVTBzVFVGQlRTeEhRVUZIYW1Fc1ZVRkJWU3hEUVVGREswTXNSMEZCUnl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGQk8wRkJRelZETEUxQlFVRXNUMEZCVHl0TExHTkJRV01zUTBGQlExVXNSMEZCUnl4RFFVRkRlVXdzVFVGQlRTeERRVUZETEVOQlFVRTdTMEZEYkVNc1EwRkJRU3hEUVVGQk8wRkJSVVE3U1VGQlFXeElMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVUZCTEd0Q1FVRkJMRVZCUTIxQ0xGbEJRVTA3UVVGRGRrSXNUVUZCUVN4SlFVRkJjMGdzV1VGQlFTeEhRVUV3UW5SSUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzN1VVRkJOVUp6UWl4SFFVRkhMRWRCUVVGdFdDeFpRVUZCTEVOQlFVaHVXQ3hIUVVGSE8xRkJRVVZ2V0N4UlFVRlJMRWRCUVVGRUxGbEJRVUVzUTBGQlVrTXNVVUZCVVN4RFFVRkJPMDFCUTNKQ0xFbEJRVWtzUTBGQlEwRXNVVUZCVVN4RlFVRkZPMEZCUTJJc1VVRkJRU3hQUVVGUExFdEJRVXNzUTBGQlFUdEJRVU5rTEU5QlFVRTdRVUZEUVN4TlFVRkJMRWxCUVUxR0xFMUJRVTBzUjBGQlIycGhMRlZCUVZVc1EwRkJReXRETEVkQlFVY3NSVUZCUlN4WlFVRlpMRU5CUVVNc1EwRkJRVHRCUVVNMVF6dEJRVU5CTEUxQlFVRXNTVUZCU1c5WUxGRkJRVkVzUTBGQlEwTXNSMEZCUnl4RFFVRkRTQ3hOUVVGTkxFTkJRVU1zUlVGQlJUdFJRVU40UWl4UFFVRlBMRU5CUVVORkxGRkJRVkVzUTBGQlF6Tk1MRWRCUVVjc1EwRkJRM2xNTEUxQlFVMHNRMEZCUXl4RFFVRkRiRXdzVTBGQlV5eERRVUZETEVOQlFVRTdRVUZEZWtNc1QwRkJRVHRMUVVORUxFTkJRVUVzUTBGQlFUdEpRVUZCWjBVc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNWMEZCUVN4RlFVVlhMRmxCUVUwN1FVRkRhRUlzVFVGQlFTeEpRVUZCZVVnc1dVRkJRU3hIUVVGdlEzcElMRXRCUVVFc1EwRkJTMjVTTEV0QlFVczdVVUZCZEVOelFpeEhRVUZITEVkQlFVRnpXQ3haUVVGQkxFTkJRVWgwV0N4SFFVRkhPMUZCUVVWNFFpeFRRVUZUTEVkQlFVRTRXU3haUVVGQkxFTkJRVlE1V1N4VFFVRlRPMUZCUVVWRExFOUJRVThzUjBGQlFUWlpMRmxCUVVFc1EwRkJVRGRaTEU5QlFVOHNRMEZCUVR0QlFVTXZRaXhOUVVGQkxFbEJRVWtzUTBGQlEwUXNVMEZCVXl4SlFVRkpMRU5CUVVORExFOUJRVThzUlVGQlJUdEJRVU14UWl4UlFVRkJMRTlCUVU4c1MwRkJTeXhEUVVGQk8wRkJRMlFzVDBGQlFUdEJRVU5CTEUxQlFVRXNUMEZCVDIxRUxGbEJRVmtzUTBGQlF6VkNMRWRCUVVjc1JVRkJSWGhDTEZOQlFWTXNSVUZCUlVNc1QwRkJUeXhEUVVGRExFTkJRVUU3UzBGRE4wTXNRMEZCUVN4RFFVRkJPMGxCUVVGMVVpeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3h2UWtGQlFTeEZRVVZ2UWl4WlFVRk5PMEZCUVVFc1RVRkJRU3hKUVVGQk1FZ3NjVUpCUVVFc1EwRkJRVHRCUVVONlFpeE5RVUZCTEVsQlFVRkRMRmxCUVVFc1IwRlJTVE5JTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXM3VVVGUVduTkNMRWRCUVVjc1IwRkJRWGRZTEZsQlFVRXNRMEZCU0hoWUxFZEJRVWM3VVVGRFNIbFlMRmxCUVZrc1IwRkJRVVFzV1VGQlFTeERRVUZhUXl4WlFVRlpPMUZCUTFwRExGVkJRVlVzUjBGQlFVWXNXVUZCUVN4RFFVRldSU3hWUVVGVk8xRkJRMVpETEZsQlFWa3NSMEZCUVVnc1dVRkJRU3hEUVVGYVJ5eFpRVUZaTzFGQlExcERMREJDUVVFd1FpeEhRVUZCU2l4WlFVRkJMRU5CUVRGQ1NTd3dRa0ZCTUVJN1VVRkRNVUp3V2l4VFFVRlRMRWRCUVVGbldpeFpRVUZCTEVOQlFWUm9XaXhUUVVGVE8xRkJRMVJETEU5QlFVOHNSMEZCUVN0WkxGbEJRVUVzUTBGQlVDOVpMRTlCUVU4c1EwRkJRVHRCUVVkVUxFMUJRVUVzU1VGQlRXOWFMR0ZCUVdFc1IwRkJRVTRzUTBGQlFVRXNjVUpCUVVFc1IwRkJSekZJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMWFMR0ZCUVdFc1RVRkJRVTRzU1VGQlFVRXNTVUZCUVVFc2NVSkJRVUVzWTBGQlFVRXNjVUpCUVVFc1IwRkJTVEZJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyOVpMRmxCUVZrc1EwRkJRVHRCUVVWNlJTeE5RVUZCTEVsQlEwVXNSVUZCUlZjc1dVRkJXU3hKUVVGSlF5eFZRVUZWTEVsQlFVbERMRmxCUVZrc1EwRkJReXhKUVVNM1F5eERRVUZEUlN4aFFVRmhMRWxCUTJJc1EwRkJRMFFzTUVKQlFUQkNMRWxCUVVrdlNDeExRVUZCTEVOQlFVdHZSeXhWUVVGVkxFVkJRVWNzUlVGRGJFUTdRVUZEUVN4UlFVRkJMRTlCUVU4c1MwRkJTeXhEUVVGQk8wRkJRMlFzVDBGQlFUdEJRVVZCTEUxQlFVRXNTVUZEUlhkQ0xGbEJRVmtzU1VGRFdtaGFMRTlCUVU4c1MwRkRUbGdzVVVGQlVTeERRVUZESzFvc1lVRkJZU3hGUVVGRmNGb3NUMEZCVHl4RFFVRkRMRWxCUVVscFJDeFBRVUZQTEVOQlFVTnRWeXhoUVVGaExFVkJRVVZ3V2l4UFFVRlBMRU5CUVVNc1EwRkJReXhGUVVOeVJUdEJRVU5CTEZGQlFVRXNUMEZCVDIxRUxGbEJRVmtzUTBGQlF6VkNMRWRCUVVjc1JVRkJSVFpZTEdGQlFXRXNSVUZCUlhCYUxFOUJRVThzUTBGQlF5eERRVUZCTzBGQlEyeEVMRTlCUVVFN1FVRkZRU3hOUVVGQkxFbEJRMFZwV2l4VlFVRlZMRWxCUTFac1dpeFRRVUZUTEV0QlExSnZVQ3hQUVVGUExFTkJRVU5wU3l4aFFVRmhMRVZCUVVWeVdpeFRRVUZUTEVOQlFVTXNTVUZCU1d0RUxFOUJRVThzUTBGQlEyMVhMR0ZCUVdFc1JVRkJSWEphTEZOQlFWTXNRMEZCUXl4RFFVRkRMRVZCUTNoRk8wRkJRMEVzVVVGQlFTeFBRVUZQYjBRc1dVRkJXU3hEUVVGRE5VSXNSMEZCUnl4RlFVRkZlRUlzVTBGQlV5eEZRVUZGY1Zvc1lVRkJZU3hEUVVGRExFTkJRVUU3UVVGRGNFUXNUMEZCUVR0TlFVVkJMRWxCUTBWR0xGbEJRVmtzU1VGRFdtNWFMRk5CUVZNc1NVRkRWQ3hEUVVGRFF5eFBRVUZQTEV0QlExQnRVQ3hQUVVGUExFTkJRVU5wU3l4aFFVRmhMRVZCUVVWeVdpeFRRVUZUTEVOQlFVTXNTVUZCU1d0RUxFOUJRVThzUTBGQlEyMVhMR0ZCUVdFc1JVRkJSWEphTEZOQlFWTXNRMEZCUXl4RFFVRkRMRVZCUTNoRk8wRkJRMEVzVVVGQlFTeFBRVUZQYjBRc1dVRkJXU3hEUVVGRE5VSXNSMEZCUnl4RlFVRkZlRUlzVTBGQlV5eEZRVUZGY1Zvc1lVRkJZU3hEUVVGRExFTkJRVUU3UVVGRGNFUXNUMEZCUVR0QlFVVkJMRTFCUVVFc1QwRkJUeXhMUVVGTExFTkJRVUU3UzBGRFlpeERRVUZCTEVOQlFVRTdTVUZCUVRkSUxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMSFZDUVVGQkxFVkJSWFZDTEZsQlFVMDdRVUZCUVN4TlFVRkJMRWxCUVVGcFNTeHpRa0ZCUVN4RFFVRkJPMEZCUXpWQ0xFMUJRVUVzU1VGQlNTeERRVUZEYWtrc1MwRkJRU3hEUVVGTGEwa3NhMEpCUVd0Q0xFVkJRVVVzUlVGQlJUdEJRVU01UWl4UlFVRkJMRTlCUVU4c1MwRkJTeXhEUVVGQk8wRkJRMlFzVDBGQlFUdEJRVVZCTEUxQlFVRXNTVUZCUVVNc1dVRkJRU3hIUVVGNVEyNUpMRXRCUVVFc1EwRkJTMjVTTEV0QlFVczdVVUZCTTBOelFpeEhRVUZITEVkQlFVRm5XU3haUVVGQkxFTkJRVWhvV1N4SFFVRkhPMUZCUVVWNFFpeFRRVUZUTEVkQlFVRjNXaXhaUVVGQkxFTkJRVlI0V2l4VFFVRlRPMUZCUVVWcFdpeFpRVUZaTEVkQlFVRlBMRmxCUVVFc1EwRkJXbEFzV1VGQldTeERRVUZCTzBGQlEzQkRMRTFCUVVFc1NVRkJUVWtzWVVGQllTeEhRVUZCUXl4RFFVRkJRU3h6UWtGQlFTeEhRVUZIYWtrc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiVm9zWVVGQllTeE5RVUZCUXl4SlFVRkJRU3hKUVVGQlFTeHpRa0ZCUVN4alFVRkJRU3h6UWtGQlFTeEhRVUZKYWtrc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiMWtzV1VGQldTeERRVUZCTzBGQlJYcEZMRTFCUVVFc1NVRkJTVmNzV1VGQldTeEZRVUZGTzBGQlEyaENMRkZCUVVFc1QwRkJUMnBYTEZOQlFWTXNRMEZCUTNoQ0xFZEJRVWNzUlVGQlJUWllMR0ZCUVdFc1EwRkJReXhEUVVGQk8wRkJRM1JETEU5QlFVTXNUVUZCVFR0QlFVTk1MRkZCUVVFc1QwRkJUM0pYTEZOQlFWTXNRMEZCUTNoQ0xFZEJRVWNzUlVGQlJYaENMRk5CUVZNc1EwRkJReXhEUVVGQk8wRkJRMnhETEU5QlFVRTdTMEZEUkN4RFFVRkJMRU5CUVVFN1NVRkJRWGRTTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxIRkNRVUZCTEVWQlJYRkNMRmxCUVUwN1FVRkJRU3hOUVVGQkxFbEJRVUZ2U1N4elFrRkJRU3hEUVVGQk8wRkJRekZDTEUxQlFVRXNTVUZCU1N4RFFVRkRjRWtzUzBGQlFTeERRVUZMYTBrc2EwSkJRV3RDTEVWQlFVVXNSVUZCUlR0QlFVTTVRaXhSUVVGQkxFOUJRVThzUzBGQlN5eERRVUZCTzBGQlEyUXNUMEZCUVR0QlFVVkJMRTFCUVVFc1NVRkJRVWNzV1VGQlFTeEhRVUZ0UkhKSkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzN1VVRkJja1J6UWl4SFFVRkhMRWRCUVVGcldTeFpRVUZCTEVOQlFVaHNXU3hIUVVGSE8xRkJRVVYyUWl4UFFVRlBMRWRCUVVGNVdpeFpRVUZCTEVOQlFWQjZXaXhQUVVGUE8xRkJRVVZwV2l4VlFVRlZMRWRCUVVGUkxGbEJRVUVzUTBGQlZsSXNWVUZCVlR0UlFVRkZReXhaUVVGWkxFZEJRVUZQTEZsQlFVRXNRMEZCV2xBc1dVRkJXU3hEUVVGQk8wRkJRemxETEUxQlFVRXNTVUZCVFVVc1lVRkJZU3hIUVVGQlNTeERRVUZCUVN4elFrRkJRU3hIUVVGSGNFa3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYlZvc1lVRkJZU3hOUVVGQlNTeEpRVUZCUVN4SlFVRkJRU3h6UWtGQlFTeGpRVUZCUVN4elFrRkJRU3hIUVVGSmNFa3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjFrc1dVRkJXU3hEUVVGQk8wMUJSWHBGTEVsQlFVbFpMRlZCUVZVc1NVRkJTVU1zV1VGQldTeEZRVUZGTzBGQlF6bENMRkZCUVVFc1QwRkJUMjVYTEZOQlFWTXNRMEZCUTNoQ0xFZEJRVWNzUlVGQlJUWllMR0ZCUVdFc1EwRkJReXhEUVVGQk8wRkJRM1JETEU5QlFVTXNUVUZCVFR0QlFVTk1MRkZCUVVFc1QwRkJUM0pYTEZOQlFWTXNRMEZCUTNoQ0xFZEJRVWNzUlVGQlJYWkNMRTlCUVU4c1EwRkJReXhEUVVGQk8wRkJRMmhETEU5QlFVRTdTMEZEUkN4RFFVRkJMRU5CUVVFN1NVRkJRWFZTTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxHTkJRVUVzUlVGRll5eFpRVUZOTzBGQlEyNUNMRTFCUVVFc1NVRkJRWE5KTEZsQlFVRXNSMEZCYjBOMFNTeExRVUZCTEVOQlFVdHVVaXhMUVVGTE8xRkJRWFJEYzBJc1IwRkJSeXhIUVVGQmJWa3NXVUZCUVN4RFFVRklibGtzUjBGQlJ6dFJRVUZGZUVJc1UwRkJVeXhIUVVGQk1sb3NXVUZCUVN4RFFVRlVNMW9zVTBGQlV6dFJRVUZGUXl4UFFVRlBMRWRCUVVFd1dpeFpRVUZCTEVOQlFWQXhXaXhQUVVGUExFTkJRVUU3UVVGREwwSXNUVUZCUVN4SlFVRkpMRU5CUVVORUxGTkJRVk1zU1VGQlNTeERRVUZEUXl4UFFVRlBMRVZCUVVVN1FVRkRNVUlzVVVGQlFTeFBRVUZQTEV0QlFVc3NRMEZCUVR0QlFVTmtMRTlCUVVFN1FVRkRRU3hOUVVGQkxFOUJRVThyUXl4VFFVRlRMRU5CUVVOb1JDeFRRVUZUTEVWQlFVVjNRaXhIUVVGSExFTkJRVU1zUTBGQlFUdExRVU5xUXl4RFFVRkJMRU5CUVVFN1NVRkJRV2RSTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxGbEJRVUVzUlVGRldTeFpRVUZOTzBGQlEycENMRTFCUVVFc1NVRkJRWFZKTEZsQlFVRXNSMEZCYjBOMlNTeExRVUZCTEVOQlFVdHVVaXhMUVVGTE8xRkJRWFJEYzBJc1IwRkJSeXhIUVVGQmIxa3NXVUZCUVN4RFFVRkljRmtzUjBGQlJ6dFJRVUZGZUVJc1UwRkJVeXhIUVVGQk5Gb3NXVUZCUVN4RFFVRlVOVm9zVTBGQlV6dFJRVUZGUXl4UFFVRlBMRWRCUVVFeVdpeFpRVUZCTEVOQlFWQXpXaXhQUVVGUExFTkJRVUU3UVVGREwwSXNUVUZCUVN4SlFVRkpMRU5CUVVORUxGTkJRVk1zU1VGQlNTeERRVUZEUXl4UFFVRlBMRVZCUVVVN1FVRkRNVUlzVVVGQlFTeFBRVUZQTEV0QlFVc3NRMEZCUVR0QlFVTmtMRTlCUVVFN1FVRkRRU3hOUVVGQkxFOUJRVThyUXl4VFFVRlRMRU5CUVVNdlF5eFBRVUZQTEVWQlFVVjFRaXhIUVVGSExFTkJRVU1zUTBGQlFUdExRVU12UWl4RFFVRkJMRU5CUVVFN1NVRkJRV2RSTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxGZEJRVUVzUlVGRlZ5eFpRVUZOTzAxQlEyaENMRWxCUVUxM1NTeFBRVUZQTEVkQlFVZERMRTFCUVUwc1EwRkJRM3BKTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzTkNMRWRCUVVjc1EwRkJReXhEUVVGQk8wRkJRM1JETEUxQlFVRXNUMEZCVDNGWkxFOUJRVThzUzBGQlN5eERRVUZETEVsQlFVbEJMRTlCUVU4c1MwRkJTeXhEUVVGRExFTkJRVUU3UzBGRGRFTXNRMEZCUVN4RFFVRkJPMGxCUVVGeVNTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hqUVVGQkxFVkJSV01zV1VGQlRUdE5RVU51UWl4UFFVTkZRU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOM1JTeExRVUZMTEV0QlFVdFRMRk5CUVZNc1NVRkRPVUlzUTBGQlEydE5MRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNkRkxFdEJRVXNzUjBGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxhVU1zVVVGQlVTeERRVUZETUVzc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjMElzUjBGQlJ5eERRVUZETEVOQlFVRTdTMEZGTTBRc1EwRkJRU3hEUVVGQk8wbEJRVUZuVVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGQlFTeGxRVUZCTEVWQlJXVXNXVUZCVFR0TlFVTndRaXhQUVVORlFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU4zUlN4TFFVRkxMRXRCUVV0VExGTkJRVk1zU1VGRE9VSXNRMEZCUTNkQ0xGRkJRVkVzUTBGQlF6QkxMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNOQ0xFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzMlVDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU4zUlN4TFFVRkxMRU5CUVVFN1MwRkZNMFFzUTBGQlFTeERRVUZCTzBsQlFVRTRUU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGWXl4alFVRkJMRVZCUVVFc1dVRkJRVHRCUVVGQkxFMUJRVUVzVDBGQlRVRXNTMEZCUVN4RFFVRkxjazhzVTBGQlV5eERRVUZEYWtjc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlFUdEJRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJPMGxCUVVGNVZTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3haUVVGQkxFVkJSV3BETEZsQlFVMDdRVUZEYWtJc1RVRkJRU3hKUVVGSlFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5uV1N4bFFVRmxMRVZCUVVVN1FVRkJRU3hSUVVGQkxFbEJRVUUyUWl4elFrRkJRU3hEUVVGQk8wRkJRemxDTEZGQlFVRXNUMEZCUVN4RFFVRkJRU3h6UWtGQlFTeEhRVUZQTVVrc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRhVmtzWVVGQllTeE5RVUZCTkVJc1NVRkJRVUVzU1VGQlFVRXNjMEpCUVVFc2RVSkJRWGhDUVN4elFrRkJRU3hEUVVFd1FuQlZMRWxCUVVrc1EwRkJReXhWUVVGRGRrY3NTVUZCU1N4RlFVRkJPMEZCUVVFc1ZVRkJRU3hQUVVONlEybFRMRXRCUVVFc1EwRkJTeXRITEdWQlFXVXNRMEZCUTJoYUxFbEJRVWtzUTBGQlF5eERRVUZCTzBGQlFVRXNVMEZETlVJc1EwRkJReXhEUVVGQk8wRkJRMGdzVDBGQlFUdE5RVU5CTEU5QlFVOXBVeXhMUVVGQkxFTkJRVXNyUnl4bFFVRmxMRU5CUVVNdlJ5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU50V1N4UlFVRlJMRU5CUVVNc1EwRkJRVHRMUVVOcVJDeERRVUZCTEVOQlFVRTdRVUZCUVRkSExFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWbExHVkJRVUVzUlVGQlFTeFZRVUZEYWxNc1NVRkJTU3hGUVVGTE8wRkJRM2hDTEUxQlFVRXNTVUZCVFRSaExGbEJRVmtzUjBGQlJ6TkpMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpoYUxGbEJRVmtzUjBGRGVFTXpTU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNFdpeFpRVUZaTEVOQlFVTTFZU3hKUVVGSkxFTkJRVU1zUjBGRE4wSXJSaXhUUVVGVExFTkJRVUU3UVVGRFlpeE5RVUZCTEU5QlFVOHJUeXhKUVVGSkxFTkJRMVFzZFVKQlFYVkNMRVZCUTNaQ09FWXNXVUZCV1N4RlFVTmFMSGxDUVVGNVFpeEhRVUZIZWxrc1owSkJRV2RDTEVOQlFVTTRVQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOelFpeEhRVUZITEVOQlFVTXNSVUZETlVRN1FVRkRSU3hSUVVGQkxHbERRVUZwUXl4RlFVRkZObEFzUzBGQlFTeERRVUZMYjBjc1ZVRkJWU3hGUVVGRk8wRkJRM0JFTEZGQlFVRXNhVU5CUVdsRExFVkJRVVZ3Unl4TFFVRkJMRU5CUVVzMFNTeFZRVUZWTEVWQlFVVTdRVUZEY0VRc1VVRkJRU3hwUTBGQmFVTXNSVUZCUlRWSkxFdEJRVUVzUTBGQlN6WkpMRlZCUVZVc1JVRkJSVHRCUVVOd1JDeFJRVUZCTERCRFFVRXdReXhGUVVGRk4wa3NTMEZCUVN4RFFVRkxPRWtzYTBKQlFXdENMRVZCUVVVN1FVRkRja1VzVVVGQlFTeHZRMEZCYjBNc1JVRkJSVGxKTEV0QlFVRXNRMEZCU3l0SkxGbEJRVmtzUlVGQlJUdEJRVU42UkN4UlFVRkJMR3REUVVGclF5eEZRVUZGTDBrc1MwRkJRU3hEUVVGTFowb3NWVUZCVlN4RlFVRkZPMEZCUTNKRUxGRkJRVUVzYVVOQlFXbERMRVZCUVVWb1NpeExRVUZCTEVOQlFVdElMRk5CUVZNc1JVRkJSVHRCUVVOdVJDeFJRVUZCTERKRFFVRXlReXhGUVVGRlJ5eExRVUZCTEVOQlFVdHJTU3hyUWtGQmEwSXNSVUZCUlR0QlFVTjBSU3hSUVVGQkxEaERRVUU0UXl4RlFVTTFRMnhKTEV0QlFVRXNRMEZCUzJsS0xIRkNRVUZ4UWl4RlFVRkZPMEZCUXpsQ0xGRkJRVUVzTkVOQlFUUkRMRVZCUXpGRGFrb3NTMEZCUVN4RFFVRkxhMG9zYlVKQlFXMUNMRVZCUVVVN1FVRkROVUlzVVVGQlFTdzRRa0ZCT0VJc1JVRkJSV3hLTEV0QlFVRXNRMEZCUzIxS0xGbEJRVmtzUlVGQlJUdEJRVU51UkN4UlFVRkJMR2REUVVGblF5eEZRVUZGYmtvc1MwRkJRU3hEUVVGTGIwb3NVMEZCVXl4RlFVRkZPMUZCUTJ4RUxITkRRVUZ6UXl4RlFVTndRM0JLTEV0QlFVRXNRMEZCUzNGS0xGbEJRVmtzUlVGQlJTeEpRVUZKY2tvc1MwRkJRU3hEUVVGTGMwb3NZVUZCWVN4RlFVRkRPMEZCUXpsRExFOUJRVU1zUlVGRFJIUktMRXRCUVVFc1EwRkJTM1ZLTEcxQ1FVRnRRaXhEUVVGRExHOURRVUZ2UXl4RFFVRkRMRVZCUXpsRWRrb3NTMEZCUVN4RFFVRkxkMG9zWjBKQlFXZENMRVZCUTNaQ0xFTkJRVU1zUTBGQlFUdExRVU5HTEVOQlFVRXNRMEZCUVR0SlFVRkJja29zWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUVVFc1kwRkJRU3hGUVVWakxGbEJRVTA3UVVGRGJrSXNUVUZCUVN4SlFVRkJlVW9zV1VGQlFTeEhRVWxKZWtvc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3p0UlFVaGFjMElzUjBGQlJ5eEhRVUZCYzFvc1dVRkJRU3hEUVVGSWRGb3NSMEZCUnp0UlFVRkJkVm9zY1VKQlFVRXNSMEZCUVVRc1dVRkJRU3hEUVVOSVJTd3dRa0ZCTUVJN1FVRkJNVUpCTEZGQlFVRkJMREJDUVVFd1FpeEhRVUZCUkN4eFFrRkJRU3hMUVVGSExFdEJRVUVzUTBGQlFTeEhRVUZCTEZGQlFWRXNSMEZCUVVFc2NVSkJRVUU3VVVGQlFVVXNjMEpCUVVFc1IwRkJRVWdzV1VGQlFTeERRVU55UTBrc01rSkJRVEpDTzBGQlFUTkNRU3hSUVVGQlFTd3lRa0ZCTWtJc1IwRkJRVVFzYzBKQlFVRXNTMEZCUnl4TFFVRkJMRU5CUVVFc1IwRkJRU3hsUVVGbExFZEJRVUZCTEhOQ1FVRkJMRU5CUVVFN1FVRkhMME1zVFVGQlFTeEpRVUZOUlN4TlFVRk5MRWRCUTFZNVNpeExRVUZCTEVOQlFVdHZSeXhWUVVGVkxFVkJRVVVzU1VGQlNYQkhMRXRCUVVFc1EwRkJTelJKTEZWQlFWVXNSVUZCUlN4SFFVTnNRMmxDTERKQ1FVRXlRaXhIUVVNelFrWXNNRUpCUVRCQ0xFTkJRVUU3UVVGRmFFTXNUVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRWEJpTEUxQlFVRXNRMEZCVlhWaUxFMUJRVTBzUlVGQlFYWmlMRWRCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRTFCUVVFc1EwRkJTVzVDTEZWQlFWVXNRMEZCUXl0RExFZEJRVWNzUlVGQlJTeE5RVUZOTEVWQlFVVTJVQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVONlF5eE5RVUZOTEVOQlFVTXNRMEZCUVN4RFFVRkJPMHRCUXk5RUxFTkJRVUVzUTBGQlFUdEJRVVZFTzBsQlFVRXJWQ3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4VlFVRkJMRVZCUTFjc1dVRkJUVHRCUVVObUxFMUJRVUVzU1VGQlFTdEtMR0ZCUVVFc1IwRkJiMFF2U2l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTzFGQlFYUkVjMElzUjBGQlJ5eEhRVUZCTkZvc1lVRkJRU3hEUVVGSU5Wb3NSMEZCUnp0UlFVRkJObG9zY1VKQlFVRXNSMEZCUVVRc1lVRkJRU3hEUVVGRmVFTXNVVUZCVVR0UlFVRlNRU3hSUVVGUkxFZEJRVUY1UXl4eFFrRkJRU3hMUVVGSExFdEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVa3pUeXhIUVVGSExFVkJRVVVzUjBGQlFUSlBMSEZDUVVGQk8xRkJRVVZvVnl4WlFVRlpMRWRCUVVFclZpeGhRVUZCTEVOQlFWb3ZWaXhaUVVGWkxFTkJRVUU3UVVGREwwTXNUVUZCUVN4SlFVRk5hVmNzVTBGQlV5eEhRVUZITjJNc1ZVRkJWU3hEUVVGREswTXNSMEZCUnl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGQk8wMUJReTlETEVsQlFVMHJXaXhOUVVGTkxFZEJRVWNzUlVGQlJTeERRVUZCTzBGQlEycENMRTFCUVVFc1NVRkJTVE5ETEZGQlFWRXNRMEZCUTBNc1IwRkJSeXhEUVVGRGVVTXNVMEZCVXl4RFFVRkRMRVZCUVVVN1FVRkRNMEpETEZGQlFVRkJMRTFCUVUwc1EwRkJRM0JQTEVsQlFVa3NRMEZCUVhGUExFdEJRVUVzUTBGQldFUXNUVUZCVFN4RlFVRkJhRTRzYTBKQlFVRXNRMEZCVTNGTExGRkJRVkVzUTBGQlF6Tk1MRWRCUVVjc1EwRkJRM0ZQTEZOQlFWTXNRMEZCUXl4RFFVRkRSeXhaUVVGWkxFTkJRVU1zUTBGQlFTeERRVUZCTzBGQlEzUkVMRTlCUVVFN1FVRkRRU3hOUVVGQkxFbEJRVWx3U3l4TFFVRkJMRU5CUVVzMFNTeFZRVUZWTEVWQlFVVXNSVUZCUlR0QlFVTnlRbk5DTEZGQlFVRkJMRTFCUVUwc1EwRkJRM0JQTEVsQlFVa3NRMEZEVkRsSUxGbEJRVmtzUzBGQldrRXNTVUZCUVVFc1NVRkJRVUVzV1VGQldTeExRVUZhUVN4TFFVRkJRU3hEUVVGQlFTeEhRVUZCUVN4TFFVRkJRU3hEUVVGQlFTeEhRVUZCUVN4WlFVRlpMRU5CUTFJMlJ5eE5RVUZOTEVOQlFVTXNWVUZCUTNSSExGZEJRVmNzUlVGQlFUdEJRVUZCTEZWQlFVRXNUMEZEYmtJMVF5eFRRVUZUTEVOQlFVTTBReXhYUVVGWExFTkJRVU40Unl4SlFVRkpMRWRCUVVkM1J5eFhRVUZYTEVOQlFVTjRSeXhKUVVGSkxFZEJRVWQzUnl4WFFVRlhMRVZCUVVWd1JTeEhRVUZITEVOQlFVTXNRMEZCUVR0QlFVRkJMRk5CUTI1RkxFTkJRVU1zUTBGRFFUZERMRWRCUVVjc1EwRkJReXhWUVVGRGFVZ3NWMEZCVnl4RlFVRkJPMVZCUVVFc1QwRkJTMEVzVjBGQlZ5eERRVUZET0ZZc1QwRkJUeXhEUVVGQk8wRkJRVUVzVTBGQlFTeERRVU0zUXl4RFFVRkRMRU5CUVVFN1FVRkRTQ3hQUVVGQk8wRkJRMEVzVFVGQlFTeFBRVUZQU0N4TlFVRk5MRU5CUVVOMFl5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1MwRkRla0lzUTBGQlFTeERRVUZCTzBGQlFVRjFVeXhKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hoUVVGQkxFVkJSV0VzVlVGQlEyZElMRkZCUVZFc1JVRkJSVU1zV1VGQldTeEZRVUZMTzAxQlEzaERMRWxCUVUxeFJDeFhRVUZYTEVkQlFVZDBSQ3hSUVVGUkxFbEJRVWxvU0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFTkJRVUU3VFVGRGJrUXNTVUZCVFhWRUxHVkJRV1VzUjBGQlIzUkVMRmxCUVZrc1NVRkJTV3BJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyOVpMRmxCUVZrc1EwRkJRVHROUVVNdlJDeEpRVUZOZFVRc1VVRkJVU3hIUVVOYUxFVkJRMFY0U3l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhXU3hqUVVGakxFdEJRM2hDYkVnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkROR0lzWTBGQll5eEpRVUZKTEVOQlFVTjZTeXhMUVVGQkxFTkJRVXN3U3l4aFFVRmhMRVZCUVVVc1EwRkJReXhEUVVOeVJDeExRVU5CTVVzc1MwRkJRU3hEUVVGTE9Fa3NhMEpCUVd0Q0xFVkJRVVVzU1VGRGRrSTVTU3hMUVVGQkxFTkJRVXR5VHl4VFFVRlRMRU5CUVVNeVdTeFhRVUZYTEVOQlFVTXNTVUZETVVJeldTeFRRVUZUTEVOQlFVTTBXU3hsUVVGbExFVkJRVVZFTEZkQlFWY3NRMEZCUlN4RFFVRkRMRWRCUTNwRExFTkJRVU1zUjBGRFJDeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVVlNMRTFCUVVFc1QwRkJUMFVzVVVGQlVTeERRVUZCTzB0QlEyaENMRU5CUVVFc1EwRkJRVHRCUVVWRU8wRkJRMEU3UVVGRFFUdEpRVUZCY2tzc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNaMEpCUVVFc1JVRkRhVUlzV1VGQmIwSTdRVUZCUVN4TlFVRkJMRWxCUVVFeVN5eHRRa0ZCUVN4RFFVRkJPMEZCUVVFc1RVRkJRU3hKUVVGdVFrTXNVMEZCVXl4SFFVRkJMMWNzVTBGQlFTeERRVUZCYUVjc1RVRkJRU3hIUVVGQkxFTkJRVUVzU1VGQlFXZEhMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUzBGQlFVTXNVMEZCUVN4SFFVRkJSQ3hUUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVkQlFVY3NSVUZCUlN4RFFVRkJPMDFCUXpsQ0xFbEJRVWxuV0N4alFVRmpMRWRCUVVjc1MwRkJTeXhEUVVGQk8wRkJRekZDTzBGQlEwRTdUVUZEUVN4SlFVTkZOMHNzUzBGQlFTeERRVUZMT0Vzc1YwRkJWeXhGUVVGRkxFdEJRVXNzUTBGQlF5eEpRVU40UWl4RFFVRkRSaXhUUVVGVExFTkJRVU5ITEdOQlFXTXNTVUZEZWtJdlN5eExRVUZCTEVOQlFVdHlUeXhUUVVGVExFTkJRVU54VHl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZXU3haUVVGWkxFTkJRVU1zUlVGRGRrTTdRVUZEUVR0QlFVTkJMRkZCUVVFc1NVRkJTU3hEUVVGREswUXNVVUZCVVN4RFFVRkRReXhoUVVGaExFbEJRVWxFTEZGQlFWRXNRMEZCUTBNc1lVRkJZU3hMUVVGTFJDeFJRVUZSTEVOQlFVTkZMRWxCUVVrc1JVRkJSVHRCUVVOMlJVd3NWVUZCUVVFc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlFUdEJRVU4yUWl4VFFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVVVGQlFTeEpRVUZKTjBzc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjMk1zVFVGQlRTeEpRVUZKTEVOQlFVTnVUQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOMVl5eHZRa0ZCYjBJc1JVRkJSVHRCUVVONlJGQXNWVUZCUVVFc1kwRkJZeXhIUVVGSExFdEJRVXNzUTBGQlFUdEJRVU40UWl4VFFVRkJPMEZCUTBFN1FVRkRRU3hSUVVGQkxFbEJRMFUzU3l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjNZeXhaUVVGWkxFbEJRM1pDY2t3c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkMk1zV1VGQldTeERRVUZEY2tvc1QwRkJUeXhKUVVNdlFtaERMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNkakxGbEJRVmtzUTBGQlEzSktMRTlCUVU4c1EwRkJRM05LTEZGQlFWRXNRMEZCUTA0c1VVRkJVU3hEUVVGRFF5eGhRVUZoTEVOQlFVTXNTVUZEYUVWRUxGRkJRVkVzUTBGQlEwTXNZVUZCWVN4RFFVRkRUU3hUUVVGVExFTkJRVU5FTEZGQlFWRXNRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eEZRVU5zUlR0QlFVTkJWQ3hWUVVGQlFTeGpRVUZqTEVkQlFVY3NTVUZCU1N4RFFVRkJPMEZCUTNaQ0xGTkJRVUU3UVVGRFFUdFJRVU5CTEVsQlFVazNTeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNeVl5d3dRa0ZCTUVJc1NVRkJTWGhNTEV0QlFVRXNRMEZCUzNGS0xGbEJRVmtzUlVGQlJTeEZRVUZGTzBGQlEyaEZkMElzVlVGQlFVRXNZMEZCWXl4SFFVRkhMRXRCUVVzc1EwRkJRVHRCUVVONFFpeFRRVUZCTzFGQlEwRXNTVUZCU1RkTExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelJqTERSQ1FVRTBRaXhKUVVGSmVrd3NTMEZCUVN4RFFVRkxjMG9zWVVGQllTeEZRVUZGTEVWQlFVVTdRVUZEYmtWMVFpeFZRVUZCUVN4alFVRmpMRWRCUVVjc1MwRkJTeXhEUVVGQk8wRkJRM2hDTEZOQlFVRTdRVUZEUml4UFFVRkJPMEZCUlVGQkxFMUJRVUZCTEdOQlFXTXNTMEZCUVVZc1EwRkJRVUVzYlVKQlFVRXNSMEZCU1ROTExFdEJRVUVzUTBGQlN6Qk1MRXRCUVVzc1EwRkJRekZLTEU5QlFVOHNUVUZCUVN4SlFVRkJMRWxCUVVFeVNTeHRRa0ZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZzUWtFc2JVSkJRVUVzUTBGQmIwSm5RaXhMUVVGTExFTkJRVU03UVVGQlJVTXNVVUZCUVVFc1lVRkJZU3hGUVVGRkxFbEJRVUU3UVVGQlN5eFBRVUZETEVOQlFVTXNRMEZCUVN4RFFVRkJPMHRCUTNKRkxFTkJRVUVzUTBGQlFUdEpRVUZCZWt3c1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNiVUpCUVVFc1JVRkZiVUlzV1VGQlRUdEJRVU40UWl4TlFVRkJMRWxCUVVsQkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekpqTERCQ1FVRXdRaXhKUVVGSmVFd3NTMEZCUVN4RFFVRkxjVW9zV1VGQldTeEZRVUZGTEVWQlF6bEVMRTlCUVU4c1NVRkJTU3hEUVVGQk8wRkJRMklzVFVGQlFTeEpRVUZKY2tvc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkROR01zTkVKQlFUUkNMRWxCUVVsNlRDeExRVUZCTEVOQlFVdHpTaXhoUVVGaExFVkJRVVVzUlVGRGFrVXNUMEZCVHl4SlFVRkpMRU5CUVVFN1FVRkRZaXhOUVVGQkxFOUJRVTkwU2l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTm5aQ3hwUWtGQmFVSXNSMEZETDBJM1RDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5uWkN4cFFrRkJhVUlzUTBGQlEzaE9MRTlCUVU4c1EwRkJRekpDTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzTkNMRWRCUVVjc1EwRkJReXhGUVVGRk5sQXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYzBJc1IwRkJSeXhEUVVGRExFZEJRM0pGYTA4c1QwRkJUeXhEUVVGRE1rSXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYzBJc1IwRkJSeXhEUVVGRExFTkJRVUU3UzBGRE5VSXNRMEZCUVN4RFFVRkJPMGxCUVVGblVTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZVU3hSUVVGQkxFVkJRVUVzV1VGQlFUdE5RVUZCTEc5Q1FVTlFVU3hMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4TFFVRkJMRVZCUVVFN1VVRkRSWEZETEVkQlFVY3NSVUZCUlRsRExFdEJRVUVzUTBGQlN6Qk1MRXRCUVUwN1VVRkRhRUoyVUN4VFFVRlRMRVZCUVVVMlJDeExRVUZCTEVOQlFVczRUQ3hoUVVGaExFTkJRVU01VEN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnpRaXhIUVVGSExFTkJRVVU3VVVGRE9VTTBZaXhUUVVGVExFVkJRVVV2VEN4TFFVRkJMRU5CUVV0M1J5eGxRVUZuUWp0UlFVTm9RemxHTEU5QlFVOHNSVUZCUlZZc1MwRkJRU3hEUVVGTFowMHNWMEZCV1R0QlFVTXhRak5HTEZGQlFVRkJMRmxCUVZrc1JVRkRWaXhEUVVGRGNrY3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjJRc1pVRkJaU3hIUVVGSGFrMHNTMEZCUVN4RFFVRkxhMDBzWjBKQlFXZENMRWRCUVVkd1dTeFRRVU4yUkR0UlFVTkVjVmtzWTBGQll5eEZRVU5hYmswc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiMlFzWlVGQlpTeEhRVUZIYWswc1MwRkJRU3hEUVVGTGEwMHNaMEpCUVdkQ0xFZEJRVWR3V1N4VFFVTjBSRHRCUVVORU1GY3NVVUZCUVVFc1VVRkJVU3hGUVVGRmVFc3NTMEZCUVN4RFFVRkxPRXNzVjBGQlZ5eEZRVUZITzBGQlF6ZENMRkZCUVVFc1dVRkJRU3hGUVVGWk9Vc3NTMEZCUVN4RFFVRkxiMDBzV1VGQldTeEZRVUZITzBGQlEyaERReXhSUVVGQlFTeEpRVUZKTEVWQlFVTXNVVUZCVVR0QlFVTmlReXhSUVVGQlFTeExRVUZMTEVWQlFVVjBUU3hMUVVGQkxFTkJRVXQxVFN4UlFVRlJMRVZCUVVjN1FVRkRka0lzVVVGQlFTeGxRVUZCTEVWQlFXVjJUU3hMUVVGQkxFTkJRVXR2Unl4VlFVRlZMRVZCUVVjN1VVRkRha01zWTBGQlkzQkhMRVZCUVVGQkxFdEJRVUVzUTBGQlMyMUtMRmxCUVZrc1JVRkJSU3hIUVVGSExFMUJRVTBzUjBGQlIzSldMRk5CUVZVN1VVRkRka1FzWlVGQlpXdE5MRVZCUVVGQkxFdEJRVUVzUTBGQlN6WkpMRlZCUVZVc1JVRkJSU3hKUVVGSk4wa3NTMEZCUVN4RFFVRkxTQ3hUUVVGVExFVkJRVU03UVVGQlJTeFBRVUZCTEVWQlJYQkVSeXhMUVVGQkxFTkJRVXMyVEN4cFFrRkJhVUlzUlVGQlJTeEZRVU40UWpkTUxFdEJRVUVzUTBGQlMzVk5MRkZCUVZFc1JVRkJSU3hMUVVGTExFVkJRVVVzYVVKQlEzSkNMMHdzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQk8wRkJRVTEwUlN4UlFVRkJRU3hUUVVGVExFVkJRVU1zVTBGQlFUdEJRVUZUTEU5QlFVRXNSVUZCUlRaRUxFdEJRVUVzUTBGQlMzVk5MRkZCUVZFc1JVRkJVeXhEUVVWb1JDeERRVUZETEVOQlFVRTdTMEZEVUN4RFFVRkJMRU5CUVVFN1FVRkJRU3hKUVVGQkxFOUJRVUYyVFN4TFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVGQk8wVkJRVUUwUWl4VFFVRkJMRU5CUVVGMVJTeEhRVUZCTEVWQlFVRndSeXhuUWtGQlFTeERRVUZCTEVOQlFVRTdSVUZCUVN4UFFVRkJPRUlzV1VGQlFTeERRVUZCYzBVc1IwRkJRU3hGUVVGQkxFTkJRVUU3U1VGQlFYcExMRWRCUVVFc1JVRkJRU3h0UWtGQlFUdEpRVUZCTDFBc1MwRkJRU3hGUVhoWlJDeFRRVUZCYlZjc2FVSkJRVUZCTEVkQlFXOUNPMDFCUTJ4Q0xFbEJRVWtzUTBGQlF6QkxMR05CUVdNc1JVRkJSU3hEUVVGQk8wRkJRM1pDTEV0QlFVRTdRVUZCUXl4SFFVRkJMRVZCUVVFN1NVRkJRVGxSTEVkQlFVRXNSVUZCUVN4dlFrRkJRVHRCUVVGQkwxQXNTVUZCUVVFc1MwRkJRU3hGUVVWRUxGTkJRVUU0WjBJc2EwSkJRVzFDTjBJc1EwRkJRVUVzVTBGQlV5eEZRVUZGTzBGQlF6VkNMRTFCUVVFc1NVRkJTU3hEUVVGRE5FSXNZMEZCWXl4RFFVRkROVUlzVTBGQlV5eERRVUZETEVOQlFVRTdRVUZEYUVNc1MwRkJRVHRCUVVGRExFZEJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZCUVN4RFFURkVPRUp3U3l4RFFVRkJRU3hMUVVGTExFTkJRVU4zUXl4VFFVRlRMRU5CUVVFN08wRkRha0pRTEVsQlJYQkNNRW9zVlVGQlZTd3dRa0ZCUVROTkxHZENRVUZCTEVWQlFVRTdRVUZCUVN4RlFVRkJMRk5CUVVFeVRTeFZRVUZCTEVkQlFVRTdRVUZCUVN4SlFVRkJMRWxCUVVFeFRTeExRVUZCTEVOQlFVRTdRVUZCUVVNc1NVRkJRVUVzWlVGQlFTeFBRVUZCZVUwc1ZVRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVhSS0xFbEJRVUVzUjBGQlFYWlFMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNSVUZCUVhkV0xFbEJRVUVzUjBGQlFYcFhMRWxCUVVGQkxFdEJRVUVzUTBGQlFYZFhMRWxCUVVFc1IwRkJRVVVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSVUZCUVVFc1NVRkJRU3hIUVVGQlJpeEpRVUZCTEVWQlFVRkZMRWxCUVVFc1JVRkJRU3hGUVVGQk8wRkJRVUZFTEUxQlFVRkJMRWxCUVVFc1EwRkJRVU1zU1VGQlFTeERRVUZCZWxBc1IwRkJRVUVzVTBGQlFTeERRVUZCZVZBc1NVRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeExRVUZCTzBGQlFVRjBSQ3hKUVVGQlFTeExRVUZCTEVkQlFVRkZMRlZCUVVFc1EwRkJRU3hKUVVGQkxFVkJRVUYzVFN4VlFVRkJMRVZCUVVGdVpTeEZRVUZCUVN4RFFVRkJRU3hOUVVGQkxFTkJRVUU0VlN4SlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUZzUkN4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4alFVRkJMR1ZCYTBOa1VTeExRVUZMTEVOQlFVTnRRaXhUUVVGVExFVkJRVVVzUTBGQlFTeERRVUZCTzBGQlFVRjRRaXhKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZiRUlzWVVGQlFTeEZRVUZCTEZWQlFVTlVMRXRCUVVzc1JVRkJTenRCUVVOMlFpeE5RVUZCTEVsQlFVbFRMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpaU0xFOUJRVThzUlVGQlJUdEJRVU4wUWxZc1VVRkJRVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE5sSXNUMEZCVHl4RFFVRkRia0lzUzBGQlN5eERRVUZETEVOQlFVRTdRVUZETTBJc1QwRkJRVHRMUVVORUxFTkJRVUVzUTBGQlFUdEJRVUZCV1N4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGYVVJc2FVSkJRVUVzUlVGQlFTeFZRVUZEVkN4TFFVRkxMRVZCUVVzN1FVRkRNMElzVFVGQlFTeEpRVUZOSzBjc1VVRkJVU3hIUVVGSEwwY3NTMEZCU3l4RFFVRkROMFFzUjBGQlJ5eERRVUZCTzAxQlF6RkNMRWxCUVVrMFN5eFJRVUZSTEV0QlFVc3NSMEZCUnl4RlFVRkZPMUZCUTNCQ0wwY3NTMEZCU3l4RFFVRkRaMGdzWTBGQll5eEZRVUZGTEVOQlFVRTdVVUZEZEVKb1NDeExRVUZMTEVOQlFVTTNSQ3hIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZCTzBGQlEzSkNMRTlCUVVFN1FVRkZRWE5GTEUxQlFVRkJMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpKWUxHVkJRV1VzUTBGQlEycElMRXRCUVVzc1EwRkJReXhEUVVGQk8wdEJRMnhETEVOQlFVRXNRMEZCUVR0SlFVRkJXU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGYjBJc2IwSkJRVUVzUlVGQlFTeFpRVUZCTzBGQlFVRXNUVUZCUVN4UFFVTnVRaXhEUVVGRFFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU00V0N3d1FrRkJNRUlzU1VGRGRFTXNRMEZCUTJoV0xGTkJRVk1zUTBGQlEzRlBMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJRc1NVRkJTU3hGUVVGRmFWTXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYlZrc1VVRkJVU3hEUVVGRExFbEJRMmhFY2xZc1UwRkJVeXhEUVVGRGNVOHNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEWkN4SlFVRkpMRVZCUVVWcFV5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU52V1N4WlFVRlpMRU5CUVVNc1EwRkJRVHRCUVVGQkxFdEJRVUVzUTBGQlFTeERRVUZCTzBsQlFVRTVSeXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGZGtNc1lVRkJRU3hGUVVGQkxGbEJRVUU3VFVGQlFTeFBRVU5hUVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhXU3hqUVVGakxFbEJRM3BDYkVnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkROR0lzWTBGQll5eExRVU40UW5wTExFdEJRVUVzUTBGQlN6aEpMR3RDUVVGclFpeEZRVUZGTEVsQlEzWkNibGdzVTBGQlV5eERRVUZEY1U4c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRaQ3hKUVVGSkxFVkJRVVZwVXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFTkJRVU1zU1VGRE9VTnlWaXhUUVVGVExFTkJRVU54VHl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZXU3haUVVGWkxFVkJRVVZxU0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFTkJRVVVzUTBGQlF5eEhRVU42UkN4RFFVRkRMRWRCUTBRc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVR0QlFVVlNPMEZCUTBFN1FVRkRRVHRKUVVGQk4wY3NaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzZFVKQlFVRXNSVUZEZDBJc1dVRkJiMEk3UVVGQlFTeE5RVUZCTEVsQlFXNUNORXNzVTBGQlV5eEhRVUZCTDFjc1UwRkJRU3hEUVVGQmFFY3NUVUZCUVN4SFFVRkJMRU5CUVVFc1NVRkJRV2RITEZOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1MwRkJRVU1zVTBGQlFTeEhRVUZCUkN4VFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFZEJRVWNzUlVGQlJTeERRVUZCTzAxQlEzSkRMRWxCUVVrNFdTeHhRa0ZCY1VJc1IwRkJSeXhMUVVGTExFTkJRVUU3UVVGRGFrTTdRVUZEUVR0TlFVTkJMRWxCUTBVelRTeExRVUZCTEVOQlFVczRTeXhYUVVGWExFVkJRVVVzUzBGQlN5eERRVUZETEVsQlEzaENMRU5CUVVOR0xGTkJRVk1zUTBGQlEwY3NZMEZCWXl4SlFVTjZRbkJhTEZOQlFWTXNRMEZCUTNGUExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMlFzU1VGQlNTeEZRVUZGYVZNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiMWtzV1VGQldTeERRVUZETEVWQlEyNUVPMEZCUTBFN1FVRkRRU3hSUVVGQkxFbEJRVWtzUTBGQlF5dEVMRkZCUVZFc1EwRkJRME1zWVVGQllTeEpRVUZKUkN4UlFVRlJMRU5CUVVORExHRkJRV0VzUzBGQlMwUXNVVUZCVVN4RFFVRkRSU3hKUVVGSkxFVkJRVVU3UVVGRGRrVjVRaXhWUVVGQlFTeHhRa0ZCY1VJc1IwRkJSeXhKUVVGSkxFTkJRVUU3UVVGRE9VSXNVMEZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGRkJRVUVzU1VGQlNUTk5MRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNOakxFMUJRVTBzU1VGQlNTeERRVUZEYmt3c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkV01zYjBKQlFXOUNMRVZCUVVVN1FVRkRla1IxUWl4VlFVRkJRU3h4UWtGQmNVSXNSMEZCUnl4TFFVRkxMRU5CUVVFN1FVRkRMMElzVTBGQlFUdEJRVU5CTzBGQlEwRXNVVUZCUVN4SlFVTkZNMDBzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGQyTXNXVUZCV1N4SlFVTjJRbkpNTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzZGpMRmxCUVZrc1EwRkJRM0pLTEU5QlFVOHNTVUZETDBKb1F5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU4zWXl4WlFVRlpMRU5CUVVOeVNpeFBRVUZQTEVOQlFVTnpTaXhSUVVGUkxFTkJRVU5PTEZGQlFWRXNRMEZCUTBNc1lVRkJZU3hEUVVGRExFbEJRMmhGUkN4UlFVRlJMRU5CUVVORExHRkJRV0VzU1VGRGRFSkVMRkZCUVZFc1EwRkJRME1zWVVGQllTeERRVUZEVFN4VFFVRlRMRU5CUVVORUxGRkJRVkVzUTBGRGRrTXNLMEpCUTBZc1EwRkJReXhGUVVORU8wRkJRMEZ4UWl4VlFVRkJRU3h4UWtGQmNVSXNSMEZCUnl4SlFVRkpMRU5CUVVFN1FVRkRPVUlzVTBGQlFUdEJRVU5HTEU5QlFVRTdRVUZGUVVFc1RVRkJRVUVzY1VKQlFYRkNMRWxCUTI1Q00wMHNTMEZCUVN4RFFVRkxORTBzV1VGQldTeERRVUZETlVzc1QwRkJUeXhKUVVONlFtaERMRXRCUVVFc1EwRkJTelJOTEZsQlFWa3NRMEZCUXpWTExFOUJRVThzUTBGQlF6SktMRXRCUVVzc1EwRkJRenRCUVVGRlF5eFJRVUZCUVN4aFFVRmhMRVZCUVVVc1NVRkJRVHRCUVVGTExFOUJRVU1zUTBGQlF5eERRVUZCTzB0QlF6TkVMRU5CUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzVDBGQlFUVk1MRXRCUVVFc1EwRkJRVHRCUVVGQkxFZEJRVUU3UlVGQlFUUkNMRk5CUVVFc1EwRkJRVGhMTEZWQlFVRXNSVUZCUVROTkxHZENRVUZCTEVOQlFVRXNRMEZCUVR0RlFVRkJMRTlCUVVFNFFpeFpRVUZCTEVOQlFVRTJTeXhWUVVGQkxFVkJRVUVzUTBGQlFUdEpRVUZCYUZJc1IwRkJRU3hGUVVGQkxHMUNRVUZCTzBsQlFVRXZVQ3hMUVVGQkxFVkJMMFZFTEZOQlFVRnRWeXhwUWtGQlFVRXNSMEZCYjBJN1RVRkRiRUlzU1VGQlNTeERRVUZESzBzc2NVSkJRWEZDTEVWQlFVVXNRMEZCUVR0QlFVTTVRaXhMUVVGQk8wRkJRVU1zUjBGQlFTeEZRVUZCTzBsQlFVRnVVaXhIUVVGQkxFVkJRVUVzYjBKQlFVRTdRVUZCUVM5UUxFbEJRVUZCTEV0QlFVRXNSVUZGUkN4VFFVRkJPR2RDTEd0Q1FVRnRRamRDTEVOQlFVRkJMRk5CUVZNc1JVRkJSVHRCUVVNMVFpeE5RVUZCTEVsQlFVa3NRMEZCUTJsRExIRkNRVUZ4UWl4RFFVRkRha01zVTBGQlV5eERRVUZETEVOQlFVRTdRVUZEZGtNc1MwRkJRVHRCUVVGRExFZEJRVUVzUlVGQlFUdEpRVUZCYkZBc1IwRkJRU3hGUVVGQkxGRkJRVUU3U1VGQlFTOVFMRXRCUVVFc1JVRXlSVVFzVTBGQlFXZFlMRTFCUVVGQkxFZEJRVk03UVVGRFVDeE5RVUZCTEVsQlFVRjVSU3hYUVVGQkxFZEJRVEpFTEVsQlFVa3NRMEZCUTNaWkxFdEJRVXM3VVVGQk4wUnBaU3hWUVVGVkxFZEJRVUV4Uml4WFFVRkJMRU5CUVZZd1JpeFZRVUZWTzFGQlFVRkRMSEZDUVVGQkxFZEJRVUV6Uml4WFFVRkJMRU5CUVVVMFJpeGxRVUZsTzBGQlFXWkJMRkZCUVVGQkxHVkJRV1VzUjBGQlFVUXNjVUpCUVVFc1MwRkJSeXhMUVVGQkxFTkJRVUVzUjBGQlFTeFBRVUZQTEVkQlFVRkJMSEZDUVVGQk8xRkJRVVZ5VFN4UFFVRlBMRWRCUVVFd1J5eFhRVUZCTEVOQlFWQXhSeXhQUVVGUExFTkJRVUU3UVVGRmRFUXNUVUZCUVN4SlFVRk5kVTBzYVVKQlFXbENMRWRCUVVjN1FVRkRlRUlzVVVGQlFTd3JRa0ZCSzBJc1JVRkJSU3hKUVVGSk8xRkJRM0pETERCRFFVRXdReXhGUVVGRkxFTkJRVU1zUTBGQlEzWk5MRTlCUVU4N1FVRkRja1FzVVVGQlFTeDVRMEZCZVVNc1JVRkRka01zUTBGQlF5eERRVUZEUVN4UFFVRlBMRWxCUVVrdlR5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRPVU1zUzBGQlN5eERRVUZEWkN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRFl5eExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFTkJRVU03UVVGRE9VUXNVVUZCUVN4clJFRkJhMFFzUlVGRGFFUXNTVUZCU1N4RFFVRkRPRUlzYTBKQlFXdENMRVZCUVVNN1QwRkRNMElzUTBGQlFUdE5RVU5FTEc5Q1FVTkZkRWtzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8xRkJRMFZ4UXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRE9Fb3NXVUZCWVR0QlFVTjJRbnBSTEZGQlFVRkJMRk5CUVZNc1JVRkJSVEJITEVsQlFVa3NRMEZCUTI5TExHbENRVUZwUWl4RFFVRkZPMUZCUTI1RExGbEJRVUV4WlN4RlFVRkJRU3hGUVVGQlFTeERRVUZCUVN4TlFVRkJMRU5CUVdWNVpTeGxRVUZsTEVWQlFVRjZaU3hIUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hOUVVGQkxFTkJRVWtzU1VGQlNTeERRVUZEVFN4TFFVRkxMRU5CUVVOcFpTeFZRVUZWTEVOQlFVYzdVVUZETVVSd1RTeFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRjMHdzVjBGQldUdFJRVU14UWtRc1UwRkJVeXhGUVVGRkxFbEJRVWtzUTBGQlEzWkdMR1ZCUVdkQ08wRkJRMmhEWjBVc1VVRkJRVUVzVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUTAwc1YwRkJWeXhGUVVGRE8wRkJRVVVzVDBGQlFTeEZRVVUxUW1kRExGVkJRMFVzUTBGQlF5eERRVUZCTzBGQlJWWXNTMEZCUVR0QlFVRkRMRWRCUVVFc1EwRkJRU3hGUVVGQkxFTkJRVUU3U1VGQlFYQlNMRWRCUVVFc1JVRkJRU3hqUVVGQk8wbEJRVUZGTEVkQlFVRXNSVUZxU1VRc1UwRkJRVUVzUjBGQlFVRXNSMEZCTUVJN1RVRkRlRUlzVDBGQlR6dEJRVU5NYjFJc1VVRkJRVUVzWlVGQlpTeEZRVUZGTEU5QlFVRTdUMEZEYkVJc1EwRkJRVHRCUVVOSUxFdEJRVUU3UVVGQlF5eEhRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1EwRk1jVU40VFN4RFFVRkJRU3hMUVVGTExFTkJRVU4zUXl4VFFVRlRMRU5CUVVFN08wRkRRMjlDTEVsQlJYUkVhMHNzU1VGQlNTd3dRa0ZCUVc1T0xHZENRVUZCTEVWQlFVRTdRVUZCUVN4RlFVRkJMRk5CUVVGdFRpeEpRVUZCTEVkQlFVRTdRVUZCUVN4SlFVRkJMRWxCUVVGc1RpeExRVUZCTEVOQlFVRTdRVUZCUVVNc1NVRkJRVUVzWlVGQlFTeFBRVUZCYVU0c1NVRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVRsS0xFbEJRVUVzUjBGQlFYWlFMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNSVUZCUVhkV0xFbEJRVUVzUjBGQlFYcFhMRWxCUVVGQkxFdEJRVUVzUTBGQlFYZFhMRWxCUVVFc1IwRkJRVVVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSVUZCUVVFc1NVRkJRU3hIUVVGQlJpeEpRVUZCTEVWQlFVRkZMRWxCUVVFc1JVRkJRU3hGUVVGQk8wRkJRVUZFTEUxQlFVRkJMRWxCUVVFc1EwRkJRVU1zU1VGQlFTeERRVUZCZWxBc1IwRkJRVUVzVTBGQlFTeERRVUZCZVZBc1NVRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeExRVUZCTzBGQlFVRjBSQ3hKUVVGQlFTeExRVUZCTEVkQlFVRkZMRlZCUVVFc1EwRkJRU3hKUVVGQkxFVkJRVUZuVGl4SlFVRkJMRVZCUVVFelpTeEZRVUZCUVN4RFFVRkJRU3hOUVVGQkxFTkJRVUU0VlN4SlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUZzUkN4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4blFrRkJRU3hGUVRCRlRpeFZRVUZETjFBc1IwRkJSeXhGUVVGRmIxQXNTMEZCU3l4RlFVRkxPMEZCUXk5Q0xFMUJRVUVzU1VGQlNWTXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYzJVc1ZVRkJWU3hGUVVGRk8xRkJRM3BDYms0c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjMlVzVlVGQlZTeERRVUZEYUdRc1IwRkJSeXhGUVVGRmIxQXNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkRia01zVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0QlFVRkJXU3hKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZjVUlzY1VKQlFVRXNSVUZCUVN4VlFVRkROMUFzUjBGQlJ5eEZRVUZMTzBGQlF6ZENMRTFCUVVFc1NVRkJTVFpRTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzVmxMR1ZCUVdVc1JVRkJSVHRCUVVNNVFuQk9MRkZCUVVGQkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM1ZsTEdWQlFXVXNRMEZCUTJwa0xFZEJRVWNzUTBGQlF5eERRVUZCTzBGQlEycERMRTlCUVVFN1MwRkRSQ3hEUVVGQkxFTkJRVUU3U1VGQlFXZFJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVVZwUWl4cFFrRkJRU3hGUVVGQkxGVkJRVU0zVUN4SFFVRkhMRVZCUVVVeVl5eFZRVUZWTEVWQlFVVjJUaXhMUVVGTExFVkJRVXM3VFVGRE5VTXNTVUZCU1N4UFFVRlBVeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOM1pTeFpRVUZaTEV0QlFVc3NWVUZCVlN4RlFVRkZPMUZCUTJwRWNrNHNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZDJVc1dVRkJXU3hEUVVGRGJHUXNSMEZCUnl4RlFVRkZNbU1zVlVGQlZTeEZRVUZGZGs0c1MwRkJTeXhEUVVGRExFTkJRVUU3UVVGRGFrUXNUMEZCUVR0QlFVTkJMRTFCUVVFc1NVRkJTVk1zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGNWa3NZMEZCWXl4RlFVRkZPMEZCUXpkQ2JFZ3NVVUZCUVVFc1MwRkJRU3hEUVVGTGMwNHNZMEZCWXl4RFFVRkRibVFzUjBGQlJ5eEZRVUZGYjFBc1MwRkJTeXhEUVVGRExFTkJRVUU3UVVGRGFrTXNUMEZCUVR0QlFVTkJMRTFCUVVFc1NVRkJTVk1zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1HVXNiVUpCUVcxQ0xFVkJRVVU3UVVGRGJFTjJUaXhSUVVGQlFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU41Vml4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3UVVGRE0wSXNUMEZCUVR0TFFVTkVMRU5CUVVFc1EwRkJRVHRCUVVGQmJrVXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJXdENMR3RDUVVGQkxFVkJRVUVzVlVGQlEycFRMRWxCUVVrc1JVRkJTenRCUVVNelFpeE5RVUZCTEVsQlFVbHBVeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNeVpTeG5Ra0ZCWjBJc1JVRkJSVHRCUVVNdlFpeFJRVUZCTEU5QlFVOTRUaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNeVpTeG5Ra0ZCWjBJc1EwRkJRM3BtTEVsQlFVa3NRMEZCUXl4RFFVRkJPMEZCUXpGRExFOUJRVUU3VFVGRFFTeFBRVUZQYVVNc1QwRkJUeXhEUVVGRGFrTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1MwRkRja0lzUTBGQlFTeERRVUZCTzBsQlFVRnZVeXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4WlFVRkJMRVZCUlZrc1dVRkJUVHRCUVVOcVFpeE5RVUZCTEVsQlFVMTRVQ3hYUVVGWExFZEJRVWQzVUN4TFFVRkJMRU5CUVV0NFVDeFhRVUZYTEVWQlFVVXNRMEZCUVR0TlFVTjBReXhKUVVGTmFXUXNTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRVHRCUVVObUxFMUJRVUVzU1VGQlRWZ3NWVUZCVlN4SFFVRkhPVTBzUzBGQlFTeERRVUZMZDA0c1owSkJRV2RDTEVOQlFVTm9aQ3hYUVVGWExFTkJRVU1zUTBGQlFUdEJRVU55UkN4TlFVRkJMRWxCUVVsM1VDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU0wWWl4alFVRmpMRVZCUVVVN1VVRkROMElzU1VGQlRXbEVMR0ZCUVdFc1IwRkRha0l4VGl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjNaU3haUVVGWkxFbEJRVWx5VGl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhXU3hqUVVGakxFZEJRMmhFYkVnc1MwRkJRU3hEUVVGTE1rNHNaVUZCWlN4RFFVRkRMMDBzU1VGQlNTeERRVUZCV2l4TFFVRkJMRVZCUVU5NFVDeFhRVUZYTEVWQlFVVnpZeXhWUVVGVkxFTkJRVU1zUjBGRGVFUm9XaXhUUVVGVExFTkJRVUU3UVVGRFpqSmFMRkZCUVVGQkxFbEJRVWtzUTBGQlF6TlNMRWxCUVVrc1pVRkRVREJGTEV0QlFVRXNRMEZCUVVNc1lVRkJRU3hEUVVGRGFVMHNWVUZCVlN4RlFVRkJPMEZCUTFSb1VpeFZRVUZCUVN4SFFVRkhMRVZCUVVNc1IwRkJSenRCUVVOUWIxSXNWVUZCUVVFc1ZVRkJWU3hGUVVGRlFTeFZRVUZYTzBGQlEzWkNMMlVzVlVGQlFVRXNTVUZCU1N4RlFVRkZlVU1zVjBGQldUdEJRVU5zUW10UkxGVkJRVUZCTEU5QlFVOHNSVUZCUldkT0xHRkJRV003UVVGRGRrSXhSeXhWUVVGQlFTeFJRVUZSTEVWQlFVVm9TQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdFdTeFJRVUZUTzBGQlF6bENReXhWUVVGQlFTeFpRVUZaTEVWQlFVVnFTQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdldTeFpRVUZoTzBGQlEzUkRLMFlzVlVGQlFVRXNaVUZCWlN4RlFVRkZhRTRzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGJXVXNaVUZCWjBJN1FVRkROVU01Uml4VlFVRkJRU3hqUVVGakxFVkJRVVZzU0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhXU3hqUVVGbE8wRkJRekZEZFVRc1ZVRkJRVUVzWTBGQll5eEZRVUZGZWtzc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkROR0lzWTBGQlpUdEJRVU14UXpsRUxGVkJRVUZCTERCQ1FVRXdRaXhGUVVGRk0wY3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZET0Znc01FSkJRVEpDTzBGQlEyeEZTQ3hWUVVGQlFTeGxRVUZsTEVWQlFVVjRSeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNeVdDeGxRVUZuUWp0QlFVTTFRM1ZGTEZWQlFVRkJMR05CUVdNc1JVRkJSUzlMTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEydGpMR05CUVdVN1FVRkRNVU5OTEZWQlFVRkJMRmxCUVZrc1JVRkJSWEpNTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzZGpMRmxCUVVGQk8wRkJRV0VzVTBGRGRrTXNRMEZEU0N4RFFVRkRMRU5CUVVFN1FVRkRTQ3hQUVVGQk8wMUJRMEVzVDBGQlQyOURMRWxCUVVrc1EwRkJRMnhtTEUxQlFVMHNRMEZEYUVJc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUTJwQ0xFZEJRVWNzUTBGQlF5eFZRVUZEYzJkQ0xFMUJRVTBzUlVGQlN6dEJRVU53UXl4UlFVRkJMRWxCUVUxNlpDeEhRVUZITEVkQlFVY3daQ3hQUVVGUExFTkJRVU55WkN4WFFVRlhMRVZCUVVWdlpDeE5RVUZOTEVOQlFVTXNRMEZCUVR0QlFVTjRReXhSUVVGQkxHOUNRVU5GY0U0c1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVTXdSaXhIUVVGSExFVkJRVUU3UVVGRFJuZEVMRlZCUVVGQkxEQkNRVUV3UWl4RlFVRkZNMG9zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGFXWXNkMEpCUVhsQ08wRkJRMmhGYWtVc1ZVRkJRVUVzTWtKQlFUSkNMRVZCUVVVM1NpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5yWml3d1FrRkJNa0k3UVVGRGJrVnlVeXhWUVVGQlFTeEhRVUZITEVWQlFVVjJUQ3hIUVVGSExFTkJRVU0yWkN4UFFVRlBMRVZCUVVjN1FVRkRia0kzWkN4VlFVRkJRU3hIUVVGSExFVkJRVVZCTEVkQlFVazdRVUZEVkd0RUxGVkJRVUZCTEV0QlFVc3NSVUZCUlRKTkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM2RGTEV0QlFVMDdWVUZEZUVKeFRpeFBRVUZQTEVWQlFVVldMRXRCUVVFc1EwRkJTM05PTEdOQlFXTXNRMEZCUXpGTkxFbEJRVWtzUTBGQlFWb3NTMEZCUVN4RlFVRlBOMUFzUjBGQlJ5eERRVUZGTzBGQlF6ZERPR0lzVlVGQlFVRXNaVUZCWlN4RlFVRkZhazBzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGIyUXNaVUZCWjBJN1ZVRkROVU0xUml4WlFVRlpMRVZCUVVWeVJ5eExRVUZCTEVOQlFVdHBUeXh0UWtGQmJVSXNRMEZCUTNKT0xFbEJRVWtzUTBGQlFWb3NTMEZCUVN4RlFVRlBOMUFzUjBGQlJ5eERRVUZGTzBGQlEzWkVOMFFzVlVGQlFVRXNUMEZCVHl4RlFVRkZNRlFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGRrTXNUMEZCVVR0QlFVTTFRbmxJTEZWQlFVRkJMRTlCUVU4c1JVRkJSV2xOTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEydEdMRTlCUVZFN1FVRkROVUo0UkN4VlFVRkJRU3huUWtGQlowSXNSVUZCUlhsUUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekJDTEdkQ1FVRnBRanRCUVVNNVEzbEVMRlZCUVVGQkxGbEJRVmtzUlVGQlJXZE5MRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTIxR0xGbEJRV0U3UVVGRGRFTkRMRlZCUVVGQkxHOUNRVUZ2UWl4RlFVRkZLMHdzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGIwWXNiMEpCUVhGQ08wRkJRM1JFUXl4VlFVRkJRU3haUVVGWkxFVkJRVVU0VEN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhSaXhaUVVGaE8wRkJRM1JEUXl4VlFVRkJRU3h2UWtGQmIwSXNSVUZCUlRaTUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM05HTEc5Q1FVRnhRanRCUVVOMFJDdEhMRlZCUVVGQkxHTkJRV01zUlVGQlJUaEZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNGTkxHTkJRV1U3UVVGRE1VTnhUU3hWUVVGQlFTeFJRVUZSTEVWQlFVVjJTQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNd1dTeFJRVUZUTzBGQlF6bENVeXhWUVVGQlFTeGhRVUZoTEVWQlFVVm9TU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdFdpeGhRVUZqTzBGQlEzaEROVlFzVlVGQlFVRXNWVUZCVlN4RlFVRkZORXdzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGRVWXNWVUZCVnp0QlFVTnNRelpUTEZWQlFVRkJMRmxCUVZrc1JVRkJSV3BJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyOVpMRmxCUVdFN1FVRkRkRU5FTEZWQlFVRkJMRkZCUVZFc1JVRkJSV2hJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMVpMRkZCUVZNN1FVRkRPVUpaTEZWQlFVRkJMRmxCUVZrc1JVRkJSVFZJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF5dFpMRmxCUVdFN1FVRkRkRU5ETEZWQlFVRkJMRlZCUVZVc1JVRkJSVGRJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyZGFMRlZCUVZjN1FVRkRiRU5ETEZWQlFVRkJMRmxCUVZrc1JVRkJSVGxJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEybGFMRmxCUVdFN1FVRkRkRU5hTEZWQlFVRkJMR05CUVdNc1JVRkJSV3hJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzRlpMR05CUVdVN1FVRkRNVU4xUkN4VlFVRkJRU3hqUVVGakxFVkJRVVY2U3l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTTBZaXhqUVVGbE8wRkJRekZETVVNc1ZVRkJRVUVzTUVKQlFUQkNMRVZCUVVVdlNDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5yV2l3d1FrRkJNa0k3UVVGRGJFVnNRaXhWUVVGQlFTeGxRVUZsTEVWQlFVVTNSeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVObldTeGxRVUZuUWp0QlFVTTFRME1zVlVGQlFVRXNZVUZCWVN4RlFVRkZPVWNzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGFWa3NZVUZCWXp0QlFVTjRRMjVaTEZWQlFVRkJMRk5CUVZNc1JVRkJSWEZTTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEwWXNVMEZCVlR0QlFVTm9RME1zVlVGQlFVRXNUMEZCVHl4RlFVRkZiMUlzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFJDeFBRVUZSTzBGQlF6VkNLMW9zVlVGQlFVRXNXVUZCV1N4RlFVRkZNMGtzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE9Gb3NXVUZCWVR0QlFVTjBRMnRFTEZWQlFVRkJMR2xDUVVGcFFpeEZRVUZGTjB3c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRaMlFzYVVKQlFXdENPMEZCUTJoRWJFWXNWVUZCUVVFc01FSkJRVEJDTEVWQlFVVXpSeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNFdDd3dRa0ZCTWtJN1FVRkRiRVZJTEZWQlFVRkJMR1ZCUVdVc1JVRkJSWGhITEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6SllMR1ZCUVdkQ08wRkJRelZEZFVVc1ZVRkJRVUVzWTBGQll5eEZRVUZGTDBzc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRhMk1zWTBGQlpUdEJRVU14UTAwc1ZVRkJRVUVzV1VGQldTeEZRVUZGY2t3c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkMk1zV1VGQllUdEJRVU4wUTBZc1ZVRkJRVUVzVFVGQlRTeEZRVUZGYmt3c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjMk1zVFVGQlR6dEJRVU14UWtNc1ZVRkJRVUVzYjBKQlFXOUNMRVZCUVVWd1RDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU4xWXl4dlFrRkJjVUk3UVVGRGRFUkpMRlZCUVVGQkxEQkNRVUV3UWl4RlFVRkZlRXdzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1tTXNNRUpCUVRKQ08wRkJRMnhGUXl4VlFVRkJRU3cwUWtGQk5FSXNSVUZETVVKNlRDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU0wWXl3MFFrRkRXanRCUVVORWNtWXNWVUZCUVVFc1RVRkJUU3hGUVVGRk5GUXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZWtNc1RVRkJRVUU3UVVGQlR5eFRRVU16UWl4RFFVRkRMRU5CUVVFN1FVRkZUaXhQUVVGRExFTkJRMGdzUTBGQlF5eERRVUZCTzB0QlEwWXNRMEZCUVN4RFFVRkJPMGxCUVVFclZDeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZZU3hoUVVGQkxFVkJRVUVzV1VGQlFUdEJRVUZCTEUxQlFVRXNUMEZEV2pGUUxHTkJRV01zUTBGRFdqQlFMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNOQ0xFZEJRVWNzUlVGRFpEWlFMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNwRExFMUJRVTBzUlVGRGFrSTBWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNd1FpeG5Ra0ZEWWl4RFFVRkRMRU5CUVVFN1FVRkJRU3hMUVVGQkxFTkJRVUVzUTBGQlFUdEpRVUZCTkZBc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJXdENMRzlDUVVGQkxFVkJRVUVzV1VGQlFUdEJRVUZCTEUxQlFVRXNUMEZEYmtJc1EwRkJRMEVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE9GZ3NNRUpCUVRCQ0xFbEJRM1JETEVOQlFVTm9WaXhUUVVGVExFTkJRVU54VHl4TFFVRkJMRU5CUVV0NFVDeFhRVUZYTEVWQlFVVXNSVUZCUlhkUUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjFaTEZGQlFWRXNRMEZCUXl4SlFVTnVSSEpXTEZOQlFWTXNRMEZCUTNGUExFdEJRVUVzUTBGQlMzaFFMRmRCUVZjc1JVRkJSU3hGUVVGRmQxQXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjFrc1dVRkJXU3hEUVVGRExFTkJRVUU3UVVGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWxCUVVFc1QwRkJRV3BJTEV0QlFVRXNRMEZCUVR0QlFVRkJMRWRCUVVFN1JVRkJRVFJDTEZOQlFVRXNRMEZCUVhOTUxFbEJRVUVzUlVGQlFXNU9MR2RDUVVGQkxFTkJRVUVzUTBGQlFUdEZRVUZCTEU5QlFVRTRRaXhaUVVGQkxFTkJRVUZ4VEN4SlFVRkJMRVZCUVVFc1EwRkJRVHRKUVVGQmVGSXNSMEZCUVN4RlFVRkJMRkZCUVVFN1NVRkJRUzlRTEV0QlFVRXNSVUZGZUVRc1UwRkJRV2RZTEUxQlFVRkJMRWRCUVZNN1FVRkRVQ3hOUVVGQkxFbEJRVTF6U3l4cFFrRkJhVUlzUjBGQlJ6dEJRVU40UWl4UlFVRkJMSGRDUVVGM1FpeEZRVUZGTEVsQlFVazdRVUZET1VJc1VVRkJRU3hyUTBGQmEwTXNSVUZCUlhSaUxGTkJRVk1zUTBGRE0wTXNTVUZCU1N4RFFVRkRia0lzVjBGQlZ5eEZRVUZGTEVWQlEyeENMRWxCUVVrc1EwRkJRek5DTEV0QlFVc3NRMEZCUTIxWkxGRkJRMklzUTBGQlF6dEJRVU5FTEZGQlFVRXNNa05CUVRKRExFVkJRVVVzU1VGQlNTeERRVUZET0VJc2EwSkJRV3RDTEVWQlFVTTdUMEZEZEVVc1EwRkJRVHROUVVORUxHOUNRVUZQZEVrc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMUZCUVV0MFJTeFRRVUZUTEVWQlFVVXdSeXhKUVVGSkxFTkJRVU52U3l4cFFrRkJhVUlzUTBGQlFUdEJRVUZGTEU5QlFVRXNSVUZCUlN4SlFVRkpMRU5CUVVOcFFpeFZRVUZWTEVWQlFWRXNRMEZCUXl4RFFVRkJPMEZCUXpORkxFdEJRVUU3UVVGQlF5eEhRVUZCTEVOQlFVRXNSVUZCUVN4RFFVRkJPMGxCUVVGNFV5eEhRVUZCTEVWQlFVRXNZMEZCUVR0SlFVRkJSU3hIUVVGQkxFVkJhRTVFTEZOQlFVRkJMRWRCUVVGQkxFZEJRVEJDTzAxQlEzaENMRTlCUVU4N1FVRkRUREpTTEZGQlFVRkJMRzFDUVVGdFFpeEZRVUZGTEVsQlFVRTdUMEZEZEVJc1EwRkJRVHRCUVVOSUxFdEJRVUU3UVVGQlF5eEhRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1EwRk1LMEl2VFN4RFFVRkJRU3hMUVVGTExFTkJRVU4zUXl4VFFVRlRMRU5CUVVFN08wRkRSbXBFTEVsQlFVMXRUQ3huUTBGQlowTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1FVRkZNVU1zU1VGQlRVTXNiMEpCUVc5Q0xFZEJRVWM3UVVGRE0wSkRMRVZCUVVGQkxGZEJRVmNzUlVGQlJTeGhRVUZoTzBGQlF6RkNReXhGUVVGQlFTeGhRVUZoTEVWQlFVVXNaVUZCWlR0QlFVTTVRa01zUlVGQlFVRXNXVUZCV1N4RlFVRkZMR05CUVVFN1FVRkRhRUlzUTBGQlF5eERRVUZCTzBGQlEwUXNTVUZCVFVNc1lVRkJZU3hIUVVGQmNrOHNaVUZCUVN4RFFVRkJRU3hsUVVGQkxFTkJRVUZCTEdWQlFVRXNRMEZEYUVKcFR5eEZRVUZCUVN4RlFVRkJRU3h2UWtGQmIwSXNRMEZCUTBNc1YwRkJWeXhGUVVGSE8wRkJRMnhEU1N4RlFVRkJRU3hKUVVGSkxFVkJRVVVzUTBGRFNpeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkRUaXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZEVGl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGRFRpeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkRUaXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZEVGl4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGRFZEdEJRVU5FUXl4RlFVRkJRU3gzUWtGQmQwSXNSVUZCUlN4RFFVRkJPMEZCUXpWQ0xFTkJRVU1zUTBGRFFVNHNSVUZCUVVFc2IwSkJRVzlDTEVOQlFVTkZMR0ZCUVdFc1JVRkJSenRCUVVOd1EwY3NSVUZCUVVFc1NVRkJTU3hGUVVGRkxFTkJRMG9zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVOVUxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkRWQ3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUTFRc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVTmFPMEZCUTBSRExFVkJRVUZCTEhkQ1FVRjNRaXhGUVVGRkxFTkJRVUU3UVVGRE5VSXNRMEZCUXl4RFFVTkJUaXhGUVVGQlFTeHZRa0ZCYjBJc1EwRkJRMGNzV1VGQldTeEZRVUZITzBGQlEyNURSU3hGUVVGQlFTeEpRVUZKTEVWQlFVVXNRMEZEU2l4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVTmFMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUTFvc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkRaanRCUVVORVF5eEZRVUZCUVN4M1FrRkJkMElzUlVGQlJTeERRVUZCTzBGQlF6VkNMRU5CUVVNc1EwRkRSaXhEUVVGQk8wRkJRMFFzU1VGQlRVTXNhME5CUVd0RExFZEJRVWNzUTBGQlF5eERRVUZCTzBGQlJUVkRMRk5CUVZORExIRkNRVUZ4UWtFc1EwRkROVUpETERaQ1FVRTJRaXhGUVVNM1FrTXNORUpCUVRSQ0xFVkJRelZDTzBGQlEwRXNSVUZCUVN4SlFVRkpSQ3cyUWtGQk5rSXNSVUZCUlN4UFFVRlBWQ3h2UWtGQmIwSXNRMEZCUTBjc1dVRkJXU3hEUVVGQk8wRkJRek5GTEVWQlFVRXNTVUZCU1U4c05FSkJRVFJDTEVWQlFVVXNUMEZCVDFZc2IwSkJRVzlDTEVOQlFVTkRMRmRCUVZjc1EwRkJRVHRGUVVONlJTeFBRVUZQUkN4dlFrRkJiMElzUTBGQlEwVXNZVUZCWVN4RFFVRkJPMEZCUXpORExFTkJRVUU3UVVGQlF5eEpRVVZ2UWxNc1MwRkJTeXd3UWtGQlFXaFFMR2RDUVVGQkxFVkJRVUU3UVVGQlFTeEZRVUZCTEZOQlFVRm5VQ3hMUVVGQkxFZEJRVUU3UVVGQlFTeEpRVUZCTEVsQlFVRXZUeXhMUVVGQkxFTkJRVUU3UVVGQlFVTXNTVUZCUVVFc1pVRkJRU3hQUVVGQk9FOHNTMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hKUVVGQkxFdEJRVUVzU1VGQlFUTk1MRWxCUVVFc1IwRkJRWFpRTEZOQlFVRXNRMEZCUVdoSExFMUJRVUVzUlVGQlFYZFdMRWxCUVVFc1IwRkJRWHBYTEVsQlFVRkJMRXRCUVVFc1EwRkJRWGRYTEVsQlFVRXNSMEZCUVVVc1NVRkJRU3hIUVVGQkxFTkJRVUVzUlVGQlFVRXNTVUZCUVN4SFFVRkJSaXhKUVVGQkxFVkJRVUZGTEVsQlFVRXNSVUZCUVN4RlFVRkJPMEZCUVVGRUxFMUJRVUZCTEVsQlFVRXNRMEZCUVVNc1NVRkJRU3hEUVVGQmVsQXNSMEZCUVVFc1UwRkJRU3hEUVVGQmVWQXNTVUZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hMUVVGQk8wRkJRVUYwUkN4SlFVRkJRU3hMUVVGQkxFZEJRVUZGTEZWQlFVRXNRMEZCUVN4SlFVRkJMRVZCUVVFMlR5eExRVUZCTEVWQlFVRjRaMElzUlVGQlFVRXNRMEZCUVVFc1RVRkJRU3hEUVVGQk9GVXNTVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRKUVVGQmJFUXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzV1VGQlFTeEZRVzFHV0RsRExHdENRVUZCTEVOQlFVbDBVU3hMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVVlZMRU5CUVVGQkxFZEJRVWNzUTBGQlF5eFpRVUZCTzBGQlFVRXNUVUZCUVN4dlFrRkJUV3RVTEV0QlFVc3NRMEZCUTIxQ0xGTkJRVk1zUlVGQlJTeERRVUZCTzB0QlFVTXNRMEZCUVN4RFFVRkJMRU5CUVVFN1NVRkJRWGhDTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxHTkJRVUVzUlVGRGVrTTVReXhyUWtGQlFTeERRVUZKZEZFc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZGVlN4RFFVRkJRU3hIUVVGSExFTkJRVU1zV1VGQlFUdEJRVUZCTEUxQlFVRXNiMEpCUVUxclZDeExRVUZMTEVOQlFVTnRRaXhUUVVGVExFVkJRVVVzUTBGQlFUdExRVUZETEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVGNFFpeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRk5VTXNXVUZCUVN4RlFVRkJMRlZCUVVOcVV5eEpRVUZKTEVWQlFVRTdUVUZCUVN4UFFVRkxiMWdzWVVGQmJVSXNRMEZCUTNCWUxFbEJRVWtzUlVGQlJXbFRMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUVVFc1MwRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFYTlNMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVXZReXhaUVVGQkxFVkJRVUVzVlVGQlEycFRMRWxCUVVrc1JVRkJRVHROUVVGQkxFOUJRVXR2V0N4aFFVRnRRaXhEUVVGRGNGZ3NTVUZCU1N4RlFVRkZhVk1zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRExFTkJRVUU3UVVGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJjMUlzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzWjBKQlFVRXNSVUZGTTBNc1ZVRkJRemRRTEVkQlFVY3NSVUZCUlc5UUxFdEJRVXNzUlVGQlN6dEJRVU12UWl4TlFVRkJMRWxCUVVsVExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM05sTEZWQlFWVXNSVUZCUlR0QlFVTjZRbTVPTEZGQlFVRkJMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNObExGVkJRVlVzUTBGQlEyaGtMRWRCUVVjc1JVRkJSVzlRTEV0QlFVc3NSVUZCUlZNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiV2RDTEdOQlFXTXNRMEZCUXl4RFFVRkJPMEZCUXpsRUxFOUJRVUU3UzBGRFJDeERRVUZCTEVOQlFVRTdRVUZCUVRkUExFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWeFFpeHhRa0ZCUVN4RlFVRkJMRlZCUVVNM1VDeEhRVUZITEVWQlFVczdRVUZETjBJc1RVRkJRU3hKUVVGSk5sQXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZFdVc1pVRkJaU3hGUVVGRk8wRkJRemxDY0U0c1VVRkJRVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGRXVXNaVUZCWlN4RFFVRkRhbVFzUjBGQlJ5eERRVUZETEVOQlFVRTdRVUZEYWtNc1QwRkJRVHRMUVVORUxFTkJRVUVzUTBGQlFUdEpRVUZCWjFFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNhMEpCUVVFc1JVRkZhMElzV1VGQlRUdEJRVU4yUWl4TlFVRkJMRWxCUVVsQkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjluUWl4WlFVRlpMRVZCUVVVN1FVRkRNMEpxVUN4UlFVRkJRU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdlowSXNXVUZCV1N4RlFVRkZMRU5CUVVFN1FVRkRNMElzVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0QlFVRkJPVThzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSVzFDTEcxQ1FVRkJMRVZCUVVFc1ZVRkJRemxMTEVOQlFVTXNSVUZCU3p0QlFVTjZRaXhOUVVGQkxFbEJRVUZyVXl4WFFVRkJMRWRCUVc5RGNFZ3NTMEZCUVN4RFFVRkxibElzUzBGQlN6dFJRVUYwUTNOQ0xFZEJRVWNzUjBGQlFXbFlMRmRCUVVFc1EwRkJTR3BZTEVkQlFVYzdVVUZCUlhoQ0xGTkJRVk1zUjBGQlFYbFpMRmRCUVVFc1EwRkJWSHBaTEZOQlFWTTdVVUZCUlVNc1QwRkJUeXhIUVVGQmQxa3NWMEZCUVN4RFFVRlFlRmtzVDBGQlR5eERRVUZCTzBGQlF5OUNMRTFCUVVFc1NVRkJTU3hEUVVGRFJDeFRRVUZUTEVsQlFVa3NRMEZCUTBNc1QwRkJUeXhGUVVGRk8wRkJRekZDTEZGQlFVRXNUMEZCVHl4TFFVRkxMRU5CUVVFN1FVRkRaQ3hQUVVGQk8wRkJRMEVzVFVGQlFTeFBRVUZQZFZjc1YwRkJhVUlzUTBGQlEwRXNVVUZCWXl4RFFVRkRhRllzUjBGQlJ5eEZRVUZGSzBVc1EwRkJReXhEUVVGRExFVkJRVVYyUnl4VFFVRlRMRU5CUVVNc1EwRkJRVHRMUVVNMVJDeERRVUZCTEVOQlFVRTdRVUZCUVhkU0xFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWeFFpeHhRa0ZCUVN4RlFVRkJMRlZCUVVNMVNpeERRVUZETEVWQlFVczdRVUZETTBJc1RVRkJRU3hKUVVGQmExSXNXVUZCUVN4SFFVRnZRM1JJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXM3VVVGQmRFTnpRaXhIUVVGSExFZEJRVUZ0V0N4WlFVRkJMRU5CUVVodVdDeEhRVUZITzFGQlFVVjRRaXhUUVVGVExFZEJRVUV5V1N4WlFVRkJMRU5CUVZReldTeFRRVUZUTzFGQlFVVkRMRTlCUVU4c1IwRkJRVEJaTEZsQlFVRXNRMEZCVURGWkxFOUJRVThzUTBGQlFUdEJRVU12UWl4TlFVRkJMRWxCUVVrc1EwRkJRMFFzVTBGQlV5eEpRVUZKTEVOQlFVTkRMRTlCUVU4c1JVRkJSVHRCUVVNeFFpeFJRVUZCTEU5QlFVOHNTMEZCU3l4RFFVRkJPMEZCUTJRc1QwRkJRVHRCUVVOQkxFMUJRVUVzVDBGQlQzVlhMR0ZCUVcxQ0xFTkJRVU5CTEZWQlFXZENMRU5CUVVOb1ZpeEhRVUZITEVWQlFVVnBSeXhEUVVGRExFTkJRVU1zUlVGQlJYcElMRk5CUVZNc1EwRkJReXhEUVVGQk8wdEJRMmhGTEVOQlFVRXNRMEZCUVR0QlFVRkJkMUlzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSV2xDTEdsQ1FVRkJMRVZCUVVFc1ZVRkJRemxMTEVOQlFVTXNSVUZCU3p0QlFVTjJRaXhOUVVGQkxFbEJRVUYxVXl4WlFVRkJMRWRCUVc5RGVrZ3NTMEZCUVN4RFFVRkxibElzUzBGQlN6dFJRVUYwUTNOQ0xFZEJRVWNzUjBGQlFYTllMRmxCUVVFc1EwRkJTSFJZTEVkQlFVYzdVVUZCUlhoQ0xGTkJRVk1zUjBGQlFUaFpMRmxCUVVFc1EwRkJWRGxaTEZOQlFWTTdVVUZCUlVNc1QwRkJUeXhIUVVGQk5sa3NXVUZCUVN4RFFVRlFOMWtzVDBGQlR5eERRVUZCTzBGQlF5OUNMRTFCUVVFc1NVRkJTU3hEUVVGRFJDeFRRVUZUTEVsQlFVa3NRMEZCUTBNc1QwRkJUeXhGUVVGRk8wRkJRekZDTEZGQlFVRXNUMEZCVHl4TFFVRkxMRU5CUVVFN1FVRkRaQ3hQUVVGQk8wRkJRMEVzVFVGQlFTeFBRVUZQZFZjc1YwRkJhVUlzUTBGQlEwRXNVVUZCWXl4RFFVRkRhRllzUjBGQlJ5eEZRVUZGSzBVc1EwRkJReXhEUVVGRExFVkJRVVYwUnl4UFFVRlBMRU5CUVVNc1EwRkJRVHRMUVVNeFJDeERRVUZCTEVOQlFVRTdRVUZCUVhWU0xFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWdFFpeHRRa0ZCUVN4RlFVRkJMRlZCUVVNMVNpeERRVUZETEVWQlFVczdRVUZEZWtJc1RVRkJRU3hKUVVGQmRWSXNXVUZCUVN4SFFVRnZRek5JTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXM3VVVGQmRFTnpRaXhIUVVGSExFZEJRVUYzV0N4WlFVRkJMRU5CUVVoNFdDeEhRVUZITzFGQlFVVjRRaXhUUVVGVExFZEJRVUZuV2l4WlFVRkJMRU5CUVZSb1dpeFRRVUZUTzFGQlFVVkRMRTlCUVU4c1IwRkJRU3RaTEZsQlFVRXNRMEZCVUM5WkxFOUJRVThzUTBGQlFUdEJRVU12UWl4TlFVRkJMRWxCUVVrc1EwRkJRMFFzVTBGQlV5eEpRVUZKTEVOQlFVTkRMRTlCUVU4c1JVRkJSVHRCUVVNeFFpeFJRVUZCTEU5QlFVOHNTMEZCU3l4RFFVRkJPMEZCUTJRc1QwRkJRVHRCUVVOQkxFMUJRVUVzVDBGQlQzVlhMR0ZCUVcxQ0xFTkJRVU5CTEZWQlFXZENMRU5CUVVOb1ZpeEhRVUZITEVWQlFVVnBSeXhEUVVGRExFTkJRVU1zUlVGQlJYaElMRTlCUVU4c1EwRkJReXhEUVVGQk8wdEJRemxFTEVOQlFVRXNRMEZCUVR0QlFVRkJkVklzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSWGxDTEhsQ1FVRkJMRVZCUVVFc1ZVRkJRemxMTEVOQlFVTXNSVUZCU3p0QlFVRkJMRTFCUVVFc1NVRkJRWGRUTEhGQ1FVRkJMRU5CUVVFN1FVRkRMMElzVFVGQlFTeEpRVUZCVXl4WlFVRkJMRWRCUTBWdVNTeExRVUZCTEVOQlFVdHVVaXhMUVVGTE8xRkJSRXB6UWl4SFFVRkhMRWRCUVVGbldTeFpRVUZCTEVOQlFVaG9XU3hIUVVGSE8xRkJRVVY1V0N4WlFVRlpMRWRCUVVGUExGbEJRVUVzUTBGQldsQXNXVUZCV1R0UlFVRkZReXhWUVVGVkxFZEJRVUZOTEZsQlFVRXNRMEZCVms0c1ZVRkJWVHRSUVVGRlF5eFpRVUZaTEVkQlFVRkxMRmxCUVVFc1EwRkJXa3dzV1VGQldUdFJRVUZGYmxvc1UwRkJVeXhIUVVGQmQxb3NXVUZCUVN4RFFVRlVlRm9zVTBGQlV6dFJRVUZGUXl4UFFVRlBMRWRCUVVGMVdpeFpRVUZCTEVOQlFWQjJXaXhQUVVGUExFTkJRVUU3UVVGSGRrVXNUVUZCUVN4SlFVRk5iMW9zWVVGQllTeEhRVUZCVGl4RFFVRkJRU3h4UWtGQlFTeEhRVUZITVVnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiVm9zWVVGQllTeE5RVUZCVGl4SlFVRkJRU3hKUVVGQlFTeHhRa0ZCUVN4alFVRkJRU3h4UWtGQlFTeEhRVUZKTVVnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiMWtzV1VGQldTeERRVUZCTzAxQlJYcEZMRWxCUVVrc1JVRkJSVmNzV1VGQldTeEpRVUZKUXl4VlFVRlZMRWxCUVVsRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTkZMR0ZCUVdFc1JVRkJSVHRCUVVOdVJTeFJRVUZCTEU5QlFVOHNTMEZCU3l4RFFVRkJPMEZCUTJRc1QwRkJRVHROUVVWQkxFbEJRVWxLTEZsQlFWa3NTVUZCU1doYUxFOUJRVThzUlVGQlJUdFJRVU16UWl4UFFVRlBkVmNzWTBGQmIwSXNRMEZCUXpaRExHRkJRV0VzUlVGQlJYQmFMRTlCUVU4c1JVRkJSWE5ITEVOQlFVTXNSVUZCUlM5RkxFZEJRVWNzUTBGQlF5eERRVUZCTzBGQlF6ZEVMRTlCUVVFN1RVRkZRU3hKUVVGSk1GZ3NWVUZCVlN4SlFVRkpiRm9zVTBGQlV5eEZRVUZGTzFGQlF6TkNMRTlCUVU5M1Z5eGpRVUZ2UWl4RFFVRkRlRmNzVTBGQlV5eEZRVUZGY1Zvc1lVRkJZU3hGUVVGRk9WTXNRMEZCUXl4RlFVRkZMMFVzUjBGQlJ5eERRVUZETEVOQlFVRTdRVUZETDBRc1QwRkJRVHRCUVVWQkxFMUJRVUVzU1VGQlNUSllMRmxCUVZrc1NVRkJTVzVhTEZOQlFWTXNTVUZCU1N4RFFVRkRReXhQUVVGUExFVkJRVVU3VVVGRGVrTXNUMEZCVDNWWExHTkJRVzlDTEVOQlFVTjRWeXhUUVVGVExFVkJRVVZ4V2l4aFFVRmhMRVZCUVVVNVV5eERRVUZETEVWQlFVVXZSU3hIUVVGSExFTkJRVU1zUTBGQlFUdEJRVU12UkN4UFFVRkJPMEZCUlVFc1RVRkJRU3hQUVVGUExFdEJRVXNzUTBGQlFUdExRVU5pTEVOQlFVRXNRMEZCUVR0QlFVRkJaMUVzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSVFJDTERSQ1FVRkJMRVZCUVVFc1ZVRkJRemxMTEVOQlFVTXNSVUZCU3p0QlFVRkJMRTFCUVVFc1NVRkJRU3RUTEhOQ1FVRkJMRU5CUVVFN1FVRkRiRU1zVFVGQlFTeEpRVUZKTEVOQlFVTnFTU3hMUVVGQkxFTkJRVXRyVUN4MVFrRkJkVUlzUTBGQlEyaGhMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRM0JETEZGQlFVRXNUMEZCVHl4TFFVRkxMRU5CUVVFN1FVRkRaQ3hQUVVGQk8wRkJSVUVzVFVGQlFTeEpRVUZCYlZRc1dVRkJRU3hIUVVGNVEzSkpMRXRCUVVFc1EwRkJTMjVTTEV0QlFVczdVVUZCTTBOelFpeEhRVUZITEVkQlFVRnJXU3haUVVGQkxFTkJRVWhzV1N4SFFVRkhPMUZCUVVWNFFpeFRRVUZUTEVkQlFVRXdXaXhaUVVGQkxFTkJRVlF4V2l4VFFVRlRPMUZCUVVWcFdpeFpRVUZaTEVkQlFVRlRMRmxCUVVFc1EwRkJXbFFzV1VGQldTeERRVUZCTzAxQlEzQkRMRWxCUVUxMVNDeE5RVUZOTEVkQlFVZG9TeXhSUVVGakxFTkJRVU5vVml4SFFVRkhMRVZCUVVVclJTeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTnlReXhOUVVGQkxFbEJRVTA0VXl4aFFVRmhMRWRCUVVGRExFTkJRVUZCTEhOQ1FVRkJMRWRCUVVkcVNTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU50V2l4aFFVRmhMRTFCUVVGRExFbEJRVUZCTEVsQlFVRkJMSE5DUVVGQkxHTkJRVUZCTEhOQ1FVRkJMRWRCUVVscVNTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU52V1N4WlFVRlpMRU5CUVVFN1FVRkZla1VzVFVGQlFTeEpRVUZKVnl4WlFVRlpMRVZCUVVVN1FVRkRhRUlzVVVGQlFTeFBRVUZQZWtNc1YwRkJhVUlzUTBGQlEyZExMRTFCUVUwc1JVRkJSVzVJTEdGQlFXRXNRMEZCUXl4RFFVRkJPMEZCUTJwRUxFOUJRVU1zVFVGQlRUdEJRVU5NTEZGQlFVRXNUMEZCVHpkRExGZEJRV2xDTEVOQlFVTm5TeXhOUVVGTkxFVkJRVVY0WjBJc1UwRkJVeXhEUVVGRExFTkJRVUU3UVVGRE4wTXNUMEZCUVR0TFFVTkVMRU5CUVVFc1EwRkJRVHRCUVVGQmQxSXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJUQkNMREJDUVVGQkxFVkJRVUVzVlVGQlF6bExMRU5CUVVNc1JVRkJTenRCUVVGQkxFMUJRVUVzU1VGQlFXdFVMSE5DUVVGQkxFTkJRVUU3UVVGRGFFTXNUVUZCUVN4SlFVRkpMRU5CUVVOd1NTeExRVUZCTEVOQlFVdHJVQ3gxUWtGQmRVSXNRMEZCUTJoaExFTkJRVU1zUTBGQlF5eEZRVUZGTzBGQlEzQkRMRkZCUVVFc1QwRkJUeXhMUVVGTExFTkJRVUU3UVVGRFpDeFBRVUZCTzBGQlJVRXNUVUZCUVN4SlFVRkJiMVFzV1VGQlFTeEhRVUZ0UkhSSkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzN1VVRkJja1J6UWl4SFFVRkhMRWRCUVVGdFdTeFpRVUZCTEVOQlFVaHVXU3hIUVVGSE8xRkJRVVYyUWl4UFFVRlBMRWRCUVVFd1dpeFpRVUZCTEVOQlFWQXhXaXhQUVVGUE8xRkJRVVZwV2l4VlFVRlZMRWRCUVVGVExGbEJRVUVzUTBGQlZsUXNWVUZCVlR0UlFVRkZReXhaUVVGWkxFZEJRVUZSTEZsQlFVRXNRMEZCV2xJc1dVRkJXU3hEUVVGQk8wMUJRemxETEVsQlFVMXhTQ3hOUVVGTkxFZEJRVWRvU3l4UlFVRmpMRU5CUVVOb1ZpeEhRVUZITEVWQlFVVXJSU3hEUVVGRExFTkJRVU1zUTBGQlFUdEJRVU55UXl4TlFVRkJMRWxCUVUwNFV5eGhRVUZoTEVkQlFVRkpMRU5CUVVGQkxITkNRVUZCTEVkQlFVZHdTU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdFdpeGhRVUZoTEUxQlFVRkpMRWxCUVVGQkxFbEJRVUZCTEhOQ1FVRkJMR05CUVVGQkxITkNRVUZCTEVkQlFVbHdTU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdldTeFpRVUZaTEVOQlFVRTdUVUZGZWtVc1NVRkJTVmtzVlVGQlZTeEpRVUZKUXl4WlFVRlpMRVZCUVVVN1FVRkRPVUlzVVVGQlFTeFBRVUZQTTBNc1YwRkJhVUlzUTBGQlEyZExMRTFCUVUwc1JVRkJSVzVJTEdGQlFXRXNRMEZCUXl4RFFVRkJPMEZCUTJwRUxFOUJRVU1zVFVGQlRUdEJRVU5NTEZGQlFVRXNUMEZCVHpkRExGZEJRV2xDTEVOQlFVTm5TeXhOUVVGTkxFVkJRVVYyWjBJc1QwRkJUeXhEUVVGRExFTkJRVUU3UVVGRE0wTXNUMEZCUVR0TFFVTkVMRU5CUVVFc1EwRkJRVHRCUVVGQmRWSXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJUSkNMREpDUVVGQkxFVkJRVUVzVlVGQlF6VktMRU5CUVVNc1JVRkJTenRCUVVGQkxFMUJRVUVzU1VGQlFXZGFMSE5DUVVGQkxFTkJRVUU3UVVGRGFrTXNUVUZCUVN4SlFVRkJOMGNzV1VGQlFTeEhRVU5GZGtrc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3p0UlFVUktjMElzUjBGQlJ5eEhRVUZCYjFrc1dVRkJRU3hEUVVGSWNGa3NSMEZCUnp0UlFVRkZlVmdzV1VGQldTeEhRVUZCVnl4WlFVRkJMRU5CUVZwWUxGbEJRVms3VVVGQlJVTXNWVUZCVlN4SFFVRkJWU3haUVVGQkxFTkJRVlpXTEZWQlFWVTdVVUZCUlVNc1dVRkJXU3hIUVVGQlV5eFpRVUZCTEVOQlFWcFVMRmxCUVZrN1VVRkJSVzVhTEZOQlFWTXNSMEZCUVRSYUxGbEJRVUVzUTBGQlZEVmFMRk5CUVZNN1VVRkJSVU1zVDBGQlR5eEhRVUZCTWxvc1dVRkJRU3hEUVVGUU0xb3NUMEZCVHl4RFFVRkJPMEZCUjNaRkxFMUJRVUVzU1VGQlRXOWFMR0ZCUVdFc1IwRkJRVzlJTEVOQlFVRkJMSE5DUVVGQkxFZEJRVWR3VUN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXaXhoUVVGaExFMUJRVUZ2U0N4SlFVRkJRU3hKUVVGQlFTeHpRa0ZCUVN4alFVRkJRU3h6UWtGQlFTeEhRVUZKY0ZBc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiMWtzV1VGQldTeERRVUZCTzAxQlJYcEZMRWxCUVVrc1JVRkJSVmNzV1VGQldTeEpRVUZKUXl4VlFVRlZMRWxCUVVsRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTkZMR0ZCUVdFc1JVRkJSVHRCUVVOdVJTeFJRVUZCTEU5QlFVOHNTMEZCU3l4RFFVRkJPMEZCUTJRc1QwRkJRVHROUVVWQkxFbEJRVWxLTEZsQlFWa3NTVUZCU1doYUxFOUJRVThzUlVGQlJUdFJRVU16UWl4UFFVRlBkVmNzWjBKQlFYTkNMRU5CUVVNMlF5eGhRVUZoTEVWQlFVVndXaXhQUVVGUExFVkJRVVYzU0N4RFFVRkRMRVZCUVVWcVJ5eEhRVUZITEVOQlFVTXNRMEZCUVR0QlFVTXZSQ3hQUVVGQk8wMUJSVUVzU1VGQlNUQllMRlZCUVZVc1NVRkJTV3hhTEZOQlFWTXNSVUZCUlR0UlFVTXpRaXhQUVVGUGQxY3NaMEpCUVhOQ0xFTkJRVU40Vnl4VFFVRlRMRVZCUVVWeFdpeGhRVUZoTEVWQlFVVTFVaXhEUVVGRExFVkJRVVZxUnl4SFFVRkhMRU5CUVVNc1EwRkJRVHRCUVVOcVJTeFBRVUZCTzBGQlJVRXNUVUZCUVN4SlFVRkpNbGdzV1VGQldTeEpRVUZKYmxvc1UwRkJVeXhKUVVGSkxFTkJRVU5ETEU5QlFVOHNSVUZCUlR0UlFVTjZReXhQUVVGUGRWY3NaMEpCUVhOQ0xFTkJRVU40Vnl4VFFVRlRMRVZCUVVWeFdpeGhRVUZoTEVWQlFVVTFVaXhEUVVGRExFVkJRVVZxUnl4SFFVRkhMRU5CUVVNc1EwRkJRVHRCUVVOcVJTeFBRVUZCTzBGQlJVRXNUVUZCUVN4UFFVRlBMRXRCUVVzc1EwRkJRVHRMUVVOaUxFTkJRVUVzUTBGQlFUdEJRVUZCWjFFc1NVRkJRVUVzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUldVc1pVRkJRU3hGUVVGQkxGVkJRVU40VUN4WFFVRlhMRVZCUVVzN1FVRkRMMElzVFVGQlFTeEpRVUZOVEN4SFFVRkhMRWRCUVVjMlVDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56UWl4SFFVRkhMRU5CUVVFN1RVRkRNVUlzU1VGQlRXVXNVMEZCVXl4SFFVRkhhVlVzVDBGQllTeERRVUZETTFVc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlF5OURMRTFCUVVFc1QwRkRSVEpWTEZkQlFXbENMRU5CUVVNelZTeFhRVUZYTEVWQlFVVk1MRWRCUVVjc1EwRkJReXhKUVVGSloxWXNWMEZCYVVJc1EwRkJRMnBWTEZOQlFWTXNSVUZCUldZc1IwRkJSeXhEUVVGRExFTkJRVUU3UzBGRk0wVXNRMEZCUVN4RFFVRkJPMEZCUVVGblVTeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGQlFTeG5Ra0ZCUVN4RlFVVm5RaXhWUVVGRE4xQXNSMEZCUnl4RlFVRkZLMFVzUTBGQlF5eEZRVUZCTzBGQlFVRXNUVUZCUVN4UFFVTjBRbWxSTEU5QlFXRXNRMEZCUTJoV0xFZEJRVWNzUTBGQlF5eExRVUZMWjFZc1QwRkJZU3hEUVVGRFFTeFBRVUZoTEVWQlFVVXNRMEZCUXl4SlFVTnlSR3BSTEVOQlFVTXNTMEZCUzJsUkxGRkJRV01zUTBGQlEwRXNUMEZCWVN4RlFVRkZMRU5CUVVNc1EwRkJRVHRCUVVGQkxFdEJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRm9SaXhKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hyUWtGQlFTeEZRVVZ3UWl4VlFVRkROMUFzUjBGQlJ5eEZRVUZGYVVjc1EwRkJReXhGUVVGQk8wRkJRVUVzVFVGQlFTeFBRVU40UWl0UExFOUJRV0VzUTBGQlEyaFdMRWRCUVVjc1EwRkJReXhMUVVGTFoxWXNUMEZCWVN4RFFVRkRRU3hQUVVGaExFVkJRVVVzUTBGQlF5eEpRVU55UkM5UExFTkJRVU1zUzBGQlN5dFBMRlZCUVdkQ0xFTkJRVU5CTEU5QlFXRXNSVUZCUlN4RFFVRkRMRU5CUVVFN1FVRkJRU3hMUVVGQkxFTkJRVUVzUTBGQlFUdEpRVUZCYUVZc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJYWkNMR2xDUVVGQkxFVkJRVUVzVlVGQlF6ZFFMRWRCUVVjc1JVRkJSU3RGTEVOQlFVTXNSVUZCUlRoU0xGRkJRVkVzUlVGQlFUdE5RVUZCTEU5QlEycEROMElzVVVGQll5eERRVUZETmtJc1VVRkJVU3hEUVVGRExFdEJRVXM1VWl4RFFVRkRMRWxCUXpsQ2FWRXNUMEZCWVN4RFFVRkRhRllzUjBGQlJ5eERRVUZETEV0QlFVdG5WaXhQUVVGaExFTkJRVU0yUWl4UlFVRlJMRU5CUVVNc1EwRkJRVHRCUVVGQkxFdEJRVUVzUTBGQlFTeERRVUZCTzBsQlFVRTNSeXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGTlVJc2JVSkJRVUVzUlVGQlFTeFZRVUZETjFBc1IwRkJSeXhGUVVGRmFVY3NRMEZCUXl4RlFVRkZORkVzVVVGQlVTeEZRVUZCTzAxQlFVRXNUMEZEYmtNM1FpeFZRVUZuUWl4RFFVRkRhRllzUjBGQlJ5eERRVUZETEV0QlFVdHBSeXhEUVVGRExFbEJRek5DSzA4c1QwRkJZU3hEUVVGRGFGWXNSMEZCUnl4RFFVRkRMRXRCUVV0blZpeFBRVUZoTEVOQlFVTTJRaXhSUVVGUkxFTkJRVU1zUTBGQlFUdEJRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJPMGxCUVVFM1J5eGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hoUVVGQkxFVkJSV3hETEZsQlFVMDdUVUZEYkVJc1NVRkJUWEZRTEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVFN1FVRkRhRUlzVFVGQlFTeEpRVUZKUXl4aFFVRmhMRWRCUVVkMFVDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU13WjBJc1YwRkJWeXhEUVVGQk8wMUJSVEZETEVsQlFVbHFWU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzAxQlExUXNTVUZCU1d0VkxHdENRVUZyUWl4SFFVRkhMRXRCUVVzc1EwRkJRVHRCUVVNNVFpeE5RVUZCTEVsQlFVbERMR2RDUVVGblFpeEhRVUZIZEVzc1kwRkJiMElzUTBGRGVrTkJMR1ZCUVhGQ0xFTkJRVU51Uml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnpRaXhIUVVGSExFTkJRVU1zUlVGRGNrTTJVQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVONlF5eE5RVUZOTEVWQlEycENORlFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1FSXNaMEpCUTJJc1EwRkJReXhEUVVGQk8wRkJSVVFzVFVGQlFTeEpRVUZOZVZjc1VVRkJVU3hIUVVGSGFFZ3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEY1Zrc1kwRkJZeXhIUVVOMFF5OUNMR05CUVc5Q0xFTkJRMnhDYmtZc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiVmtzVVVGQlVTeEZRVU51UW1oSUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM3BETEUxQlFVMHNSVUZEYWtJMFZDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU13UWl4blFrRkRZaXhEUVVGRExFZEJRMFI1VUN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFTkJRVUU3UVVGRmRrSXNUVUZCUVN4SlFVRk5ReXhaUVVGWkxFZEJRVWRxU0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhXU3hqUVVGakxFZEJRekZETDBJc1kwRkJiMElzUTBGRGJFSnVSaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdldTeFpRVUZaTEVWQlEzWkNha2dzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGVrTXNUVUZCVFN4RlFVTnFRalJVTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6QkNMR2RDUVVOaUxFTkJRVU1zUjBGRFJIbFFMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTI5WkxGbEJRVmtzUTBGQlFUdEJRVVV6UWl4TlFVRkJMRTlCUVU4c1NVRkJTU3hGUVVGRk8wRkJRMWh2U1N4UlFVRkJRU3hMUVVGTExFTkJRVU4yVkN4SlFVRkpMR1ZCUTFJd1JTeExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRM2xOTEVsQlFVa3NSVUZCUVR0QlFVTklSaXhWUVVGQlFTeGxRVUZsTEVWQlFVVm9UaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNMlowSXNiVUpCUVc5Q08wRkJRMmhFTlVJc1ZVRkJRVUVzZDBKQlFYZENMRVZCUVVVNVRpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5wWml4M1FrRkJlVUk3UVVGRE9VUkRMRlZCUVVGQkxEQkNRVUV3UWl4RlFVRkZMMDRzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGEyWXNNRUpCUVRKQ08wRkJRMnhGY2xNc1ZVRkJRVUVzUjBGQlJ5eEZRVUZGU2l4RFFVRkZPMEZCUTFCdVRDeFZRVUZCUVN4SFFVRkhMRVZCUVVWelppeG5Ra0ZCYVVJN1ZVRkRkRUp3WXl4TFFVRkxMRVZCUVVVNFVpeFJRVUZqTEVOQlFVTnVSaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOelFpeEhRVUZITEVOQlFVVTdWVUZEZEVOblpDeFZRVUZWTEVWQlFVVnVUaXhMUVVGQkxFTkJRVXR6VGl4alFVRmxPMEZCUTJoRGNrSXNWVUZCUVVFc1pVRkJaU3hGUVVGRmFrMHNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjJRc1pVRkJaMEk3VlVGRE5VTnRRaXhsUVVGbExFVkJRVVZ3VGl4TFFVRkJMRU5CUVV0cFR5eHRRa0ZCYjBJN1FVRkRNVU5hTEZWQlFVRkJMRmxCUVZrc1JVRkJSWEpPTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzZGxMRmxCUVdFN1FVRkRkRU5ITEZWQlFVRkJMR2RDUVVGblFpeEZRVUZGZUU0c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNbVVzWjBKQlFXbENPMEZCUXpsRGNHaENMRlZCUVVGQkxFMUJRVTBzUlVGQlJUUlVMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNwRExFMUJRVTg3UVVGRE1VSkZMRlZCUVVGQkxFOUJRVThzUlVGQlJUQlVMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNaRExFOUJRVkU3UVVGRE5VSjVTQ3hWUVVGQlFTeFBRVUZQTEVWQlFVVnBUU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOclJpeFBRVUZSTzBGQlF6VkNReXhWUVVGQlFTeFpRVUZaTEVWQlFVVm5UU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdFJpeFpRVUZoTzBGQlEzUkRReXhWUVVGQlFTeHZRa0ZCYjBJc1JVRkJSU3RNTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyOUdMRzlDUVVGeFFqdEJRVU4wUkVNc1ZVRkJRVUVzV1VGQldTeEZRVUZGT0V3c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjVVlzV1VGQllUdEJRVU4wUTBNc1ZVRkJRVUVzYjBKQlFXOUNMRVZCUVVVMlRDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56Uml4dlFrRkJjVUk3UVVGRGRFUm5XQ3hWUVVGQlFTeE5RVUZOTEVWQlFVVnVUQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOell5eE5RVUZQTzBGQlF6RkNReXhWUVVGQlFTeHZRa0ZCYjBJc1JVRkJSWEJNTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzVmpMRzlDUVVGeFFqdEJRVU4wUkd4UkxGVkJRVUZCTEdOQlFXTXNSVUZCUlRoRkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM0ZOTEdOQlFXVTdRVUZETVVOeFRTeFZRVUZCUVN4UlFVRlJMRVZCUVVWMlNDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU13V1N4UlFVRlRPMEZCUXpsQ1V5eFZRVUZCUVN4aFFVRmhMRVZCUVVWb1NTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU50V2l4aFFVRmpPMEZCUTNoRE5WUXNWVUZCUVVFc1ZVRkJWU3hGUVVGRk5Fd3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZFVZc1ZVRkJWenRCUVVOc1F6WlRMRlZCUVVGQkxGbEJRVmtzUlVGQlJVRXNXVUZCWVR0QlFVTXpRa1FzVlVGQlFVRXNVVUZCVVN4RlFVRkZRU3hSUVVGVE8wRkJRMjVDV1N4VlFVRkJRU3haUVVGWkxFVkJRVVUxU0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXJXU3haUVVGaE8wRkJRM1JEUXl4VlFVRkJRU3hWUVVGVkxFVkJRVVUzU0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTm5XaXhWUVVGWE8wRkJRMnhEUXl4VlFVRkJRU3haUVVGWkxFVkJRVVU1U0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnBXaXhaUVVGaE8wRkJRM1JEUXl4VlFVRkJRU3d3UWtGQk1FSXNSVUZCUlM5SUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMnRhTERCQ1FVRXlRanRCUVVOc1JXeENMRlZCUVVGQkxHVkJRV1VzUlVGQlJUZEhMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJkWkxHVkJRV2RDTzBGQlF6VkRReXhWUVVGQlFTeGhRVUZoTEVWQlFVVTVSeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOcFdTeGhRVUZqTzBGQlEzaERNa1FzVlVGQlFVRXNZMEZCWXl4RlFVRkZla3NzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE9HZENMR1ZCUVdkQ08wRkJRek5EZWtrc1ZVRkJRVUVzWTBGQll5eEZRVUZGYkVnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjVmtzWTBGQlpUdEJRVU14UTNaWkxGVkJRVUZCTEZOQlFWTXNSVUZCUlhGU0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMFlzVTBGQlZUdEJRVU5vUTBNc1ZVRkJRVUVzVDBGQlR5eEZRVUZGYjFJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRSQ3hQUVVGUk8wRkJRelZDSzFvc1ZVRkJRVUVzV1VGQldTeEZRVUZGTTBrc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRPRm9zV1VGQllUdEJRVU4wUTNKRkxGVkJRVUZCTEU5QlFVOHNSVUZCUlhSRkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM2xXTEU5QlFWRTdRVUZETlVKcFNpeFZRVUZCUVN4dFFrRkJiVUlzUlVGQlJYWk9MRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpCbExHMUNRVUZ2UWp0QlFVTndSRFZITEZWQlFVRkJMREJDUVVFd1FpeEZRVUZGTTBjc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRPRmdzTUVKQlFUSkNPMEZCUTJ4RmEwWXNWVUZCUVVFc2FVSkJRV2xDTEVWQlFVVTNUQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOblpDeHBRa0ZCYTBJN1FVRkRhRVJ5Uml4VlFVRkJRU3hsUVVGbExFVkJRVVY0Unl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXlXQ3hsUVVGblFqdEJRVU0xUTNWRkxGVkJRVUZCTEdOQlFXTXNSVUZCUlM5TExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMnRqTEdOQlFXVTdRVUZETVVOTkxGVkJRVUZCTEZsQlFWa3NSVUZCUlhKTUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM2RqTEZsQlFXRTdRVUZEZEVNNVlTeFZRVUZCUVN4blFrRkJaMElzUlVGQlJYbFFMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpCQ0xHZENRVUZwUWp0QlFVTTVRMmxpTEZWQlFVRkJMREJDUVVFd1FpeEZRVUZGZUV3c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNbU1zTUVKQlFUSkNPMEZCUTJ4RlF5eFZRVUZCUVN3MFFrRkJORUlzUlVGQlJYcE1MRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpSakxEUkNRVUZCUVR0QlFVRTJRaXhUUVVOMlJTeERRVU5JTEVOQlFVTXNRMEZCUVR0QlFVVkVMRkZCUVVFc1NVRkJTU3RFTEd0Q1FVRnJRaXhGUVVGRkxFMUJRVUU3UVVGRmVFSnNWU3hSUVVGQlFTeERRVUZETEVWQlFVVXNRMEZCUVR0UlFVTkliVlVzWjBKQlFXZENMRWRCUVVkMFN5eFJRVUZqTEVOQlFVTnpTeXhuUWtGQlowSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRVHM3UVVGRmRFUTdRVUZEUVR0QlFVTkJMRkZCUVVFc1NVRkJUVWNzYlVKQlFXMUNMRWRCUTNaQ1RpeGhRVUZoTEVsQlFVbG9WU3hEUVVGRExFbEJRVWsyVXl4blEwRkJaME1zUTBGQlFUdFJRVU40UkN4SlFVRk5NRUlzZFVKQlFYVkNMRWRCUXpOQ0xFTkJRVU5RTEdGQlFXRXNTVUZCU1N4RFFVRkRkRkFzUzBGQlFTeERRVUZMT0ZBc1lVRkJZU3hEUVVGRFRDeG5Ra0ZCWjBJc1EwRkJReXhEUVVGQk8xRkJSWHBFTEVsQlFVbEhMRzFDUVVGdFFpeEpRVUZKUXl4MVFrRkJkVUlzUlVGQlJUdEJRVU5zUkN4VlFVRkJMRWxCUVVrM1VDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5yYUVJc1lVRkJZU3hGUVVGRk8wRkJRelZDVUN4WlFVRkJRU3hyUWtGQmEwSXNSMEZCUnl4SlFVRkpMRU5CUVVFN1FVRkRNMElzVjBGQlF5eE5RVUZOTzBGQlEwd3NXVUZCUVN4TlFVRkJPMEZCUTBZc1YwRkJRVHRCUVVOR0xGTkJRVUU3UVVGRFJpeFBRVUZCTzBGQlJVRXNUVUZCUVN4UFFVRlBTQ3hMUVVGTExFTkJRVUU3UzBGRFlpeERRVUZCTEVOQlFVRTdRVUZCUVd4UUxFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxHTkJRVUVzUlVGRll5eFZRVUZEZDBRc1EwRkJReXhGUVVGRmRFOHNRMEZCUXl4RlFVRkxPMEZCUTNaQ0xFMUJRVUVzU1VGQlRUaGhMRk5CUVZNc1IwRkJSemRMTEZGQlFXTXNRMEZCUTI1R0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM05DTEVkQlFVY3NSVUZCUlN0RkxFTkJRVU1zUTBGQlF5eERRVUZCTzAxQlJXNUVMRWxCUVVscFVTeGxRVUZ4UWl4RFFVRkROa3NzVTBGQlV5eEZRVUZGYUZFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRhRVFzVVVGQlFTeFBRVUZCTzBGQlEwWXNUMEZCUVR0TlFVVkJiVklzUzBGQlFTeERRVUZMYzA0c1kwRkJZeXhEUVVGRGJra3NaVUZCY1VJc1EwRkJRelpMTEZOQlFWTXNRMEZCUXl4RlFVRkZlRTBzUTBGQlF5eERRVUZETEVOQlFVRTdTMEZEZWtRc1EwRkJRU3hEUVVGQk8wRkJRVUZ5UkN4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGYlVJc2JVSkJRVUVzUlVGQlFTeFZRVUZET1Vzc1EwRkJReXhGUVVGTE8wRkJRM3BDTEUxQlFVRXNTVUZCVFRoaExGTkJRVk1zUjBGQlJ6ZExMRkZCUVdNc1EwRkJRMjVHTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzTkNMRWRCUVVjc1JVRkJSU3RGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMDFCUlc1RUxFbEJRVWxwVVN4bFFVRnhRaXhEUVVGRE5rc3NVMEZCVXl4RlFVRkZhRkVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRGFFUXNVVUZCUVN4UFFVRkJPMEZCUTBZc1QwRkJRVHROUVVWQmJWSXNTMEZCUVN4RFFVRkxhVThzYlVKQlFXMUNMRU5CUVVNNVNTeGxRVUZ4UWl4RFFVRkROa3NzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUVR0TFFVTXpSQ3hEUVVGQkxFTkJRVUU3UVVGQlFUZFFMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMSFZDUVVGQkxFVkJSWFZDTEZWQlFVTnBVU3hSUVVGUkxFVkJRVVYyYTBJc1QwRkJUeXhGUVVGTE8wRkJRemRETEUxQlFVRXNTVUZCU1hOVkxFdEJRVUVzUTBGQlMyOUhMRlZCUVZVc1EwRkJRekZoTEU5QlFVOHNRMEZCUXl4SlFVRkpjMVVzUzBGQlFTeERRVUZMTkVrc1ZVRkJWU3hEUVVGRGJHUXNUMEZCVHl4RFFVRkRMRVZCUVVVc1QwRkJRVHRCUVVNeFJITlZMRTFCUVVGQkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM0ZvUWl4bFFVRmxMRU5CUVVONGEwSXNUMEZCVHl4RFFVRkRMRU5CUVVFN1FVRkRia056VlN4TlFVRkJRU3hMUVVGQkxFTkJRVXR0VVN4VlFVRlZMRU5CUVVOR0xGRkJRVkVzUTBGQlF5eERRVUZEYWs4c1QwRkJUeXhKUVVNdlFtaERMRXRCUVVFc1EwRkJTMjFSTEZWQlFWVXNRMEZCUTBZc1VVRkJVU3hEUVVGRExFTkJRVU5xVHl4UFFVRlBMRU5CUVVNeVNpeExRVUZMTEVWQlFVVXNRMEZCUVR0TFFVTTFReXhEUVVGQkxFTkJRVUU3UVVGQlFYaE1MRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMR2RDUVVGQkxFVkJSV2RDTEZWQlFVTlVMRXRCUVVzc1JVRkJSV3hOTEV0QlFVc3NSVUZCU3p0QlFVTnFReXhOUVVGQkxFbEJRVUZ2Vnl4WlFVRkJMRWRCVVVsNlNpeExRVUZCTEVOQlFVdHVVaXhMUVVGTE8xRkJVRnB0V1N4UlFVRlJMRWRCUVVGNVF5eFpRVUZCTEVOQlFWSjZReXhSUVVGUk8xRkJRMUpETEZsQlFWa3NSMEZCUVhkRExGbEJRVUVzUTBGQlduaERMRmxCUVZrN1VVRkRXazRzTUVKQlFUQkNMRWRCUVVFNFF5eFpRVUZCTEVOQlFURkNPVU1zTUVKQlFUQkNPMUZCUXpGQ2JVa3NORUpCUVRSQ0xFZEJRVUZ5Uml4WlFVRkJMRU5CUVRWQ2NVWXNORUpCUVRSQ08xRkJRelZDUkN3MlFrRkJOa0lzUjBGQlFYQkdMRmxCUVVFc1EwRkJOMEp2Uml3MlFrRkJOa0k3VVVGRE4wSnhRaXhsUVVGbExFZEJRVUY2Unl4WlFVRkJMRU5CUVdaNVJ5eGxRVUZsTzFGQlEyWkZMRzlDUVVGdlFpeEhRVUZCTTBjc1dVRkJRU3hEUVVGd1FqSkhMRzlDUVVGdlFpeERRVUZCTzBGQlJYUkNMRTFCUVVFc1NVRkJUVGxLTEZGQlFWRXNSMEZCUnk5SExFdEJRVXNzUTBGQlF6ZEVMRWRCUVVjc1EwRkJRVHROUVVNeFFpeEpRVUZKTkVzc1VVRkJVU3hMUVVGTExFdEJRVXNzUlVGQlJUdEJRVU4wUWp0UlFVTkJMMGNzUzBGQlN5eERRVUZEWjBnc1kwRkJZeXhGUVVGRkxFTkJRVUU3UVVGRGVFSXNUMEZCUVR0TlFVTkJMRWxCUVVrc1EwRkJRMGtzTUVKQlFUQkNMRVZCUVVVN1FVRkRMMElzVVVGQlFTeEpRVUZOTUVvc2EwSkJRV3RDTEVkQlFVZDZRaXh4UWtGQmNVSXNRMEZET1VORExEWkNRVUUyUWl4RlFVTTNRa01zTkVKQlEwWXNRMEZCUXl4RFFVRkJPMEZCUTBRc1VVRkJRU3hKUVVGTmQwSXNZMEZCWXl4SFFVTnNRamxDTEdGQlFXRXNRMEZCUXpaQ0xHdENRVUZyUWl4RFFVRkRMRU5CUVVNelFpeDNRa0ZCZDBJc1EwRkJRVHRCUVVNMVJDeFJRVUZCTEVsQlFVMDJRaXhWUVVGVkxFZEJRVWN2UWl4aFFVRmhMRU5CUVVNMlFpeHJRa0ZCYTBJc1EwRkJReXhEUVVGRE5VSXNTVUZCU1N4RFFVRkJPMEZCUTNwRUxGRkJRVUVzVVVGQlVXNUpMRkZCUVZFN1FVRkRaQ3hWUVVGQkxFdEJRVXNzVDBGQlR6dEJRVU5XZEVjc1dVRkJRVUVzUzBGQlFTeERRVUZMZDFFc1dVRkJXU3hEUVVGRGFsSXNTMEZCU3l4RlFVRkZiRTBzUzBGQlN5eERRVUZETEVOQlFVRTdXVUZETDBJMll5eGxRVUZsTEVOQlFVTnNTaXhSUVVGUkxFTkJRVU1zUTBGQlFUdEJRVU42UWl4WlFVRkJMRTFCUVVFN1FVRkRSaXhWUVVGQkxFdEJRVXNzV1VGQldUdFpRVU5tYUVnc1MwRkJRU3hEUVVGTGVWRXNjVUpCUVhGQ0xFTkJRM2hDY0dRc1MwRkJTeXhMUVVGTExFVkJRVVVzUjBGQlJ5eERRVUZETEVkQlFVZEJMRXRCUVVzc1IwRkJSM05pTEd0RFFVRnJReXhGUVVNM1JIaEtMRk5CUVdVc1EwRkJRemhDTEZsQlFWa3NSVUZCUlRCSUxHdERRVUZyUXl4RFFVTnNSU3hEUVVGRExFTkJRVUU3UVVGRFJDeFpRVUZCTEUxQlFVRTdRVUZEUml4VlFVRkJMRXRCUVVzc1YwRkJWenRaUVVOa00wOHNTMEZCUVN4RFFVRkxlVkVzY1VKQlFYRkNMRU5CUTNoQ2NHUXNTMEZCU3l4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWRCTEV0QlFVc3NSMEZCUjNOaUxHdERRVUZyUXl4RlFVTTNSSGhLTEZOQlFXVXNRMEZCUXpoQ0xGbEJRVmtzUlVGQlJUQklMR3REUVVGclF5eERRVU5zUlN4RFFVRkRMRU5CUVVFN1FVRkRSQ3haUVVGQkxFMUJRVUU3UVVGRFJpeFZRVUZCTEV0QlFVc3NVMEZCVXp0QlFVTmFNMDhzV1VGQlFVRXNTMEZCUVN4RFFVRkxlVkVzY1VKQlFYRkNPMEZCUTNoQ08xbEJRMEZHTEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRekZWTEZGQlFWRXNRMEZCUTNoSkxFdEJRVXNzUTBGQlF5eEhRVU42UWtFc1MwRkJTeXhIUVVGSExFVkJRVVVzUjBGQlIybGtMR05CUVdNc1IwRkRNMEpxWkN4TFFVRkxMRWRCUVVkcFpDeGpRVUZqTEVWQlF6RkNia3dzVTBGQlpTeERRVUZET0VJc1dVRkJXU3hGUVVGRmNVb3NZMEZCWXl4RFFVTTVReXhEUVVGRExFTkJRVUU3UVVGRFJDeFpRVUZCTEUxQlFVRTdRVUZEUml4VlFVRkJMRXRCUVVzc1YwRkJWenRCUVVOa2RGRXNXVUZCUVVFc1MwRkJRU3hEUVVGTGVWRXNjVUpCUVhGQ08wRkJRM2hDTzBGQlEwRkdMRmxCUVVGQkxGVkJRVlVzUTBGQlEwRXNWVUZCVlN4RFFVRkRNV2xDTEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRMmRQTEZGQlFWRXNRMEZCUTNoSkxFdEJRVXNzUTBGQlF5eEhRVU0zUTBFc1MwRkJTeXhIUVVGSExFVkJRVVVzUjBGQlIybGtMR05CUVdNc1IwRkRNMEpxWkN4TFFVRkxMRWRCUVVkcFpDeGpRVUZqTEVWQlF6RkNia3dzVTBGQlpTeERRVUZET0VJc1dVRkJXU3hGUVVGRmNVb3NZMEZCWXl4RFFVTTVReXhEUVVGRExFTkJRVUU3UVVGRFJDeFpRVUZCTEUxQlFVRTdRVUZEU2l4VFFVRkJPMEZCUTBZc1QwRkJRVHRCUVVWQlJpeE5RVUZCUVN4dlFrRkJiMElzU1VGQlNVRXNiMEpCUVc5Q0xFTkJRVU0zVVN4TFFVRkxMRU5CUVVNc1EwRkJRVHRMUVVOd1JDeERRVUZCTEVOQlFVRTdRVUZCUVZrc1NVRkJRVUVzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUVVFc1owSkJRVUVzUlVGRlowSXNWVUZCUTNkRUxFTkJRVU1zUlVGQlJYQk9MRU5CUVVNc1JVRkJTenRCUVVONlFpeE5RVUZCTEVsQlFVMDBXaXhUUVVGVExFZEJRVWMzU3l4VlFVRm5RaXhEUVVGRGJrWXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYzBJc1IwRkJSeXhGUVVGRmFVY3NRMEZCUXl4RFFVRkRMRU5CUVVFN1RVRkZja1FzU1VGQlNTdFBMR2xDUVVGMVFpeERRVUZETmtzc1UwRkJVeXhGUVVGRmFGRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEYkVRc1VVRkJRU3hQUVVGQk8wRkJRMFlzVDBGQlFUdE5RVVZCYlZJc1MwRkJRU3hEUVVGTGMwNHNZMEZCWXl4RFFVRkRia2tzYVVKQlFYVkNMRU5CUVVNMlN5eFRRVUZUTEVOQlFVTXNSVUZCUlhoTkxFTkJRVU1zUTBGQlF5eERRVUZCTzB0QlF6TkVMRU5CUVVFc1EwRkJRVHRCUVVGQmNrUXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJYRkNMSEZDUVVGQkxFVkJRVUVzVlVGQlF6VktMRU5CUVVNc1JVRkJTenRCUVVNelFpeE5RVUZCTEVsQlFVMDBXaXhUUVVGVExFZEJRVWMzU3l4VlFVRm5RaXhEUVVGRGJrWXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYzBJc1IwRkJSeXhGUVVGRmFVY3NRMEZCUXl4RFFVRkRMRU5CUVVFN1RVRkZja1FzU1VGQlNTdFBMR2xDUVVGMVFpeERRVUZETmtzc1UwRkJVeXhGUVVGRmFGRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEYkVRc1VVRkJRU3hQUVVGQk8wRkJRMFlzVDBGQlFUdE5RVVZCYlZJc1MwRkJRU3hEUVVGTGFVOHNiVUpCUVcxQ0xFTkJRVU01U1N4cFFrRkJkVUlzUTBGQlF6WkxMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVUU3UzBGRE4wUXNRMEZCUVN4RFFVRkJPMEZCUVVFM1VDeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGQlFTeDVRa0ZCUVN4RlFVVjVRaXhWUVVGRE1GRXNWVUZCVlN4RlFVRkZhR3hDTEU5QlFVOHNSVUZCU3p0QlFVTnFSQ3hOUVVGQkxFbEJRVWx6VlN4TFFVRkJMRU5CUVV0dlJ5eFZRVUZWTEVOQlFVTXhZU3hQUVVGUExFTkJRVU1zU1VGQlNYTlZMRXRCUVVFc1EwRkJTelJKTEZWQlFWVXNRMEZCUTJ4a0xFOUJRVThzUTBGQlF5eEZRVUZGTEU5QlFVRTdRVUZETVVSelZTeE5RVUZCUVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhhRUlzWlVGQlpTeERRVUZEZUd0Q0xFOUJRVThzUTBGQlF5eERRVUZCTzAxQlEyNURjMVVzUzBGQlFTeERRVUZMTWxFc1dVRkJXU3hEUVVGRFJDeFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNeFR5eFBRVUZQTEVsQlEzWkRhRU1zUzBGQlFTeERRVUZMTWxFc1dVRkJXU3hEUVVGRFJDeFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNeFR5eFBRVUZQTEVOQlFVTXlTaXhMUVVGTExFVkJRVVVzUTBGQlFUdExRVU53UkN4RFFVRkJMRU5CUVVFN1FVRkJRWGhNTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVUZCTEd0Q1FVRkJMRVZCUld0Q0xGVkJRVU5VTEV0QlFVc3NSVUZCUlRsTUxFOUJRVThzUlVGQlN6dEJRVU55UXl4TlFVRkJMRWxCUVUwMlV5eFJRVUZSTEVkQlFVY3ZSeXhMUVVGTExFTkJRVU0zUkN4SFFVRkhMRU5CUVVFN1FVRkRNVUlzVFVGQlFTeEpRVUZKTEVOQlFVTnpSU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNFdDd3dRa0ZCTUVJc1JVRkJSVHRCUVVNeFF5eFJRVUZCTEZGQlFWRk1MRkZCUVZFN1FVRkRaQ3hWUVVGQkxFdEJRVXNzVDBGQlR6dEJRVU5XZEVjc1dVRkJRVUVzUzBGQlFTeERRVUZMTkZFc1kwRkJZeXhEUVVGRGNsSXNTMEZCU3l4RlFVRkZPVXdzVDBGQlR5eERRVUZETEVOQlFVRTdXVUZEYmtOMVRTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU54YUVJc1pVRkJaU3hEUVVGRGJGRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYlZrc1VVRkJVU3hEUVVGRExFTkJRVUU3UVVGREwwTXNXVUZCUVN4TlFVRkJPMEZCUTBZc1ZVRkJRU3hMUVVGTExGbEJRVms3V1VGRFptaElMRXRCUVVFc1EwRkJTelpSTEhWQ1FVRjFRaXhEUVVNeFFuQmtMRTlCUVU4c1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZIUVN4UFFVRlBMRWRCUVVjc1EwRkJReXhGUVVNdlFqQlNMRmRCUVdsQ0xFTkJRVU51Uml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZXU3haUVVGWkxFVkJRVVVzUTBGQlF5eERRVU01UXl4RFFVRkRMRU5CUVVFN1FVRkRSQ3haUVVGQkxFMUJRVUU3UVVGRFJpeFZRVUZCTEV0QlFVc3NWMEZCVnp0WlFVTmtha2dzUzBGQlFTeERRVUZMTmxFc2RVSkJRWFZDTEVOQlF6RkNjR1FzVDBGQlR5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVkQkxFOUJRVThzUjBGQlJ5eERRVUZETEVWQlF5OUNNRklzVjBGQmFVSXNRMEZCUTI1R0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjlaTEZsQlFWa3NSVUZCUlN4RFFVRkRMRU5CUXpsRExFTkJRVU1zUTBGQlFUdEJRVU5FTEZsQlFVRXNUVUZCUVR0QlFVTktMRk5CUVVFN1FVRkRSaXhQUVVGQk8wdEJRMFFzUTBGQlFTeERRVUZCTzBGQlFVRTVSeXhKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZiMElzYjBKQlFVRXNSVUZCUVN4VlFVRkRPVXNzUTBGQlF5eEZRVUZMTzBGQlF6RkNMRTFCUVVFc1NVRkJRVFpWTEdGQlFVRXNSMEZYU1M5S0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzN1VVRldXbk5DTEVkQlFVY3NSMEZCUVRSYUxHRkJRVUVzUTBGQlNEVmFMRWRCUVVjN1VVRkRTSGhDTEZOQlFWTXNSMEZCUVc5aUxHRkJRVUVzUTBGQlZIQmlMRk5CUVZNN1VVRkRWRU1zVDBGQlR5eEhRVUZCYldJc1lVRkJRU3hEUVVGUWJtSXNUMEZCVHp0UlFVTlFiMWtzVVVGQlVTeEhRVUZCSzBNc1lVRkJRU3hEUVVGU0wwTXNVVUZCVVR0UlFVTlNNV0VzVDBGQlR5eEhRVUZCZVdRc1lVRkJRU3hEUVVGUWVtUXNUMEZCVHp0UlFVTlFlVWdzVDBGQlR5eEhRVUZCWjFjc1lVRkJRU3hEUVVGUWFGY3NUMEZCVHp0UlFVTlFhMVFzV1VGQldTeEhRVUZCT0VNc1lVRkJRU3hEUVVGYU9VTXNXVUZCV1R0UlFVTmFOa29zWTBGQll5eEhRVUZCTDBjc1lVRkJRU3hEUVVGa0swY3NZMEZCWXp0UlFVTmtPV01zV1VGQldTeEhRVUZCSzFZc1lVRkJRU3hEUVVGYUwxWXNXVUZCV1R0UlFVTmFSU3haUVVGWkxFZEJRVUUyVml4aFFVRkJMRU5CUVZvM1ZpeFpRVUZaTEVOQlFVRTdRVUZGWkN4TlFVRkJMRWxCUVUwMll5eGxRVUZsTEVkQlFVZEVMR05CUVdNc1IwRkRiRU5CTEdOQlFXTXNRMEZCUXpOTUxGRkJRV01zUTBGQlEyaFdMRWRCUVVjc1JVRkJSU3RGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUTNSRGNFSXNVMEZCVXl4RFFVRkJPMDFCUTJJc1NVRkJUV3RqTEZOQlFWTXNSMEZCUnpkTExGRkJRV01zUTBGQlEyaFdMRWRCUVVjc1JVRkJSU3RGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMDFCUTNoRExFOUJRVTh5VGl4SlFVRkpMRU5CUTFRc09FSkJRVGhDTEVWQlFVRXNNRUpCUVVFc1EwRkJRWFJWTEUxQlFVRXNRMEZEU0RKSExFTkJRVU1zUTBGRE5VSTJZaXhGUVVGQlFTeGxRVUZsTEVWQlEyWTdRVUZEUlN4UlFVRkJMSGREUVVGM1F5eEZRVU4wUXl4RFFVRkRlbXRDTEU5QlFVOHNTVUZCU1hsSUxFOUJRVThzU1VGQlNVTXNXVUZCV1N4SlFVRkpSU3haUVVGWkxFdEJRMjVFYVZJc1pVRkJjVUlzUTBGQlF6WkxMRk5CUVZNc1JVRkJSV2hSTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6dFJRVU01UXl4M1EwRkJkME1zUlVGQlJXMVNMRXRCUVVFc1EwRkJTelpGTEdWQlFXVXNRMEZETlVReFZTeEhRVUZITEVWQlEwZ3JSU3hEUVVGRExFVkJRMFE0VWl4UlFVTkdMRU5CUVVNN1FVRkRSQ3hSUVVGQkxHbEVRVUZwUkN4RlFVTXZReXhEUVVGRGFFZ3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZET0Znc01FSkJRVEJDTEVsQlEzUkRNMGNzUzBGQlFTeERRVUZMTmtVc1pVRkJaU3hEUVVGRE1WVXNSMEZCUnl4RlFVRkZLMFVzUTBGQlF5eEZRVUZGSzFJc1dVRkJXU3hEUVVGRE8wRkJRelZETEZGQlFVRXNhMFJCUVd0RUxFVkJRMmhFYWtnc1MwRkJRU3hEUVVGTGExQXNkVUpCUVhWQ0xFTkJRVU5vWVN4RFFVRkRMRU5CUVVNN1FVRkRha01zVVVGQlFTeDNRMEZCZDBNc1JVRkJSV2xSTEdOQlFXOUNMRU5CUXpWRWVGY3NVMEZCVXl4RlFVTlVReXhQUVVGUExFVkJRMUJ6Unl4RFFVRkRMRVZCUTBRdlJTeEhRVU5HTEVOQlFVTTdRVUZEUkN4UlFVRkJMREpEUVVFeVF5eEZRVUZGTmxBc1MwRkJRU3hEUVVGTFoxSXNhVUpCUVdsQ0xFTkJRVU01WWl4RFFVRkRMRU5CUVVNN1FVRkRkRVVzVVVGQlFTeDVRMEZCZVVNc1JVRkJSVGhMTEV0QlFVRXNRMEZCUzJsU0xHVkJRV1VzUTBGQlF5OWlMRU5CUVVNc1EwRkJRenRCUVVOc1JTeFJRVUZCTEhGRVFVRnhSQ3hGUVVOdVJEaExMRXRCUVVFc1EwRkJTMnRTTERCQ1FVRXdRaXhEUVVGRGFHTXNRMEZCUXl4RFFVRkRPMEZCUTNCRExGRkJRVUVzYlVSQlFXMUVMRVZCUTJwRU9Fc3NTMEZCUVN4RFFVRkxiVklzZDBKQlFYZENMRU5CUVVOcVl5eERRVUZETEVOQlFVTTdRVUZEYkVNc1VVRkJRU3h4UTBGQmNVTXNSVUZCUlRoTExFdEJRVUVzUTBGQlMyOVNMR05CUVdNc1EwRkJRMnBvUWl4SFFVRkhMRVZCUVVVclJTeERRVUZETEVOQlFVRTdRVUZEYmtVc1QwRkRSaXhEUVVGRExFTkJRVUU3UzBGRFJpeERRVUZCTEVOQlFVRTdRVUZCUVdsTUxFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWaExHRkJRVUVzUlVGQlFTeFZRVUZET1Vzc1EwRkJReXhGUVVGTE8wMUJRMjVDTEVsQlFVMXRZeXhuUWtGQlowSXNSMEZCUjJ4TkxGRkJRV01zUTBGQlEyNUdMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTI5WkxGbEJRVmtzUTBGQlF5eERRVUZCTzBGQlEyaEZMRTFCUVVFc1NVRkJUWFZFTEZGQlFWRXNSMEZEV2l4RFFVRkRlRXNzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE9GZ3NNRUpCUVRCQ0xFbEJRVWw2VWl4RFFVRkRMRXRCUVV0dFl5eG5Ra0ZCWjBJc1IwRkROVVFzUjBGQlJ5eEhRVU5JTEVsQlFVa3NRMEZCUVR0QlFVVldMRTFCUVVFc1QwRkJUemRITEZGQlFWRXNRMEZCUVR0TFFVTm9RaXhEUVVGQkxFTkJRVUU3UVVGQlFYSkxMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVnZRaXh2UWtGQlFTeEZRVUZCTEZWQlFVTTFTaXhEUVVGRExFVkJRVXM3VFVGRE1VSXNTVUZCVFd0aUxHdENRVUZyUWl4SFFVRkhiazBzVlVGQlowSXNRMEZCUTI1R0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjlaTEZsQlFWa3NRMEZCUXl4RFFVRkJPMEZCUTNCRkxFMUJRVUVzU1VGQlRYVkVMRkZCUVZFc1IwRkRXaXhEUVVGRGVFc3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZET0Znc01FSkJRVEJDTEVsQlFVbDJVU3hEUVVGRExFdEJRVXRyWWl4clFrRkJhMElzUjBGRE9VUXNSMEZCUnl4SFFVTklMRWxCUVVrc1EwRkJRVHRCUVVWV0xFMUJRVUVzVDBGQlR6bEhMRkZCUVZFc1EwRkJRVHRMUVVOb1FpeERRVUZCTEVOQlFVRTdRVUZCUVhKTExFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWakxHTkJRVUVzUlVGQlFTeFZRVUZETTAwc1MwRkJTeXhGUVVGTE8wRkJRM2hDTEUxQlFVRXNTVUZCUVd0bExHRkJRVUVzUjBGSlNYWlNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVczdVVUZCUVRKcFFpeHhRa0ZCUVN4SFFVRkJSQ3hoUVVGQkxFTkJTRnA2UkN4M1FrRkJkMEk3UVVGQmVFSkJMRkZCUVVGQkxIZENRVUYzUWl4SFFVRkJNRVFzY1VKQlFVRXNTMEZCUnl4TFFVRkJMRU5CUVVFc1IwRkJRU3hSUVVGUkxFZEJRVUZCTEhGQ1FVRkJPMUZCUVVGRExIRkNRVUZCTEVkQlFVRkdMR0ZCUVVFc1EwRkRia040UkN3d1FrRkJNRUk3UVVGQk1VSkJMRkZCUVVGQkxEQkNRVUV3UWl4SFFVRkJNRVFzY1VKQlFVRXNTMEZCUnl4TFFVRkJMRU5CUVVFc1IwRkJRU3hsUVVGbExFZEJRVUZCTEhGQ1FVRkJPMUZCUXpWRGRHaENMRWRCUVVjc1IwRkJRVzlvUWl4aFFVRkJMRU5CUVVod2FFSXNSMEZCUnl4RFFVRkJPMDFCUjB3c1NVRkJUVFptTEZOQlFWTXNSMEZCUnpkTExGRkJRV01zUTBGQlEyaFdMRWRCUVVjc1JVRkJSV3RFTEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUXpWRExFMUJRVUVzU1VGQlRYbFhMRTFCUVUwc1IwRkRWamxLTEV0QlFVRXNRMEZCUzI5SExGVkJRVlVzUTBGQlF6UktMRk5CUVZNc1EwRkJReXhKUVVGSmFGRXNTMEZCUVN4RFFVRkxORWtzVlVGQlZTeERRVUZEYjBnc1UwRkJVeXhEUVVGRExFZEJRM0JFYWtNc01FSkJRVEJDTEVkQlF6RkNSQ3gzUWtGQmQwSXNRMEZCUVR0QlFVVTVRaXhOUVVGQkxFOUJRVUVzUlVGQlFTeERRVUZCZG1Zc1RVRkJRU3hEUVVGVmRXSXNUVUZCVFN4RlFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGQmRtSXNUVUZCUVN4RFFVRkpORmNzVlVGQlowSXNRMEZCUXpaTExGTkJRVk1zUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUVN4RFFVRkJPMHRCUXpkRUxFTkJRVUVzUTBGQlFUdEJRVUZCTjFBc1NVRkJRVUVzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUlhOQ0xITkNRVUZCTEVWQlFVRXNWVUZCUXpWS0xFTkJRVU1zUlVGQlN6dEJRVU0xUWl4TlFVRkJMRWxCUVVGellpeGhRVUZCTEVkQlUwa3hVaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxPMUZCVWxwelFpeEhRVUZITEVkQlFVRjFhRUlzWVVGQlFTeERRVUZJZG1oQ0xFZEJRVWM3VVVGRFNIaENMRk5CUVZNc1IwRkJRU3RwUWl4aFFVRkJMRU5CUVZRdmFVSXNVMEZCVXp0UlFVTlVReXhQUVVGUExFZEJRVUU0YVVJc1lVRkJRU3hEUVVGUU9XbENMRTlCUVU4N1VVRkRVRzlaTEZGQlFWRXNSMEZCUVRCTExHRkJRVUVzUTBGQlVqRkxMRkZCUVZFN1VVRkRVakZoTEU5QlFVOHNSMEZCUVc5c1FpeGhRVUZCTEVOQlFWQndiRUlzVDBGQlR6dFJRVU5RZVVnc1QwRkJUeXhIUVVGQk1tUXNZVUZCUVN4RFFVRlFNMlFzVDBGQlR6dFJRVU5RYTFRc1dVRkJXU3hIUVVGQmVVc3NZVUZCUVN4RFFVRmFla3NzV1VGQldUdFJRVU5hVGl3d1FrRkJNRUlzUjBGQlFTdExMR0ZCUVVFc1EwRkJNVUl2U3l3d1FrRkJNRUlzUTBGQlFUdEJRVVUxUWl4TlFVRkJMRTlCUVU4NVJDeEpRVUZKTEVOQlExUXNaME5CUVdkRExDdENRVUZCZEZVc1RVRkJRU3hEUVVOSU5rZ3NRMEZCUXl4RFFVTTVRaXhGUVVGQk8xRkJRMFVzTUVOQlFUQkRMRVZCUTNoRExFTkJRVU01U2l4UFFVRlBMRWxCUVVsNVNDeFBRVUZQTEV0QlEyNUNiMUlzYVVKQlFYVkNMRU5CUVVOQkxGVkJRV2RDTEVOQlFVTm9WaXhIUVVGSExFVkJRVVZwUnl4RFFVRkRMRU5CUVVNc1JVRkJSVFJLTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6dFJRVU12UkN3d1EwRkJNRU1zUlVGQlJXMVNMRXRCUVVFc1EwRkJTekpTTEdsQ1FVRnBRaXhEUVVOb1JYaG9RaXhIUVVGSExFVkJRMGhwUnl4RFFVRkRMRVZCUTBRMFVTeFJRVU5HTEVOQlFVTTdRVUZEUkN4UlFVRkJMRzFFUVVGdFJDeEZRVU5xUkN4RFFVRkRUQ3d3UWtGQk1FSXNTVUZETTBJelJ5eExRVUZCTEVOQlFVc3lVaXhwUWtGQmFVSXNRMEZCUTNob1FpeEhRVUZITEVWQlFVVnBSeXhEUVVGRExFVkJRVVUyVVN4WlFVRlpMRU5CUVVNN1FVRkRPVU1zVVVGQlFTeHZSRUZCYjBRc1JVRkRiRVJxU0N4TFFVRkJMRU5CUVVzMFVpeDVRa0ZCZVVJc1EwRkJRM2hpTEVOQlFVTXNRMEZCUXp0QlFVTnVReXhSUVVGQkxEQkRRVUV3UXl4RlFVRkZLMDhzWjBKQlFYTkNMRU5CUTJoRmVGY3NVMEZCVXl4RlFVTlVReXhQUVVGUExFVkJRMUIzU0N4RFFVRkRMRVZCUTBScVJ5eEhRVU5HTEVOQlFVTTdRVUZEUkN4UlFVRkJMRFpEUVVFMlF5eEZRVU16UXpaUUxFdEJRVUVzUTBGQlN6WlNMRzFDUVVGdFFpeERRVUZEZW1Jc1EwRkJReXhEUVVGRE8wRkJRemRDTEZGQlFVRXNNa05CUVRKRExFVkJRVVUwU2l4TFFVRkJMRU5CUVVzNFVpeHBRa0ZCYVVJc1EwRkJRekZpTEVOQlFVTXNRMEZCUVR0QlFVTjJSU3hQUVVOR0xFTkJRVU1zUTBGQlFUdExRVU5HTEVOQlFVRXNRMEZCUVR0QlFVRkJLMG9zU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSV2xDTEdsQ1FVRkJMRVZCUVVFc1ZVRkJRemxMTEVOQlFVTXNSVUZCU3p0QlFVTjJRaXhOUVVGQkxFbEJRVUUyWXl4aFFVRkJMRWRCUTBVdlVpeExRVUZCTEVOQlFVdHVVaXhMUVVGTE8xRkJSRXB0YWtJc2RVSkJRWFZDTEVkQlFVRkVMR0ZCUVVFc1EwRkJka0pETEhWQ1FVRjFRanRSUVVGRlF5eHJRa0ZCYTBJc1IwRkJRVVlzWVVGQlFTeERRVUZzUWtVc2EwSkJRV3RDTzFGQlFVVTNiRUlzVFVGQlRTeEhRVUZCTW14Q0xHRkJRVUVzUTBGQlRqTnNRaXhOUVVGTk8xRkJRVVVyUkN4SFFVRkhMRWRCUVVFMGFFSXNZVUZCUVN4RFFVRklOV2hDTEVkQlFVY3NRMEZCUVR0TlFVVm9SU3hKUVVGTksyaENMR05CUVdNc1IwRkJSeTlOTEhGQ1FVRXlRaXhEUVVGRGFsRXNRMEZCUXl4RlFVRkZPVWtzVFVGQlRTeERRVUZETEVOQlFVRTdUVUZETjBRc1NVRkJUU3RzUWl4aFFVRmhMRWRCUVVkb1RpeG5Ra0ZCYzBJc1EwRkJRMnBSTEVOQlFVTXNSVUZCUlRsSkxFMUJRVTBzUTBGQlF5eERRVUZCTzBGQlEzWkVMRTFCUVVFc1NVRkJTVFpzUWl4clFrRkJhMElzUlVGQlJUdFJRVU4wUWl4UFFVRlBRU3hyUWtGQmEwSXNRMEZCUXk5akxFTkJRVU1zUlVGQlJXZGtMR05CUVdNc1JVRkJSVU1zWVVGQllTeEZRVUZGYUdsQ0xFZEJRVWNzUTBGQlF5eERRVUZCTzBGQlEyeEZMRTlCUVVFN1FVRkRRU3hOUVVGQkxFOUJRVTgyYUVJc2RVSkJRWFZDTEVkQlFVZEhMR0ZCUVdFc1IwRkJSMFFzWTBGQll5eERRVUZCTzB0QlEyaEZMRU5CUVVFc1EwRkJRVHRCUVVGQkwxSXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJXMUNMRzFDUVVGQkxFVkJRVUVzVlVGQlF6VktMRU5CUVVNc1JVRkJTenRCUVVONlFpeE5RVUZCTEVsQlFVRm5ZeXhoUVVGQkxFZEJRWGxEY0ZNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3p0UlFVRXpRM2RxUWl4dlFrRkJiMElzUjBGQlFVUXNZVUZCUVN4RFFVRndRa01zYjBKQlFXOUNPMUZCUVVWcWJVSXNUVUZCVFN4SFFVRkJaMjFDTEdGQlFVRXNRMEZCVG1odFFpeE5RVUZOTEVOQlFVRTdUVUZEY0VNc1NVRkJUV3R0UWl4WlFVRlpMRWRCUVVkdVRpeDFRa0ZCTmtJc1EwRkJReTlQTEVOQlFVTXNSVUZCUldoTExFMUJRVTBzUTBGQlF5eERRVUZCTzAxQlF6ZEVMRTlCUVU5cGJVSXNiMEpCUVc5Q0xFZEJRM1pDUVN4dlFrRkJiMElzUTBGQlEycGpMRU5CUVVNc1JVRkJSV3RqTEZsQlFWa3NRMEZCUXl4SFFVTnlRMEVzV1VGQldTeERRVUZCTzB0QlEycENMRU5CUVVFc1EwRkJRVHRKUVVGQmJsTXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzWTBGQlFTeEZRVVZqTEZsQlFVMDdRVUZEYmtJc1RVRkJRU3hKUVVGQmRWTXNZVUZCUVN4SFFVdEpkbE1zUzBGQlFTeERRVUZMYmxJc1MwRkJTenRSUVVwYWFXZENMRFJDUVVFMFFpeEhRVUZCZVVRc1lVRkJRU3hEUVVFMVFucEVMRFJDUVVFMFFqdFJRVU0xUWtRc05rSkJRVFpDTEVkQlFVRXdSQ3hoUVVGQkxFTkJRVGRDTVVRc05rSkJRVFpDTzFGQlF6ZENNV1VzUjBGQlJ5eEhRVUZCYjJsQ0xHRkJRVUVzUTBGQlNIQnBRaXhIUVVGSE8xRkJRMGcyVnl4UlFVRlJMRWRCUVVGMVRDeGhRVUZCTEVOQlFWSjJUQ3hSUVVGUkxFTkJRVUU3UVVGSFZpeE5RVUZCTEVsQlFVMTNUQ3haUVVGWkxFZEJRMmhDYUVVc1lVRkJZU3hEUVVOWVNTeHhRa0ZCY1VJc1EwRkRia0pETERaQ1FVRTJRaXhGUVVNM1FrTXNORUpCUTBZc1EwRkJReXhEUVVOR0xFTkJRVU5NTEVsQlFVa3NRMEZCUVR0QlFVTlNMRTFCUVVFc1QwRkJUeXRFTEZsQlFWa3NRMEZCUTJ4c1FpeEhRVUZITEVOQlFVTXNWVUZCUXl0R0xFdEJRVXNzUlVGQlJXbEpMRU5CUVVNc1JVRkJRVHRSUVVGQkxHOUNRVU12UW10R0xFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRVHRCUVVGTGRFVXNWVUZCUVVFc1UwRkJVeXhGUVVGRExHbERRVUZwUXp0QlFVRkRWQ3hWUVVGQlFTeEhRVUZITEVWQlFVVktMRU5CUVVGQk8wRkJRVVVzVTBGQlFTeEZRVU55UkdwSkxFdEJRVXNzUTBGQlF5OUdMRWRCUVVjc1EwRkJReXhWUVVGRE5FZ3NRMEZCUXl4RlFVRkZkV1FzUTBGQlF5eEZRVUZCTzFWQlFVRXNiMEpCUTJScVV5eExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUU3UVVGRFJYRkRMRmxCUVVGQkxFZEJRVWNzUlVGQlJUbERMRXRCUVVFc1EwRkJTMjFSTEZWQlFWVXNRMEZCUTJwaUxFTkJRVU1zUTBGQlJUdEJRVU40UW5kSExGbEJRVUZCTEVkQlFVY3NSVUZCUlN0WExFTkJRVVU3UVVGRFVDOVNMRmxCUVVGQkxFOUJRVThzUlVGQlJTeFRRVUZCUVN4UFFVRkRaMU1zUTBGQlFVRXNSVUZCUlN4RlFVRkxPMEZCUTJZeFV5eGpRVUZCUVN4TFFVRkJMRU5CUVV0M1VTeFpRVUZaTEVOQlFVTnJReXhGUVVGRkxFVkJRVVY0WkN4RFFVRkRMRU5CUVVNc1EwRkJRVHRoUVVONFFqdEJRVU5HTmxjc1dVRkJRVUVzVTBGQlV5eEZRVUZGTEZOQlFVRkJMRk5CUVVNeVJ5eERRVUZCUVN4RlFVRkZMRVZCUVVzN1FVRkRha0lzWTBGQlFTeEpRVUZKZGs0c1kwRkJiMElzUTBGQlEzVk9MRVZCUVVVc1EwRkJReXhGUVVGRk8yZENRVU0xUWtFc1JVRkJSU3hEUVVGRGJrMHNZMEZCWXl4RlFVRkZMRU5CUVVFN1owSkJRMjVDYlUwc1JVRkJSU3hEUVVGRGFGZ3NSMEZCUnl4SFFVRkhMRTlCUVU4c1EwRkJRVHRCUVVOc1FpeGxRVUZCTzBGQlJVRnpSU3hqUVVGQlFTeExRVUZCTEVOQlFVc3lVeXhqUVVGakxFTkJRVU5FTEVWQlFVVXNSVUZCUlhoa0xFTkJRVU1zUTBGQlF5eERRVUZCTzJGQlF6RkNPMEZCUTBadFVpeFpRVUZCUVN4WlFVRlpMRVZCUTFZc1EwRkJRM0pITEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyOWtMR1ZCUVdVc1IwRkRka0lzV1VGQlFUdEJRVUZCTEdOQlFVRXNUMEZCVFdwTkxFdEJRVUVzUTBGQlN6UlRMR2xDUVVGcFFpeERRVUZETVdRc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGQlFTeGhRVUZCTEVkQlF5OUNjRUlzVTBGRFREdEJRVU5FY1Zrc1dVRkJRVUVzWTBGQll5eEZRVU5hYmswc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiMlFzWlVGQlpTeEhRVU4wUWl4WlFVRkJPMEZCUVVFc1kwRkJRU3hQUVVGTmFrMHNTMEZCUVN4RFFVRkxORk1zYVVKQlFXbENMRU5CUVVNeFpDeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVRkJMR0ZCUVVFc1IwRkRMMEp3UWl4VFFVTk1PMEZCUTBRd1Z5eFpRVUZCUVN4UlFVRlJMRVZCUVVWNFN5eExRVUZCTEVOQlFVczRTeXhYUVVGWExFTkJRVU0xVml4RFFVRkRMRU5CUVVVN1FVRkRPVUpwU0N4WlFVRkJRU3hUUVVGVExFVkJRVVUyUkN4TFFVRkJMRU5CUVVzMlV5eHJRa0ZCYTBJc1EwRkJRek5rTEVOQlFVTXNRMEZCUlR0QlFVTjBRMjFZTEZsQlFVRkJMRWxCUVVrc1JVRkJReXhSUVVGUk8wRkJRMklzV1VGQlFTeFpRVUZCTEVWQlFWbHlUU3hMUVVGQkxFTkJRVXR2VFN4WlFVRlpMRU5CUVVOc1dDeERRVUZETEVOQlFVVTdXVUZEYWtNc1kwRkJZemhMTEVWQlFVRkJMRXRCUVVFc1EwRkJTMjlTTEdOQlFXTXNRMEZCUTJwb1FpeEhRVUZITEVWQlFVVXJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVkQlFVZHdRaXhUUVVGVk8xbEJReTlFTEdWQlFXVnJUU3hGUVVGQlFTeExRVUZCTEVOQlFVczJSU3hsUVVGbExFTkJRVU14VlN4SFFVRkhMRVZCUVVVclJTeERRVUZETEVWQlFVVTRVaXhSUVVGUkxFTkJRVUU3UVVGQlJTeFhRVUZCTEVWQlJYSkVhRWdzUzBGQlFTeERRVUZMT0ZNc1pVRkJaU3hEUVVGRE5XUXNRMEZCUXl4RFFVTndRaXhEUVVGRExFTkJRVUU3UVVGQlFTeFRRVU5RTEVOQlEwVXNRMEZCUXl4RFFVRkJPMEZCUVVFc1QwRkRVQ3hEUVVGRExFTkJRVUU3UzBGRFNDeERRVUZCTEVOQlFVRTdTVUZCUVdsTUxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMR2RDUVVGQkxFVkJSV2RDTEZsQlFVMDdRVUZEY2tJc1RVRkJRU3hKUVVGQksxTXNZVUZCUVN4SFFVRXdRaTlUTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXM3VVVGQk5VSnpRaXhIUVVGSExFZEJRVUUwYVVJc1lVRkJRU3hEUVVGSU5XbENMRWRCUVVjN1VVRkJSVFpYTEZGQlFWRXNSMEZCUVN0TUxHRkJRVUVzUTBGQlVpOU1MRkZCUVZFc1EwRkJRVHROUVVOeVFpeEpRVUZOWjAwc1VVRkJVU3hIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVUU3VFVGRE4wSXNiMEpCUTBWNFV5eExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUU3UVVGQlMzUkZMRkZCUVVGQkxGTkJRVk1zUlVGQlF5eHRRMEZCUVR0QlFVRnRReXhQUVVGQkxFVkJReTlETmxjc1VVRkJVU3hEUVVGRE1XeENMRWRCUVVjc1EwRkJReXhWUVVGRE9Fa3NRMEZCUXl4RlFVRkZjV01zUTBGQlF5eEZRVUZCTzFGQlFVRXNiMEpCUTJwQ2FsTXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBGQlEwVXZSU3hWUVVGQlFTeEhRVUZITEVWQlFVVXJWeXhEUVVGRk8wRkJRMUF6VUN4VlFVRkJRU3hIUVVGSExFVkJRVVU1UXl4TFFVRkJMRU5CUVVzeVVTeFpRVUZaTEVOQlFVTTRRaXhEUVVGRExFTkJRVVU3UVVGRE1VSndSeXhWUVVGQlFTeEpRVUZKTEVWQlFVTXNVVUZCVVR0QlFVTmlNMHdzVlVGQlFVRXNUMEZCVHl4RlFVRkZMRk5CUVVGQkxFOUJRVU5uVXl4RFFVRkJRU3hGUVVGRkxFVkJRVXM3UVVGRFpqRlRMRmxCUVVGQkxFdEJRVUVzUTBGQlN6UlJMR05CUVdNc1EwRkJRemhDTEVWQlFVVXNSVUZCUlhSakxFTkJRVU1zUTBGQlF5eERRVUZCTzFkQlF6RkNPMEZCUTBZeVZpeFZRVUZCUVN4VFFVRlRMRVZCUVVVc1UwRkJRVUVzVTBGQlF6SkhMRU5CUVVGQkxFVkJRVVVzUlVGQlN6dEJRVU5xUWpGVExGbEJRVUZCTEV0QlFVRXNRMEZCUzJsVUxHZENRVUZuUWl4RFFVRkRVQ3hGUVVGRkxFVkJRVVYwWXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRYUVVNMVFqdEJRVU5HYVZFc1ZVRkJRVUVzV1VGQldTeEZRVU5XTEVOQlFVTnlSeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdlpDeGxRVUZsTEVkQlEzWkNMRmxCUVVFN1FVRkJRU3haUVVGQkxFOUJRVTFxVFN4TFFVRkJMRU5CUVV0clZDeHRRa0ZCYlVJc1EwRkJRemxqTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUVVFc1YwRkJRU3hIUVVOcVEzUkRMRk5CUTB3N1FVRkRSSEZaTEZWQlFVRkJMR05CUVdNc1JVRkRXbTVOTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyOWtMR1ZCUVdVc1IwRkRkRUlzV1VGQlFUdEJRVUZCTEZsQlFVRXNUMEZCVFdwTkxFdEJRVUVzUTBGQlMydFVMRzFDUVVGdFFpeERRVUZET1dNc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGQlFTeFhRVUZCTEVkQlEycERkRU1zVTBGRFREdEJRVU5FY1Vrc1ZVRkJRVUVzVTBGQlV5eEZRVUZGTmtRc1MwRkJRU3hEUVVGTGJWUXNiMEpCUVc5Q0xFTkJRVU12WXl4RFFVRkRMRU5CUVVVN1ZVRkRlRU1zWlVGQlpUUktMRVZCUVVGQkxFdEJRVUVzUTBGQlN6SlNMR2xDUVVGcFFpeERRVUZEZUdoQ0xFZEJRVWNzUlVGQlJXbEhMRU5CUVVNc1JVRkJSVFJSTEZGQlFWRXNRMEZCUlR0QlFVTjRSSGRFTEZWQlFVRkJMRkZCUVZFc1JVRkJSWGhMTEV0QlFVRXNRMEZCUzI5VUxHdENRVUZyUWl4RFFVRkRhR1FzUTBGQlF5eERRVUZGTzFWQlEzSkRMR05CUVdNMFNpeEZRVUZCUVN4TFFVRkJMRU5CUVV0eFZDeG5Ra0ZCWjBJc1EwRkJRMnhxUWl4SFFVRkhMRVZCUVVWcFJ5eERRVUZETEVOQlFVTXNSMEZCUnl4TlFVRk5MRWRCUVVkMFF5eFRRVUZCUVR0QlFVRlZMRk5CUVVFc1JVRkZhRVZyVFN4TFFVRkJMRU5CUVV0elZDeHBRa0ZCYVVJc1EwRkJRMnhrTEVOQlFVTXNRMEZEZEVJc1EwRkJReXhEUVVGQk8wRkJRVUVzVDBGRFVDeERRVU5GTEVOQlFVTXNRMEZCUVR0TFFVVlVMRU5CUVVFc1EwRkJRVHRKUVVGQkswb3NaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzWlVGQlFTeEZRVVZsTEZsQlFVMDdRVUZEY0VJc1RVRkJRU3hKUVVGQmRWUXNZVUZCUVN4SFFVOUpkbFFzUzBGQlFTeERRVUZMYmxJc1MwRkJTenRSUVU1YWJWb3NZVUZCWVN4SFFVRkJkVXdzWVVGQlFTeERRVUZpZGt3c1lVRkJZVHRSUVVOaVNpeFpRVUZaTEVkQlFVRXlUQ3hoUVVGQkxFTkJRVm96VEN4WlFVRlpPMUZCUTFwRExGVkJRVlVzUjBGQlFUQk1MR0ZCUVVFc1EwRkJWakZNTEZWQlFWVTdVVUZEVmpKTUxHMUNRVUZ0UWl4SFFVRkJSQ3hoUVVGQkxFTkJRVzVDUXl4dFFrRkJiVUk3VVVGRGJrSkRMSEZDUVVGeFFpeEhRVUZCUml4aFFVRkJMRU5CUVhKQ1JTeHhRa0ZCY1VJN1VVRkRja0oyVFN4alFVRmpMRWRCUVVGeFRTeGhRVUZCTEVOQlFXUnlUU3hqUVVGakxFTkJRVUU3VFVGSGFFSXNUMEZCVDNKRkxFbEJRVWtzUTBGRFZDeDVRa0ZCZVVJc1JVRkRla0k3UVVGRFJTeFJRVUZCTERCRFFVRXdReXhGUVVONFEyMUdMR0ZCUVdFc1MwRkJTMG9zV1VGQldTeEpRVUZKUXl4VlFVRlZMRU5CUVVFN1FVRkRhRVFzVDBGQlF5eEZRVU5FTzBGQlFVVXNVVUZCUVN3clFrRkJLMElzUlVGQlJUSk1MRzFDUVVGQlFUdEJRVUZ2UWl4UFFVRkRMRVZCUTNoRU8wRkJRVVVzVVVGQlFTeHBRMEZCYVVNc1JVRkJSVU1zY1VKQlFVRkJPMEZCUVhOQ0xFOUJRVU1zUlVGRE5VUTdRVUZCUlN4UlFVRkJMRGhDUVVFNFFpeEZRVUZGZGswc1kwRkJRVUU3UVVGQlpTeFBRVU51UkN4RFFVRkRMRU5CUVVFN1MwRkRSaXhEUVVGQkxFTkJRVUU3UVVGQlFTeEpRVUZCTEU5QlFVRnNTQ3hMUVVGQkxFTkJRVUU3UVVGQlFTeEhRVUZCTzBWQlFVRTBRaXhUUVVGQkxFTkJRVUZ0VGl4TFFVRkJMRVZCUVVGb1VDeG5Ra0ZCUVN4RFFVRkJMRU5CUVVFN1JVRkJRU3hQUVVGQk9FSXNXVUZCUVN4RFFVRkJhMDRzUzBGQlFTeEZRVUZCTEVOQlFVRTdTVUZCUVhKVUxFZEJRVUVzUlVGQlFTeFJRVUZCTzBsQlFVRXZVQ3hMUVVGQkxFVkJSVVFzVTBGQlFXZFlMRTFCUVVGQkxFZEJRVk03UVVGRFVDeE5RVUZCTEVsQlFVRXJVU3hoUVVGQkxFZEJTMGtzU1VGQlNTeERRVUZETjJ0Q0xFdEJRVXM3VVVGS1dqSnJRaXh0UWtGQmJVSXNSMEZCUVVVc1lVRkJRU3hEUVVGdVFrWXNiVUpCUVcxQ08xRkJRMjVDUXl4eFFrRkJjVUlzUjBGQlFVTXNZVUZCUVN4RFFVRnlRa1FzY1VKQlFYRkNPMUZCUTNKQ2RHcENMRWRCUVVjc1IwRkJRWFZxUWl4aFFVRkJMRU5CUVVoMmFrSXNSMEZCUnp0UlFVRkJkMnBDTEhGQ1FVRkJMRWRCUVVGRUxHRkJRVUVzUTBGRFNERkhMR1ZCUVdVN1FVRkJaa0VzVVVGQlFVRXNaVUZCWlN4SFFVRkJNa2NzY1VKQlFVRXNTMEZCUnl4TFFVRkJMRU5CUVVFc1IwRkJRU3hSUVVGUkxFZEJRVUZCTEhGQ1FVRkJMRU5CUVVFN1FVRkhOVUlzVFVGQlFTeEpRVUZOUXl4M1FrRkJkMElzUjBGQlJ6VkhMR1ZCUVdVc1IwRkROVU5CTEdWQlFXVXNRMEZCUXpaSExFbEJRVWtzUlVGQlJTeEhRVUZITEVkQlFVY3NSMEZETlVJc1JVRkJSU3hEUVVGQk8wMUJSVTRzYjBKQlEwVnlWQ3hMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4TFFVRkJMRVZCUVVFN1FVRkRSWFJGTEZGQlFVRkJMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU15VUN4aFFVRmhMRVZCUVVjN1FVRkRhRU50UkN4UlFVRkJRU3haUVVGWkxFVkJRMVlzUTBGQlF5eEpRVUZKTEVOQlFVTndaMElzUzBGQlN5eERRVUZEYjJRc1pVRkJaU3hIUVVGSExFbEJRVWtzUTBGQlF6WklMR2RDUVVGblFpeEhRVUZIYUdkQ0xGTkJRM1pFTzFGQlEwUnBaMElzWTBGQll5eEZRVU5hTEVsQlFVa3NRMEZCUTJ4c1FpeExRVUZMTEVOQlFVTnZaQ3hsUVVGbExFZEJRVWNzU1VGQlNTeERRVUZETmtnc1owSkJRV2RDTEVkQlFVZG9aMElzVTBGRGRFUTdRVUZEUkN4UlFVRkJMRmxCUVVFc1JVRkJRU3hGUVVGQkxFTkJRVUYyUml4TlFVRkJMRU5CUVdWeGJFSXNkMEpCUVhkQ0xFTkJRVUVzUTBGQlFYSnNRaXhOUVVGQkxFTkJRVWMwVnl4VlFVRm5RaXhEUVVGRGFGWXNSMEZCUnl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGSE8wRkJRMmhHYTJNc1VVRkJRVUVzU1VGQlNTeEZRVUZETEZOQlFVRTdUMEZGU20xSUxFVkJRVUZCTEcxQ1FVRnRRaXhIUVVOb1FpeEpRVUZKTEVOQlFVTlJMRmxCUVZrc1JVRkJSU3hIUVVOdVFsQXNjVUpCUVhGQ0xFZEJRMjVDTEVsQlFVa3NRMEZCUTFFc1kwRkJZeXhGUVVGRkxFZEJRM0pDTEVsQlFVa3NRMEZCUTBNc1YwRkJWeXhGUVVOdVFpeERRVUZETEVOQlFVRTdRVUZGVml4TFFVRkJPMEZCUVVNc1IwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEVOQmNIaENaME14VkN4RFFVRkJRU3hMUVVGTExFTkJRVU4zUXl4VFFVRlRMRU5CUVVFN08wRkRka05hTEVsQlJXcENiVklzU1VGQlNTd3dRa0ZCUVhCVkxHZENRVUZCTEVWQlFVRTdRVUZCUVN4RlFVRkJMRk5CUVVGdlZTeEpRVUZCTEVkQlFVRTdRVUZCUVN4SlFVRkJMRWxCUVVGdVZTeExRVUZCTEVOQlFVRTdRVUZCUVVNc1NVRkJRVUVzWlVGQlFTeFBRVUZCYTFVc1NVRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVM5UkxFbEJRVUVzUjBGQlFYWlFMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNSVUZCUVhkV0xFbEJRVUVzUjBGQlFYcFhMRWxCUVVGQkxFdEJRVUVzUTBGQlFYZFhMRWxCUVVFc1IwRkJRVVVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSVUZCUVVFc1NVRkJRU3hIUVVGQlJpeEpRVUZCTEVWQlFVRkZMRWxCUVVFc1JVRkJRU3hGUVVGQk8wRkJRVUZFTEUxQlFVRkJMRWxCUVVFc1EwRkJRVU1zU1VGQlFTeERRVUZCZWxBc1IwRkJRVUVzVTBGQlFTeERRVUZCZVZBc1NVRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeExRVUZCTzBGQlFVRjBSQ3hKUVVGQlFTeExRVUZCTEVkQlFVRkZMRlZCUVVFc1EwRkJRU3hKUVVGQkxFVkJRVUZwVlN4SlFVRkJMRVZCUVVFMWJFSXNSVUZCUVVFc1EwRkJRVUVzVFVGQlFTeERRVUZCT0ZVc1NVRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEpRVUZCYkVRc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQmQwTm1MRTlCUVVFc1JVRkJRVHRCUVVOT2IxVXNUVUZCUVVFc1RVRkJUU3hGUVVGRkxFbEJRVUU3UzBGRFZDeERRVUZCTEVOQlFVRTdTVUZCUVdwVkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMSGxDUVVGQkxFVkJXWGxDTEZsQlFVMDdRVUZET1VKeFZTeE5RVUZCUVN4eFFrRkJjVUlzUTBGQlF5eFpRVUZOTzBGQlF6RkNMRkZCUVVFc1NVRkJTU3hEUVVGRGNsVXNTMEZCUVN4RFFVRkxUQ3hKUVVGSkxFVkJRVVVzVDBGQlFUdEJRVVZvUWtzc1VVRkJRVUVzUzBGQlFTeERRVUZMVEN4SlFVRkpMRU5CUVVNMFF5eFRRVUZUTEVkQlEycENka01zUzBGQlFTeERRVUZMYzFVc1VVRkJVU3hKUVVOaVNDeEpRVUZKTEVOQlFVTkpMR3RDUVVGclFpeERRVU55UW5aVkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekpzUWl4UlFVRlJMRWRCUTJaNFZTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU15YkVJc1VVRkJVU3hEUVVGREwxSXNXVUZCV1N4SFFVRkhla01zUzBGQlFTeERRVUZMZVZVc1RVRkJUU3hEUVVGRGFGTXNXVUZCV1N4SFFVTXpSSHBETEV0QlFVRXNRMEZCUzB3c1NVRkJTU3hEUVVGRE9FTXNXVUZCV1N4RlFVTXhRbnBETEV0QlFVRXNRMEZCUzNOVkxGRkJRMUFzUTBGQlF5eERRVUZCTzBGQlEwd3NUMEZCUXl4RFFVRkRMRU5CUVVFN1MwRkRTQ3hEUVVGQkxFTkJRVUU3UVVGQlFXNVZMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVmhMR0ZCUVVFc1JVRkJRU3hWUVVGRGNrb3NTVUZCU1N4RlFVRkxPMDFCUTNSQ0xFbEJRMGNzUTBGQlEzRktMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpCSkxFOUJRVThzU1VGQlNYbEpMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpKSkxFOUJRVThzUzBGRGVFTklMSEZDUVVGeFFpeERRVUZEVml4SlFVRkpMRVZCUVVWeFNpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU1zU1VGRGVFTXNRMEZCUTIxU0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM0ZKTEZsQlFWa3NTVUZEZGtJNFNTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56U1N4WlFVRlpMRWxCUTNaQ05ra3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZFVrc1ZVRkJWU3hMUVVOeVFrb3NZMEZCWXl4RFFVRkRUQ3hKUVVGSkxFVkJRVVZ4U2l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVVXNSVUZEYmtNN1FVRkRRU3hSUVVGQkxFOUJRVUU3UVVGRFJpeFBRVUZCTzBGQlEwRnRVaXhOUVVGQlFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU00VWl4UlFVRlJMRU5CUVVOb1N5eEpRVUZKTEVOQlFVTXNRMEZCUVR0TFFVTXhRaXhEUVVGQkxFTkJRVUU3UVVGQlFYZEtMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVm5RaXhuUWtGQlFTeEZRVUZCTEZWQlFVTnlTaXhKUVVGSkxFVkJRVUU3UVVGQlFTeE5RVUZCTEU5QlEzQkNjVW9zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGJWa3NVVUZCVVN4SlFVRkpia2tzV1VGQldTeERRVUZEYlVJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiVmtzVVVGQlVTeEZRVUZGY2xFc1NVRkJTU3hEUVVGRExFTkJRVUU3UVVGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJkMG9zU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSUzlETEdkQ1FVRkJMRVZCUVVFc1ZVRkJRM0pLTEVsQlFVa3NSVUZCUVR0TlFVRkJMRTlCUTI1Q0xFTkJRVU54U2l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXdTU3hQUVVGUExFbEJRVWw1U1N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXlTU3hQUVVGUExFdEJRM2hEU0N4eFFrRkJjVUlzUTBGQlExWXNTVUZCU1N4RlFVRkZjVW9zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRExFbEJRM2hETEVOQlFVTnRVaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeFNTeFpRVUZaTEVsQlEzWkNPRWtzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGMwa3NXVUZCV1N4SlFVTjJRalpKTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzVkpMRlZCUVZVc1MwRkRja0pLTEdOQlFXTXNRMEZCUTB3c1NVRkJTU3hGUVVGRmNVb3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZGTEVOQlFVRTdRVUZCUVN4TFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQmMxSXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJYcENMRmRCUVVFc1JVRkJRU3hWUVVGRGNrb3NTVUZCU1N4RlFVRkxPMDFCUTNCQ0xFbEJRVWtyWkN4UFFVRlBMRWRCUVVjc1EwRkRXaXhyUTBGQmEwTXNSVUZEYkVNeFZTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU00YkVJc1lVRkJZU3hIUVVGSE0xVXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZET0d4Q0xHRkJRV0VzUTBGQlEyaGxMRWxCUVVrc1EwRkJReXhIUVVGSE4wTXNVMEZCVXl4RFFVTjBSU3hEUVVGQk8wRkJSVVFzVFVGQlFTeEpRVUZKYTAwc1MwRkJRU3hEUVVGTE5GVXNZMEZCWXl4RFFVRkRhbVVzU1VGQlNTeERRVUZETEVWQlFVVTdRVUZETjBJclpDeFJRVUZCUVN4UFFVRlBMRU5CUVVNMVdTeEpRVUZKTEVOQlFVTXNORU5CUVRSRExFTkJRVU1zUTBGQlFUdEJRVU0xUkN4UFFVRkJPMEZCUlVFc1RVRkJRU3hKUVVGSmEwVXNTMEZCUVN4RFFVRkxObFVzWTBGQll5eERRVUZEYkdVc1NVRkJTU3hEUVVGRExFVkJRVVU3UVVGRE4wSXJaQ3hSUVVGQlFTeFBRVUZQTEVOQlFVTTFXU3hKUVVGSkxFTkJRVU1zTkVOQlFUUkRMRU5CUVVNc1EwRkJRVHRCUVVNMVJDeFBRVUZCT3p0QlFVVkJPMEZCUTBFc1RVRkJRU3hKUVVORmEwVXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYVcxQ0xGZEJRVmNzU1VGRGRFSXNRMEZCUTJobExGRkJRVkVzUTBGQlEwZ3NTVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hIUVVGSFNTeFZRVUZWTEVOQlFVTktMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlIydElMRmxCUVZVc1EwRkJRMnhJTEVsQlFVa3NRMEZCUXl4TFFVTTVSSEZLTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzbFBMRk5CUVZNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUzBGRE0wSXNRMEZCUXl4RlFVTklPMEZCUTBGdldDeFJRVUZCUVN4UFFVRlBMRU5CUVVNMVdTeEpRVUZKTEVOQlFVTXNORU5CUVRSRExFTkJRVU1zUTBGQlFUdEJRVU0xUkN4UFFVRkJPMEZCUlVFc1RVRkJRU3hQUVVGUE5Ga3NUMEZCVHl4RFFVRkRPVzFDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRMUVVONlFpeERRVUZCTEVOQlFVRTdRVUZCUVhWVExFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxHbENRVUZCTEVWQlJXbENMRlZCUVVOVUxFdEJRVXNzUlVGQlJUVkpMRWxCUVVrc1JVRkJTenRCUVVOcVF5eE5RVUZCTEVsQlFVazBTU3hMUVVGTExFTkJRVU0zUkN4SFFVRkhMRXRCUVVzc1IwRkJSeXhGUVVGRk8xRkJRM0pDTmtRc1MwRkJTeXhEUVVGRFowZ3NZMEZCWXl4RlFVRkZMRU5CUVVFN1VVRkRkRUpvU0N4TFFVRkxMRU5CUVVNM1JDeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkJPMEZCUTNKQ0xFOUJRVUU3UVVGRlFTeE5RVUZCTEVsQlEwVXNRMEZCUXpaRUxFdEJRVXNzUTBGQlF6ZEVMRWRCUVVjc1MwRkJTeXhUUVVGVExFbEJRVWsyUkN4TFFVRkxMRU5CUVVNM1JDeEhRVUZITEV0QlFVc3NWMEZCVnl4TFFVTnlSRFpFTEV0QlFVc3NRMEZCUTJ0RkxFMUJRVTBzUTBGQlEzTlNMR1ZCUVdVc1JVRkROVUk3VVVGRFFYaFdMRXRCUVVzc1EwRkJRMmRJTEdOQlFXTXNSVUZCUlN4RFFVRkJPMEZCUTNSQ2FFZ3NVVUZCUVVFc1MwRkJTeXhEUVVGRGEwVXNUVUZCVFN4RFFVRkRjMUlzWlVGQlpTeERRVUZEY0Vvc1MwRkJTeXhGUVVGRkxFTkJRVUU3UVVGRGRFTXNUMEZCUVR0QlFVTkJMRTFCUVVFc1NVRkRSU3hEUVVGRGNFMHNTMEZCU3l4RFFVRkROMFFzUjBGQlJ5eExRVUZMTEZkQlFWY3NTVUZCU1RaRUxFdEJRVXNzUTBGQlF6ZEVMRWRCUVVjc1MwRkJTeXhaUVVGWkxFdEJRM2hFTmtRc1MwRkJTeXhEUVVGRGEwVXNUVUZCVFN4RFFVRkRkVklzVjBGQlZ5eEZRVU40UWp0UlFVTkJlbFlzUzBGQlN5eERRVUZEWjBnc1kwRkJZeXhGUVVGRkxFTkJRVUU3UVVGRGRFSm9TQ3hSUVVGQlFTeExRVUZMTEVOQlFVTnJSU3hOUVVGTkxFTkJRVU4xVWl4WFFVRlhMRU5CUVVOeVNpeExRVUZMTEVWQlFVVXNRMEZCUVR0QlFVTnNReXhQUVVGQk8wRkJSVUVzVFVGQlFTeEpRVUZKY0Uwc1MwRkJTeXhEUVVGRE4wUXNSMEZCUnl4TFFVRkxMRTlCUVU4c1JVRkJSVHRCUVVONlFuTkZMRkZCUVVGQkxFdEJRVUVzUTBGQlMyZE5MRmRCUVZjc1EwRkJRM0pXTEVsQlFVa3NRMEZCUXl4RFFVRkJPMEZCUTNoQ0xFOUJRVUU3UVVGRFFYRktMRTFCUVVGQkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekpZTEdWQlFXVXNRMEZCUTJwSUxFdEJRVXNzUTBGQlF5eERRVUZCTzB0QlEyeERMRU5CUVVFc1EwRkJRVHRKUVVGQldTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hoUVVGQkxFVkJSV0VzV1VGQlRUdE5RVU5zUWl4SlFVRkpjRW9zUzBGQlN5eEhRVUZITEVWQlFVVXNRMEZCUVR0QlFVTmtMRTFCUVVFc1NVRkJUWHBKTEUxQlFVMHNSMEZCUnpaU0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMVlzVFVGQlRTeEhRVUZITmxJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRWaXhOUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZCTzBGQlF6RkVMRTFCUVVFc1NVRkJUVzFRTEZOQlFWTXNSMEZCUnpCRExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM2xQTEZOQlFWTXNRMEZCUVR0QlFVVjBReXhOUVVGQkxFbEJRVTB5V0N4VlFVRlZMRWRCUTJScVZpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU50V1N4UlFVRlJMRWxCUVVsb1NDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU54YlVJc1ZVRkJWU3hKUVVGSmVIQkNMRTlCUVU4c1JVRkJSU3hEUVVGQk8wRkJSVE5FTEUxQlFVRXNTVUZCVFdkTkxFbEJRVWtzUjBGQlIzUklMR0ZCUVdFc1EwRkJRelpyUWl4VlFVRlZMRU5CUVVNc1EwRkJRVHROUVVOMFF5eEpRVUZOUlN4cFFrRkJhVUlzUjBGRGNrSnVWaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOcGJVSXNWMEZCVnl4SlFVTjBRamxWTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEybHRRaXhYUVVGWExFTkJRVU5OTEVsQlFVa3NRMEZCUXl4VlFVRlZReXhEUVVGRExFVkJRVVZETEVOQlFVTXNSVUZCUlR0UlFVTXhReXhQUVVGUFJDeERRVUZETEVkQlFVZERMRU5CUVVNc1EwRkJRVHRCUVVOa0xFOUJRVU1zUTBGQlF5eERRVUZCTzBGQlJVb3NUVUZCUVN4SlFVRk5ReXhaUVVGWkxFZEJRVWNzUlVGQlJTeEhRVUZIY0Znc1lVRkJZU3hEUVVGRE9GY3NWVUZCVlN4RFFVRkRMRU5CUVVFN1FVRkRia1FzVFVGQlFTeEpRVUZOVHl4VlFVRlZMRWRCUVVkRUxGbEJRVmtzUjBGQlIycFpMRk5CUVZNc1EwRkJRVHROUVVVelF5eExRVUZMTEVsQlFVbG9ReXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGUVN4RFFVRkRMRWRCUVVkcllTeFZRVUZWTEVWQlFVVnNZU3hEUVVGRExFVkJRVVVzUlVGQlJUdFJRVU51UXl4SlFVRk5PRUlzVjBGQlZ5eEhRVUZIVHl4VlFVRlZMRU5CUVVOcVJ5eEpRVUZKTEVWQlFVVTBSQ3hEUVVGRExFZEJRVWRuUXl4VFFVRlRMRU5CUVVNc1EwRkJRVHRCUVVOdVJERkhMRkZCUVVGQkxFdEJRVXNzUTBGQlEydEdMRWxCUVVrc1EwRkJRM05DTEZkQlFWY3NRMEZCUXl4RFFVRkJPMEZCUlhaQ0xGRkJRVUVzU1VGQlNTdFlMR2xDUVVGcFFpeEZRVUZGTzBGQlEzSkNMRlZCUVVFc1NVRkJUVTBzWVVGQllTeEhRVUZIZEZrc2EwSkJRV3RDTEVOQlEzUkRla1lzU1VGQlNTeEZRVU5LTUVZc1YwRkJWeXhGUVVOWU9VSXNRMEZCUXl4RlFVTkVaME1zVTBGQlV5eEZRVU5VTmxnc2FVSkJRMFlzUTBGQlF5eERRVUZCTzBGQlEwUjJaU3hWUVVGQlFTeExRVUZMTEVkQlFVZEJMRXRCUVVzc1EwRkJRM0pKTEUxQlFVMHNRMEZCUTJ0dVFpeGhRVUZoTEVOQlFVTXNRMEZCUVR0QlFVTnlReXhUUVVGQk8wRkJRMFlzVDBGQlFUczdRVUZGUVR0TlFVTkJMRWxCUVUxRExGZEJRVmNzUjBGQlJ6bGxMRXRCUVVzc1EwRkJReXRsTEUxQlFVMHNRMEZCUXl4VlFVRkRReXhKUVVGSkxFVkJRVVZxWml4SlFVRkpMRVZCUVVzN1VVRkRMME1zU1VGQlNVRXNTVUZCU1N4RFFVRkRhVWtzVDBGQlR5eEZRVUZGTEVsQlFVbHhWeXhWUVVGVkxFTkJRVU55Vnl4UFFVRlBMRVZCUVVVc1JVRkJSVHRCUVVNeFF5eFZRVUZCTEU5QlFVOXFTU3hKUVVGSkxFTkJRVUU3UVVGRFlpeFRRVUZCTzBGQlEwRXNVVUZCUVN4UFFVRlBhV1lzU1VGQlNTeERRVUZCTzBGQlEySXNUMEZCUXl4RlFVRkZhR1lzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1RVRkZXaXhQUVVGUFFTeExRVUZMTEVOQlFVTjBTaXhIUVVGSExFTkJRVU1zVlVGQlEzRktMRWxCUVVrc1JVRkJSVEpGTEVOQlFVTXNSVUZCU3p0UlFVTTFRaXh2UWtGRFJXdEdMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEVsQlFVRXNSVUZCUVR0QlFVTkZMMFVzVlVGQlFVRXNSMEZCUnl4RlFVRkZTaXhEUVVGRk8xVkJRMUJ2Uml4UFFVRlBMRVZCUVVWV0xFdEJRVUVzUTBGQlMyZE5MRmRCUVZjc1EwRkJRM0JNTEVsQlFVa3NRMEZCUVZvc1MwRkJRU3hGUVVGUGNrb3NTVUZCU1N4RFFVRkZPMEZCUXpORGQwWXNWVUZCUVVFc1UwRkJVeXhGUVVGRk5rUXNTMEZCUVN4RFFVRkxObFlzVTBGQlV5eERRVUZEYkdZc1NVRkJTU3hEUVVGRk8wRkJRMmhEYlUwc1ZVRkJRVUVzUjBGQlJ5eEZRVUZGTEZOQlFVRkJMRWRCUVVOblZDeERRVUZCUVN4RlFVRkZMRVZCUVVzN1dVRkRXQ3hKUVVGSmJtWXNTVUZCU1N4TFFVRkxLMlVzVjBGQlZ5eEZRVUZGTzJOQlEzaENNVllzUzBGQlFTeERRVUZMYzFVc1VVRkJVU3hIUVVGSGQwSXNSVUZCUlN4RFFVRkJPMEZCUTNCQ0xHRkJRVUU3VjBGRFFUdEJRVU5HTDBvc1ZVRkJRVUVzVTBGQlV5eEZRVUZGTEZOQlFVRkJMRk5CUVVNeVJ5eERRVUZCUVN4RlFVRkZMRVZCUVVzN1FVRkRha0l4VXl4WlFVRkJRU3hMUVVGQkxFTkJRVXQzUnl4bFFVRmxMRU5CUVVOclRTeEZRVUZGTEVWQlFVVXZZaXhKUVVGSkxFTkJRVU1zUTBGQlFUdFhRVU01UWp0VlFVTkdObFFzVVVGQlVTeEZRVUZGTjFRc1NVRkJTU3hMUVVGTEsyVXNWMEZCVnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVVU3UVVGRGVFTnlTaXhWUVVGQlFTeEpRVUZKTEVWQlFVTXNVVUZCVVR0VlFVTmlMR1ZCUVdWeVRTeEZRVUZCUVN4TFFVRkJMRU5CUVVzMFZTeGpRVUZqTEVOQlFVTnFaU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVkQlFVYzNReXhUUVVGVk8xVkJRemxFTEdWQlFXVnJUU3hGUVVGQlFTeExRVUZCTEVOQlFVczJWU3hqUVVGakxFTkJRVU5zWlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhOUVVGTkxFZEJRVWMzUXl4VFFVRkJRVHRCUVVGVkxGTkJRVUVzUlVGRk4wUXhSeXhWUVVGVkxFTkJRVU4xU2l4SlFVRkpMRVZCUVVWNFNTeE5RVUZOTEVWQlFVVTJVaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVONlF5eE5RVUZOTEVOQlEzcERMRU5CUVVNc1EwRkJRVHRCUVVWVUxFOUJRVU1zUTBGQlF5eERRVUZCTzB0QlEwZ3NRMEZCUVN4RFFVRkJPMEZCUVVFc1NVRkJRU3hQUVVGQk5GUXNTMEZCUVN4RFFVRkJPMEZCUVVFc1IwRkJRVHRGUVVGQk5FSXNVMEZCUVN4RFFVRkJkVk1zU1VGQlFTeEZRVUZCY0ZVc1owSkJRVUVzUTBGQlFTeERRVUZCTzBWQlFVRXNUMEZCUVRoQ0xGbEJRVUVzUTBGQlFYTlRMRWxCUVVFc1JVRkJRU3hEUVVGQk8wbEJRVUY2V1N4SFFVRkJMRVZCUVVFc2JVSkJRVUU3U1VGQlFTOVFMRXRCUVVFc1JVRjZTMFFzVTBGQlFXMVhMR2xDUVVGQlFTeEhRVUZ2UWp0QlFVTnNRanROUVVOQkxFbEJRVWtzUTBGQlEybFZMSFZDUVVGMVFpeEZRVUZGTEVOQlFVRTdUVUZET1VJc1NVRkJTU3hKUVVGSkxFTkJRVU5zYmtJc1MwRkJTeXhEUVVGRE1teENMRkZCUVZFc1NVRkJTU3hKUVVGSkxFTkJRVU5ETEUxQlFVMHNSVUZCUlR0UlFVTjBReXhKUVVGSkxFTkJRVU51VkN4UlFVRlJMRU5CUVVNN1FVRkRXamhUTEZWQlFVRkJMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU4yYkVJc1MwRkJTeXhEUVVGRE1teENMRkZCUVZFc1EwRkJReTlTTEZsQlFWa3NSMEZCUnl4SlFVRkpMRU5CUVVOblV5eE5RVUZOTEVOQlFVTm9VeXhaUVVGQlFUdEJRVU42UkN4VFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOS0xFOUJRVUU3UVVGRFJpeExRVUZCTzBGQlFVTXNSMEZCUVN4RlFVRkJPMGxCUVVFdlJ5eEhRVUZCTEVWQlFVRXNVVUZCUVR0SlFVRkJMMUFzUzBGQlFTeEZRVzFMUkN4VFFVRkJaMWdzVFVGQlFVRXNSMEZCVXp0QlFVRkJMRTFCUVVFc1NVRkJRWE5ETEUxQlFVRXNSMEZCUVN4SlFVRkJMRU5CUVVFN1FVRkRVQ3hOUVVGQkxFbEJRVkZ0VUN4TlFVRk5MRWRCUVVzc1NVRkJTU3hEUVVGRE9WUXNTMEZCU3l4RFFVRnlRamhVTEUxQlFVMHNRMEZCUVR0TlFVVmtMRzlDUVVORk5WUXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzFGQlEwVjBSU3hUUVVGVExFVkJRVUVzYlVOQlFVRXNRMEZCUVRWT0xFMUJRVUVzUTBGRFVDeEpRVUZKTEVOQlFVTk5MRXRCUVVzc1EwRkJRMjF1UWl4WFFVRlhMRWRCUTJ4Q0xIRkVRVUZ4UkN4SFFVTnlSQ3hGUVVGRkxFTkJRVUU3VDBGSFVuaFdMR1ZCUVVGQkxFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRVHRCUVVORmRFVXNVVUZCUVVFc1UwRkJVeXhGUVVGQk5VNHNNRVJCUVVGQkxFTkJRVUZCTEUxQlFVRXNRMEZEVUN4SlFVRkpMRU5CUVVOTkxFdEJRVXNzUTBGQlEyOXVRaXhyUWtGQmEwSXNSMEZEZWtJc2MwTkJRWE5ETEVkQlEzUkRMRVZCUVVVc1EwRkRURHRCUVVOSWJsUXNVVUZCUVVFc1IwRkJSeXhGUVVGRkxGTkJRVUZCTEVkQlFVTXlVaXhEUVVGQlFTeE5RVUZOTEVWQlFVczdWVUZEWm5oUUxFMUJRVWtzUTBGQlEzZFFMRTFCUVUwc1IwRkJSMEVzVFVGQlRTeERRVUZCTzBGQlEzUkNMRk5CUVVFN1QwRkZRV3BWTEdWQlFVRkJMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVR0QlFVRkxkRVVzVVVGQlFVRXNVMEZCVXl4RlFVRkRMQ3RDUVVGQk8wOUJRMW9zUlVGQlFTeEpRVUZKTEVOQlFVTjBUaXhMUVVGTExFTkJRVU54YmtJc1YwRkRWQ3hEUVVOR0xFTkJRVU1zWlVGRFRqRldMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVR0QlFVRkxkRVVzVVVGQlFVRXNVMEZCVXl4RlFVRkRMSGRDUVVGQk8wOUJRMkp4UlN4bFFVRkJRU3hMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4TFFVRkJMRVZCUVVFN1FVRkJTM1JGTEZGQlFVRkJMRk5CUVZNc1JVRkJReXcwUWtGQlFUdFBRVU5pY1VVc1pVRkJRVUVzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1NVRkJRU3hGUVVGQk8wRkJRMFYwUlN4UlFVRkJRU3hUUVVGVExFVkJRVU1zTmtKQlFUWkNPMEZCUTNaRE1rY3NVVUZCUVVFc1IwRkJSeXhGUVVGRkxGTkJRVUZCTEVkQlFVTnVSQ3hEUVVGQlFTeEpRVUZKTEVWQlFVczdWVUZEWW5OR0xFMUJRVWtzUTBGQlEzUkdMRWxCUVVrc1IwRkJSMEVzU1VGQlNTeERRVUZCTzFOQlEyaENPMUZCUTBaclJTeExRVUZMTEVWQlFVVjFVU3hOUVVGTkxFZEJRVWM3UVVGQlJVRXNWVUZCUVVFc1RVRkJUU3hGUVVGT1FTeE5RVUZCUVR0VFFVRlJMRWRCUVVjc1JVRkJSenRCUVVOb1F5OUlMRkZCUVVGQkxFbEJRVWtzUlVGQlF5eFRRVUZUTzFGQlEyUXNXVUZCV1N4RlFVRkJMRWxCUVVrc1EwRkJRM2hrTEV0QlFVc3NRMEZCUTNGdVFpeFhRVUZCUVR0UFFVVjBRaXhGUVVGQkxFbEJRVWtzUTBGQlEwTXNWMEZCVnl4RlFVTm1MRU5CUTBRc1EwRkRSaXhEUVVOR0xFTkJRVU1zUTBGQlFUdEJRVVZXTEV0QlFVRTdRVUZCUXl4SFFVRkJMRU5CUVVFc1JVRkJRU3hEUVVGQk8wbEJRVUY2WVN4SFFVRkJMRVZCUVVFc1kwRkJRVHRKUVVGQlJTeEhRVUZCTEVWQmFGRkVMRk5CUVVGQkxFZEJRVUZCTEVkQlFUQkNPMDFCUTNoQ0xFOUJRVTg3UVVGRFREQkNMRkZCUVVGQkxGTkJRVk1zUlVGQlJTeEZRVUZGTzBGQlEySTRXU3hSUVVGQlFTeFpRVUZaTEVWQlFVVXNVMEZCUVVFc1dVRkJRU3hIUVVGTkxFVkJRVVU3UVVGRGRFSktMRkZCUVVGQkxGZEJRVmNzUlVGQlJTeEpRVUZKTzBGQlEycENSU3hSUVVGQlFTeFhRVUZYTEVWQlFVVXNUVUZCUVR0UFFVTmtMRU5CUVVFN1FVRkRTQ3hMUVVGQk8wRkJRVU1zUjBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJMRU5CVWl0Q01WWXNRMEZCUVVFc1MwRkJTeXhEUVVGRGQwTXNVMEZCVXl4RFFVRkJMRU5CUVVFN1FVRkJRVGRETEdWQlFVRXNRMEZCTlVKblZTeEpRVUZKTEVWQlFVRXNiMEpCUVVFc1JVRlZTeXhWUVVGRGEwTXNWVUZCVlN4RlFVRkZReXhYUVVGWExFVkJRVXM3UVVGRGRrUXNSVUZCUVN4UFFVTkZRU3hYUVVGWExFTkJRVU01VkN4VFFVRlRMRWxCUVVrMlZDeFZRVUZWTEVkQlFVY3NRMEZCUXl4SFFVRkhReXhYUVVGWExFTkJRVU0zVkN4WlFVRlpMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRk0wVXNRMEZCUXl4RFFVRkJPenRCUXpOQ2VVSXNTVUZGVURoVUxFbEJRVWtzTUVKQlFVRjRWeXhuUWtGQlFTeEZRVUZCTzBWQmMwTjJRaXhUUVVGQmQxY3NTVUZCUVVFc1EwRkJXVEZ1UWl4TFFVRkxMRVZCUVVVN1FVRkJRU3hKUVVGQkxFbEJRVUZ0VWl4TFFVRkJMRU5CUVVFN1FVRkJRVU1zU1VGQlFVRXNaVUZCUVN4UFFVRkJjMWNzU1VGQlFTeERRVUZCTEVOQlFVRTdRVUZEYWtKMlZ5eEpRVUZCUVN4TFFVRkJMRWRCUVVGRkxGVkJRVUVzUTBGQlFYRlhMRWxCUVVGQkxFVkJRVUZCTEVsQlFVRXNSMEZCVFRGdVFpeExRVUZMTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVWelVpeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGSFNEbERMRmRCUVVGQkxFVkJRVUZCTEd0Q1FVRkJMRU5CUVVsMFVTeExRVUZMTEVOQlFVTnZWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNFN5eGpRVUZqTEVOQlFVTXNRMEZCUVN4RFFVRkZjazBzUjBGQlJ5eERRVUZETEZsQlFVRTdRVUZCUVN4TlFVRkJMRzlDUVVOd1JHdFVMRXRCUVVzc1EwRkJRMjFDTEZOQlFWTXNSVUZCUlN4RFFVRkJPMEZCUVVFc1MwRkRia0lzUTBGQlF5eERRVUZCTEVOQlFVRTdRVUZCUVhoQ0xFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWWkxGbEJRVUVzUlVGQlFTeFZRVUZEYWxNc1NVRkJTU3hGUVVGQk8wMUJRVUVzVDBGQlMyOVlMR0ZCUVcxQ0xFTkJRVU53V0N4SlFVRkpMRVZCUVVWcFV5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVGelVpeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRkwwTXNXVUZCUVN4RlFVRkJMRlZCUVVOcVV5eEpRVUZKTEVWQlFVRTdUVUZCUVN4UFFVRkxiMWdzWVVGQmJVSXNRMEZCUTNCWUxFbEJRVWtzUlVGQlJXbFRMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUVVFc1MwRkJRU3hEUVVGQkxFTkJRVUU3U1VGQlFYTlNMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVVUxUXl4bFFVRkJMRVZCUVVFc1dVRkJRVHRCUVVGQkxFMUJRVUVzU1VGQlFUQklMSEZDUVVGQkxFTkJRVUU3UVVGQlFTeE5RVUZCTEU5QlFVRXNRMEZCUVVFc2NVSkJRVUVzUjBGQlRURklMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTIxYUxHRkJRV0VzVFVGQlFTeEpRVUZCTEVsQlFVRk9MSEZDUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRkJMSEZDUVVGQkxFZEJRVWt4U0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZXU3haUVVGWkxFTkJRVUU3UVVGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJPVWNzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSV3BFTEhWQ1FVRkJMRVZCUVVFc1ZVRkJRM2RYTEZGQlFWRXNSVUZCU3p0TlFVTndReXhKUVVGTlF5eGxRVUZsTEVkQlFVY3NXVUZCV1R0UlFVTnNReXhKUVVGSkxFTkJRVU5ETEZOQlFWTXNRMEZCUTBZc1VVRkJVU3hEUVVGRExFTkJRVU40VlN4UFFVRlBMRU5CUVVNeVNpeExRVUZMTEVWQlFVVXNRMEZCUVR0QlFVTXhReXhQUVVGRExFTkJRVU12U3l4SlFVRkpMRU5CUVVGYUxFdEJRVXNzUTBGQlF5eERRVUZCTzBGQlJWcDBUaXhOUVVGQlFTeE5RVUZOTEVOQlFVTXlhRUlzY1VKQlFYRkNMRU5CUVVOdlF5eGxRVUZsTEVOQlFVTXNRMEZCUVR0TFFVTTVReXhEUVVGQkxFTkJRVUU3UVVGQlFYUlhMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMR2xDUVVGQkxFVkJSV2xDTEZWQlFVTTNVQ3hIUVVGSExFVkJRVVZ2VUN4TFFVRkxMRVZCUVVzN1FVRkRhRU1zVFVGQlFTeEpRVUZKVXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnpaU3hWUVVGVkxFVkJRVVU3VVVGRGVrSnVUaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOelpTeFZRVUZWTEVOQlFVTm9aQ3hIUVVGSExFVkJRVVZ2VUN4TFFVRkxMRU5CUVVNc1EwRkJRVHRCUVVOdVF5eFBRVUZCTzB0QlEwUXNRMEZCUVN4RFFVRkJPMEZCUVVGWkxFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxITkNRVUZCTEVWQlJYTkNMRlZCUVVOS0xFOUJRVThzUlVGQlJXeFZMRTlCUVU4c1JVRkJTenRCUVVNelF5eE5RVUZCTEVsQlFVRXdZaXhYUVVGQkxFZEJRV2xEY0Vnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3p0UlFVRnVRMlFzU1VGQlNTeEhRVUZCY1Zvc1YwRkJRU3hEUVVGS2Nsb3NTVUZCU1R0UlFVRkZORXdzWTBGQll5eEhRVUZCZVU0c1YwRkJRU3hEUVVGa2VrNHNZMEZCWXl4RFFVRkJPMDFCUXpWQ0xFbEJRVUZuWkN4eFFrRkJRU3hIUVVGM1FuaFNMR05CUVc5Q0xFTkJRVU53V0N4SlFVRkpMRVZCUVVVMFRDeGpRVUZqTEVOQlFVTTdVVUZCTVVSaExGZEJRVmNzUjBGQlFXMWpMSEZDUVVGQkxFTkJRVmh1WXl4WFFVRlhMRU5CUVVFN1FVRkZia0lzVFVGQlFTeEpRVUZKZDBZc1MwRkJRU3hEUVVGTGIwY3NWVUZCVlN4RFFVRkRNV0VzVDBGQlR5eERRVUZETEVsQlFVbHpWU3hMUVVGQkxFTkJRVXMwU1N4VlFVRlZMRU5CUVVOc1pDeFBRVUZQTEVOQlFVTXNSVUZCUlN4UFFVRkJPMEZCUXpGRWMxVXNUVUZCUVVFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjV2hDTEdWQlFXVXNRMEZCUTNoclFpeFBRVUZQTEVOQlFVTXNRMEZCUVR0QlFVVnVReXhOUVVGQkxFbEJRVWxyVlN4UFFVRlBMRWRCUVVkd1JpeFhRVUZYTEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVN1FVRkRhRU4zUml4UlFVRkJRU3hMUVVGQkxFTkJRVXMwVnl4eFFrRkJjVUlzUTBGQlEycGtMR05CUVdNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlFUdEJRVU5vUkN4UFFVRkRMRTFCUVUwc1NVRkJTV2xITEU5QlFVOHNSMEZCUjNCR0xGZEJRVmNzUzBGQlMySXNZMEZCWXl4RlFVRkZPMEZCUTI1RWNVY3NVVUZCUVVFc1MwRkJRU3hEUVVGTE5GY3NjVUpCUVhGQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdRVUZETDBJc1QwRkJReXhOUVVGTk5WY3NTMEZCUVN4RFFVRkxNRmNzVTBGQlV5eERRVUZET1Zjc1QwRkJUeXhIUVVGSGNFWXNWMEZCVnl4RFFVRkRMRU5CUVVOM1NDeFBRVUZQTEVOQlFVTXlTaXhMUVVGTExFVkJRVVVzUTBGQlFUdExRVU0zUkN4RFFVRkJMRU5CUVVFN1FVRkJRWGhNTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVUZCTEZkQlFVRXNSVUZGVnl4VlFVRkRObGNzUTBGQlF5eEZRVUZGY0ZFc1MwRkJTeXhGUVVGQk8wRkJRVUVzVFVGQlFTeFBRVUZMZEVJc1UwRkJaU3hEUVVGRE1GSXNRMEZCUXl4RlFVRkZjRkVzUzBGQlN5eERRVUZETEVOQlFVRTdRVUZCUVN4TFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQmRFY3NTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJXNURMR1ZCUVVFc1JVRkJRU3hWUVVGRE5sY3NRMEZCUXl4RlFVRkJPMEZCUVVFc1RVRkJRU3hQUVVGTFFTeERRVUZETEV0QlFVdDZhRUlzVDBGQlR5eERRVUZETVVvc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlFUdEJRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVGNVZTeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRmFFTXNZMEZCUVN4RlFVRkJMRlZCUVVNMlZ5eERRVUZETEVWQlFVRTdRVUZCUVN4TlFVRkJMRTlCUTJZM1Z5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5HTEZOQlFWTXNTVUZEY0VKeFVpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5FTEU5QlFVOHNTVUZEYkVKMVZ5eFZRVUZuUWl4RFFVRkRRU3hQUVVGaExFTkJRVU42V2l4UFFVRlBMRVZCUVVVc1JVRkJSVzF5UWl4RFFVRkRMRU5CUVVNc1JVRkJSVGRYTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEwWXNVMEZCVXl4RFFVRkRMRU5CUVVFN1FVRkJRU3hMUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCZDFJc1NVRkJRVUVzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUlhoRUxGbEJRVUVzUlVGQlFTeFZRVUZETmxjc1EwRkJReXhGUVVGQk8wRkJRVUVzVFVGQlFTeFBRVU5pTjFjc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRSaXhUUVVGVExFbEJRM0JDY1ZJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRSQ3hQUVVGUExFbEJRMnhDZFZjc1ZVRkJaMElzUTBGQlEwRXNUMEZCWVN4RFFVRkRlbG9zVDBGQlR5eEZRVUZGTEVWQlFVVnRja0lzUTBGQlF5eERRVUZETEVWQlFVVTNWeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVORUxFOUJRVThzUTBGQlF5eERRVUZCTzBGQlFVRXNTMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRWFZTTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVVYyUkN4WFFVRkJMRVZCUVVFc1ZVRkJRelpYTEVOQlFVTXNSVUZCUVR0QlFVRkJMRTFCUVVFc1QwRkRXakZTTEdGQlFXMUNMRU5CUVVNd1VpeERRVUZETEVWQlFVVTNWeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOR0xGTkJRVk1zUlVGQlJYRlNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTBRc1QwRkJUeXhEUVVGRExFTkJRVUU3UVVGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJkVklzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSVGRETEc5Q1FVRkJMRVZCUVVFc1ZVRkJRelpYTEVOQlFVTXNSVUZCU3p0QlFVTXhRaXhOUVVGQkxFbEJRVUYyVUN4WlFVRkJMRWRCUTBWMFNDeExRVUZCTEVOQlFVdHVVaXhMUVVGTE8xRkJSRW9yV1N4WlFVRlpMRWRCUVVGT0xGbEJRVUVzUTBGQldrMHNXVUZCV1R0UlFVRkZReXhWUVVGVkxFZEJRVUZRTEZsQlFVRXNRMEZCVms4c1ZVRkJWVHRSUVVGRlF5eFpRVUZaTEVkQlFVRlNMRmxCUVVFc1EwRkJXbEVzV1VGQldUdFJRVUZGYmxvc1UwRkJVeXhIUVVGQk1sa3NXVUZCUVN4RFFVRlVNMWtzVTBGQlV6dFJRVUZGUXl4UFFVRlBMRWRCUVVFd1dTeFpRVUZCTEVOQlFWQXhXU3hQUVVGUExFTkJRVUU3UVVGSGJFVXNUVUZCUVN4SlFVTkZMRVZCUVVWbldpeFpRVUZaTEVsQlFVbERMRlZCUVZVc1NVRkJTVU1zV1VGQldTeERRVUZETEVsQlF6ZERMRU5CUVVNNVNDeExRVUZCTEVOQlFVdG5TU3hoUVVGaExFVkJRVVVzUlVGRGNrSTdRVUZEUVN4UlFVRkJMRTlCUVU4c1MwRkJTeXhEUVVGQk8wRkJRMlFzVDBGQlFUdE5RVU5CTEVsQlFVbEtMRmxCUVZrc1NVRkJTV2hhTEU5QlFVOHNSVUZCUlR0QlFVTXpRaXhSUVVGQkxFOUJRVTkxVnl4aFFVRnRRaXhEUVVGRE1GSXNRMEZCUXl4RlFVRkZOMWNzUzBGQlFTeERRVUZMWjBrc1lVRkJZU3hGUVVGRkxFVkJRVVZ3V2l4UFFVRlBMRU5CUVVNc1EwRkJRVHRCUVVNNVJDeFBRVUZCTzAxQlEwRXNTVUZCU1dsYUxGVkJRVlVzU1VGQlNXeGFMRk5CUVZNc1JVRkJSVHRCUVVNelFpeFJRVUZCTEU5QlFVOTNWeXhoUVVGdFFpeERRVUZETUZJc1EwRkJReXhGUVVGRmJHOUNMRk5CUVZNc1JVRkJSWEZTTEV0QlFVRXNRMEZCUzJkSkxHRkJRV0VzUlVGQlJTeERRVUZETEVOQlFVRTdRVUZEYUVVc1QwRkJRVHRCUVVOQkxFMUJRVUVzU1VGQlNVWXNXVUZCV1N4SlFVRkpibG9zVTBGQlV5eEpRVUZKTEVOQlFVTkRMRTlCUVU4c1JVRkJSVHRCUVVONlF5eFJRVUZCTEU5QlFVOTFWeXhoUVVGdFFpeERRVUZETUZJc1EwRkJReXhGUVVGRmJHOUNMRk5CUVZNc1JVRkJSWEZTTEV0QlFVRXNRMEZCUzJkSkxHRkJRV0VzUlVGQlJTeERRVUZETEVOQlFVRTdRVUZEYUVVc1QwRkJRVHRCUVVOQkxFMUJRVUVzVDBGQlR5eExRVUZMTEVOQlFVRTdTMEZEWWl4RFFVRkJMRU5CUVVFN1FVRkJRVGRJTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVVYxUWl4MVFrRkJRU3hGUVVGQkxGVkJRVU0yVnl4RFFVRkRMRVZCUVVzN1FVRkROMElzVFVGQlFTeEpRVUZKTEVOQlFVTTNWeXhMUVVGQkxFTkJRVXRyU1N4clFrRkJhMElzUTBGQlF6SlBMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJReTlDTEZGQlFVRXNUMEZCVHl4TFFVRkxMRU5CUVVFN1FVRkRaQ3hQUVVGQk8wRkJSVUVzVFVGQlFTeEpRVUZCY0ZBc1dVRkJRU3hIUVVGdlEzcElMRXRCUVVFc1EwRkJTMjVTTEV0QlFVczdVVUZCZEVOR0xGTkJRVk1zUjBGQlFUaFpMRmxCUVVFc1EwRkJWRGxaTEZOQlFWTTdVVUZCUldsYUxGbEJRVmtzUjBGQlFVZ3NXVUZCUVN4RFFVRmFSeXhaUVVGWkxFTkJRVUU3VFVGREwwSXNTVUZCVFd0UUxFdEJRVXNzUjBGQlJ6TlNMRTlCUVdFc1EwRkJRM3BhTEU5QlFVOHNSVUZCUlN4RlFVRkZiWEpDTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUlhwRExFMUJRVUVzU1VGQlNXcFFMRmxCUVZrc1JVRkJSVHRSUVVOb1FpeFBRVUZQZWtNc1ZVRkJaMElzUTBGQlF6SlNMRXRCUVVzc1JVRkJSVGxYTEV0QlFVRXNRMEZCUzJkSkxHRkJRV0VzUlVGQlJTeERRVUZETEVOQlFVRTdRVUZEZEVRc1QwRkJRVHRCUVVOQkxFMUJRVUVzVDBGQlR6ZERMRlZCUVdkQ0xFTkJRVU15VWl4TFFVRkxMRVZCUVVWdWIwSXNVMEZCVXl4RFFVRkRMRU5CUVVFN1MwRkRNVU1zUTBGQlFTeERRVUZCTzBGQlFVRjNVaXhKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZjVUlzY1VKQlFVRXNSVUZCUVN4VlFVRkRObGNzUTBGQlF5eEZRVUZMTzBGQlF6TkNMRTFCUVVFc1NVRkJTU3hEUVVGRE4xY3NTMEZCUVN4RFFVRkxhMGtzYTBKQlFXdENMRU5CUVVNeVR5eERRVUZETEVOQlFVTXNSVUZCUlR0QlFVTXZRaXhSUVVGQkxFOUJRVThzUzBGQlN5eERRVUZCTzBGQlEyUXNUMEZCUVR0QlFVVkJMRTFCUVVFc1NVRkJRV3hRTEZsQlFVRXNSMEZCT0VNelNDeExRVUZCTEVOQlFVdHVVaXhMUVVGTE8xRkJRV2hFUkN4UFFVRlBMRWRCUVVFcldTeFpRVUZCTEVOQlFWQXZXU3hQUVVGUE8xRkJRVVZwV2l4VlFVRlZMRWRCUVVGR0xGbEJRVUVzUTBGQlZrVXNWVUZCVlR0UlFVRkZReXhaUVVGWkxFZEJRVUZJTEZsQlFVRXNRMEZCV2tjc1dVRkJXU3hEUVVGQk8wMUJRM3BETEVsQlFVMW5VQ3hMUVVGTExFZEJRVWN6VWl4UFFVRmhMRU5CUVVONldpeFBRVUZQTEVWQlFVVXNSVUZCUlcxeVFpeERRVUZETEVOQlFVTXNRMEZCUVR0TlFVVjZReXhKUVVGSmFGQXNWVUZCVlN4SlFVRkpReXhaUVVGWkxFVkJRVVU3VVVGRE9VSXNUMEZCVHpORExGVkJRV2RDTEVOQlFVTXlVaXhMUVVGTExFVkJRVVU1Vnl4TFFVRkJMRU5CUVV0blNTeGhRVUZoTEVWQlFVVXNRMEZCUXl4RFFVRkJPMEZCUTNSRUxFOUJRVUU3UVVGRFFTeE5RVUZCTEU5QlFVODNReXhWUVVGblFpeERRVUZETWxJc1MwRkJTeXhGUVVGRmJHOUNMRTlCUVU4c1EwRkJReXhEUVVGQk8wdEJRM2hETEVOQlFVRXNRMEZCUVR0QlFVRkJkVklzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSVzlDTEc5Q1FVRkJMRVZCUVVFc1ZVRkJRelpYTEVOQlFVTXNSVUZCU3p0QlFVTXhRaXhOUVVGQkxFbEJRVTA1YjBJc1NVRkJTU3hIUVVGSGIxZ3NZMEZCYjBJc1EwRkJRMEVzVDBGQllTeERRVUZEYmtZc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRaQ3hKUVVGSkxFVkJRVVU0YjBJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdE5RVU53UlN4UFFVTkZMRU5CUVVNM1Z5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU00V0N3d1FrRkJNRUlzU1VGRGRFTXNRMEZCUXpOSExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM05qTEUxQlFVMHNTVUZEYkVJc1EwRkJRMmhITEZOQlFXVXNRMEZCUTNCWUxFbEJRVWtzUlVGQlJXOVlMR05CUVc5Q0xFTkJRVU51Uml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFTkJRVU1zUTBGQlF5eEpRVU5xUlRkQ0xGTkJRV1VzUTBGQlEzQllMRWxCUVVrc1JVRkJSVzlZTEdOQlFXOUNMRU5CUVVOdVJpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU52V1N4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGQk8wdEJSWFpGTEVOQlFVRXNRMEZCUVR0QlFVRkJPVWNzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzWVVGQlFTeEZRVVZoTEZWQlFVTjNSQ3hEUVVGRExFVkJRVVZ4VkN4RFFVRkRMRVZCUVVzN1FVRkRkRUlzVFVGQlFTeEpRVUZST1c5Q0xFbEJRVWtzUjBGQlMybFRMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCYmtKa0xFbEJRVWtzUTBGQlFUdEJRVU5hYVZNc1RVRkJRVUVzUzBGQlFTeERRVUZMSzFjc1pVRkJaU3hEUVVGRE5WSXNZMEZCYjBJc1EwRkJRMEVzVDBGQllTeERRVUZEY0Znc1NVRkJTU3hGUVVGRk9HOUNMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVZ5VkN4RFFVRkRMRU5CUVVNc1EwRkJRVHRMUVVOMFJTeERRVUZCTEVOQlFVRTdRVUZCUVhKRUxFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxHVkJRVUVzUlVGRlpTeFZRVUZEZDBRc1EwRkJReXhGUVVGRmNWUXNRMEZCUXl4RlFVRkxPMEZCUTNoQ0xFMUJRVUVzU1VGQlVXNWlMRWRCUVVjc1IwRkJTemhJTEVOQlFVTXNRMEZCVkRsSUxFZEJRVWNzUTBGQlFUdEJRVU5ZTEUxQlFVRXNTVUZCVVRoTExHVkJRV1VzUjBGQlMzaEhMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCT1VJeVdDeGxRVUZsTEVOQlFVRTdRVUZGZGtJc1RVRkJRU3hKUVVGSkxFTkJRVU40Unl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTTRXQ3d3UWtGQk1FSXNSVUZCUlR0QlFVTXhReXhSUVVGQkxGRkJRVkZxVEN4SFFVRkhPMEZCUTFRc1ZVRkJRU3hMUVVGTExFOUJRVTg3UVVGRFZuTkZMRmxCUVVGQkxFdEJRVUVzUTBGQlMyZFlMRmRCUVZjc1EwRkJRM2hVTEVOQlFVTXNSVUZCUlhGVUxFTkJRVU1zUTBGQlF5eERRVUZCTzFsQlEzUkNOMWNzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGNXaENMR1ZCUVdVc1EwRkJRMnhSTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMVpMRkZCUVZFc1EwRkJReXhEUVVGQk8wRkJReTlETEZsQlFVRXNUVUZCUVR0QlFVTkdMRlZCUVVFc1MwRkJTeXhaUVVGWk8wRkJRMlpvU0N4WlFVRkJRU3hMUVVGQkxFTkJRVXRwV0N4dlFrRkJiMElzUTBGRGRrSktMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRMHd4VWl4UlFVRmpMRU5CUVVOdVJpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU52V1N4WlFVRlpMRVZCUVVVc1EwRkJReXhEUVVNelF5eERRVUZETEVOQlFVRTdRVUZEUkN4WlFVRkJMRTFCUVVFN1FVRkRSaXhWUVVGQkxFdEJRVXNzVjBGQlZ6dEJRVU5rYWtnc1dVRkJRVUVzUzBGQlFTeERRVUZMYVZnc2IwSkJRVzlDTEVOQlEzWkNTaXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVU5NTVZJc1VVRkJZeXhEUVVGRGJrWXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjFrc1dVRkJXU3hGUVVGRkxFTkJRVU1zUTBGRE0wTXNRMEZCUXl4RFFVRkJPMEZCUTBRc1dVRkJRU3hOUVVGQk8wRkJRMG9zVTBGQlFUdEJRVU5HTEU5QlFVRTdRVUZGUVZRc1RVRkJRVUVzWlVGQlpTeEpRVUZKUVN4bFFVRmxMRU5CUVVOb1JDeERRVUZETEVOQlFVTXNRMEZCUVR0TFFVTjBReXhEUVVGQkxFTkJRVUU3UVVGQlFYSkVMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVnRRaXh0UWtGQlFTeEZRVUZCTEZWQlFVTTJWeXhEUVVGRExFVkJRVXM3UVVGRGVrSXNUVUZCUVN4SlFVRkJNVThzV1VGQlFTeEhRVk5KYmtrc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3p0UlFWSmFaQ3hKUVVGSkxFZEJRVUZ2WVN4WlFVRkJMRU5CUVVwd1lTeEpRVUZKTzFGQlEwcDZRaXhQUVVGUExFZEJRVUUyWWl4WlFVRkJMRU5CUVZBM1lpeFBRVUZQTzFGQlExQjVTQ3hQUVVGUExFZEJRVUZ2VlN4WlFVRkJMRU5CUVZCd1ZTeFBRVUZQTzFGQlExQnBWQ3hSUVVGUkxFZEJRVUZ0UWl4WlFVRkJMRU5CUVZKdVFpeFJRVUZSTzFGQlExSm9WQ3haUVVGWkxFZEJRVUZ0VlN4WlFVRkJMRU5CUVZwdVZTeFpRVUZaTzFGQlExcEZMRmxCUVZrc1IwRkJRV2xWTEZsQlFVRXNRMEZCV21wVkxGbEJRVms3VVVGRFdrVXNWVUZCVlN4SFFVRkJLMVFzV1VGQlFTeERRVUZXTDFRc1ZVRkJWVHRSUVVOV09HbENMR0ZCUVdFc1IwRkJRUzlQTEZsQlFVRXNRMEZCWWl0UExHRkJRV0VzUTBGQlFUdE5RVWRtTEU5QlFVOXlWU3hKUVVGSkxFTkJRMVFzTmtKQlFUWkNMRVZCUVVFc2VVSkJRVUVzUTBGQlFYUlZMRTFCUVVFc1EwRkRTSE52UWl4RFFVRkRMRU5CUXpOQ1N5eEZRVUZCUVN4aFFVRmhMRWRCUVVkQkxHRkJRV0VzUTBGQlF5OVNMRTlCUVdFc1EwRkJRM0JZTEVsQlFVa3NSVUZCUlRodlFpeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMMmxDTEZOQlFWTXNSVUZEYWtVN1FVRkRSU3hSUVVGQkxIVkRRVUYxUXl4RlFVRkZLMmxDTEVOQlFVTXNTMEZCUzNwb1FpeFBRVUZQTEVOQlFVTTBVaXhSUVVGUkxFTkJRVU03VVVGRGFFVXNkVU5CUVhWRExFVkJRM0pETEVOQlFVTXhZU3hQUVVGUExFbEJRVWw1U0N4UFFVRlBMRWxCUVVsRExGbEJRVmtzU1VGQlNVVXNXVUZCV1N4SlFVRkpSU3hWUVVGVkxFdEJRMnBGSzFFc1kwRkJiMElzUTBGQlF6QlNMRU5CUVVNc1JVRkJSVGRYTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6dEJRVU55UXl4UlFVRkJMR2RFUVVGblJDeEZRVU01UTIxU0xFdEJRVUVzUTBGQlN6aEpMR3RDUVVGclFpeERRVUZESzA0c1EwRkJReXhEUVVGRE8wRkJRelZDTEZGQlFVRXNNRU5CUVRCRExFVkJRVVUzVnl4TFFVRkJMRU5CUVVzclNTeFpRVUZaTEVOQlFVTTRUaXhEUVVGRExFTkJRVU03UVVGRGFFVXNVVUZCUVN4M1EwRkJkME1zUlVGQlJUZFhMRXRCUVVFc1EwRkJTMmRLTEZWQlFWVXNRMEZCUXpaT0xFTkJRVU1zUTBGQlF6dEJRVU0xUkN4UlFVRkJMSFZEUVVGMVF5eEZRVUZGTjFjc1MwRkJRU3hEUVVGTFNDeFRRVUZUTEVOQlFVTm5XQ3hEUVVGRExFTkJRVU03UVVGRE1VUXNVVUZCUVN4cFJFRkJhVVFzUlVGREwwTTNWeXhMUVVGQkxFTkJRVXRyU1N4clFrRkJhMElzUTBGQlF6SlBMRU5CUVVNc1EwRkJRenRCUVVNMVFpeFJRVUZCTEc5RVFVRnZSQ3hGUVVOc1JEZFhMRXRCUVVFc1EwRkJTMmxLTEhGQ1FVRnhRaXhEUVVGRE5FNHNRMEZCUXl4RFFVRkRPMEZCUXk5Q0xGRkJRVUVzYTBSQlFXdEVMRVZCUTJoRU4xY3NTMEZCUVN4RFFVRkxhMG9zYlVKQlFXMUNMRU5CUVVNeVRpeERRVUZETEVOQlFVTTdRVUZETjBJc1VVRkJRU3h2UTBGQmIwTXNSVUZCUlRkWExFdEJRVUVzUTBGQlMyMVlMR0ZCUVdFc1EwRkJRMDRzUTBGQlF5eERRVUZCTzBGQlF6VkVMRTlCUTBZc1EwRkJReXhEUVVGQk8wdEJRMFlzUTBGQlFTeERRVUZCTzBGQlFVRXhWeXhKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZhVUlzYVVKQlFVRXNSVUZCUVN4VlFVRkRObGNzUTBGQlF5eEZRVUZMTzBGQlEzWkNMRTFCUVVFc1NVRkJTVGRYTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6aFlMREJDUVVFd1FpeEZRVUZGTEU5QlFVOHNTVUZCU1N4RFFVRkJPMDFCUTNSRUxFbEJRVTE1VVN4WFFVRlhMRWRCUVVkcVV5eFBRVUZoTEVOQlFVTnVSaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdldTeFpRVUZaTEVOQlFVTXNRMEZCUVR0QlFVVXhSQ3hOUVVGQkxFOUJRVTgwVUN4RFFVRkRMRXRCUVV0UExGZEJRVmNzUjBGQlJ5eEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkJPMHRCUTNSRExFTkJRVUVzUTBGQlFUdEpRVUZCYWxnc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNORUpCUVVFc1JVRkZORUlzV1VGQlRUdEJRVU5xUXl4TlFVRkJMRWxCUVVGeFNTeFpRVUZCTEVkQlEwVnlTU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxPMUZCUkVwdFdpeGhRVUZoTEVkQlFVRkxMRmxCUVVFc1EwRkJZa3dzWVVGQllUdFJRVUZGU2l4WlFVRlpMRWRCUVVGVExGbEJRVUVzUTBGQldsUXNXVUZCV1R0UlFVRkZReXhWUVVGVkxFZEJRVUZSTEZsQlFVRXNRMEZCVmxJc1ZVRkJWVHRSUVVGRlF5eFpRVUZaTEVkQlFVRlBMRmxCUVVFc1EwRkJXbEFzV1VGQldTeERRVUZCTzAxQlJUZEVMRTlCUVU5cVJpeEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFVkJRVVU3UVVGRGNFTXNVVUZCUVN4NVEwRkJlVU1zUlVGRGRrTnRSaXhoUVVGaExFdEJRVXRLTEZsQlFWa3NTVUZCU1VNc1ZVRkJWU3hKUVVGSlF5eFpRVUZaTEVOQlFVRTdRVUZEYUVVc1QwRkJReXhEUVVGRExFTkJRVUU3UzBGRFNDeERRVUZCTEVOQlFVRTdRVUZCUVROSUxFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWblFpeG5Ra0ZCUVN4RlFVRkJMRlZCUVVNMlZ5eERRVUZETEVWQlFVczdRVUZEZEVJc1RVRkJRU3hQUVVGUE4xY3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZDI5Q0xHbENRVUZwUWl4SFFVRkhjbGdzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGQyOUNMR2xDUVVGcFFpeERRVUZEVWl4RFFVRkRMRU5CUVVNc1IwRkJSMEVzUTBGQlF5eERRVUZCTzB0QlF6RkZMRU5CUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzVDBGQlFUZFhMRXRCUVVFc1EwRkJRVHRCUVRkTlJDeEhRVUZCTzBWQlFVTTBRaXhUUVVGQkxFTkJRVUV5VlN4SlFVRkJMRVZCUVVGNFZ5eG5Ra0ZCUVN4RFFVRkJMRU5CUVVFN1JVRkJRU3hQUVVGQk9FSXNXVUZCUVN4RFFVRkJNRlVzU1VGQlFTeEZRVUZCTEVOQlFVRTdTVUZCUVRkaExFZEJRVUVzUlVGQlFTeFJRVUZCTzBsQlFVRXZVQ3hMUVVGQkxFVkJLMDFFTEZOQlFVRm5XQ3hOUVVGQlFTeEhRVUZUTzBGQlFVRXNUVUZCUVN4SlFVRkJjME1zVFVGQlFTeEhRVUZCTEVsQlFVRXNRMEZCUVR0TlFVTlFMRWxCUVUweFJTeFRRVUZUTEVkQlFVY3NSVUZCUlN4RFFVRkJPMEZCUTNCQ0xFMUJRVUVzU1VGQlFTdElMRmxCUVVFc1IwRkRSU3hKUVVGSkxFTkJRVU42V2l4TFFVRkxPMUZCUkVwa0xFbEJRVWtzUjBGQlFYVmhMRmxCUVVFc1EwRkJTblpoTEVsQlFVazdVVUZCUlRSTUxHTkJRV01zUjBGQlFUSlBMRmxCUVVFc1EwRkJaRE5QTEdOQlFXTTdVVUZCUlRKa0xHZENRVUZuUWl4SFFVRkJhRkFzV1VGQlFTeERRVUZvUW1kUUxHZENRVUZuUWp0UlFVRkZReXhuUWtGQlowSXNSMEZCUVdwUUxGbEJRVUVzUTBGQmFFSnBVQ3huUWtGQlowSXNRMEZCUVR0TlFVVm9SU3hKUVVGQlF5eHpRa0ZCUVN4SFFVRnRRM0pUTEdOQlFXOUNMRU5CUTNKRWNGZ3NTVUZCU1N4RlFVTktORXdzWTBGRFJpeERRVUZETzFGQlNFOWhMRmRCUVZjc1IwRkJRV2RrTEhOQ1FVRkJMRU5CUVZob1pDeFhRVUZYTzFGQlFVVldMRk5CUVZNc1IwRkJRVEJrTEhOQ1FVRkJMRU5CUVZReFpDeFRRVUZUTEVOQlFVRTdRVUZITlVJc1RVRkJRU3hKUVVGQk1tUXNTMEZCUVN4SFFVRkJMRk5CUVVGQkxFdEJRVUZhTEVOQlFVRkJMRU5CUVVFc1JVRkZOa003UVVGRE4wTjBWeXhSUVVGQlFTeFRRVUZUTEVOQlFVTjZSU3hKUVVGSkxHVkJRMW93UlN4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRTdWVUZEUlhGRExFZEJRVWNzUlVGQlJXMURMRTFCUVVrc1EwRkJRM2xTTEZOQlFWTXNRMEZCUTBjc1EwRkJReXhIUVVGSGNtTXNWMEZCVnl4RFFVRkZPMEZCUTNKRGEwY3NWVUZCUVVFc1QwRkJUeXhGUVVGRkxGTkJRVUZCTEU5QlFVTm5VeXhEUVVGQlFTeEZRVUZGTEVWQlFVczdRVUZEWm5wT0xGbEJRVUZCTEUxQlFVa3NRMEZCUXl0U0xGZEJRVmNzUTBGQlEzUkZMRVZCUVVVc1JVRkJSVzFGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMWRCUTNaQ08wRkJRMFk1U3l4VlFVRkJRU3hUUVVGVExFVkJRVVVzVTBGQlFVRXNVMEZCUXpKSExFTkJRVUZCTEVWQlFVVXNSVUZCU3p0QlFVTnFRaXhaUVVGQkxFbEJRVWwyVGl4alFVRnZRaXhEUVVGRGRVNHNSVUZCUlN4RFFVRkRMRVZCUVVVN1kwRkROVUpCTEVWQlFVVXNRMEZCUTI1TkxHTkJRV01zUlVGQlJTeERRVUZCTzJOQlEyNUNiVTBzUlVGQlJTeERRVUZEYUZnc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlFUdEJRVU5zUWl4aFFVRkJPMEZCUlVGMVNpeFpRVUZCUVN4TlFVRkpMRU5CUVVONVV5eGhRVUZoTEVOQlFVTm9SaXhGUVVGRkxFVkJRVVZ0UlN4RFFVRkRMRU5CUVVNc1EwRkJRVHRYUVVONlFqdEJRVU5HY2swc1ZVRkJRVUVzVVVGQlVTeEZRVUZGZGtZc1RVRkJTU3hEUVVGRE1GTXNaVUZCWlN4RFFVRkRaQ3hEUVVGRExFTkJRVVU3UVVGRGJFTXhZU3hWUVVGQlFTeFRRVUZUTEVWQlFVVTRTU3hOUVVGSkxFTkJRVU15VXl4cFFrRkJhVUlzUTBGQlEyWXNRMEZCUXl4RFFVRkZPMVZCUTNKRGVGRXNXVUZCV1N4RlFVTldMRU5CUVVOd1FpeE5RVUZKTEVOQlFVTndWeXhMUVVGTExFTkJRVU52WkN4bFFVRmxMRWRCUTNaQ0xGVkJRVU41Unl4RlFVRkZMRVZCUVVFN1FVRkJRU3haUVVGQkxFOUJRVXMwUlN4blFrRkJaMElzUTBGQlF6VkZMRVZCUVVVc1JVRkJSVzFGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUVVFc1YwRkJRU3hIUVVNdlFpOXBRaXhUUVVOTU8xVkJRMFJ4V1N4alFVRmpMRVZCUTFwc1NDeE5RVUZKTEVOQlFVTndWeXhMUVVGTExFTkJRVU52WkN4bFFVRmxMRWRCUTNSQ0xGVkJRVU41Unl4RlFVRkZMRVZCUVVFN1FVRkJRU3haUVVGQkxFOUJRVXMwUlN4blFrRkJaMElzUTBGQlF6VkZMRVZCUVVVc1JVRkJSVzFGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUVVFc1YwRkJRU3hIUVVNdlFpOXBRaXhUUVVOTU8xVkJRMFJ0WWl4WlFVRlpMRVZCUTFZc1EwRkJRMmhMTEUxQlFVa3NRMEZCUTNCWExFdEJRVXNzUTBGQlEyOWtMR1ZCUVdVc1IwRkRka0lzVlVGQlEzbEhMRVZCUVVVc1JVRkJRVHRCUVVGQkxGbEJRVUVzVDBGQlN6WkZMR2RDUVVGblFpeERRVUZETjBVc1JVRkJSU3hGUVVGRmJVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkJRU3hYUVVGQkxFZEJReTlDTDJsQ0xGTkJRMHc3VlVGRFJHbG5RaXhqUVVGakxFVkJRMW81VHl4TlFVRkpMRU5CUVVOd1Z5eExRVUZMTEVOQlFVTnZaQ3hsUVVGbExFZEJRM1JDTEZWQlFVTjVSeXhGUVVGRkxFVkJRVUU3UVVGQlFTeFpRVUZCTEU5QlFVczJSU3huUWtGQlowSXNRMEZCUXpkRkxFVkJRVVVzUlVGQlJXMUZMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRVUVzVjBGQlFTeEhRVU12UWk5cFFpeFRRVU5NTzBGQlEwUTBTQ3hWUVVGQlFTeEhRVUZITEVWQlFVVnRZaXhEUVVGRk8xVkJRMUFzWTBGQll6VlNMRVZCUVVGQkxFMUJRVWtzUTBGQlEydFRMR0ZCUVdFc1EwRkJRMDRzUTBGQlF5eERRVUZETEVkQlFVY3NUVUZCVFN4SFFVRkhMMmxDTEZOQlFVRkJPMEZCUVZVc1UwRkJRU3hGUVVWNFJHMVNMRTFCUVVrc1EwRkJRelJUTEdOQlFXTXNRMEZCUTJoQ0xFTkJRVU1zUTBGRGJrSXNRMEZEVUN4RFFVRkRMRU5CUVVFN1QwRkRSaXhEUVVGQk8wMUJNME5FTEV0QlFVc3NTVUZCU1VFc1EwRkJReXhIUVVGSGNtTXNWMEZCVnl4RlFVRkZjV01zUTBGQlF5eEpRVUZKTDJNc1UwRkJVeXhGUVVGRksyTXNRMEZCUXl4RlFVRkZMRVZCUVVFN1FVRkJRVmtzVVVGQlFVRXNTMEZCUVN4RFFVRkJXaXhEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEU5QlFVRTdUVUUyUXpkRExHOUNRVU5GY2xjc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMEZCUVV0MFJTeFJRVUZCUVN4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRE1tSXNNRUpCUVRCQ0xFVkJRVU03VDBGRE9VTjBXQ3hsUVVGQlFTeExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUU3UVVGRFJYUkZMRkZCUVVGQkxGTkJRVk1zUlVGQlF5eG5RMEZCWjBNN1FVRkRNVU00VXl4UlFVRkJRU3haUVVGWkxFVkJRMVlzUTBGQlF5eEpRVUZKTEVOQlFVTndaMElzUzBGQlN5eERRVUZEYjJRc1pVRkJaU3hIUVVOMlFpeEpRVUZKTEVOQlFVTndaQ3hMUVVGTExFTkJRVU5yY0VJc2EwSkJRV3RDTEVkQlF6ZENhbXRDTEZOQlEwdzdRVUZEUkdsblFpeFJRVUZCUVN4alFVRmpMRVZCUTFvc1NVRkJTU3hEUVVGRGJHeENMRXRCUVVzc1EwRkJRMjlrTEdWQlFXVXNSMEZEZEVJc1NVRkJTU3hEUVVGRGNHUXNTMEZCU3l4RFFVRkRhM0JDTEd0Q1FVRnJRaXhIUVVNM1FtcHJRaXhUUVVGQlFUdFBRVWRNZVUwc1JVRkJRVUVzVTBGRFJTeERRVU5HTEVOQlFVTXNRMEZCUVR0QlFVVldMRXRCUVVFN1FVRkJReXhIUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRXNRMEZvVlN0Q1F5eERRVUZCUVN4TFFVRkxMRU5CUVVOM1F5eFRRVUZUTEVOQlFVRTdPMEZEVEdRc1NVRkZaR2RXTEZOQlFWTXNNRUpCUVVGcVdTeG5Ra0ZCUVN4RlFVRkJPMFZCVXpWQ0xGTkJRVUZwV1N4VFFVRkJRU3hEUVVGWmJuQkNMRXRCUVVzc1JVRkJSVHRCUVVGQkxFbEJRVUVzU1VGQlFXMVNMRXRCUVVFc1EwRkJRVHRCUVVGQlF5eEpRVUZCUVN4bFFVRkJMRTlCUVVFcldDeFRRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTnFRbWhaTEVsQlFVRkJMRXRCUVVFc1IwRkJRVVVzVlVGQlFTeERRVUZCT0Znc1NVRkJRVUVzUlVGQlFVRXNVMEZCUVN4SFFVRk5ibkJDTEV0QlFVc3NRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJSWE5TTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRV3RDUVN4alFVRkJMRVZCUVVFc1ZVRkJRM0pLTEVsQlFVa3NSVUZCU3p0TlFVTjJRbkZLTEV0QlFVRXNRMEZCUzNOQ0xGRkJRVkVzUTBGQlF6dEJRVUZGTTBzc1VVRkJRVUVzU1VGQlNTeEZRVUZLUVN4SlFVRkJRVHRCUVVGTExFOUJRVU1zUTBGQlF5eERRVUZCTzBGQlJYWkNMRTFCUVVFc1NVRkJZM05vUWl4UlFVRlJMRWRCUVV0cVdTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVGRDWkN4SlFVRkpMRU5CUVVFN1RVRkRXaXhKUVVGTmJYRkNMR1ZCUVdVc1IwRkJSMFFzVVVGQlVTeFpRVUZaYW5OQ0xFbEJRVWtzU1VGQlNTeERRVUZEYlhOQ0xFdEJRVXNzUTBGQlEwWXNVVUZCVVN4RFFVRkRMRU5CUVVFN1RVRkRjRVVzU1VGQlRXeHhRaXhKUVVGSkxFZEJRVWR0Y1VJc1pVRkJaU3hIUVVGSFJDeFJRVUZSTEVkQlFVY3NTVUZCU1dwelFpeEpRVUZKTEVWQlFVVXNRMEZCUVR0QlFVVndSQ3RDTEUxQlFVRkJMRWxCUVVrc1EwRkJRemhDTEZGQlFWRXNRMEZCUXpoSExFbEJRVWtzUTBGQlEzbG9RaXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOcVEzSnhRaXhOUVVGQlFTeEpRVUZKTEVOQlFVTXJRaXhWUVVGVkxFTkJRVU0yUnl4SlFVRkpMRU5CUVVONWFFSXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdRVUZGYmtOd1dTeE5RVUZCUVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTTRVaXhSUVVGUkxFTkJRVU0xVXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRMUVVNeFFpeERRVUZCTEVOQlFVRTdTVUZCUVc5VExHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMR2xDUVVGQkxFVkJSV2xDTEZsQlFVMDdRVUZEZEVJc1RVRkJRU3hKUVVGUmNrb3NTVUZCU1N4SFFVRkxjVW9zUzBGQlFTeERRVUZMVFN4TFFVRkxMRU5CUVc1Q00wb3NTVUZCU1N4RFFVRkJPMEZCUTFvc1RVRkJRU3hKUVVGQmVWRXNWMEZCUVN4SFFVRTRRM0JJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXM3VVVGQmFFUmtMRWxCUVVrc1IwRkJRWEZhTEZkQlFVRXNRMEZCU25KYUxFbEJRVWs3VVVGQlJYTnhRaXhWUVVGVkxFZEJRVUZxVWl4WFFVRkJMRU5CUVZacFVpeFZRVUZWTzFGQlFVVkRMR1ZCUVdVc1IwRkJRV3hTTEZkQlFVRXNRMEZCWm10U0xHVkJRV1VzUTBGQlFUdEJRVVY2UXl4TlFVRkJMRWxCUVVsQkxHVkJRV1VzUlVGQlJUdEJRVU51UWl4UlFVRkJMRzlDUVVGUE9WZ3NTMEZCU3l4RFFVRkRLMWdzV1VGQldTeERRVUZEUkN4bFFVRmxMRVZCUVVVN1FVRkRla04yY1VJc1ZVRkJRVUVzU1VGQlNTeEZRVUZLUVN4SlFVRkpPMEZCUTBwd1F5eFZRVUZCUVN4TFFVRkxMRVZCUVVWblRDeEpRVUZKTzFWQlExaG5TeXhSUVVGUkxFVkJRVVZZTEV0QlFVRXNRMEZCUzI5WExGbEJRVUZCTzBGQlEycENMRk5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zVDBGQlFUdE5RVVZCTEc5Q1FVTkZOVllzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1QwRkJRU3hGUVVGQk8wRkJRMFVyV0N4UlFVRkJRU3hKUVVGSkxFVkJRVU1zVFVGQlRUdEJRVU5ZY21Nc1VVRkJRVUVzVTBGQlV5eEZRVUZETERoQ1FVRTRRanRCUVVONFEzTmpMRkZCUVVGQkxGZEJRVmNzUlVGQlF5eE5RVUZOTzBGQlEyeENReXhSUVVGQlFTeEpRVUZKTEVWQlFVTXNXVUZCV1R0UlFVTnFRa01zVVVGQlVTeEZRVUZCTEVsQlFVRTdRVUZEVW1oMFFpeFJRVUZCUVN4TFFVRkxMRVZCUVVWblRDeEpRVUZMTzBGQlExcG5TeXhSUVVGQlFTeFJRVUZSTEVWQlFVVXNVMEZCUVVFc1VVRkJReXRTTEVOQlFVRkJMRVZCUVVVc1JVRkJTenRWUVVOb1FqRlRMRXRCUVVFc1EwRkJTMjlYTEZsQlFWa3NRMEZCUXpGRUxFVkJRVVVzUTBGQlEycFFMRTFCUVUwc1EwRkJRemxZTEV0QlFVc3NTVUZCU1RCelFpeFZRVUZWTEVOQlFVTXNRMEZCUVR0QlFVTnNSQ3hUUVVGQk8wRkJRVVVzVDBGRFNDeERRVUZETEVOQlFVRTdTMEZGVEN4RFFVRkJMRU5CUVVFN1NVRjBSRU55V1N4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUjBGQlJ6dEJRVU5ZTTBvc1RVRkJRVUVzU1VGQlNTeEZRVUZGY1Vvc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkM0JDTEZWQlFVRkJPMHRCUTJ4Q0xFTkJRVUU3UVVGQlF5eEpRVUZCTEU5QlFVRnlXU3hMUVVGQkxFTkJRVUU3UVVGRFNpeEhRVUZCTzBWQlFVTTBRaXhUUVVGQkxFTkJRVUZ2Vnl4VFFVRkJMRVZCUVVGcVdTeG5Ra0ZCUVN4RFFVRkJMRU5CUVVFN1JVRkJRU3hQUVVGQk9FSXNXVUZCUVN4RFFVRkJiVmNzVTBGQlFTeEZRVUZCTEVOQlFVRTdTVUZCUVhSakxFZEJRVUVzUlVGQlFTeFJRVUZCTzBsQlFVRXZVQ3hMUVVGQkxFVkJjVVJFTEZOQlFVRm5XQ3hOUVVGQlFTeEhRVUZUTzAxQlExQXNiMEpCUTBWdVF5eExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUU3UVVGQlMzUkZMRkZCUVVGQkxGTkJRVk1zUlVGQlF5eDNRMEZCUVR0UFFVTmljVVVzWlVGQlFVRXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBGQlFVdDBSU3hSUVVGQlFTeFRRVUZUTEVWQlFVTXNaME5CUVVFN1QwRkRXaXhGUVVGQkxFbEJRVWtzUTBGQlEzUk9MRXRCUVVzc1EwRkJReXR3UWl4alFVTlVMRU5CUVVNc1pVRkRUbkJaTEV0QlFVRXNRMEZCUVVNc1lVRkJRU3hEUVVGQkxFdEJRVUVzUlVGQlFUdEJRVUZMZEVVc1VVRkJRVUVzVTBGQlV5eEZRVUZETEhkRFFVRkJPMDlCUTJKeFJTeGxRVUZCUVN4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRTdRVUZCUzNSRkxGRkJRVUZCTEZOQlFWTXNSVUZCUXl3NFFrRkJRVHRCUVVFNFFpeFBRVUZCTEVWQlF6RkRMRWxCUVVrc1EwRkJRekJqTEdWQlFXVXNSVUZEYkVJc1EwRkRSaXhEUVVOR0xFTkJRVU1zUTBGQlFUdEJRVVZXTEV0QlFVRTdRVUZCUXl4SFFVRkJMRU5CUVVFc1JVRkJRU3hEUVVGQk8wbEJRVUZ1WkN4SFFVRkJMRVZCUVVFc01FSkJRVUU3UVVGQlFTOVFMRWxCUVVGQkxFdEJRVUVzUlVGb1JVUXNVMEZCUVcxMFFpeDNRa0ZCUVVFc1EwRkJaME5xY1VJc1MwRkJTeXhGUVVGRmVWSXNTMEZCU3l4RlFVRkZPMEZCUXpWRExFMUJRVUVzU1VGQlNYcFNMRXRCUVVzc1EwRkJRM2R3UWl4VlFVRlZMRXRCUVVzdldDeExRVUZMTEVOQlFVTXpTaXhKUVVGSkxFVkJRVVU3VVVGRGJrTXNUMEZCVHp0VlFVTk1RU3hKUVVGSkxFVkJRVVU1U0N4TFFVRkxMRU5CUVVOM2NFSXNWVUZCUVVFN1UwRkRZaXhEUVVGQk8wRkJRMGdzVDBGQlFUczdRVUZGUVR0QlFVTkJMRTFCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVUU3UVVGRFlpeExRVUZCTzBGQlFVTXNSMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFTkJNVUp2UXpkWUxFTkJRVUZCTEV0QlFVc3NRMEZCUTNkRExGTkJRVk1zUTBGQlFUczdRVU5CZGtNc1UwRkJVeXRXTEdsQ1FVRnBRa0VzUTBGQlFYUnhRaXhKUVVGQkxFVkJTM1JETzBGQlFVRXNSVUZCUVN4SlFVRkJkWEZDTEhGQ1FVRkJMRWRCUVVGMmNVSXNTVUZCUVN4RFFVcEVkMjVDTEd0Q1FVRnJRanRCUVVGc1FrRXNTVUZCUVVFc2EwSkJRV3RDTEVkQlFVRXJReXh4UWtGQlFTeExRVUZITEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVzc1IwRkJRVUVzY1VKQlFVRTdTVUZCUVVNc1lVRkJRU3hIUVVGQmVIRkNMRWxCUVVFc1EwRkRNVUo1Y1VJc1VVRkJVVHRCUVVGU1FTeEpRVUZCUVN4UlFVRlJMRWRCUVVGRUxHRkJRVUVzUzBGQlJ5eExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkxMRWRCUVVGQkxHRkJRVUU3U1VGRGFFSTVZeXhUUVVGVExFZEJRVUV4VGl4SlFVRkJMRU5CUVZRd1RpeFRRVUZUTzBsQlExUXJSaXhSUVVGUkxFZEJRVUY2VkN4SlFVRkJMRU5CUVZKNVZDeFJRVUZSTEVOQlFVRTdRVUZGVWl4RlFVRkJMRWxCUVVscFdDeFRRVUZUTEVkQlFVZHNSQ3hyUWtGQmEwSXNSMEZET1VJc1lVRkJZU3hIUVVGQkxHRkJRVUVzUTBGQlFURnVRaXhOUVVGQkxFTkJRME15Y1VJc1VVRkJVU3hIUVVGSExGZEJRVmNzUjBGQlJ5eEZRVUZGTEVOQlFVVXNRMEZCUVR0RlFVVXZReXh2UWtGRFJURlpMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVR0QlFVTkZkRVVzU1VGQlFVRXNVMEZCVXl4RlFVRkZRU3hUUVVGVk8wRkJRM0pDYTFFc1NVRkJRVUVzU1VGQlNTeEZRVUZETEZGQlFWRTdRVUZEWWl4SlFVRkJMRmxCUVVFc1JVRkJXVGhOTEZOQlFWVTdTVUZEZEVJc1dVRkJWeXhGUVVGQkxFMUJRVUU3UVVGQlRTeEhRVUZCTEVWQlJXaENhbGdzVVVGRFJTeERRVUZETEVOQlFVRTdRVUZGVmpzN1FVTXdRa0VzU1VGQlRXdFlMSGxDUVVGNVFpeEhRVUZITEVOQlEyaERMQ3RDUVVFclFpeEZRVU12UWl4blEwRkJaME1zUlVGRGFFTXNjVU5CUVhGRExFTkJRM1JETEVOQlFVRTdRVUZGUkN4SlFVRk5ReXhuUWtGQlowSXNSMEZCUnl4VFFVRnVRa0VzWjBKQlFXZENRU3hIUVVGeFFqdEJRVUZCTEVWQlFVRXNTVUZCYWtKRExFOUJRVThzUjBGQlFYcHNRaXhUUVVGQkxFTkJRVUZvUnl4TlFVRkJMRWRCUVVFc1EwRkJRU3hKUVVGQlowY3NVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hMUVVGQlF5eFRRVUZCTEVkQlFVRkVMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUjBGQlJ5eEZRVUZGTEVOQlFVRTdRVUZEY0VNc1JVRkJRU3hKUVVGTk1HeENMRlZCUVZVc1IwRkJSeXhEUVVGRFJDeFBRVUZQTEVOQlFVTnVaQ3hUUVVGVExFbEJRVWtzUlVGQlJTeEZRVUZGYVdNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBGQlEzcEVMRVZCUVVFc1QwRkJUMmRDTEhsQ1FVRjVRaXhEUVVGRE9XdENMRWxCUVVrc1EwRkRia01zVlVGQlEydHNRaXhoUVVGaExFVkJRVUU3UVVGQlFTeEpRVUZCTEU5QlFVdEVMRlZCUVZVc1EwRkJRMFVzVDBGQlR5eERRVUZEUkN4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUU3UVVGQlFTeEhRVU16UkN4RFFVRkRMRU5CUVVFN1FVRkRTQ3hEUVVGRExFTkJRVUU3UVVGQlF5eEpRVVZ0UWtVc1VVRkJVU3d3UWtGQlFUTmFMR2RDUVVGQkxFVkJRVUU3UlVGclN6TkNMRk5CUVVFeVdpeFJRVUZCUVN4RFFVRlpOM0ZDTEV0QlFVc3NSVUZCUlR0QlFVRkJMRWxCUVVFc1NVRkJRVzFTTEV0QlFVRXNRMEZCUVR0QlFVRkJReXhKUVVGQlFTeGxRVUZCTEU5QlFVRjVXaXhSUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5xUWpGYUxFbEJRVUZCTEV0QlFVRXNSMEZCUVVVc1ZVRkJRU3hEUVVGQmQxb3NTVUZCUVVFc1JVRkJRVUVzVVVGQlFTeEhRVUZOTjNGQ0xFdEJRVXNzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZCUlhOU0xFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVd0RVRTeHZRa0ZCUVN4RlFVRkJMRlZCUVVOVUxFdEJRVXNzUlVGQlN6dEJRVU01UWxNc1RVRkJRVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGNWVXNZMEZCWXl4RFFVRkRNMFFzUzBGQlN5eERRVUZETEVOQlFVRTdTMEZEYWtNc1EwRkJRU3hEUVVGQk8wbEJRVUZaTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxHOUNRVUZCTEVWQlJXOUNMRmxCUVUwN1FVRkRla0lzVFVGQlFTeFBRVUZQUVN4TFFVRkJMRU5CUVV0eFRDeFpRVUZaTEVOQlFVTnlTaXhQUVVGUExFTkJRVUU3UzBGRGFrTXNRMEZCUVN4RFFVRkJPMEZCUVVFM1FpeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRmNVSXNjVUpCUVVFc1JVRkJRU3hWUVVGRFZDeExRVUZMTEVWQlFVczdRVUZETDBJc1RVRkJRU3hKUVVGSk9Gb3NaMEpCUVdkQ0xFTkJRVU01V2l4TFFVRkxMRU5CUVVOclJTeE5RVUZOTEVOQlFVTXNSVUZCUlR0QlFVTnNRM3BFTEZGQlFVRkJMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpoeFFpeGxRVUZsTEVWQlFVVXNRMEZCUVR0QlFVTTVRaXhQUVVGQk8wdEJRMFFzUTBGQlFTeERRVUZCTzBsQlFVRjRXaXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4bFFVRkJMRVZCUldVc1dVRkJUVHRCUVVOd1FpeE5RVUZCTEVsQlFVRnZTQ3hYUVVGQkxFZEJRU3REY0Vnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3p0UlFVRnFSRzlaTEZsQlFWa3NSMEZCUVVjc1YwRkJRU3hEUVVGYVNDeFpRVUZaTzFGQlFVVkVMRkZCUVZFc1IwRkJRVWtzVjBGQlFTeERRVUZTU2l4UlFVRlJPMUZCUVVWclR5eFZRVUZWTEVkQlFVRTVUaXhYUVVGQkxFTkJRVlk0VGl4VlFVRlZMRU5CUVVFN1FVRkRNVU1zVFVGQlFTeEpRVUZOTlc5Q0xFOUJRVThzUjBGQlIyOVBMRzFDUVVGdFFpeERRVUZEYzBZc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkRMME1zVFVGQlFTeEpRVUZOYTBZc1QwRkJUeXhIUVVGSEswY3NiVUpCUVcxQ0xFTkJRVU5yUml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVTXZReXhOUVVGQkxFbEJRVTF0VkN4UFFVRlBMRWRCUVVkMFZ5eFBRVUZQTEVWQlFVVXNRMEZCUVR0QlFVTjZRaXhOUVVGQkxFbEJRVTFyZFVJc1YwRkJWeXhIUVVGSE1VVXNWVUZCVlN4SlFVRkpiRThzVVVGQlVTeEpRVUZKUXl4WlFVRlpMRU5CUVVFN1FVRkRNVVFzVFVGQlFTeEpRVUZKTWxNc1YwRkJWeXhGUVVGRk8wRkJRMllzVVVGQlFTeFBRVUZQUVN4WFFVRlhMRU5CUVVFN1FVRkRjRUlzVDBGQlF5eE5RVUZOTzFGQlEwd3NTVUZCU1hSMFFpeFBRVUZQTEVsQlFVa3lRaXhSUVVGUkxFTkJRVU1yVkN4UFFVRlBMRVZCUVVVeFZpeFBRVUZQTEVOQlFVTXNSVUZCUlR0QlFVTjZReXhWUVVGQkxFOUJRVTlCTEU5QlFVOHNRMEZCUVR0VFFVTm1MRTFCUVUwc1NVRkJTWGxJTEU5QlFVOHNTVUZCU1dkTExFOUJRVThzUTBGQlEybEZMRTlCUVU4c1JVRkJSV3BQTEU5QlFVOHNRMEZCUXl4RlFVRkZPMEZCUXk5RExGVkJRVUVzVDBGQlQwRXNUMEZCVHl4RFFVRkJPMEZCUTJoQ0xGTkJRVUU3UVVGRFJpeFBRVUZCTzBGQlEwRXNUVUZCUVN4UFFVRlBhVThzVDBGQlR5eERRVUZCTzB0QlEyWXNRMEZCUVN4RFFVRkJPMGxCUVVFM1FpeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hsUVVGQkxFVkJSV1VzV1VGQlRUdEJRVU53UWtFc1RVRkJRVUVzUzBGQlFTeERRVUZMYzBJc1VVRkJVU3hEUVVOWUxGVkJRVUUzVXl4SlFVRkJMRVZCUVVFN1FVRkJRU3hSUVVGQkxFbEJRVWRXTEVsQlFVa3NSMEZCUVZVc1NVRkJRU3hEUVVGS1ZpeEpRVUZKTEVOQlFVRTdVVUZCUVN4UFFVRlJPMEZCUTJKQkxGVkJRVUZCTEVsQlFVa3NSVUZCUlhkTExGTkJRVk1zUTBGQlEzaExMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVUU3VTBGRGVFSXNRMEZCUVR0QlFVRkJMRTlCUVVNc1JVRkRSaXhaUVVGQk8xRkJRVUVzVDBGQlRXbFRMRXRCUVVFc1EwRkJTelphTEdsQ1FVRnBRaXhEUVVGRE4xb3NTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVGQkxFOUJReTlETEVOQlFVTXNRMEZCUVR0TFFVTkdMRU5CUVVFc1EwRkJRVHRKUVVGQmIxTXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzWlVGQlFTeEZRVVZsTEZsQlFVMDdRVUZEY0VKQkxFMUJRVUZCTEV0QlFVRXNRMEZCUzNOQ0xGRkJRVkVzUTBGRFdDeFZRVUZCYUZNc1MwRkJRU3hGUVVGQk8wRkJRVUVzVVVGQlFTeEpRVUZIZGtJc1NVRkJTU3hIUVVGQmRVSXNTMEZCUVN4RFFVRktka0lzU1VGQlNTeERRVUZCTzFGQlFVRXNUMEZCVVR0QlFVTmlRU3hWUVVGQlFTeEpRVUZKTEVWQlFVVnJTeXhUUVVGVExFTkJRVU5zU3l4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGQk8xTkJRM2hDTEVOQlFVRTdRVUZCUVN4UFFVRkRMRVZCUTBZc1dVRkJRVHRSUVVGQkxFOUJRVTFwVXl4TFFVRkJMRU5CUVVzMldpeHBRa0ZCYVVJc1EwRkJRemRhTEV0QlFVRXNRMEZCUzAwc1MwRkJTeXhEUVVGRGRsTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1FVRkJRU3hQUVVNdlF5eERRVUZETEVOQlFVRTdTMEZEUml4RFFVRkJMRU5CUVVFN1NVRkJRVzlUTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWblFpeG5Ra0ZCUVN4RlFVRkJMRlZCUVVNM1VDeEhRVUZITEVWQlFVVnZVQ3hMUVVGTExFVkJRVVYxWVN4bFFVRmxMRVZCUVVzN1RVRkRhRVE1V2l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjNWaXhSUVVGUkxFTkJRVU5zVlN4SFFVRkhMRVZCUVVWdlVDeExRVUZMTEVWQlFVVjFZU3hsUVVGbExFTkJRVU1zUTBGQlFUdEJRVU5vUkRsYUxFMUJRVUZCTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzRm9RaXhsUVVGbExFbEJRVWxzVVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhhRUlzWlVGQlpTeERRVUZETDJZc1IwRkJSeXhEUVVGRExFTkJRVUU3UzBGRE9VUXNRMEZCUVN4RFFVRkJPMEZCUVVGblVTeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRmNVSXNjVUpCUVVFc1JVRkJRU3hWUVVGRE4xQXNSMEZCUnl4RlFVRkxPMDFCUXpkQ05sQXNTMEZCUVN4RFFVRkxjMElzVVVGQlVTeERRVUZETzBGQlFVVXdSeXhSUVVGQlFTeGhRVUZoTEVWQlFVVTNXQ3hIUVVGQlFUdEJRVUZKTEU5QlFVTXNRMEZCUXl4RFFVRkJPMEZCUTNKRE5sQXNUVUZCUVVFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkV1VzWlVGQlpTeEpRVUZKY0U0c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkV1VzWlVGQlpTeERRVUZEYW1Rc1IwRkJSeXhEUVVGRExFTkJRVUU3UzBGRE9VUXNRMEZCUVN4RFFVRkJPMGxCUVVGblVTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3gxUWtGQlFTeEZRVVYxUWl4WlFVRk5PMDFCUXpWQ1FTeExRVUZCTEVOQlFVdHpRaXhSUVVGUkxFTkJRVU03UVVGQlJUQkhMRkZCUVVGQkxHRkJRV0VzUlVGQlJTeEpRVUZCTzBGQlFVc3NUMEZCUXl4RFFVRkRMRU5CUVVFN1RVRkRkRU5vU1N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnJja0lzYVVKQlFXbENMRWxCUVVrdldpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5yY2tJc2FVSkJRV2xDTEVWQlFVVXNRMEZCUVR0TFFVTXZSQ3hEUVVGQkxFTkJRVUU3UVVGQlFUVmFMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMSE5DUVVGQkxFVkJSWE5DTEZWQlFVTlVMRXRCUVVzc1JVRkJSVEZLTEVsQlFVa3NSVUZCU3p0TlFVTjBRMjFMTEV0QlFVRXNRMEZCUzNOQ0xGRkJRVkVzUTBGQlF6dEJRVUZGTUVjc1VVRkJRVUVzWVVGQllTeEZRVUZGWjFNc1QwRkJUeXhEUVVGRGRIVkNMRTlCUVU4c1JVRkJSU3hGUVVGRmJVc3NTVUZCU1N4RFFVRkJPMEZCUVVVc1QwRkJReXhEUVVGRExFTkJRVUU3UVVGRE1VUXNUVUZCUVN4RFFVRkRMRU5CUVVOdFN5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU41YjBJc1owSkJRV2RDTEVsQlFVbDBXQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVONWIwSXNaMEpCUVdkQ0xFTkJRVU12V0N4TFFVRkxMRVZCUVVVeFNpeEpRVUZKTEVOQlFVTXNRMEZCUVR0TFFVTXhSU3hEUVVGQkxFTkJRVUU3UVVGQlFYTkxMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMSE5DUVVGQkxFVkJSWE5DTEZWQlFVTlVMRXRCUVVzc1JVRkJSVEZLTEVsQlFVa3NSVUZCU3p0QlFVTjBReXhOUVVGQkxFTkJRVU1zUTBGQlEyMUxMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpCdlFpeG5Ra0ZCWjBJc1NVRkJTWFpZTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6QnZRaXhuUWtGQlowSXNRMEZCUTJoWkxFdEJRVXNzUlVGQlJURktMRWxCUVVrc1EwRkJReXhEUVVGQk8wdEJRekZGTEVOQlFVRXNRMEZCUVR0QlFVRkJjMHNzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSV3RDTEd0Q1FVRkJMRVZCUVVFc1ZVRkJRMnBUTEVsQlFVa3NSVUZCU3p0QlFVTXpRaXhOUVVGQkxFbEJRVWxwVXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZja0lzV1VGQldTeEZRVUZGTzBGQlF6TkNhbUVzVVVGQlFVRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjNKQ0xGbEJRVmtzUTBGQlEyeHpRaXhKUVVGSkxFTkJRVU1zUTBGQlFUdFJRVU0zUW1sVExFdEJRVUVzUTBGQlMzTkNMRkZCUVZFc1EwRkJRenRCUVVGRk5Ga3NWVUZCUVVFc2RVSkJRWFZDTEVWQlFVVXNTVUZCUVR0QlFVRkxMRk5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMnhFTEU5QlFVRTdRVUZEUVN4TlFVRkJMRWxCUVVsc1lTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56Vml4clFrRkJhMElzUlVGQlJUdEJRVU5xUXl4UlFVRkJMRWxCUVVsdVJTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU4zVml4UlFVRlJMRVZCUVVVN1FVRkRka0p5UlN4VlFVRkJRU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOM1ZpeFJRVUZSTEVOQlFVTjBWeXhKUVVGSkxFTkJRVU1zUTBGQlFUdEJRVU16UWl4VFFVRkJPMEZCUTBFc1VVRkJRU3hKUVVGSmFWTXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZVZZc1QwRkJUeXhGUVVGRk8wRkJRM1JDZEVVc1ZVRkJRVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGVWWXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wRkJRekZDTEZOQlFVRTdRVUZEUml4UFFVRkJPMEZCUlVGMFJTeE5RVUZCUVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnhhRUlzWlVGQlpTeEpRVUZKYkZFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjV2hDTEdWQlFXVXNRMEZCUTI1cFFpeEpRVUZKTEVOQlFVTXNRMEZCUVR0TFFVTXZSQ3hEUVVGQkxFTkJRVUU3UVVGQlFXOVRMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVnRRaXh0UWtGQlFTeEZRVUZCTEZWQlFVTnFVeXhKUVVGSkxFVkJRVXM3UVVGRE5VSnBVeXhOUVVGQlFTeExRVUZCTEVOQlFVdHRZU3gxUWtGQmRVSXNRMEZCUTNCelFpeEpRVUZKTEVOQlFVTXNRMEZCUVR0QlFVTnNReXhOUVVGQkxFbEJRVWxwVXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnpWaXhyUWtGQmEwSXNSVUZCUlR0QlFVTnFReXhSUVVGQkxFbEJRVWx1UlN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjNWaXhSUVVGUkxFVkJRVVU3UVVGRGRrSnlSU3hWUVVGQlFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU4zVml4UlFVRlJMRU5CUVVOMFZ5eEpRVUZKTEVOQlFVTXNRMEZCUVR0QlFVTXpRaXhUUVVGQk8wRkJRMEVzVVVGQlFTeEpRVUZKYVZNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRlVllzVDBGQlR5eEZRVUZGTzBGQlEzUkNkRVVzVlVGQlFVRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZVZZc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzBGQlF6RkNMRk5CUVVFN1FVRkRSaXhQUVVGQk8wRkJSVUYwUlN4TlFVRkJRU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeGFFSXNaVUZCWlN4SlFVRkpiRkVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGNXaENMR1ZCUVdVc1EwRkJRMjVwUWl4SlFVRkpMRU5CUVVNc1EwRkJRVHRMUVVNdlJDeERRVUZCTEVOQlFVRTdRVUZCUVc5VExFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWNVFpeDVRa0ZCUVN4RlFVRkJMRlZCUVVOcVV5eEpRVUZKTEVWQlFVczdRVUZEYkVNc1RVRkJRU3hKUVVGSmFWTXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZFhKQ0xHRkJRV0VzUlVGQlJUdEJRVU0xUW5CaExGRkJRVUZCTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzVnlRaXhoUVVGaExFTkJRVU55YzBJc1NVRkJTU3hEUVVGRExFTkJRVUU3VVVGRE9VSnBVeXhMUVVGQkxFTkJRVXR6UWl4UlFVRlJMRU5CUVVNN1FVRkJSVFJaTEZWQlFVRkJMSFZDUVVGMVFpeEZRVUZGTEVsQlFVRTdRVUZCU3l4VFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOc1JDeFBRVUZCTzB0QlEwUXNRMEZCUVN4RFFVRkJPMEZCUVVFdldpeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRmRVSXNkVUpCUVVFc1JVRkJRU3hWUVVGRGFsTXNTVUZCU1N4RlFVRkxPMEZCUTJoRGFWTXNUVUZCUVVFc1MwRkJRU3hEUVVGTGIwVXNaMEpCUVdkQ0xFTkJRVU55Vnl4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVNelFtbFRMRTFCUVVGQkxFdEJRVUVzUTBGQlN6WmFMR2xDUVVGcFFpeERRVUZET1hKQ0xFbEJRVWtzUTBGQlF5eERRVUZCTzB0QlF6ZENMRU5CUVVFc1EwRkJRVHRCUVVGQmIxTXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJWa3NXVUZCUVN4RlFVRkJMRlZCUVVOdVN5eEpRVUZKTEVWQlFVczdRVUZEY2tKdFN5eE5RVUZCUVN4TFFVRkJMRU5CUVV0elFpeFJRVUZSTEVOQlExZ3NWVUZCUVRGT0xFdEJRVUVzUlVGQlFUdEJRVUZCTEZGQlFVRXNTVUZCUnpkR0xFbEJRVWtzUjBGQlFUWkdMRXRCUVVFc1EwRkJTamRHTEVsQlFVa3NRMEZCUVR0UlFVRkJMRTlCUVZFN1FVRkRZa0VzVlVGQlFVRXNTVUZCU1N4RlFVRkZhWE5DTEU5QlFVOHNRMEZCUTJwelFpeEpRVUZKTEVWQlFVVTRTQ3hKUVVGSkxFTkJRVUU3VTBGRGVrSXNRMEZCUVR0QlFVRkJMRTlCUVVNc1JVRkRSaXhaUVVGQk8xRkJRVUVzVDBGQlRXMUxMRXRCUVVFc1EwRkJTMjlGTEdkQ1FVRm5RaXhEUVVGRGNFVXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVGQkxFOUJRemxETEVOQlFVTXNRMEZCUVR0TFFVTkdMRU5CUVVFc1EwRkJRVHRCUVVGQmIxTXNTVUZCUVVFc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlJXRXNZVUZCUVN4RlFVRkJMRlZCUVVNelRTeExRVUZMTEVWQlFVczdRVUZEZGtJeVRTeE5RVUZCUVN4TFFVRkJMRU5CUVV0elFpeFJRVUZSTEVOQlExZ3NWVUZCUVRsTkxFdEJRVUVzUlVGQlFUdEJRVUZCTEZGQlFVRXNTVUZCUjNwSExFbEJRVWtzUjBGQlFYbEhMRXRCUVVFc1EwRkJTbnBITEVsQlFVa3NRMEZCUVR0UlFVRkJMRTlCUVZFN1FVRkRZa0VzVlVGQlFVRXNTVUZCU1N4RlFVRkZkVVlzVVVGQlVTeERRVUZEZGtZc1NVRkJTU3hGUVVGRmMwWXNTMEZCU3l4RFFVRkJPMU5CUXpOQ0xFTkJRVUU3UVVGQlFTeFBRVUZETEVWQlEwWXNXVUZCUVR0UlFVRkJMRTlCUVUweVRTeExRVUZCTEVOQlFVczJXaXhwUWtGQmFVSXNRMEZCUXpkYUxFdEJRVUVzUTBGQlMwMHNTMEZCU3l4RFFVRkRkbE1zU1VGQlNTeERRVUZETEVOQlFVRTdRVUZCUVN4UFFVTXZReXhEUVVGRExFTkJRVUU3UzBGRFJpeERRVUZCTEVOQlFVRTdRVUZCUVc5VExFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWcFFpeHBRa0ZCUVN4RlFVRkJMRlZCUVVONVJpeFRRVUZUTEVWQlFVczdRVUZETDBKNlJpeE5RVUZCUVN4TFFVRkJMRU5CUVV0elFpeFJRVUZSTEVOQlExZ3NWVUZCUVRWTkxFdEJRVUVzUlVGQlFUdEJRVUZCTEZGQlFVRXNTVUZCUnpOSExFbEJRVWtzUjBGQlFUSkhMRXRCUVVFc1EwRkJTak5ITEVsQlFVa3NRMEZCUVR0UlFVRkJMRTlCUVZFN1FVRkRZa0VzVlVGQlFVRXNTVUZCU1N4RlFVRkZhWE5DTEU5QlFVOHNRMEZCUXpGdFFpeFJRVUZSTEVOQlFVTjJSaXhKUVVGSkxFVkJRVVYxU0N4UlFVRlJMRU5CUVVOdFVTeFRRVUZUTEVOQlFVTXNRMEZCUXl4RlFVRkZjbEVzVDBGQlR5eERRVUZEY1ZFc1UwRkJVeXhEUVVGRExFTkJRVUU3VTBGRGRFVXNRMEZCUVR0QlFVRkJMRTlCUVVNc1JVRkRSaXhaUVVGQk8xRkJRVUVzVDBGQlRYcEdMRXRCUVVFc1EwRkJTM0ZoTEhGQ1FVRnhRaXhEUVVGRGNtRXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVGQkxFOUJRMjVFTEVOQlFVTXNRMEZCUVR0TFFVTkdMRU5CUVVFc1EwRkJRVHRKUVVGQmIxTXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJRVUVzVVVGQlFTeEZRVVZSTEZsQlFUUkNPMEZCUVVFc1RVRkJRU3hKUVVFelFtcFRMRWxCUVVrc1IwRkJRVGhHTEZOQlFVRXNRMEZCUVdoSExFMUJRVUVzVVVGQlFXZEhMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUzBGQlFVTXNVMEZCUVN4SFFVRkJSQ3hUUVVGQkxFTkJRVWR0VFN4RFFVRkJRU3hEUVVGQlFTeEhRVUZCUVN4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUTBGQlEzWlRMRWxCUVVrc1EwRkJRVHRCUVVNNVFpeE5RVUZCTEVsQlFVMTVReXhYUVVGWExFZEJRVWRHTEdOQlFXTXNRMEZEYUVOMlF5eEpRVUZKTEVWQlEwcHBVeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVONlF5eE5RVUZOTEVWQlEycENORlFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1FSXNaMEpCUTJJc1EwRkJReXhEUVVGQk8wMUJSVVFzU1VGQlRTdHdRaXhSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZCTzBGQlEyNUNMRTFCUVVFc1NVRkJTWFJoTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6aG5RaXhsUVVGbExFVkJRVVU3UVVGRE9VSXlTeXhSUVVGQlFTeFJRVUZSTEVOQlFVTjRaU3hKUVVGSkxHVkJRMWd3UlN4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRTdRVUZCU3k5RkxGVkJRVUZCTEVkQlFVY3NSVUZCUXl4SFFVRkhPMEZCUVVOVExGVkJRVUZCTEZOQlFWTXNSVUZCUXl3MFFrRkJRVHRUUVVOd1FqWkVMRVZCUVVGQkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekJ5UWl4VFFVRlRMRWxCUVVrc1IwRkRkRUlzUTBGRFVDeERRVUZETEVOQlFVRTdRVUZEU0N4UFFVRkJPMDFCUTBFc1QwRkJUMFFzVVVGQlVTeERRVUZETDNKQ0xFMUJRVTBzUTBGRGNFSXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlEycENMRWRCUVVjc1EwRkJReXhWUVVGRGMyZENMRTFCUVUwc1JVRkJTenRCUVVOd1F5eFJRVUZCTEVsQlFVMTZaQ3hIUVVGSExFZEJRVWN3WkN4UFFVRlBMRU5CUVVOeVpDeFhRVUZYTEVWQlFVVnZaQ3hOUVVGTkxFTkJRVU1zUTBGQlFUdEJRVU40UXl4UlFVRkJMRWxCUVUwMFRTeFhRVUZYTEVkQlFVZDRZU3hMUVVGQkxFTkJRVXQ1WVN4aFFVRmhMRU5CUVVOMGNVSXNSMEZCUnl4RlFVRkZObEFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGVrTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1FVRkZPVVFzVVVGQlFTeEpRVUZOYzNWQ0xHZENRVUZuUWl4SFFVRkhNV0VzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE5uSkNMR2RDUVVGblFpeEhRVU5vUkRGaExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelp5UWl4blFrRkJaMElzUTBGQlEzWnhRaXhIUVVGSExFTkJRVU1zUjBGRGFFTXlSQ3hUUVVGVExFTkJRVUU3VVVGRllpeHZRa0ZEUlRCTkxFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRVHRCUVVORkwwVXNWVUZCUVVFc1IwRkJSeXhGUVVGRmExTXNUVUZCVHp0QlFVTmFlbElzVlVGQlFVRXNVMEZCVXl4RlFVRkZNRWNzU1VGQlNTeERRVUZETERSQ1FVRTBRaXhGUVVGRk5sZ3NaMEpCUVdkQ0xFTkJRVUU3UVVGQlJTeFRRVUZCTEVWQlJTOUVSaXhYUVVORkxFTkJRVU1zUTBGQlFUdEJRVVZXTEU5QlFVTXNRMEZEU0N4RFFVRkRMRU5CUVVFN1MwRkRSaXhEUVVGQkxFTkJRVUU3UVVGQlFYSmhMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMR1ZCUVVFc1JVRkZaU3hWUVVGRE4xQXNSMEZCUnl4RlFVRkZMMFFzVFVGQlRTeEZRVUZMTzBGQlF5OUNMRTFCUVVFc1NVRkJTVFJVTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6aHlRaXhoUVVGaExFVkJRVVU3VVVGRE5VSXNUMEZCVHpOdVFpd3lRa0ZCTWtJc1EwRkJRemRETEVkQlFVY3NSVUZCUlRaUUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRemh5UWl4aFFVRmhMRVZCUVVWMmRVSXNUVUZCVFN4RFFVRkRMRU5CUVVFN1FVRkRNMFVzVDBGQlFUdEJRVU5CTEUxQlFVRXNUMEZCVHpSVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJReXR5UWl4blFrRkJaMElzUjBGRE9VSjZia0lzZFVKQlFYVkNMRU5CUVVOb1JDeEhRVUZITEVWQlFVVXZSQ3hOUVVGTkxFTkJRVU1zUjBGRGNFTTRSeXh4UWtGQmNVSXNRMEZCUXk5RExFZEJRVWNzUlVGQlJTOUVMRTFCUVUwc1EwRkJReXhEUVVGQk8wdEJRM1pETEVOQlFVRXNRMEZCUVR0SlFVRkJLMVFzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUVVFc1kwRkJRU3hGUVVWakxGbEJRVTA3UVVGRGJrSkJMRTFCUVVGQkxFdEJRVUVzUTBGQlMzTkNMRkZCUVZFc1EwRkRXQ3hWUVVGQk1VMHNTMEZCUVN4RlFVRkJPMEZCUVVFc1VVRkJRU3hKUVVGSE4wY3NTVUZCU1N4SFFVRkJOa2NzUzBGQlFTeERRVUZLTjBjc1NVRkJTU3hEUVVGQk8xRkJRVUVzVDBGQlVUdEJRVU5pUVN4VlFVRkJRU3hKUVVGSkxFVkJRVVYxVEN4UlFVRlJMRU5CUTFwMlRDeEpRVUZKTEVWQlEwcHBVeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVObmMwSXNZMEZCWXl4SFFVRkhOMkVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE9Fc3NZMEZCWXl4SFFVRkhMRU5CUXpGRUxFTkJRVUU3VTBGRFJDeERRVUZCTzBGQlFVRXNUMEZCUXl4RlFVTkdMRmxCUVVFN1VVRkJRU3hQUVVGTmNVY3NTMEZCUVN4RFFVRkxiMFVzWjBKQlFXZENMRU5CUVVOd1JTeExRVUZCTEVOQlFVdE5MRXRCUVVzc1EwRkJRM1pUTEVsQlFVa3NRMEZCUXl4RFFVRkJPMEZCUVVFc1QwRkRPVU1zUTBGQlF5eERRVUZCTzB0QlEwWXNRMEZCUVN4RFFVRkJPMGxCUVVGdlV5eGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3h2UWtGQlFTeEZRVVZ2UWl4WlFVRk5PMDFCUTNwQ1FTeExRVUZCTEVOQlFVdHpRaXhSUVVGUkxFTkJRVU03UVVGQlJUQkhMRkZCUVVGQkxHRkJRV0VzUlVGQlJTeEpRVUZCTzBGQlFVc3NUMEZCUXl4RFFVRkRMRU5CUVVFN1MwRkRka01zUTBGQlFTeERRVUZCTzBsQlFVRTNTQ3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4elFrRkJRU3hGUVVWelFpeFpRVUZOTzBGQlF6TkNMRTFCUVVFc1NVRkJTVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGFYTkNMR3RDUVVGclFpeEZRVUZGTzBGQlEycERMRkZCUVVFc1QwRkJRVHRCUVVOR0xFOUJRVUU3UVVGRlFTeE5RVUZCTEVsQlFVbERMRzFDUVVGdFFpeERRVUZCTzBGQlEzWkNMRTFCUVVFc1VVRkJVU3hKUVVGSk8wRkJRMVlzVVVGQlFTeExRVUZMTDJFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNbXRDTEcxQ1FVRnRRanRCUVVOcVEzVklMRlZCUVVGQkxHMUNRVUZ0UWl4SFFVRkhOV2hDTEd0Q1FVRnJRaXhEUVVGRE5rY3NTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkpMRVZCUVVWcFV5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU55UlN4VlFVRkJMRTFCUVVFN1FVRkRSaXhSUVVGQkxFdEJRVXR0VWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTm5jMElzWTBGQll6dEJRVU0xUWtVc1ZVRkJRVUVzYlVKQlFXMUNMRWRCUVVkMmFFSXNiVUpCUVcxQ0xFTkJRVU4zUnl4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUTBGQlEzWlRMRWxCUVVrc1JVRkJSV2xUTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF5eERRVUZCTzBGQlEzUkZMRlZCUVVFc1RVRkJRVHRCUVVOR0xGRkJRVUVzUzBGQlMyMVNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpSclFpeHhRa0ZCY1VJN1FVRkRia056U0N4VlFVRkJRU3h0UWtGQmJVSXNSMEZCUjNacFFpeHhRa0ZCY1VJc1EwRkRla04zU0N4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUTBGQlEzWlRMRWxCUVVrc1JVRkRabWxUTEV0QlFVRXNRMEZCUzI1U0xFdEJRMUFzUTBGQlF5eERRVUZCTzBGQlEwUXNWVUZCUVN4TlFVRkJPMEZCUTBZc1VVRkJRVHRCUVVORmEzTkNMRlZCUVVGQkxHMUNRVUZ0UWl4SFFVRkhhbXBDTEcxQ1FVRnRRaXhEUVVGRGEwa3NTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkpMRVZCUVVWcFV5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU4wUlN4VlFVRkJMRTFCUVVFN1FVRkRTaXhQUVVGQk8wMUJSVUVzU1VGRFJ5eERRVUZEYlZJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiWE5DTEhkQ1FVRjNRaXhKUVVOdVF5eERRVUZEYUdJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiM05DTERKQ1FVRXlRaXhKUVVOMlEwWXNiVUpCUVcxQ0xFbEJRM0pDTDJFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiMjVDTEd0Q1FVRnJRaXhGUVVNM1FqdEJRVU5CTEZGQlFVRXNUMEZCUVR0QlFVTkdMRTlCUVVFN1FVRkZRU3hOUVVGQkxFbEJRVTFwUml4WFFVRlhMRWRCUVVjc1EwRkRiRUlzYlVOQlFXMURMRVZCUTI1RExEWkRRVUUyUXl4RFFVTTVReXhEUVVGQk8wRkJSVVFzVFVGQlFTeEpRVUZOZUVjc1QwRkJUeXhIUVVGSExFTkJRMlFzT0VKQlFUaENMRVZCUXpsQ0xIZERRVUYzUXl4RFFVTjZReXhEUVVGQk8wRkJSVVFzVFVGQlFTeEpRVUZKZVVjc1dVRkJXU3hIUVVGSGJtSXNTMEZCUVN4RFFVRkxiMklzWVVGQllTeERRVUZCTzBGQlJYSkRMRTFCUVVFc1NVRkRSWEJpTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6SnJRaXh0UWtGQmJVSXNTVUZET1VKNFZDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU0wYTBJc2NVSkJRWEZDTEVsQlEyaERlbFFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFozTkNMR05CUVdNc1JVRkRla0k3VVVGRFFVMHNXVUZCV1N4SFFVRkhibUlzUzBGQlFTeERRVUZMY1dJc1dVRkJXU3hEUVVGQk8wRkJRMnhETEU5QlFVRTdRVUZGUVN4TlFVRkJMRWxCUVVsT0xHMUNRVUZ0UWl4SlFVRkpMMkVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGIzTkNMREpDUVVFeVFpeEZRVUZGTzBGQlEycEZka2NzVVVGQlFVRXNUMEZCVHl4RFFVRkROVmtzU1VGQlNTeERRVUZETEd0RVFVRnJSQ3hEUVVGRExFTkJRVUU3UVVGRGFFVnhaaXhSUVVGQlFTeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkJPMEZCUTNKQ0xFOUJRVUU3UVVGRlFTeE5RVUZCTEVsQlFVMUhMRk5CUVZNc1IwRkRZblJpTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6SnJRaXh0UWtGQmJVSXNTVUZET1VKNFZDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU0wYTBJc2NVSkJRWEZDTEVsQlEyaERlbFFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFozTkNMR05CUVdNc1EwRkJRVHRCUVVVelFpeE5RVUZCTEVsQlFVRjJWQ3haUVVGQkxFZEJRVGhFZEVnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3p0UlFVRm9SVEJ6UWl4M1FrRkJkMElzUjBGQlFXcFZMRmxCUVVFc1EwRkJlRUpwVlN4M1FrRkJkMEk3VVVGQlJVTXNkVUpCUVhWQ0xFZEJRVUZzVlN4WlFVRkJMRU5CUVhaQ2ExVXNkVUpCUVhWQ0xFTkJRVUU3UVVGRmVrUXNUVUZCUVN4SlFVRkJMMVFzV1VGQlFTeEhRVTlKZWtnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3p0UlFVRkJOSE5DTEhGQ1FVRkJMRWRCUVVGb1ZTeFpRVUZCTEVOQlRscHBWU3h6UWtGQmMwSTdRVUZCZEVKQkxGRkJRVUZCTEhOQ1FVRnpRaXhIUVVGQlJDeHhRa0ZCUVN4TFFVRkhMRXRCUVVFc1EwRkJRU3hIUVVGQkxFOUJRVTlHTEhkQ1FVRjNRaXhMUVVGTExGRkJRVkVzUjBGRGFrVkJMSGRDUVVGM1FpeEhRVU40UWl4blFrRkJaMElzUjBGQlFVVXNjVUpCUVVFN1VVRkJRVVVzYzBKQlFVRXNSMEZCUVd4VkxGbEJRVUVzUTBGRGNFSnRWU3h4UWtGQmNVSTdRVUZCY2tKQkxGRkJRVUZCTEhGQ1FVRnhRaXhIUVVGQlJDeHpRa0ZCUVN4TFFVRkhMRXRCUVVFc1EwRkJRU3hIUVVGQkxFOUJRVTlJTEhWQ1FVRjFRaXhMUVVGTExGRkJRVkVzUjBGREwwUkJMSFZDUVVGMVFpeEhRVU4yUWl4bFFVRmxMRWRCUVVGSExITkNRVUZCTEVOQlFVRTdUVUZIY2tJc2IwSkJRMFZ1WWl4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeFJRVUZCTEVWQlFVRTdRVUZEUlN0WUxGRkJRVUZCTEVsQlFVa3NSVUZCUXl4UlFVRlJPMEZCUTJKeVl5eFJRVUZCUVN4VFFVRlRMRVZCUVVWMVdTeFBRVUZQTEVOQlFVTTViVUlzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUlR0QlFVTTNRamhUTEZGQlFVRkJMRTlCUVU4c1JVRkJSWGxoTEZsQlFXRTdRVUZEZEVKd1VDeFJRVUZCUVN4VFFVRlRMRVZCUVVVdlRDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU15V0N4bFFVRm5RanRSUVVOMFF5eFpRVUZaT0ZVc1JVRkJRVUVzVTBGQlV5eEhRVUZIVFN4eFFrRkJjVUlzUjBGQlIwWXNjMEpCUVVGQk8wOUJSV2hFYkdJc1pVRkJRVUVzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQk8wRkJRVTEwUlN4UlFVRkJRU3hUUVVGVExFVkJRVVVyWlN4WFFVRlhMRU5CUVVOMGRFSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJRVHRCUVVGRkxFOUJRVUVzUlVGRGNFTXdkRUlzVTBGQlV5eEhRVU5PZEdJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNbk5DTEhWQ1FVRjFRaXhIUVVOc1EzaGlMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpCelFpeDNRa0ZEV0N4RFFVTkJMRU5CUVVNc1EwRkJRVHRMUVVWYUxFTkJRVUVzUTBGQlFUdEpRVUZCY0dJc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNZMEZCUVN4RlFVVmpMRmxCUVUwN1FVRkRia0pCTEUxQlFVRkJMRXRCUVVFc1EwRkJTM05DTEZGQlFWRXNRMEZEV0N4VlFVRkJlazBzUzBGQlFTeEZRVUZCTzBGQlFVRXNVVUZCUVN4SlFVRkhPVWNzU1VGQlNTeEhRVUZCT0Vjc1MwRkJRU3hEUVVGS09VY3NTVUZCU1N4RFFVRkJPMUZCUVVFc1QwRkJVVHRCUVVOaVFTeFZRVUZCUVN4SlFVRkpMRVZCUVVWdlRTeFJRVUZSTEVOQlExcHdUU3hKUVVGSkxFVkJRMHBwVXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTm5jMElzWTBGQll5eEhRVUZITjJFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRPRXNzWTBGQll5eEhRVUZITEVOQlF6RkVMRU5CUVVFN1UwRkRSQ3hEUVVGQk8wRkJRVUVzVDBGQlF5eEZRVU5HTEZsQlFVRTdVVUZCUVN4UFFVRk5jVWNzUzBGQlFTeERRVUZMYjBVc1owSkJRV2RDTEVOQlFVTndSU3hMUVVGQkxFTkJRVXROTEV0QlFVc3NRMEZCUTNaVExFbEJRVWtzUTBGQlF5eERRVUZCTzBGQlFVRXNUMEZET1VNc1EwRkJReXhEUVVGQk8wdEJRMFlzUTBGQlFTeERRVUZCTzBsQlFVRnZVeXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4clFrRkJRU3hGUVVWclFpeFpRVUZOTzBGQlEzWkNMRTFCUVVFc1NVRkJTVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGFYTkNMR3RDUVVGclFpeEZRVUZGTzBGQlEycERMRkZCUVVFc1QwRkJRVHRCUVVOR0xFOUJRVUU3UVVGRlFTeE5RVUZCTEVsQlFVbGxMRzFDUVVGdFFpeERRVUZCTzBGQlEzWkNMRTFCUVVFc1VVRkJVU3hKUVVGSk8wRkJRMVlzVVVGQlFTeExRVUZMTjJJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNbXRDTEcxQ1FVRnRRanRCUVVOcVEzRkpMRlZCUVVGQkxHMUNRVUZ0UWl4SFFVRkhOMmhDTEdsQ1FVRnBRaXhEUVVGRFowY3NTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkpMRVZCUVVWcFV5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU53UlN4VlFVRkJMRTFCUVVFN1FVRkRSaXhSUVVGQkxFdEJRVXR0VWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTm5jMElzWTBGQll6dEJRVU0xUW1kQ0xGVkJRVUZCTEcxQ1FVRnRRaXhIUVVGSGVtaENMR3RDUVVGclFpeERRVUZETkVZc1MwRkJRU3hEUVVGTFRTeExRVUZMTEVOQlFVTjJVeXhKUVVGSkxFVkJRVVZwVXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVTnlSU3hWUVVGQkxFMUJRVUU3UVVGRFJpeFJRVUZCTEV0QlFVdHRVaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNMGEwSXNjVUpCUVhGQ08wRkJRMjVEYjBrc1ZVRkJRVUVzYlVKQlFXMUNMRWRCUVVjdmFVSXNiMEpCUVc5Q0xFTkJRVU5yU0N4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUTBGQlEzWlRMRWxCUVVrc1JVRkJSV2xUTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF5eERRVUZCTzBGQlEzWkZMRlZCUVVFc1RVRkJRVHRCUVVOR0xGRkJRVUU3UVVGRFJXZDBRaXhWUVVGQlFTeHRRa0ZCYlVJc1IwRkJSM3BxUWl4clFrRkJhMElzUTBGQlF6UklMRXRCUVVFc1EwRkJTMDBzUzBGQlN5eERRVUZEZGxNc1NVRkJTU3hGUVVGRmFWTXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETEVOQlFVRTdRVUZEY2tVc1ZVRkJRU3hOUVVGQk8wRkJRMG9zVDBGQlFUdE5RVVZCTEVsQlEwY3NRMEZCUTIxU0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjF6UWl4M1FrRkJkMElzU1VGRGJrTXNRMEZCUTJoaUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjl6UWl3eVFrRkJNa0lzU1VGRGRrTlpMRzFDUVVGdFFpeEpRVU55UWpkaUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjl1UWl4clFrRkJhMElzUlVGRE4wSTdRVUZEUVN4UlFVRkJMRTlCUVVFN1FVRkRSaXhQUVVGQk8wRkJSVUVzVFVGQlFTeEpRVUZOZGtJc1QwRkJUeXhIUVVGSExFTkJRMlFzT0VKQlFUaENMRVZCUXpsQ0xHOURRVUZ2UXl4RFFVTnlReXhEUVVGQk8wRkJRMFFzVFVGQlFTeEpRVUZOZDBjc1YwRkJWeXhIUVVGSExFTkJRMnhDTEcxRFFVRnRReXhGUVVOdVF5eDVRMEZCZVVNc1EwRkRNVU1zUTBGQlFUdEJRVU5FTEUxQlFVRXNTVUZCU1d4aUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMmwwUWl4alFVRmpMRVZCUVVVN1FVRkROMEp3U0N4UlFVRkJRU3hQUVVGUExFTkJRVU0xV1N4SlFVRkpMRU5CUVVNc0swTkJRU3RETEVOQlFVTXNRMEZCUVR0QlFVTXZSQ3hQUVVGQk8wRkJRMEVzVFVGQlFTeEpRVUZKYTBVc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiVzVDTEZkQlFWY3NSVUZCUlR0QlFVTXhRblJDTEZGQlFVRkJMRTlCUVU4c1EwRkJRelZaTEVsQlFVa3NRMEZCUXl4MVJFRkJkVVFzUTBGQlF5eERRVUZCTzBGQlEzWkZMRTlCUVVFN1FVRkZRU3hOUVVGQkxFbEJRVWx4Wml4WlFVRlpMRWRCUVVkdVlpeExRVUZCTEVOQlFVc3JZaXhoUVVGaExFTkJRVUU3UVVGRmNrTXNUVUZCUVN4SlFVTkZMMklzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1tdENMRzFDUVVGdFFpeEpRVU01UW5oVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelJyUWl4eFFrRkJjVUlzU1VGRGFFTjZWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVObmMwSXNZMEZCWXl4RlFVTjZRanRSUVVOQlRTeFpRVUZaTEVkQlFVZHVZaXhMUVVGQkxFTkJRVXRuWXl4WlFVRlpMRU5CUVVFN1FVRkRiRU1zVDBGQlFUdEJRVVZCTEUxQlFVRXNTVUZCU1Vnc2JVSkJRVzFDTEVsQlFVazNZaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdmMwSXNNa0pCUVRKQ0xFVkJRVVU3UVVGRGFrVjJSeXhSUVVGQlFTeFBRVUZQTEVOQlFVTTFXU3hKUVVGSkxFTkJRVU1zT0VOQlFUaERMRU5CUVVNc1EwRkJRVHRCUVVNMVJIRm1MRkZCUVVGQkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVRTdRVUZEY2tJc1QwRkJRVHRCUVVWQkxFMUJRVUVzU1VGQlRVY3NVMEZCVXl4SFFVTmlkR0lzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1tdENMRzFDUVVGdFFpeEpRVU01UW5oVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelJyUWl4eFFrRkJjVUlzU1VGRGFFTjZWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVObmMwSXNZMEZCWXl4RFFVRkJPMEZCUlROQ0xFMUJRVUVzU1VGQlFXeFVMRmxCUVVFc1IwRkJjMFF6U0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTzFGQlFYaEViM1JDTEc5Q1FVRnZRaXhIUVVGQmRGVXNXVUZCUVN4RFFVRndRbk5WTEc5Q1FVRnZRanRSUVVGRlF5eHRRa0ZCYlVJc1IwRkJRWFpWTEZsQlFVRXNRMEZCYmtKMVZTeHRRa0ZCYlVJc1EwRkJRVHRCUVVOcVJDeE5RVUZCTEVsQlFVRXZWQ3haUVVGQkxFZEJUMGx1U1N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTzFGQlFVRnpkRUlzY1VKQlFVRXNSMEZCUVdoVkxGbEJRVUVzUTBGT1dtbFZMR3RDUVVGclFqdEJRVUZzUWtFc1VVRkJRVUVzYTBKQlFXdENMRWRCUVVGRUxIRkNRVUZCTEV0QlFVY3NTMEZCUVN4RFFVRkJMRWRCUVVFc1QwRkJUMFlzYjBKQlFXOUNMRXRCUVVzc1VVRkJVU3hIUVVONlJFRXNiMEpCUVc5Q0xFZEJRM0JDTEZsQlFWa3NSMEZCUVVVc2NVSkJRVUU3VVVGQlFVVXNjVUpCUVVFc1IwRkJRV3hWTEZsQlFVRXNRMEZEYUVKdFZTeHBRa0ZCYVVJN1FVRkJha0pCTEZGQlFVRkJMR2xDUVVGcFFpeEhRVUZCUkN4eFFrRkJRU3hMUVVGSExFdEJRVUVzUTBGQlFTeEhRVUZCTEU5QlFVOUlMRzFDUVVGdFFpeExRVUZMTEZGQlFWRXNSMEZEZGtSQkxHMUNRVUZ0UWl4SFFVTnVRaXhYUVVGWExFZEJRVUZITEhGQ1FVRkJMRU5CUVVFN1RVRkhha0lzYjBKQlEwVTNZaXhMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4UlFVRkJMRVZCUVVFN1FVRkRSU3RZTEZGQlFVRkJMRWxCUVVrc1JVRkJReXhSUVVGUk8wRkJRMkp5WXl4UlFVRkJRU3hUUVVGVExFVkJRVVYxV1N4UFFVRlBMRU5CUVVNNWJVSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJSVHRCUVVNM1FqaFRMRkZCUVVGQkxFOUJRVThzUlVGQlJYbGhMRmxCUVdFN1FVRkRkRUp3VUN4UlFVRkJRU3hUUVVGVExFVkJRVVV2VEN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXlXQ3hsUVVGblFqdFJRVU4wUXl4WlFVRlpPRlVzUlVGQlFVRXNVMEZCVXl4SFFVRkhaMElzYVVKQlFXbENMRWRCUVVkR0xHdENRVUZCUVR0UFFVVTFRelZpTEdWQlFVRkJMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVR0QlFVRk5kRVVzVVVGQlFVRXNVMEZCVXl4RlFVRkZLMlVzVjBGQlZ5eERRVUZEZEhSQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVRTdRVUZCUlN4UFFVRkJMRVZCUTNCRE1IUkNMRk5CUVZNc1IwRkRUblJpTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzRjBRaXh0UWtGQmJVSXNSMEZET1VKc1l5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU52ZEVJc2IwSkJRMWdzUTBGRFFTeERRVUZETEVOQlFVRTdTMEZGV2l4RFFVRkJMRU5CUVVFN1NVRkJRVGxpTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxHOUNRVUZCTEVWQlJXOUNMRmxCUVRSQ08wRkJRVUVzVFVGQlFTeEpRVUV6UW1wVExFbEJRVWtzUjBGQlFUaEdMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNVVUZCUVdkSExGTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTMEZCUVVNc1UwRkJRU3hIUVVGQlJDeFRRVUZCTEVOQlFVZHRUU3hEUVVGQlFTeERRVUZCUVN4SFFVRkJRU3hMUVVGQkxFTkJRVXROTEV0QlFVc3NRMEZCUTNaVExFbEJRVWtzUTBGQlFUdEJRVU14UXl4TlFVRkJMRWxCUVUweWJVSXNUMEZCVHl4SFFVRkhMRU5CUVVNc2FVTkJRV2xETEVOQlFVTXNRMEZCUVR0QlFVVnVSQ3hOUVVGQkxFbEJRVWt4VlN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXdkRUlzWjBKQlFXZENMRVZCUVVVN1FVRkRMMEkzU0N4UlFVRkJRU3hQUVVGUExFTkJRVU0xV1N4SlFVRkpMRU5CUVVNc2EwUkJRV3RFTEVOQlFVTXNRMEZCUVR0QlFVTnNSU3hQUVVGQk8wRkJRMEVzVFVGQlFTeEpRVUZKYTBVc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNblJDTEdsQ1FVRnBRaXhGUVVGRk8wRkJRMmhET1Vnc1VVRkJRVUVzVDBGQlR5eERRVUZETlZrc1NVRkJTU3hEUVVGRExHMUVRVUZ0UkN4RFFVRkRMRU5CUVVFN1FVRkRia1VzVDBGQlFUdEJRVU5CTEUxQlFVRXNTVUZCU1d0RkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelIwUWl4eFFrRkJjVUlzUlVGQlJUdEJRVU53UXk5SUxGRkJRVUZCTEU5QlFVOHNRMEZCUXpWWkxFbEJRVWtzUTBGQlF5eDFSRUZCZFVRc1EwRkJReXhEUVVGQk8wRkJRM1pGTEU5QlFVRTdUVUZEUVN4dlFrRkRSVEJGTEV0QlFVRXNRMEZCUVVNc1lVRkJRU3hEUVVGQkxFdEJRVUVzUlVGQlFUdEJRVUZMZEVVc1VVRkJRVUVzVTBGQlV5eEZRVUZGZFZrc1QwRkJUeXhEUVVGRE9XMUNMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVUU3UVVGQlJTeFBRVUZCTEVWQlF5OUNVaXhWUVVGVkxFTkJRVU5YTEVsQlFVa3NSVUZCUldsVExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekZETEZWQlFWVXNSVUZCUlRaVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM3BETEUxQlFVMHNRMEZEZGtRc1EwRkJReXhEUVVGQk8wdEJSVlFzUTBGQlFTeERRVUZCTzBsQlFVRXJWQ3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4dlFrRkJRU3hGUVVWdlFpeFpRVUV3UWp0QlFVRkJMRTFCUVVFc1NVRkJla0l3WXl4WlFVRlpMRWRCUVVFM2IwSXNVMEZCUVN4RFFVRkJhRWNzVFVGQlFTeEhRVUZCTEVOQlFVRXNTVUZCUVdkSExGTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTMEZCUVVNc1UwRkJRU3hIUVVGQlJDeFRRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRWRCUVVjc1MwRkJTeXhEUVVGQk8wMUJRM2hETEVsQlFVa3NRMEZCUTIxTkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekIwUWl4blFrRkJaMElzU1VGQlNVY3NXVUZCV1N4RlFVRkZPMEZCUTJoRUxGRkJRVUVzVDBGQlFUdEJRVU5HTEU5QlFVRTdRVUZEUVN4TlFVRkJMRzlDUVVORmJHTXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVU13UXl4WlFVRlpMRVZCUVVFN1FVRkRXR2RDTEZGQlFVRkJMR3RDUVVGclFpeEZRVUZGYmtVc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjMVlzYTBKQlFXMUNPMEZCUTJ4RWNGY3NVVUZCUVVFc1NVRkJTU3hGUVVGRmFWTXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkxPMEZCUTNSQ2MxY3NVVUZCUVVFc1VVRkJVU3hGUVVGRmNrVXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZDFZc1VVRkJVenRCUVVNNVFrTXNVVUZCUVVFc1QwRkJUeXhGUVVGRmRFVXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZVZZc1QwRkJVVHRCUVVNMVFrVXNVVUZCUVVFc1dVRkJXU3hGUVVGRmVFVXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETWxZc1dVRkJZVHRSUVVOMFF6ZEVMRkZCUVZFc1JVRkJSVmdzUzBGQlFTeERRVUZMTW1Nc1ZVRkJWenRCUVVNeFFuSjNRaXhSUVVGQlFTeFBRVUZQTEVWQlFVVXdWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOMlF5eFBRVUZSTzBGQlF6VkNlVWdzVVVGQlFVRXNUMEZCVHl4RlFVRkZhVTBzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGEwWXNUMEZCVVR0UlFVTTFRamhDTEVsQlFVa3NSVUZCUlZRc1QwRkJUeXhEUVVGRE5Fc3NTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkpMRU5CUVVVN1FVRkRMMEl3VkN4UlFVRkJRU3h6UWtGQmMwSXNSVUZCUlhwQ0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelJUTEhOQ1FVRjFRanRCUVVNeFJFUXNVVUZCUVVFc2MwSkJRWE5DTEVWQlFVVjRRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNeVV5eHpRa0ZCUVVFN1FVRkJkVUlzVDBGRE0wUXNRMEZCUXl4RFFVRkJPMHRCUlV3c1EwRkJRU3hEUVVGQk8wbEJRVUZ5UWl4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGQlFTeHhRa0ZCUVN4RlFVVnhRaXhaUVVFd1FqdEJRVUZCTEUxQlFVRXNTVUZCZWtJd1l5eFpRVUZaTEVkQlFVRTNiMElzVTBGQlFTeERRVUZCYUVjc1RVRkJRU3hIUVVGQkxFTkJRVUVzU1VGQlFXZEhMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUzBGQlFVTXNVMEZCUVN4SFFVRkJSQ3hUUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVkQlFVY3NTMEZCU3l4RFFVRkJPMDFCUTNwRExFbEJRVWtzUTBGQlEyMU5MRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpKMFFpeHBRa0ZCYVVJc1NVRkJTVVVzV1VGQldTeEZRVUZGTzBGQlEycEVMRkZCUVVFc1QwRkJRVHRCUVVOR0xFOUJRVUU3UVVGRFFTeE5RVUZCTEc5Q1FVTkZiR01zUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVOelJTeGhRVUZoTEVWQlFVRTdRVUZEV2xBc1VVRkJRVUVzV1VGQldTeEZRVUZGZUVVc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNbFlzV1VGQllUdEJRVU4wUTNCWkxGRkJRVUZCTEUxQlFVMHNSVUZCUlRSVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM3BETEUxQlFVODdVVUZETVVKMVZTeFJRVUZSTEVWQlFVVllMRXRCUVVFc1EwRkJTelJqTEZkQlFWazdVVUZETTBKMmNFSXNTMEZCU3l4RlFVRkZhVU1zVVVGQlVTeERRVUZETUVzc1MwRkJRU3hEUVVGTFRTeExRVUZMTEVOQlFVTjJVeXhKUVVGSkxFTkJRVVU3UVVGRGFrTnRXQ3hSUVVGQlFTeDFRa0ZCZFVJc1JVRkJSV3hHTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzRlhMSFZDUVVGQlFUdEJRVUYzUWl4UFFVTTNSQ3hEUVVGRExFTkJRVUU3UzBGRlRDeERRVUZCTEVOQlFVRTdTVUZCUVM5RkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMSGxDUVVGQkxFVkJSWGxDTEZsQlFUQkNPMEZCUVVFc1RVRkJRU3hKUVVGNlFqQmpMRmxCUVZrc1IwRkJRVGR2UWl4VFFVRkJMRU5CUVVGb1J5eE5RVUZCTEVkQlFVRXNRMEZCUVN4SlFVRkJaMGNzVTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4TFFVRkJReXhUUVVGQkxFZEJRVUZFTEZOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1IwRkJSeXhMUVVGTExFTkJRVUU3VFVGRE4wTXNTVUZCU1N4RFFVRkRiVTBzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE5IUkNMSEZDUVVGeFFpeEpRVUZKUXl4WlFVRlpMRVZCUVVVN1FVRkRja1FzVVVGQlFTeFBRVUZCTzBGQlEwWXNUMEZCUVR0QlFVTkJMRTFCUVVFc2IwSkJRMFZzWXl4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlEzRkdMR2xDUVVGcFFpeEZRVUZCTzBGQlEyaENkRUlzVVVGQlFVRXNXVUZCV1N4RlFVRkZlRVVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1sWXNXVUZCWVR0QlFVTjBRM0JaTEZGQlFVRkJMRTFCUVUwc1JVRkJSVFJVTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzcERMRTFCUVU4N1FVRkRNVUpFTEZGQlFVRkJMRlZCUVZVc1JVRkJSVFpVTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6RkRMRlZCUVZjN1VVRkRiRU4zVlN4UlFVRlJMRVZCUVVWWUxFdEJRVUVzUTBGQlN6WmpMR1ZCUVdkQ08wRkJReTlDZG5kQ0xGRkJRVUZCTEU5QlFVOHNSVUZCUlRCVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM1pETEU5QlFWRTdRVUZETlVKNVNDeFJRVUZCUVN4UFFVRlBMRVZCUVVWcFRTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5yUml4UFFVRlJPMEZCUXpWQ2FFY3NVVUZCUVVFc1NVRkJTU3hGUVVGRmFWTXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkxPMEZCUTNSQ05sZ3NVVUZCUVVFc01rSkJRVEpDTEVWQlFVVTFSaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNclZ5d3lRa0ZCUVVFN1FVRkJORUlzVDBGRGNrVXNRMEZCUXl4RFFVRkJPMHRCUlV3c1EwRkJRU3hEUVVGQk8wRkJRVUY2Uml4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGZDBJc2QwSkJRVUVzUlVGQlFTeFZRVUZEZDBRc1EwRkJReXhGUVVGTE8wMUJRemxDZUVRc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkMVlzVVVGQlVTeERRVUZEY2xRc1pVRkJaU3hGUVVGRkxFVkJRVVYzVXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVONlEzaEVMRTFCUVVGQkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM0ZvUWl4bFFVRmxMRWxCUVVsc1VTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU54YUVJc1pVRkJaU3hEUVVGRGJHWXNaVUZCWlN4RlFVRkZMRU5CUVVNc1EwRkJRVHRMUVVNMVJTeERRVUZCTEVOQlFVRTdTVUZCUVcxUUxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMRzFDUVVGQkxFVkJSVzFDTEZsQlFVMDdRVUZEZUVJc1RVRkJRU3hKUVVGSkxFTkJRVU5CTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMXVRaXhYUVVGWExFbEJRVWxvVnl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZia0lzYTBKQlFXdENMRVZCUVVVN1FVRkROVVFzVVVGQlFTeFBRVUZCTzBGQlEwWXNUMEZCUVR0TlFVTkJMRzlDUVVORmVsWXNTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBGQlEwVjBSU3hSUVVGQlFTeFRRVUZUTEVWQlFVTXNaME5CUVdkRE8xRkJRekZEZFVVc1QwRkJUeXhGUVVGRkxGTkJRVUZCTEU5QlFVRkJMRU5CUVVNNFF5eERRVUZETEVWQlFVRTdRVUZCUVN4VlFVRkJMRTlCUVV0NFJDeExRVUZCTEVOQlFVczRZeXh6UWtGQmMwSXNRMEZCUTNSYUxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlFVRXNVMEZCUVR0QlFVRkRMRTlCUVVFc1JVRkZPVU40UkN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRia0lzVjBGRFZDeERRVUZETEVOQlFVRTdTMEZGVkN4RFFVRkJMRU5CUVVFN1FVRkJRVGRXTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVVZ4UWl4eFFrRkJRU3hGUVVGQkxGVkJRVUZxVEN4TFFVRkJMRVZCUVVFN1FVRkJRU3hOUVVGQkxFbEJRVWRuYjBJc1UwRkJVeXhIUVVGQmFHOUNMRXRCUVVFc1EwRkJWR2R2UWl4VFFVRlRPMUZCUVVWNmFFSXNRMEZCUXl4SFFVRkJka2NzUzBGQlFTeERRVUZFZFVjc1EwRkJReXhEUVVGQk8wMUJRVUVzYjBKQlEyNURhMFlzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8xRkJRMFYwUlN4VFFVRlRMRVZCUVVFc01rSkJRVUVzUTBGQlFUVk9MRTFCUVVFc1EwRkRVSGxTTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEybDBRaXhqUVVGakxFZEJRM0pDTERKRFFVRXlReXhIUVVNelF5eEZRVUZGTEVOQlFVRTdUMEZIVURsaUxFVkJRVUZCTEV0QlFVRXNRMEZCUzJka0xHdENRVUZyUWl4RFFVRkRSQ3hUUVVGVExFTkJRVU1zWlVGRGJrTjJZeXhMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4TFFVRkJMRVZCUVVFN1VVRkRSWFJGTEZOQlFWTXNSVUZCUVN4NVJVRkJRU3hEUVVGQk5VNHNUVUZCUVN4RFFVRTBSWGxTTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6SldMRmxCUVZrc1EwRkJSenRSUVVNdlIzbFpMRTlCUVU4c1JVRkJSV3BrTEV0QlFVRXNRMEZCUzJ0a0xHMUNRVUZCUVR0QlFVRnZRaXhQUVVGQkxFVkJSV3BEYkdRc1MwRkJRU3hEUVVGTGJXUXNiVUpCUVcxQ0xFTkJRVU0zYUVJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVU5xUXpCRkxFdEJRVUVzUTBGQlMyOWtMSFZDUVVGMVFpeERRVUZET1doQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZEY2tNd1JTeExRVUZCTEVOQlFVdHhaQ3hyUWtGQmEwSXNRMEZCUXk5b1FpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVTTNRaXhEUVVGRExHVkJRMDVyUml4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRTdRVUZCUzNSRkxGRkJRVUZCTEZOQlFWTXNSVUZCUXl3MlFrRkJRVHRCUVVFMlFpeFBRVUZCTEVWQlEzcEROa1FzUzBGQlFTeERRVUZMZVZVc1RVRkJUU3hEUVVGRGMwa3NVMEZCVXl4RFFVTnVRaXhEUVVOR0xFTkJRVU1zUTBGQlFUdExRVU5RTEVOQlFVRXNRMEZCUVR0SlFVRkJOV01zWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUVVFc2IwSkJRVUVzUlVGRmIwSXNXVUZCY1VJN1FVRkJRU3hOUVVGQkxFbEJRWEJDYzJRc1ZVRkJWU3hIUVVGQmVuQkNMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNSMEZCUVN4RFFVRkJMRWxCUVVGblJ5eFRRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRXRCUVVGRExGTkJRVUVzUjBGQlFVUXNVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hIUVVGSExFVkJRVVVzUTBGQlFUdEJRVU51UXl4TlFVRkJMRWxCUVZGcmNFSXNVMEZCVXl4SFFVRlJUeXhWUVVGVkxFTkJRVE5DVUN4VFFVRlRPMUZCUVVWNmFFSXNRMEZCUXl4SFFVRkxaMmxDTEZWQlFWVXNRMEZCYUVKb2FVSXNRMEZCUXl4RFFVRkJPMEZCUlhCQ0xFMUJRVUVzU1VGRFJ6QkZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJsMFFpeGpRVUZqTEVsQlFVa3NRMEZCUXpsaUxFdEJRVUVzUTBGQlMwMHNTMEZCU3l4RFFVRkRhV1FzWTBGQll5eEpRVU40Ukhaa0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjl1UWl4clFrRkJhMElzUlVGRE4wSTdRVUZEUVN4UlFVRkJMRTlCUVU4c1NVRkJTU3hEUVVGQk8wRkJRMklzVDBGQlFUdEJRVVZCTEUxQlFVRXNTVUZCVFhWSUxIVkNRVUYxUWl4SFFVRkhNV3hDTEcxQ1FVRnRRaXhEUVVOcVJHdEpMRXRCUVVFc1EwRkJTMDBzUzBGQlN5eERRVUZEZGxNc1NVRkJTU3hGUVVObWFWTXNTMEZCUVN4RFFVRkxibElzUzBGRFVDeERRVUZETEVOQlFVRTdRVUZGUkN4TlFVRkJMRWxCUVUwMGRVSXNkVUpCUVhWQ0xFZEJRVWR5YkVJc2EwSkJRV3RDTEVOQlEyaEVORWdzUzBGQlFTeERRVUZMVFN4TFFVRkxMRU5CUVVOMlV5eEpRVUZKTEVWQlEyWnBVeXhMUVVGQkxFTkJRVXR1VWl4TFFVTlFMRU5CUVVNc1EwRkJRVHRCUVVWRUxFMUJRVUVzU1VGQlRUWjFRaXh6UWtGQmMwSXNSMEZCUjNaclFpeHJRa0ZCYTBJc1EwRkRMME0yUnl4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUTBGQlEzWlRMRWxCUVVrc1JVRkRabWxUTEV0QlFVRXNRMEZCUzI1U0xFdEJRMUFzUTBGQlF5eERRVUZCTzBGQlJVUXNUVUZCUVN4SlFVRk5PSFZDTEhOQ1FVRnpRaXhIUVVGSE0ycENMR2xDUVVGcFFpeERRVU01UTJkSExFdEJRVUVzUTBGQlMwMHNTMEZCU3l4RFFVRkRkbE1zU1VGQlNTeEZRVU5tYVZNc1MwRkJRU3hEUVVGTGJsSXNTMEZEVUN4RFFVRkRMRU5CUVVFN1RVRkZSQ3hKUVVGTkszVkNMRmxCUVZrc1IwRkRhRUlzUTBGQlF6VmtMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpKclFpeHRRa0ZCYlVJc1NVRkRMMElzUTBGQlEzaFVMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpSclFpeHhRa0ZCY1VJc1NVRkRha01zUTBGQlEzcFVMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJkelFpeGpRVUZqTEVOQlFVRTdUVUZGTlVJc2IwSkJRMFZ5WVN4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRTdRVUZEUlhSRkxGRkJRVUZCTEZOQlFWTXNSVUZCUXl3eVJFRkJNa1E3UVVGRGNrVTRaMElzVVVGQlFVRXNUMEZCVHl4RlFVRkZhbVFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE9IRkNMR1ZCUVVGQk8wRkJRV2RDTEU5QlFVRXNSVUZGYmtNeldpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5wYzBJc2EwSkJRV3RDTEVOQlFVRXJReXhqUVVGQkxFTkJRVUZCTEdOQlFVRXNRMEZCUVN4RlFVRkJMRVZCUTNwQ04yUXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVUVzUlVGQlFTeEZRVUZCTEVWQlFVRTdRVUZEWW5ka0xGRkJRVUZCTEdsQ1FVRnBRaXhGUVVGRmVHbENMRU5CUVVNN1FVRkRjRUo1YUVJc1VVRkJRVUVzVTBGQlV5eEZRVUZVUVN4VFFVRlRPMUZCUTFSSUxGZEJRVmNzUlVGQlJUVmpMRXRCUVVFc1EwRkJTelJqTEZkQlFWYzdVVUZETjBKRUxGVkJRVlVzUlVGQlJUTmpMRXRCUVVFc1EwRkJTekpqTEZWQlFWVTdVVUZETTBKMlFpeGhRVUZoTEVWQlFVVndZaXhMUVVGQkxFTkJRVXR2WWl4aFFVRmhPMUZCUTJwRFZ5eGhRVUZoTEVWQlFVVXZZaXhMUVVGQkxFTkJRVXNyWWl4aFFVRmhPMUZCUTJwRFZpeFpRVUZaTEVWQlFVVnlZaXhMUVVGQkxFTkJRVXR4WWl4WlFVRlpPMUZCUXk5Q1Z5eFpRVUZaTEVWQlFVVm9ZeXhMUVVGQkxFTkJRVXRuWXl4WlFVRlpPMEZCUXk5Q2QwSXNVVUZCUVVFc2RVSkJRWFZDTEVWQlFYWkNRU3gxUWtGQmRVSTdRVUZEZGtKRExGRkJRVUZCTEhWQ1FVRjFRaXhGUVVGMlFrRXNkVUpCUVhWQ08wRkJRM1pDUXl4UlFVRkJRU3h6UWtGQmMwSXNSVUZCZEVKQkxITkNRVUZ6UWp0QlFVTjBRa01zVVVGQlFVRXNjMEpCUVhOQ0xFVkJRWFJDUVN4elFrRkJRVUU3UVVGQmMwSXNUMEZCUVN4RFFVTjJRaXhEUVVGRExFVkJRMFJETEZsQlFWa3NhVUpCUTFod1pDeExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUU3UVVGQlMzUkZMRkZCUVVGQkxGTkJRVk1zUlVGQlF5dzJRa0ZCUVR0QlFVRTJRaXhQUVVGQkxFVkJRM3BETmtRc1MwRkJRU3hEUVVGTGVWVXNUVUZCVFN4RFFVRkRjMGtzVTBGQlV5eERRVU51UWl4RFFVVktMRU5CUVVNc1EwRkJRVHRMUVVWVUxFTkJRVUVzUTBGQlFUdEJRVUZCTldNc1NVRkJRVUVzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUld0Q0xHdENRVUZCTEVWQlFVRXNWVUZCUVhKTExFdEJRVUVzUlVGQmJVSTdRVUZCUVN4TlFVRkJMRWxCUVdoQ2IyNUNMRk5CUVZNc1IwRkJRWEJ1UWl4TFFVRkJMRU5CUVZSdmJrSXNVMEZCVXl4RFFVRkJPMEZCUXpkQ0xFMUJRVUVzU1VGQlFURlZMRmxCUVVFc1IwRkJNa055U1N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTzFGQlFUZERaM05DTEdOQlFXTXNSMEZCUVhoVExGbEJRVUVzUTBGQlpIZFRMR05CUVdNN1VVRkJSV3hvUWl4alFVRmpMRWRCUVVFd1R5eFpRVUZCTEVOQlFXUXhUeXhqUVVGakxFTkJRVUU3UVVGRGRFTXNUVUZCUVN4SlFVRkJReXhsUVVGQkxFZEJRVzFEUXl4alFVRmpMRU5CUXk5RGEycENMRk5CUVZNc1JVRkRWSEJxUWl4alFVTkdMRU5CUVVNN1VVRklUMkVzVjBGQlZ5eEhRVUZCV2l4bFFVRkJMRU5CUVZoWkxGZEJRVmM3VVVGQlJWWXNVMEZCVXl4SFFVRkJSaXhsUVVGQkxFTkJRVlJGTEZOQlFWTXNRMEZCUVR0TlFVazVRaXh2UWtGRFJUQkhMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVR0QlFVRkxkRVVzVVVGQlFVRXNVMEZCVXl4RlFVRkRMSFZFUVVGQk8wRkJRWFZFTEU5QlFVRXNSVUZEYmtVd1pTeGpRVUZqTEVkQlFVRXNSVUZCUVN4RFFVRkJkSE5DTEUxQlFVRXNRMEZCVFdsTkxGZEJRVmNzUlVGQlFXcE5MRXRCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRTFCUVVFc1EwRkJUWFZNTEZOQlFWTXNRMEZCU3pGRkxFZEJRVUZCTEU5QlFVOHNRMEZCUXpKdVFpeFRRVUZUTEVOQlEyeEZMRU5CUVVNc1EwRkJRVHRMUVVWVUxFTkJRVUVzUTBGQlFUdEJRVUZCTldNc1NVRkJRVUVzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUldNc1kwRkJRU3hGUVVGQkxGVkJRVU56WkN4VlFVRlZMRVZCUVVzN1FVRkROMElzVFVGQlFTeFJRVUZSTEVsQlFVazdRVUZEVml4UlFVRkJMRXRCUVV0MFpDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5wYzBJc2EwSkJRV3RDTEV0QlFVdG9ia0lzVTBGQlV6dEJRVU01UXl4VlFVRkJMRTlCUVU5clRTeExRVUZCTEVOQlFVczRZU3hyUWtGQmEwSXNRMEZCUTNkRExGVkJRVlVzUTBGQlF5eERRVUZCTzBGQlF6VkRMRkZCUVVFc1MwRkJTM1JrTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6SnJRaXh0UWtGQmJVSXNTVUZEYWtONFZDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU0wYTBJc2NVSkJRWEZDTEVsQlEyaERlbFFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFozTkNMR05CUVdNN1FVRkRla0lzVlVGQlFTeFBRVUZQTjJFc1MwRkJRU3hEUVVGTEsyUXNaMEpCUVdkQ0xFTkJRVU5VTEZWQlFWVXNRMEZCUXl4RFFVRkJPMEZCUXpGRExGRkJRVUU3UVVGRFJTeFZRVUZCTEU5QlFVOTBaQ3hMUVVGQkxFTkJRVXRuWlN4dFFrRkJiVUlzUTBGQlExWXNWVUZCVlN4RFFVRkRMRU5CUVVFN1FVRkRMME1zVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0SlFVRkJibVFzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUVVFc1kwRkJRU3hGUVVWakxGbEJRVTA3UVVGQlFTeE5RVUZCTEVsQlFVRnBaU3h4UWtGQlFTeERRVUZCTzAxQlEyNUNMRWxCUVVscVpTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU52YmtJc2EwSkJRV3RDTEVsQlFVbHFWeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVObmMwSXNZMEZCWXl4RlFVRkZPMEZCUXpsRUxGRkJRVUVzVDBGQlFUdEJRVU5HTEU5QlFVRTdUVUZGUVN4SlFVRk5jVVFzVTBGQlV5eEhRVUZITEVWQlFVVXNRMEZCUVR0QlFVTndRaXhOUVVGQkxFbEJRVTFETEdkQ1FVRm5RaXhIUVVGSGJtVXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZFhaQ0xHdENRVUZyUWl4SFFVTnNSSEJsTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzZDJRaXhYUVVGWExFZEJRVWNzUTBGQlF5eEhRVU14UWl4RFFVRkRMRU5CUVVFN1FVRkRUQ3hOUVVGQkxFbEJRVTFETEdGQlFXRXNSMEZEYWtKMFpTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU15YTBJc2JVSkJRVzFDTEVsQlFVbDRWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNMGEwSXNjVUpCUVhGQ0xFZEJRemxFZEZvc1VVRkJVU3hEUVVGRE5rWXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkpMRVZCUVVWdmQwSXNaMEpCUVdkQ0xFTkJRVU1zUjBGRE0wTnNiVUlzVTBGQlV5eERRVUZESzBnc1MwRkJRU3hEUVVGTFRTeExRVUZMTEVOQlFVTjJVeXhKUVVGSkxFVkJRVVZ2ZDBJc1owSkJRV2RDTEVOQlFVTXNRMEZCUVR0QlFVTnNSQ3hOUVVGQkxFbEJRVTF5UlN4bFFVRmxMRWRCUVVFc1EwRkJRVzFGTEhGQ1FVRkJMRWRCUVVkcVpTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5wY2tJc1pVRkJaU3hOUVVGQmJVVXNTVUZCUVVFc1NVRkJRVUVzY1VKQlFVRXNTMEZCUVVFc1MwRkJRVUVzUTBGQlFVRXNSMEZCUVVFc2NVSkJRVUVzUjBGQlNVVXNaMEpCUVdkQ0xFTkJRVUU3UVVGRGRFVXNUVUZCUVN4TFFVRkxMRWxCUVVrM2FVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVUVzUTBGQlF5eEhRVUZITUVVc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkM1pDTEZkQlFWY3NSVUZCUlN4RlFVRkZMMmxDTEVOQlFVTXNSVUZCUlR0QlFVTXZReXhSUVVGQkxFbEJRVTFwYWtJc1YwRkJWeXhIUVVGSGFtcENMRU5CUVVNc1IwRkJSM2RsTEdWQlFXVXNSMEZCUjNGRkxHZENRVUZuUWl4RFFVRkJPMUZCUXpGRUxFbEJRVTF3UWl4VFFVRlRMRWRCUTJJdll5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU15YTBJc2JVSkJRVzFDTEVsQlFVbDRWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNMGEwSXNjVUpCUVhGQ0xFZEJRemxFZEZvc1VVRkJVU3hEUVVGRGJXdENMR0ZCUVdFc1JVRkJSVU1zVjBGQlZ5eERRVUZETEVkQlEzQkRhRzFDTEZOQlFWTXNRMEZCUXl0c1FpeGhRVUZoTEVWQlFVVkRMRmRCUVZjc1EwRkJReXhEUVVGQk8wRkJRek5ETEZGQlFVRXNTVUZCVFVNc1VVRkJVU3hIUVVGQkxGRkJRVUVzUTBGQlFXcDNRaXhOUVVGQkxFTkJRVmtyVFN4RFFVRkRMRU5CUVVVc1EwRkJRVHRSUVVNM1FpeEpRVUZOYTFFc01FSkJRVEJDTEVkQlFVZHNVU3hEUVVGRExFZEJRVWN3UlN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjNka0lzVjBGQlZ5eEhRVUZITEVOQlFVTXNRMEZCUVR0QlFVTnFSU3hSUVVGQkxFbEJRVTAxVXl3MFFrRkJORUlzUjBGQlIyNVJMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3UVVGRE1VTTBhVUlzVVVGQlFVRXNVMEZCVXl4RFFVRkRjR2xDTEVsQlFVa3NaVUZEV2pCRkxFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRVHRCUVVORkwwVXNWVUZCUVVFc1IwRkJSeXhGUVVGRk9HbENMRkZCUVZNN1FVRkRaREZpTEZWQlFVRkJMRWRCUVVjc1JVRkJSU3hUUVVGQlFTeEhRVUZETW1Jc1EwRkJRVUVzUjBGQlJ5eEZRVUZMTzFsQlExcDZaU3hMUVVGQkxFTkJRVXQxWkN4alFVRmpMRWRCUVVkclFpeEhRVUZITEVOQlFVRTdWMEZEZWtJN1FVRkRSblJwUWl4VlFVRkJRU3hUUVVGVExFVkJRVU1zYlVOQlFVRTdVMEZGVkRaRUxFVkJRVUZCTEV0QlFVRXNRMEZCU3pCbExGbEJRVmtzUTBGQlF6dEJRVUZGTTBJc1ZVRkJRVUVzVTBGQlV5eEZRVUZVUVN4VFFVRlRPMEZCUVVWNmFFSXNWVUZCUVVFc1EwRkJReXhGUVVGRVFTeERRVUZCUVR0QlFVRkZMRk5CUVVNc1EwRkJReXhsUVVOd1EydEdMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZEYzA4c1MwRkJTeXhGUVVGQk8wRkJRMHBxUWl4VlFVRkJRU3gzUWtGQmQwSXNSVUZCUlRsT0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMmxtTEhkQ1FVRjVRanRCUVVNNVJFTXNWVUZCUVVFc01FSkJRVEJDTEVWQlFVVXZUaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOclppd3dRa0ZCTWtJN1FVRkRiRVV5UWl4VlFVRkJRU3h0UWtGQmJVSXNSVUZCUlRGUUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelpuUWl4dFFrRkJiMEk3UVVGRGNFUXhReXhWUVVGQlFTeGxRVUZsTEVWQlFVVm9UaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNGRrSXNiMEpCUVhGQ08xVkJRMnBFYUdVc1VVRkJVU3hGUVVGRldDeExRVUZCTEVOQlFVczJZeXhsUVVGblFqdEJRVU12UWpGelFpeFZRVUZCUVN4SFFVRkhMRVZCUVVVMGMwSXNVMEZCVlR0QlFVTm1jRlVzVlVGQlFVRXNXVUZCV1N4RlFVRkZNMGtzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE9Gb3NXVUZCWVR0QlFVTjBRM0JaTEZWQlFVRkJMR2RDUVVGblFpeEZRVUZGZVZBc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNRUlzWjBKQlFXbENPMEZCUXpsRGRXZENMRlZCUVVGQkxHTkJRV01zUlVGQlJUbFJMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJscFFpeGpRVUZsTzFWQlF6RkRNMFFzVlVGQlZTeEZRVUZGYms0c1MwRkJRU3hEUVVGTGMwNHNZMEZCWlR0QlFVTm9RemxITEZWQlFVRkJMR1ZCUVdVc1JVRkJSWGhITEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF5dDJRaXhyUWtGQmJVSTdRVUZETDBONFR5eFZRVUZCUVN4dlFrRkJiMElzUlVGQlJYQlJMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpKWUxHVkJRV2RDTzBGQlEycEVlVVlzVlVGQlFVRXNaVUZCWlN4RlFVRkZhazBzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGIyUXNaVUZCWjBJN1ZVRkROVU50UWl4bFFVRmxMRVZCUVVWd1RpeExRVUZCTEVOQlFVdHBUeXh0UWtGQmIwSTdWVUZETVVOblFpeFpRVUZaTEVWQlFVVnFVQ3hMUVVGQkxFTkJRVXMyWlN4eFFrRkJjMEk3UVVGRGVrTjRVaXhWUVVGQlFTeFpRVUZaTEVWQlFVVnlUaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOM1pTeFpRVUZoTzBGQlEzUkRNa0lzVlVGQlFVRXNZMEZCWXl4RlFVRkZNVlFzUTBGQlJUdEJRVU5zUW10VExGVkJRVUZCTEdkQ1FVRm5RaXhGUVVGRmVFNHNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETW1Vc1owSkJRV2xDTzBGQlF6bERjR2hDTEZWQlFVRkJMRTFCUVUwc1JVRkJSVFJVTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzcERMRTFCUVU4N1FVRkRNVUpGTEZWQlFVRkJMRTlCUVU4c1JVRkJSVEJVTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzWkRMRTlCUVZFN1FVRkROVUo1U0N4VlFVRkJRU3hQUVVGUExFVkJRVVZwVFN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnJSaXhQUVVGUk8wRkJRelZDUXl4VlFVRkJRU3haUVVGWkxFVkJRVVZuVFN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRSaXhaUVVGaE8wRkJRM1JEUXl4VlFVRkJRU3h2UWtGQmIwSXNSVUZCUlN0TUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjlHTEc5Q1FVRnhRanRCUVVOMFJHbElMRlZCUVVGQkxHTkJRV01zUlVGQlJUaEZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNGTkxHTkJRV1U3UVVGRE1VTnhUU3hWUVVGQlFTeFJRVUZSTEVWQlFVVjJTQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNd1dTeFJRVUZUTzBGQlF6bENVeXhWUVVGQlFTeGhRVUZoTEVWQlFVVm9TU3hMUVVGQkxFTkJRVXROTEV0QlFVc3NRMEZCUXpCSUxHRkJRV003UVVGRGVFTTVWQ3hWUVVGQlFTeFpRVUZaTEVWQlFVVTRUQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeFJpeFpRVUZoTzBGQlEzUkRReXhWUVVGQlFTeHZRa0ZCYjBJc1JVRkJSVFpNTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzTkdMRzlDUVVGeFFqdEJRVU4wUkdkWUxGVkJRVUZCTEUxQlFVMHNSVUZCUlc1TUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM05qTEUxQlFVODdRVUZETVVKRExGVkJRVUZCTEc5Q1FVRnZRaXhGUVVGRmNFd3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZFdNc2IwSkJRWEZDTzBGQlEzUkViVVVzVlVGQlFVRXNWMEZCVnl4RlFVRkZkbEFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1HZENMRmRCUVZrN1FVRkRjRU51WWl4VlFVRkJRU3hWUVVGVkxFVkJRVVUwVEN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjFSaXhWUVVGWE8wRkJRMnhETmxNc1ZVRkJRVUVzV1VGQldTeEZRVUZGYWtnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiMWtzV1VGQllUdEJRVU4wUTJsS0xGVkJRVUZCTEdWQlFXVXNSVUZCUld4UkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM0ZvUWl4bFFVRm5RanRCUVVNMVEyeEtMRlZCUVVGQkxGRkJRVkVzUlVGQlJXaElMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTIxWkxGRkJRVk03UVVGRE9VSlpMRlZCUVVGQkxGbEJRVmtzUlVGQlJUVklMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXl0WkxGbEJRV0U3UVVGRGRFTkRMRlZCUVVGQkxGVkJRVlVzUlVGQlJUZElMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJkYUxGVkJRVmM3UVVGRGJFTkRMRlZCUVVGQkxGbEJRVmtzUlVGQlJUbElMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJsYUxGbEJRV0U3UVVGRGRFTkRMRlZCUVVGQkxEQkNRVUV3UWl4RlFVRkZMMGdzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGExb3NNRUpCUVRKQ08wRkJRMnhGYkVJc1ZVRkJRVUVzWlVGQlpTeEZRVUZGTjBjc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRaMWtzWlVGQlowSTdRVUZETlVORExGVkJRVUZCTEdGQlFXRXNSVUZCUlRsSExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMmxaTEdGQlFXTTdRVUZEZUVNMlNTeFZRVUZCUVN4bFFVRmxMRVZCUVVVelVDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU00WjBJc1pVRkJaMEk3UVVGRE5VTm9hRUlzVlVGQlFVRXNVMEZCVXl4RlFVRkZjVklzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFJpeFRRVUZWTzBGQlEyaERReXhWUVVGQlFTeFBRVUZQTEVWQlFVVnZVaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVORUxFOUJRVkU3UVVGRE5VSnRhRUlzVlVGQlFVRXNZVUZCWVN4RlFVRkZMMUFzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGEyaENMR0ZCUVdNN1FVRkRlRU42VEN4VlFVRkJRU3hQUVVGUExFVkJRVVYwUlN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjVWaXhQUVVGUk8wRkJRelZDYVVvc1ZVRkJRVUVzYlVKQlFXMUNMRVZCUVVWMlRpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU13WlN4dFFrRkJiMEk3UVVGRGNFUXhRaXhWUVVGQlFTeHBRa0ZCYVVJc1JVRkJSVGRNTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyZGtMR2xDUVVGclFqdEJRVU5vUkc5SExGVkJRVUZCTEd0Q1FVRnJRaXhGUVVGRmFsTXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjJwQ0xHdENRVUZ0UWp0QlFVTnNSRWtzVlVGQlFVRXNiMEpCUVc5Q0xFVkJRVVZ5VXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjNha0lzYjBKQlFYRkNPMEZCUTNSRVowWXNWVUZCUVVFc2FVSkJRV2xDTEVWQlFVVnlXQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOM2IwSXNhVUpCUVd0Q08wRkJRMmhFTVZFc1ZVRkJRVUVzTUVKQlFUQkNMRVZCUVVVelJ5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU00V0N3d1FrRkJNa0k3UVVGRGJFVTJUU3hWUVVGQlFTeHRRa0ZCYlVJc1JVRkJSWGhVTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6SnJRaXh0UWtGQmIwSTdRVUZEY0VSNFFpeFZRVUZCUVN4MVFrRkJkVUlzUlVGQlJXaFRMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTIxcVFpeDFRa0ZCZDBJN1FVRkROVVJzUkN4VlFVRkJRU3cwUWtGQk5FSXNSVUZETVVJNVR5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5wWjBJc05FSkJRMW83UVVGRFJFUXNWVUZCUVVFc05rSkJRVFpDTEVWQlF6TkNOMDhzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFoyZENMRFpDUVVOYU8wRkJRMFJuVFN4VlFVRkJRU3hqUVVGakxFVkJRVVUzWVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTm5jMElzWTBGQlpUdEJRVU14UTNCSUxGVkJRVUZCTEhGQ1FVRnhRaXhGUVVGRmVsUXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETkd0Q0xIRkNRVUZ6UWp0QlFVTjRSSFpOTEZWQlFVRkJMR05CUVdNc1JVRkJSV3hJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzRlpMR05CUVdVN1FVRkRNVU0yUkN4VlFVRkJRU3hqUVVGakxFVkJRVVV2U3l4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnJZeXhqUVVGbE8xVkJRekZEVFN4WlFVRlpMRVZCUVVWeVRDeExRVUZCTEVOQlFVdHhUQ3haUVVGaE8wRkJRMmhEUnl4VlFVRkJRU3d3UWtGQk1FSXNSVUZCUlVFc01FSkJRVEpDTzBGQlEzWkVReXhWUVVGQlFTdzBRa0ZCTkVJc1JVRkJSVUVzTkVKQlFVRkJPMU5CUXk5Q0xFTkJRMFVzUTBGRFVDeERRVUZETEVOQlFVRTdRVUZEU0N4UFFVRkJPMEZCUTBFc1RVRkJRU3hQUVVGUGVWTXNVMEZCVXl4RFFVRkJPMHRCUTJwQ0xFTkJRVUVzUTBGQlFUdEpRVUZCTDJRc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNZVUZCUVN4RlFVVmhMRmxCUVUwN1FVRkRiRUlzVFVGQlFTeEpRVUZKUVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZia0lzYTBKQlFXdENMRVZCUVVVN1FVRkRha01zVVVGQlFTeFBRVUZCTzBGQlEwWXNUMEZCUVR0QlFVTkJMRTFCUVVFc1NVRkJTV3BYTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyZHpRaXhqUVVGakxFVkJRVVU3VVVGRE4wSXNiMEpCUTBWeVlTeExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUU3UVVGQlMzUkZMRlZCUVVGQkxGTkJRVk1zUlVGQlF5eHRRMEZCUVR0VFFVTmFOa1FzUlVGQlFVRXNTMEZCUVN4RFFVRkxNR1VzV1VGQldTeERRVUZETzBGQlFVVXpRaXhWUVVGQlFTeFRRVUZUTEVWQlFVVXZZeXhMUVVGQkxFTkJRVXROTEV0QlFVc3NRMEZCUTNaVExFbEJRVUZCTzFOQlFVMHNRMEZCUXl4bFFVTnNSSGxUTEV0QlFVRXNRMEZCUVVNc1lVRkJRU3hEUVVGRE9GWXNTVUZCU1N4RlFVRkJkVWtzVVVGQlFTeERRVUZCTzFWQlEwZ3pVaXhWUVVGVkxFVkJRVVZ1VGl4TFFVRkJMRU5CUVV0elRpeGpRVUZsTzBGQlEyaERkRVlzVlVGQlFVRXNZVUZCWVN4RlFVRkZhRWtzUzBGQlFTeERRVUZMVFN4TFFVRkxMRU5CUVVNd1NDeGhRVUZqTzFWQlEzaERLMUFzYTBKQlFXdENMRVZCUVVVdldDeExRVUZCTEVOQlFVc3JXQ3hyUWtGQmJVSTdRVUZETlVOb2NVSXNWVUZCUVVFc1NVRkJTU3hGUVVGRmFWTXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU4yVXl4SlFVRkJRVHRUUVVOaWFWTXNSVUZCUVVFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RlFVRkJPMVZCUTJSNWIwSXNaMEpCUVdkQ0xFVkJRVVYwV0N4TFFVRkJMRU5CUVVzclpTeHZRa0ZCY1VJN1ZVRkROVU40U0N4blFrRkJaMElzUlVGQlJYWllMRXRCUVVFc1EwRkJTMmRtTEc5Q1FVRkJRVHRCUVVGeFFpeFRRVUZCTEVOQlF6ZERMRU5CUTBVc1EwRkJReXhEUVVGQk8wRkJSVllzVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0SlFVRkJOMlVzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUVVFc2JVSkJRVUVzUlVGRmJVSXNXVUZCVFR0QlFVTjRRaXhOUVVGQkxFbEJRMFZCTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEybDBRaXhqUVVGakxFdEJRM2hDT1dJc1MwRkJRU3hEUVVGTFRTeExRVUZMTEVOQlFVTnBaQ3hqUVVGakxFbEJRVWwyWkN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZia0lzYTBKQlFXdENMRU5CUVVNc1JVRkROVVE3UVVGRFFTeFJRVUZCTEc5Q1FVTkZlbFlzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVNd1ZDeEpRVUZKTEVWQlFVRTdRVUZEU0c1T0xGVkJRVUZCTEZGQlFWRXNSVUZCUldoSUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjFaTEZGQlFWTTdRVUZET1VKclR5eFZRVUZCUVN4VlFVRlZMRVZCUVVWc1ZpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU54YlVJc1ZVRkJWenRCUVVOc1EzWlZMRlZCUVVGQkxGRkJRVkVzUlVGQlJWZ3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZFc1Q0xGbEJRV0U3UVVGRGJFTjZRaXhWUVVGQlFTeGhRVUZoTEVWQlFVVXpWU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNGJFSXNZVUZCWXp0QlFVTjRRM2h0UWl4VlFVRkJRU3hOUVVGTkxFVkJRVVUyVWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZkMElzVlVGQlZ6dEJRVU01UWpsdVFpeFZRVUZCUVN4WlFVRlpMRVZCUVVVMlNTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56U1N4WlFVRmhPMEZCUTNSRGJVY3NWVUZCUVVFc1UwRkJVeXhGUVVGRk1FTXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEY1hkQ0xHRkJRV003UVVGRGNFTXpia0lzVlVGQlFVRXNUMEZCVHl4RlFVRkZlVWtzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1Fa3NUMEZCVVR0QlFVTTFRa01zVlVGQlFVRXNUMEZCVHl4RlFVRkZkMGtzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1ra3NUMEZCVVR0QlFVTTFRazRzVlVGQlFVRXNXVUZCV1N4RlFVRkZPRWtzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGNVa3NXVUZCWVR0QlFVTjBRMFVzVlVGQlFVRXNWVUZCVlN4RlFVRkZORWtzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGRVa3NWVUZCVnp0QlFVTnNRemhsTEZWQlFVRkJMRmRCUVZjc1JVRkJSV3hYTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzRnVRaXhYUVVGWk8wRkJRM0JEUml4VlFVRkJRU3hYUVVGWExFVkJRVVZvVnl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRia0lzVjBGQldUdEJRVU53UTNkSExGVkJRVUZCTEdsQ1FVRnBRaXhGUVVGRmVHTXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETW5SQ0xHbENRVUZyUWp0QlFVTm9SRU1zVlVGQlFVRXNjVUpCUVhGQ0xFVkJRVVY2WXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTTBkRUlzY1VKQlFYTkNPMEZCUTNoRVJpeFZRVUZCUVN4blFrRkJaMElzUlVGQlJYWmpMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpCMFFpeG5Ra0ZCYVVJN1FVRkRPVU0wUXl4VlFVRkJRU3hWUVVGVkxFVkJRVVZ1Wml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnpkMElzVlVGQlZ6dEJRVU5zUXpOTExGVkJRVUZCTEZGQlFWRXNSVUZCUlhoVkxFdEJRVUVzUTBGQlMwMHNTMEZCU3l4RFFVRkRhV1FzWTBGQlpUdEJRVU53UTNwSkxGVkJRVUZCTEZkQlFWY3NSVUZCUlRsVkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMmx0UWl4WFFVRlpPMEZCUTNCRE1XOUNMRlZCUVVGQkxFMUJRVTBzUlVGQlJUUlVMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNwRExFMUJRVTg3UVVGRE1VSnZZU3hWUVVGQlFTeGxRVUZsTEVWQlFVVjRSeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNeVdDeGxRVUZuUWp0QlFVTTFRM2xRTEZWQlFVRkJMR3RDUVVGclFpeEZRVUZGYWxjc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiMjVDTEd0Q1FVRkJRVHRCUVVGdFFpeFRRVU51UkN4RFFVRkRMRU5CUVVFN1FVRkZUaXhQUVVGQk8wdEJRMFFzUTBGQlFTeERRVUZCTzBsQlFVRTVWaXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4M1FrRkJRU3hGUVVWM1FpeFpRVUZOTzAxQlF6ZENMRWxCUVUxeVNpeEpRVUZKTEVkQlFVY3NTVUZCU1ROTExFbEJRVWtzUTBGQlEyZFZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTIxWkxGRkJRVkVzUTBGQlF5eERRVUZCTzBGQlF6RkRMRTFCUVVFc1NVRkJUVzlaTEZOQlFWTXNSMEZCUjI1NlFpeFBRVUZQTEVOQlFVTXdTeXhKUVVGSkxFTkJRVU1zU1VGQlNUQnZRaXhQUVVGUExFTkJRVU55Wml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFTkJRVU1zUTBGQlFUdE5RVU12UkN4SlFVRk5jVklzVlVGQlZTeEhRVUZISzBjc1UwRkJVeXhIUVVGQk4zZENMRVZCUVVGQkxFTkJRVUZCTEUxQlFVRXNRMEZEY2tKNVVDeFBRVUZQTEVOQlFVTnlTQ3hKUVVGSkxFTkJRVU5ITEZGQlFWRXNSVUZCUlN4RFFVRkRMRVZCUVVGMlNTeEhRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeE5RVUZCTEVOQlFVbDVVQ3hQUVVGUExFTkJRVU55U0N4SlFVRkpMRU5CUVVOSkxGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVRXNSMEZEZWtRc1JVRkJSU3hEUVVGQk8wRkJRMDRzVFVGQlFTeEpRVUZKYVVvc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRlWGRDTEdGQlFXRXNSVUZCUlR0QlFVTTFRaXhSUVVGQkxHOUNRVU5GT1dVc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVTTRaU3hUUVVGVExFVkJRVUU3UVVGRFVuaDRRaXhWUVVGQlFTeEpRVUZKTEVWQlFVVTBTU3hKUVVGTE8wRkJRMWd3YUVJc1ZVRkJRVUVzVlVGQlZTeEZRVUZGUVN4VlFVRlhPMEZCUTNaQ1R5eFZRVUZCUVN4alFVRmpMRVZCUVVVMVdTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU1yY0VJc1kwRkJaVHRCUVVNeFEycFpMRlZCUVVGQkxGRkJRVkVzUlVGQlJWZ3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZFc1Q0xGbEJRV0U3UVVGRGJFTnJReXhWUVVGQlFTeGxRVUZsTEVWQlFVVjBXU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVONWNFSXNaVUZCUVVFN1FVRkJaMElzVTBGRE4wTXNRMEZCUXl4RFFVRkJPMEZCUlU0c1QwRkJRVHRMUVVORUxFTkJRVUVzUTBGQlFUdEpRVUZCYmxrc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNjMEpCUVVFc1JVRkZjMElzV1VGQlRUdEJRVU16UWl4TlFVRkJMRWxCUVVGNlJpeG5Ra0ZCUVN4SFFVRnRRMVlzWTBGQll5eERRVU12UTIxSExFdEJRVUVzUTBGQlMwMHNTMEZCU3l4RFFVRkRkbE1zU1VGQlNTeEZRVU5tYVZNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRPRXNzWTBGRFlpeERRVUZETzFGQlNFOWhMRmRCUVZjc1IwRkJRVVFzWjBKQlFVRXNRMEZCV0VNc1YwRkJWenRSUVVGRlZpeFRRVUZUTEVkQlFVRlRMR2RDUVVGQkxFTkJRVlJVTEZOQlFWTXNRMEZCUVR0QlFVazVRaXhOUVVGQkxFbEJRVWt3YkVJc1pVRkJaU3hEUVVGQk8wRkJSVzVDTEUxQlFVRXNTVUZCU1hobUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMmR6UWl4alFVRmpMRVZCUVVVN1VVRkROMEl5UlN4bFFVRmxMRWRCUVVFc1JVRkJRU3hEUVVGQmFuaENMRTFCUVVFc1EwRkJUV2xOTEZkQlFWY3NVMEZCUVdwTkxFMUJRVUVzUTBGQlRYVk1MRk5CUVZNc1EwRkJSU3hEUVVGQk8wRkJRMjVFTEU5QlFVTXNUVUZCVFN4SlFVTk1hMGNzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1tdENMRzFDUVVGdFFpeEpRVU01UW5oVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelJyUWl4eFFrRkJjVUlzUlVGRGFFTTdVVUZEUVN0TUxHVkJRV1VzUjBGQlIzQnhRaXhQUVVGUExFTkJRVU0wU3l4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUTBGQlEzWlRMRWxCUVVrc1EwRkJReXhEUVVGQk8wRkJRelZETEU5QlFVTXNUVUZCVFR0QlFVTk1lWGhDTEZGQlFVRkJMR1ZCUVdVc1IwRkJRV3A0UWl4RlFVRkJRU3hEUVVGQlFTeE5RVUZCTEVOQlFVMDJSU3huUWtGQlowSXNRMEZEYmtOclF5eFJRVUZSTEVOQlFVTXdTeXhMUVVGQkxFTkJRVXROTEV0QlFVc3NRMEZCUTNaVExFbEJRVWtzUTBGQlF5eEZRVU42UW1sVExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM3BETEUxQlEySXNRMEZCUXl4RlFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGQmJVTXNUVUZCUVN4RFFVRkpOa2NzVDBGQlR5eERRVUZETkVzc1MwRkJRU3hEUVVGTFRTeExRVUZMTEVOQlFVTjJVeXhKUVVGSkxFTkJRVU1zUTBGQlJTeERRVUZCTzBGQlEycERMRTlCUVVFN1RVRkZRU3h2UWtGRFJYbFRMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVR0QlFVTkZORXdzVVVGQlFVRXNTVUZCU1N4RlFVRkRMRTlCUVU4N1FVRkRXaXhSUVVGQkxGZEJRVUVzUlVGQlZTeFJRVUZSTzBGQlEyeENiRkVzVVVGQlFVRXNVMEZCVXl4RlFVRkRMRFpDUVVGQk8wRkJRVFpDTEU5QlFVRXNSVUZGZEVNMlJDeExRVUZCTEVOQlFVdE5MRXRCUVVzc1EwRkJRelJhTEhWQ1FVRjFRaXhKUVVGSmMwWXNaVUZEYmtNc1EwRkJReXhEUVVGQk8wdEJSVllzUTBGQlFTeERRVUZCTzBsQlFVRnlaaXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4blFrRkJRU3hGUVVWblFpeFpRVUZOTzBGQlEzSkNMRTFCUVVFc1NVRkJTVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGNWUXNVVUZCVVN4RlFVRkZPMUZCUTNaQ0xHOUNRVU5GTVVJc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMEZCUVV0MFJTeFZRVUZCUVN4VFFVRlRMRVZCUVVNc2MwTkJRVUU3UVVGQmMwTXNVMEZCUVN4RlFVTnNSRFpFTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzRlVMRkZCUTFRc1EwRkJReXhEUVVGQk8wRkJSVllzVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0QlFUTXlRa05zUXl4SlFVRkJRU3hMUVVGQkxFTkJRVXR4VEN4WlFVRlpMR2RDUVVGSE4wc3NTMEZCU3l4RFFVRkRiVUlzVTBGQlV5eEZRVUZGTEVOQlFVRTdTVUZGY2tNelFpeExRVUZCTEVOQlFVdE5MRXRCUVVzc1IwRkJSenRCUVVOWWRsTXNUVUZCUVVFc1NVRkJTU3hGUVVGRmFWTXNTMEZCUVN4RFFVRkxlV1lzWVVGQllTeEZRVUZGTzBGQlF6RkNlbGdzVFVGQlFVRXNZVUZCWVN4RlFVRkZMRWxCUVVrN1FVRkRia0oxVml4TlFVRkJRU3hqUVVGakxFVkJRVVVzU1VGQlNUdEJRVU53UW5KRUxFMUJRVUZCTEhWQ1FVRjFRaXhGUVVGRkxFdEJRVUU3UzBGRE1VSXNRMEZCUVR0QlFVRkRMRWxCUVVFc1QwRkJRV3hoTEV0QlFVRXNRMEZCUVR0QlFVTktMRWRCUVVFN1JVRkJRelJDTEZOQlFVRXNRMEZCUVRoWUxGRkJRVUVzUlVGQlFUTmFMR2RDUVVGQkxFTkJRVUVzUTBGQlFUdEZRVUZCTEU5QlFVRTRRaXhaUVVGQkxFTkJRVUUyV0N4UlFVRkJMRVZCUVVFc1EwRkJRVHRKUVVGQmFHVXNSMEZCUVN4RlFVRkJMRzFDUVVGQk8wbEJRVUV2VUN4TFFVRkJMRVZCUlVRc1UwRkJRVzFYTEdsQ1FVRkJRU3hIUVVGdlFqdEJRVUZCTEUxQlFVRXNTVUZCUVcxRUxFMUJRVUVzUjBGQlFTeEpRVUZCTEVOQlFVRTdRVUZEYkVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeE5RVUZCTEVsQlFVa3NTVUZCU1N4RFFVRkRjRmNzUzBGQlN5eERRVUZEYVhSQ0xHTkJRV01zUlVGQlJUdFJRVU0zUWl4SlFVRkpMRU5CUVVNMFJDeHZRa0ZCYjBJc1IwRkJTU3haUVVGTk8xVkJRMnBEZW1Fc1RVRkJTU3hEUVVGRE0wUXNVVUZCVVN4RFFVRkRPMWxCUVVWcFl5eGpRVUZqTEVWQlFVVjBXU3hOUVVGSkxFTkJRVU56V1N4alFVRkJRVHRCUVVGbExGZEJRVU1zUTBGQlF5eERRVUZCTzBGQlEzaEVMRk5CUVVNc1JVRkJSeXhEUVVGQk8wRkJRMDRzVDBGQlFUdEJRVU5HTEV0QlFVRTdRVUZCUXl4SFFVRkJMRVZCUVVFN1NVRkJRVGRvUWl4SFFVRkJMRVZCUVVFc2IwSkJRVUU3UVVGQlFTOVFMRWxCUVVGQkxFdEJRVUVzUlVGRlJDeFRRVUZCT0dkQ0xHdENRVUZ0UWpkQ0xFTkJRVUZCTEZOQlFWTXNSVUZCUlR0QlFVRkJMRTFCUVVFc1NVRkJRU3RWTEUxQlFVRXNSMEZCUVN4SlFVRkJMRU5CUVVFN1FVRkROVUlzVFVGQlFTeEpRVU5GTEVsQlFVa3NRMEZCUXpsM1FpeExRVUZMTEVOQlFVTnZXU3haUVVGWkxFdEJRM1JDTEVOQlFVTjBWaXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZET1VNc1MwRkJTeXhEUVVGRGIxa3NXVUZCV1N4RlFVRkZNa1FzVTBGQlV5eERRVUZETTBRc1dVRkJXU3hEUVVGRExFbEJRekZFTEVsQlFVa3NRMEZCUTNCWkxFdEJRVXNzUTBGQlEybHlRaXhsUVVGbExFdEJRVXRzVUN4VFFVRlRMRU5CUVVOclVDeGxRVUZsTEVOQlFVTXNSVUZETTBRN1FVRkRRU3hSUVVGQkxFbEJRVTA0Uml4bFFVRmxMRWRCUVVjc1EwRkJRM0oxUWl4WFFVRlhMRU5CUTJ4RExFbEJRVWtzUTBGQlF5dFBMRXRCUVVzc1EwRkJRM1pUTEVsQlFVa3NSVUZEWml4SlFVRkpMRU5CUVVOakxFdEJRVXNzUTBGQlEyOVpMRmxCUTJJc1EwRkJReXhEUVVGQk8xRkJRMFFzU1VGQlNTeERRVUZETTBZc1VVRkJVU3hEUVVOWU8wRkJRMFYyVkN4VlFVRkJRU3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZEWXl4TFFVRkxMRU5CUVVOdldTeFpRVUZCUVR0QlFVTnVRaXhUUVVGRExFVkJRMFFzV1VGQlFUdFZRVUZCTEU5QlFVMHlXU3hsUVVGbExFbEJRVWxFTEUxQlFVa3NRMEZCUTNoR0xIVkNRVUYxUWl4RFFVRkRkMFlzVFVGQlNTeERRVUZEY21Zc1MwRkJTeXhEUVVGRGRsTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1FVRkJRU3hUUVVONFJTeERRVUZETEVOQlFVRTdUMEZEUml4TlFVRk5MRWxCUTB3c1NVRkJTU3hEUVVGRFl5eExRVUZMTEVOQlFVTnhiVUlzVlVGQlZTeEpRVU55UWl4RFFVRkRkbXBDTEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNNVF5eExRVUZMTEVOQlFVTnhiVUlzVlVGQlZTeEZRVUZGZEVzc1UwRkJVeXhEUVVGRGMwc3NWVUZCVlN4RFFVRkRMRVZCUTNaRU8xRkJRMEVzU1VGQlNTeERRVUZETlZRc1VVRkJVU3hEUVVGRE8wRkJRMXAyVkN4VlFVRkJRU3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZEWXl4TFFVRkxMRU5CUVVOeGJVSXNWVUZCUVVFN1FVRkRia0lzVTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU2l4UFFVRkJPMEZCUTBZc1MwRkJRVHRCUVVGRExFZEJRVUVzUlVGQlFUdEpRVUZCZUZvc1IwRkJRU3hGUVVGQkxGRkJRVUU3U1VGQlFTOVFMRXRCUVVFc1JVRXJla0pFTEZOQlFVRm5XQ3hOUVVGQlFTeEhRVUZUTzAxQlExQXNTVUZCVFd0a0xGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTm9lRUlzUzBGQlN5eERRVUZEYVhoQ0xGTkJRVk1zU1VGQlNTOUhMR2xDUVVGcFFpeERRVUZCTzAxQlF6TkVMRzlDUVVORmRsa3NTMEZCUVN4RFFVRkJReXhoUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBGQlFVdHZSQ3hSUVVGQlFTeExRVUZMTEVWQlFVVTdRVUZCUld0akxGVkJRVUZCTEU5QlFVOHNSVUZCUlN4VlFVRkJPMU5CUVdFN1VVRkJRMnBrTEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVOMVNTeFpRVUZCUVR0QlFVRmhMRTlCUVVFc1pVRkRNVVEzU3l4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlEyOW1MRk5CUVZNc1JVRkJRVHRSUVVOU01XcENMRk5CUVZNc1JVRkJSVEJITEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUlVGQlJTeEpRVUZKTEVOQlFVTm9WU3hMUVVGTExFTkJRVU56VGl4VFFVRlRMRVZCUVVVN1FVRkRlRVFzVlVGQlFTdzJRa0ZCTmtJc1JVRkJSU3hKUVVGSkxFTkJRVU4wVGl4TFFVRkxMRU5CUVVOdmJrSXNhMEpCUVVGQk8wRkJRelZETEZOQlFVTXNRMEZCUlR0UlFVTklhVVFzVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUTNKeFFpeExRVUZMTEVOQlFVTnBkRUlzWTBGQll5eEpRVUZKTEVsQlFVa3NRMEZCUTJwMFFpeExRVUZMTEVOQlFVTjVkMElzWVVGQll6dEJRVU5vUlhKS0xGRkJRVUZCTEd0Q1FVRnJRaXhGUVVGRkxFbEJRVWtzUTBGQlEzQnVRaXhMUVVGTExFTkJRVU52YmtJc2EwSkJRVUZCTzA5QlJUbENMRVZCUVVFc1NVRkJTU3hEUVVGREswb3NiMEpCUVc5Q0xFVkJRVVVzUlVGRE0wSXNTVUZCU1N4RFFVRkRReXh2UWtGQmIwSXNSVUZCUlN4RlFVTXpRaXhKUVVGSkxFTkJRVU5ETEdkQ1FVRm5RaXhGUVVGRkxFVkJRM1pDTEVsQlFVa3NRMEZCUTJ4TkxGbEJRVmtzUlVGQlJTeEZRVU51UWl4SlFVRkpMRU5CUVVOdFRTeFhRVUZYTEVWQlFVVXNSVUZEYkVJc1NVRkJTU3hEUVVGRFF5eHBRa0ZCYVVJc1JVRkJSU3hGUVVONFFpeEpRVUZKTEVOQlFVTkRMR2xDUVVGcFFpeEZRVUZGTEVWQlEzaENMRWxCUVVrc1EwRkJRME1zYzBKQlFYTkNMRVZCUVVVc1JVRkROMElzU1VGQlNTeERRVUZEUXl4alFVRmpMRVZCUTFnc1EwRkRVaXhEUVVGRExFTkJRVUU3UVVGRlZpeExRVUZCTzBGQlFVTXNSMEZCUVN4RFFVRkJMRVZCUVVFc1EwRkJRVHRKUVVGQk4ydENMRWRCUVVFc1JVRkJRU3hqUVVGQk8wbEJRVUZGTEVkQlFVRXNSVUY0YVVORUxGTkJRVUZCTEVkQlFVRkJMRWRCUVRCQ08wMUJRM2hDTEU5QlFVODdRVUZEVEN0a0xGRkJRVUZCTEdWQlFXVXNSVUZCUlN4VFFVRkJRU3hsUVVGQkxFZEJRVTBzUlVGQlJUdEJRVU42UWpCRkxGRkJRVUZCTEZkQlFWY3NSVUZCUlN4RFFVRkRPMEZCUTJSeVJDeFJRVUZCUVN4M1FrRkJkMElzUlVGQlJTeExRVUZMTzBGQlF5OUNPVVVzVVVGQlFVRXNWMEZCVnl4RlFVRkZMRTFCUVUwN1FVRkRia0p6Uml4UlFVRkJRU3gxUWtGQmRVSXNSVUZCUlN4bFFVRmxPMEZCUTNoRFZTeFJRVUZCUVN4dFFrRkJiVUlzUlVGQlJTeFhRVUZYTzBGQlEyaERXQ3hSUVVGQlFTeDNRa0ZCZDBJc1JVRkJSU3huUWtGQlowSTdRVUZETVVOVkxGRkJRVUZCTEc5Q1FVRnZRaXhGUVVGRkxGbEJRVms3UVVGRGJFTXpSQ3hSUVVGQlFTeGxRVUZsTEVWQlFVVXNTVUZCU1R0QlFVTnlRak5sTEZGQlFVRkJMR05CUVdNc1JVRkJSVzVQTEhkQ1FVRkJRVHRQUVVOcVFpeERRVUZCTzBGQlEwZ3NTMEZCUVR0QlFVRkRMRWRCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeERRV1J0UTJkV0xFTkJRVUZCTEV0QlFVc3NRMEZCUTNkRExGTkJRVk1zUTBGQlFUczdRVU16UkhKRUxFbEJRVTEzWkN4WlFVRlpMRWRCUVVjc1UwRkJaa0VzV1VGQldVRXNRMEZCUVM5NFFpeEpRVUZCTEVWQlFUQkRPMEZCUVVFc1JVRkJRU3hKUVVGd1EyZDVRaXhKUVVGSkxFZEJRVUZvZVVJc1NVRkJRU3hEUVVGS1ozbENMRWxCUVVrN1NVRkJRVU1zWTBGQlFTeEhRVUZCYW5sQ0xFbEJRVUVzUTBGQlJUQk9MRk5CUVZNN1FVRkJWRUVzU1VGQlFVRXNVMEZCVXl4SFFVRkJkV3RDTEdOQlFVRXNTMEZCUnl4TFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGRkxFZEJRVUZCTEdOQlFVRTdTVUZCUldoblFpeFJRVUZQTEVkQlFVRnFVeXhKUVVGQkxFTkJRVkJwVXl4UFFVRlBMRU5CUVVFN1JVRkRia1FzU1VGQlRXbG5RaXhaUVVGWkxFZEJRVWNzYVVOQlFXbERMRU5CUVVFN1FVRkZkRVFzUlVGQlFTeHJRa0ZCU1c1blFpeExRVUZMTEVOQlFVTnZaMElzWTBGQll5eERRVUZEU0N4SlFVRkpMRU5CUVVNc1JVRkJSVHRCUVVNNVFpeEpRVUZCTEc5Q1FVRlBhbWRDTEV0QlFVc3NRMEZCUXl0WUxGbEJRVmtzUTBGQlEydEpMRWxCUVVrc1JVRkJSVHRCUVVNNVFuUnJRaXhOUVVGQlFTeFRRVUZUTEV0QlFVRTFUaXhOUVVGQkxFTkJRVXRyZVVJc1NVRkJTU3hEUVVGRE5YaENMRXRCUVVzc1EwRkJRM05PTEZOQlFWTXNTVUZCU1N4RlFVRkZMRVZCUVVFc1IwRkJRU3hEUVVGQkxFTkJRVUUxVGl4TlFVRkJMRU5CUVVsdmVVSXNXVUZCV1N4UFFVRkJjSGxDTEUxQlFVRXNRMEZCU1RST0xGTkJRVk1zUTBGQlJUdEJRVU4yUlhWRkxFMUJRVUZCTEU5QlFVOHNSVUZCUlN4VFFVRkJRU3hQUVVGRE9FTXNRMEZCUVVFc1EwRkJReXhGUVVGTE8xRkJRMlFzU1VGQlNTeFBRVUZQYVdRc1NVRkJTU3hEUVVGRE5YaENMRXRCUVVzc1EwRkJRelpTTEU5QlFVOHNTMEZCU3l4VlFVRlZMRVZCUVVVN1FVRkROVU1yWml4VlFVRkJRU3hKUVVGSkxFTkJRVU0xZUVJc1MwRkJTeXhEUVVGRE5sSXNUMEZCVHl4RFFVRkRPRU1zUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEZGtJc1UwRkJRVHRCUVVWQkxGRkJRVUVzU1VGQlNTeFBRVUZQT1VNc1VVRkJUeXhMUVVGTExGVkJRVlVzUlVGQlJUdFZRVU5xUTBFc1VVRkJUeXhEUVVGRE9FTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRXaXhUUVVGQk8wRkJRMFlzVDBGQlFUdEJRVU5HTEV0QlFVTXNRMEZCUXl4RFFVRkJPMEZCUTBvc1IwRkJRVHRCUVVWQkxFVkJRVUVzU1VGQlNTeFBRVUZQYVdRc1NVRkJTU3hMUVVGTExGRkJRVkVzUlVGQlJUdEpRVU0xUWl4dlFrRkRSV3BuUWl4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRTdRVUZEUlhSRkxFMUJRVUZCTEZOQlFWTXNSVUZCUVRWT0xFVkJRVUZCTEVOQlFVRkJMRTFCUVVFc1EwRkJTMjk1UWl4WlFVRlpMRVZCUVVGd2VVSXNSMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNUVUZCUVN4RFFVRkphM2xDTEVsQlFVa3NSVUZCUVd4NVFpeEhRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeE5RVUZCTEVOQlFVazBUaXhUUVVGVExFTkJRVWM3UVVGRGJFUXNUVUZCUVN4aFFVRkJMRVZCUVZrc1RVRkJUVHRCUVVOc1FuVkZMRTFCUVVGQkxFOUJRVThzUlVGQlJVRXNVVUZCUVVFN1FVRkJVU3hMUVVOc1FpeERRVUZETEVOQlFVRTdRVUZGVGl4SFFVRkJPenRCUVVWQk8wVkJRMEVzYjBKQlEwVkdMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVR0SlFVTkZkRVVzVTBGQlV5eEZRVUZCTEVWQlFVRXNRMEZCUVRWT0xFMUJRVUVzUTBGQlMyOTVRaXhaUVVGWkxFOUJRVUZ3ZVVJc1RVRkJRU3hEUVVGSk5FNHNVMEZCVXl4RFFVRkhPMEZCUXpGRE1HdENMRWxCUVVGQkxFdEJRVXNzUlVGQlF5dzBRa0ZCTkVJN1FVRkRiRU5ETEVsQlFVRkJMRTlCUVU4c1JVRkJReXhoUVVGaE8wRkJRM0pDY0dkQ0xFbEJRVUZCTEU5QlFVOHNSVUZCUlVFc1VVRkJRVUU3UjBGRlZFWXNaVUZCUVVFc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNUVUZCUVN4RlFVRkJPMEZCUVUwM1ZTeEpRVUZCUVN4RFFVRkRMRVZCUVVNc05rNUJRVUU3UVVGQk5rNHNSMEZCUlN4RFFVTndUeXhEUVVGRExFTkJRVUU3UVVGRlZpeERRVUZETEVOQlFVRTdRVUZSUkN4eFFrRkJaVFF3UWl4WlFVRlpPenRCUTJoRVRTeEpRVVZhVHl4TlFVRk5MREJDUVVGQmFHaENMR2RDUVVGQkxFVkJRVUU3UlVGUGVrSXNVMEZCUVdkb1FpeE5RVUZCUVN4RFFVRlpiSGxDTEV0QlFVc3NSVUZCUlR0QlFVRkJMRWxCUVVFc1NVRkJRVzFTTEV0QlFVRXNRMEZCUVR0QlFVRkJReXhKUVVGQlFTeGxRVUZCTEU5QlFVRTRaMElzVFVGQlFTeERRVUZCTEVOQlFVRTdRVUZEYWtJdlowSXNTVUZCUVVFc1MwRkJRU3hIUVVGQlJTeFZRVUZCTEVOQlFVRTJaMElzU1VGQlFVRXNSVUZCUVVFc1RVRkJRU3hIUVVGTmJIbENMRXRCUVVzc1EwRkJRU3hEUVVGQkxFTkJRVUU3U1VGRFdHMVNMRXRCUVVFc1EwRkJTMmRvUWl4RlFVRkZMRWRCUVVkb1Z5eFJRVUZSTEVOQlFVTjJTeXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdRVUZCUXl4SlFVRkJMRTlCUVVGVUxFdEJRVUVzUTBGQlFUdEJRVU14UXl4SFFVRkJPMFZCUVVNMFFpeFRRVUZCTEVOQlFVRnRaaXhOUVVGQkxFVkJRVUZvYUVJc1owSkJRVUVzUTBGQlFTeERRVUZCTzBWQlFVRXNUMEZCUVRoQ0xGbEJRVUVzUTBGQlFXdG1MRTFCUVVFc1JVRkJRU3hEUVVGQk8wbEJRVUZ5YkVJc1IwRkJRU3hGUVVGQkxHMUNRVUZCTzBsQlFVRXZVQ3hMUVVGQkxFVkJSVVFzVTBGQlFXMVhMR2xDUVVGQlFTeEhRVUZ2UWp0QlFVTnNRaXhOUVVGQkxFbEJRVWtzUTBGQlEyMW1MRlZCUVZVc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlEzQjVRaXhMUVVGTExFTkJRVU54ZVVJc1ZVRkJWU3hKUVVGSmJGY3NVVUZCVVN4RlFVRkZiVmNzWTBGQll5eERRVU5zUlN4SlFVRkpMRU5CUVVOMGVVSXNTMEZCU3l4RFFVRkRkWGxDTEZGQlEySXNRMEZCUXl4RFFVRkJPMEZCUTBRc1RVRkJRU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZEU0N4VlFVRlZMRVZCUVVVN1VVRkRjRUlzU1VGQlNTeERRVUZEUVN4VlFVRlZMRWRCUVVkcVZ5eFJRVUZSTEVOQlFVTjJTeXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdRVUZETDBNc1VVRkJRU3hKUVVGSkxFTkJRVU4zWjBJc1ZVRkJWU3hEUVVGRFNTeFpRVUZaTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJRM2g1UWl4TFFVRkxMRU5CUVVOMWVVSXNVVUZCVVN4RFFVRkRMRU5CUVVFN1FVRkRka1FzVVVGQlFTeERRVUZETEVsQlFVa3NRMEZCUTNaNVFpeExRVUZMTEVOQlFVTnhlVUlzVlVGQlZTeEpRVUZKYkZjc1VVRkJVU3hEUVVGRFJTeEpRVUZKTEVWQlFVVnZWeXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZEVEN4VlFVRlZMRU5CUVVNc1EwRkJRVHRCUVVOMlJTeFBRVUZCTzAxQlEwRXNTVUZCU1N4RFFVRkRRU3hWUVVGVkxFTkJRVU5MTEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVOT0xFVkJRVVVzUTBGQlF5eERRVUZCTzBGQlEzUkRMRXRCUVVFN1FVRkJReXhIUVVGQkxFVkJRVUU3U1VGQlFYUnNRaXhIUVVGQkxFVkJRVUVzYzBKQlFVRTdTVUZCUVM5UUxFdEJRVUVzUlVGRlJDeFRRVUZCTkRGQ0xHOUNRVUZCUVN4SFFVRjFRanROUVVOeVFpeEpRVUZKTEVOQlFVTk9MRlZCUVZVc1EwRkJRMDhzVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUTFJc1JVRkJSU3hEUVVGRExFTkJRVUU3UVVGRGRFTXNTMEZCUVR0QlFVRkRMRWRCUVVFc1JVRkJRVHRKUVVGQmRHeENMRWRCUVVFc1JVRkJRU3hSUVVGQk8wbEJRVUV2VUN4TFFVRkJMRVZCUlVRc1UwRkJRV2RZTEUxQlFVRkJMRWRCUVZNN1FVRkRVQ3hOUVVGQkxHOUNRVUZQT0dVc1VVRkJVU3hEUVVGRFF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkROM2xDTEV0QlFVc3NRMEZCUTNGVUxGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTTRaU3hGUVVGRkxFTkJRVU1zUTBGQlFUdEJRVU0xUkN4TFFVRkJPMEZCUVVNc1IwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEVOQk9VSnBRM2huUWl4RFFVRkJRU3hMUVVGTExFTkJRVU4zUXl4VFFVRlRMRU5CUVVFN08wRkRSRzVFTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hKUVVGTk1tVXNlVUpCUVhsQ0xFZEJRemRDTEdkRVFVRm5SQ3hEUVVGQk8wRkJRMnhFTEVsQlFVMURMR1ZCUVdVc1IwRkJSeXhUUVVGc1FrRXNaVUZCWlVFc1EwRkJTVU1zU1VGQlNTeEZRVUZCTzBWQlFVRXNUMEZCU3l4RFFVRkRRU3hKUVVGSkxFTkJRVU5ETEZGQlFWRXNTVUZCU1VRc1NVRkJTU3hEUVVGRGNsZ3NVVUZCVVN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRVUVzUTBGQlFTeERRVUZCTzBGQlFVTXNTVUZGY0VSMVdDeFBRVUZQTERCQ1FVRkJhR2xDTEdkQ1FVRkJMRVZCUVVFN1JVRlpNVUlzVTBGQlFXZHBRaXhQUVVGQlFTeERRVUZaYkhwQ0xFdEJRVXNzUlVGQlJUdEJRVUZCTEVsQlFVRXNTVUZCUVcxU0xFdEJRVUVzUTBGQlFUdEJRVUZCUXl4SlFVRkJRU3hsUVVGQkxFOUJRVUU0YUVJc1QwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRGFrSXZhRUlzU1VGQlFVRXNTMEZCUVN4SFFVRkJSU3hWUVVGQkxFTkJRVUUyYUVJc1NVRkJRVUVzUlVGQlFVRXNUMEZCUVN4SFFVRk5iSHBDTEV0QlFVc3NRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkxZanRCUVVOQk8wbEJRVUZ6VWl4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRGFVSXNaMEpCUVVFc1JVRkJRU3haUVVGQk8wRkJRVUVzVFVGQlFTeFBRVU5tY0ZRc1MwRkJTeXhEUVVGRGJ6RkNMRk5CUVZNc1EwRkJRMnd3UWl4TFFVRkxMRU5CUTJ4Q2JUQkNMRWxCUVVrc1EwRkRTR3BwUWl4TFFVRkJMRU5CUVV0cmFVSXNWVUZCVlN4RFFVRkRiR2RDTEU5QlFVOHNRMEZCUTIxblFpeG5Ra0ZCWjBJc1EwRkJRMUlzZVVKQlFYbENMRU5CUVVNc1JVRkRia1VzUTBGQlF5eEZRVU5FTEVOQlFVTXNRMEZEU0N4RFFVRkRMRU5CUTBFNWJVSXNUVUZCVFN4RFFVRkRLMjFDTEdWQlFXVXNRMEZCUXl4RFFVRkJPMEZCUVVFc1MwRkJRU3hEUVVGQkxFTkJRVUU3U1VGQlFYcG9RaXhsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4clFrRkJRU3hGUVVWVUxGbEJRVTA3UVVGRGRrSXNUVUZCUVN4SlFVRk5iMmxDTEZkQlFWY3NSMEZCUjNCcFFpeExRVUZCTEVOQlFVdHhhVUlzWTBGQll5eEZRVUZGTEVOQlFVRTdRVUZEZWtORUxFMUJRVUZCTEZkQlFWY3NTVUZEVkVFc1YwRkJWeXhEUVVGRGRqQkNMRTFCUVUwc1IwRkJSeXhEUVVGRExFbEJRM1JDZFRCQ0xGZEJRVmNzUTBGQlEwRXNWMEZCVnl4RFFVRkRkakJDTEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRemhrTEV0QlFVc3NSVUZCUlN4RFFVRkJPMHRCUXpsRExFTkJRVUVzUTBGQlFUdEpRVUZCZUV3c1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNaMEpCUVVFc1JVRkZaMElzV1VGQlRUdEJRVU55UWl4TlFVRkJMRWxCUVUxdmFVSXNWMEZCVnl4SFFVRkhjR2xDTEV0QlFVRXNRMEZCUzNGcFFpeGpRVUZqTEVWQlFVVXNRMEZCUVR0QlFVTjZRMFFzVFVGQlFVRXNWMEZCVnl4SlFVRkpRU3hYUVVGWExFTkJRVU4yTUVJc1RVRkJUU3hIUVVGSExFTkJRVU1zU1VGQlNYVXdRaXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTjZWeXhMUVVGTExFVkJRVVVzUTBGQlFUdExRVU5vUlN4RFFVRkJMRU5CUVVFN1FVRjRRa016VEN4SlFVRkJRU3hMUVVGQkxFTkJRVXRyYVVJc1ZVRkJWU3huUWtGQlJ6Rm9RaXhMUVVGTExFTkJRVU50UWl4VFFVRlRMRVZCUVVVc1EwRkJRVHRCUVVGRExFbEJRVUVzVDBGQlFUTkNMRXRCUVVFc1EwRkJRVHRCUVVOMFF5eEhRVUZCTzBWQlFVTTBRaXhUUVVGQkxFTkJRVUZ0WjBJc1QwRkJRU3hGUVVGQmFHbENMR2RDUVVGQkxFTkJRVUVzUTBGQlFUdEZRVUZCTEU5QlFVRTRRaXhaUVVGQkxFTkJRVUZyWjBJc1QwRkJRU3hGUVVGQkxFTkJRVUU3U1VGQlFYSnRRaXhIUVVGQkxFVkJRVUVzVVVGQlFUdEpRVUZCTDFBc1MwRkJRU3hGUVhsQ1JDeFRRVUZCWjFnc1RVRkJRVUVzUjBGQlV6dEJRVU5RTEUxQlFVRXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRemxVTEV0QlFVc3NRMEZCUTNsNlFpeGhRVUZoTEVWQlFVVTdRVUZETjBJc1VVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlEzcDZRaXhMUVVGTExFTkJRVU54VkN4UlFVRlJMRU5CUVVFN1FVRkROVUlzVDBGQlFUdE5RVU5CTEc5Q1FVTkZNVUlzUzBGQlFTeERRVUZCUXl4aFFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8wRkJRVXQwUlN4UlFVRkJRU3hUUVVGVExFVkJRVU1zTkVKQlFUUkNPMUZCUVVNeVJ5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRiMllzVlVGQlFVRTdUMEZEY0VReGFFSXNaVUZCUVVFc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMEZCUTBWMFJTeFJRVUZCUVN4VFFVRlRMRVZCUVVNc2JVTkJRVzFETzBGQlF6ZERjVThzVVVGQlFVRXNVVUZCVVN4RlFVRkRMRWRCUVVjN1VVRkRXbmxUTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVOelJpeG5Ra0ZCUVVFN1QwRkRaaXhEUVVGRExFVkJRMFFzU1VGQlNTeERRVUZETVhwQ0xFdEJRVXNzUTBGQlEzRlVMRkZCUVZFc1pVRkRjRUl4UWl4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRTdRVUZEUlhSRkxGRkJRVUZCTEZOQlFWTXNSVUZCUXl4cFEwRkJhVU03UVVGRE0wTnhUeXhSUVVGQlFTeFJRVUZSTEVWQlFVTXNSMEZCUnp0UlFVTmFlVk1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUTNWR0xHTkJRVUZCTzBGQlFXVXNUMEZET1VJc1EwRkRSU3hEUVVGRExFTkJRVUU3UVVGRlZpeExRVUZCTzBGQlFVTXNSMEZCUVN4RFFVRkJMRVZCUVVFc1EwRkJRVHRKUVVGQk9XMUNMRWRCUVVFc1JVRkJRU3hqUVVGQk8wbEJRVUZGTEVkQlFVRXNSVUV6UkVRc1UwRkJRVUVzUjBGQlFVRXNSMEZCTUVJN1RVRkRlRUlzVDBGQlR6dEJRVU5NTUcxQ0xGRkJRVUZCTEdGQlFXRXNSVUZCUlN4SlFVRkJPMDlCUTJoQ0xFTkJRVUU3UVVGRFNDeExRVUZCTzBGQlFVTXNSMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFTkJUR3RET1doQ0xFTkJRVUZCTEV0QlFVc3NRMEZCUTNkRExGTkJRVk1zUTBGQlFUczdRVU5qY2tNc1UwRkJVM2xtTEZsQlFWbEJMRU5CUVVONlppeFRRVUZUTEVWQlFVVTdRVUZET1VNc1JVRkJRU3hKUVVGTk1HWXNXVUZCV1N4SFFVRkhMRk5CUVdaQkxGbEJRVmxCTEVOQlFVazNla0lzUzBGQlN5eEZRVUZMTzBGQlF6bENMRWxCUVVFc1NVRkJUVGg2UWl4VFFVRlRMRWRCUVVFNVJTeGpRVUZCTEVOQlFVRkJMR05CUVVFc1MwRkRWbWgyUWl4TFFVRkxMRU5CUVVFc1JVRkJRU3hGUVVGQkxFVkJRVUU3UVVGRFVpdDZRaXhOUVVGQlFTeGxRVUZsTEVWQlFVVXZla0lzUzBGQlN5eERRVUZESzNwQ0xHVkJRV1VzU1VGQlNTeEZRVUZGTzBGQlF6VkRReXhOUVVGQlFTeFhRVUZYTEVWQlFVVm9NRUlzUzBGQlN5eERRVUZEWnpCQ0xGZEJRVmNzU1VGQlNTeEZRVUZGTzAxQlEzQkRReXhWUVVGVkxFVkJRMUlzVDBGQlQyb3dRaXhMUVVGTExFTkJRVU5wTUVJc1ZVRkJWU3hMUVVGTExGTkJRVk1zUjBGQlIyb3dRaXhMUVVGTExFTkJRVU5wTUVJc1ZVRkJWU3hIUVVGSExFbEJRVUU3UzBGRE9VUXNRMEZCUVN4RFFVRkJPMEZCUTBRc1NVRkJRU3hKUVVGTlF5eFJRVUZSTEVkQlFVZDJhVUlzUzBGQlN5eERRVUZEZDJsQ0xFMUJRVTBzUlVGQlJTeERRVUZCTzBGQlF5OUNMRWxCUVVFc1NVRkJUVU1zWVVGQllTeEhRVUZIUXl4WFFVRlhMRU5CUVVGeVJpeGpRVUZCTEVOQlFVRTdRVUZETDBKelJpeE5RVUZCUVN4SlFVRkpMRVZCUVVVc1EwRkJRMUlzVTBGQlV5eERRVUZEUnl4VlFVRlZPMEZCUXpOQ1RTeE5RVUZCUVN4dlFrRkJiMElzUlVGQlJVTXNWVUZCVlR0TlFVTm9RME1zVTBGQlV5eEZRVUZGV0N4VFFVRlRMRU5CUVVOWkxHVkJRV1U3VFVGRGNFTkRMRlZCUVZVc1JVRkJRU3hEUVVOU1F5eEpRVUZKTEVOQlFVTTdRVUZCUlVNc1VVRkJRVUVzVDBGQlR5eEZRVUZGTEVWQlFVRTdUMEZCU1N4RFFVRkRMRVZCUTNKQ09WWXNUVUZCVFN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVOV0sxWXNTMEZCU3l4RFFVRkRPMEZCUVVWeVN5eFJRVUZCUVN4UFFVRlBMRVZCUVVWNVNpeFJRVUZCUVR0UFFVRlZMRU5CUVVNc1JVRkJRWGd3UWl4TlFVRkJMRU5CUVVFeVR5eHJRa0ZCUVN4RFFVTjZRbmxzUWl4VFFVRlRMRU5CUVVORExHVkJRV1VzUTBGQlFTeERRVUZCTzBGQlF6ZENMRXRCUVVFc1JVRkRSVVFzVTBGQlV5eERRVUZEUlN4WFFVRlhMRU5CUTNwQ0xFTkJRVU1zUTBGQlFUdEpRVVZHTEc5Q1FVTkZjbWxDTEV0QlFVRXNRMEZCUVVNc1lVRkJRU3hEUVVGRGRVTXNVMEZCVXl4RlFVRkJPR0lzVVVGQlFTeExRVUZMTmtRc1UwRkJVeXhGUVVGQk8wRkJRVVZGTEUxQlFVRkJMRmRCUVZjc1JVRkJRV2hHTEdOQlFVRXNRMEZCUVVFc1kwRkJRU3hMUVVGUGIwWXNZVUZCWVN4RFFVRkJMRVZCUVVFc1JVRkJRU3hGUVVGQk8wRkJRVVZHTEZGQlFVRkJMRkZCUVZFc1JVRkJVa0VzVVVGQlFVRTdRVUZCVVN4UFFVRkJMRU5CUVVFN1FVRkJSeXhMUVVGQkxFTkJRVVVzUTBGQlF5eERRVUZCTzBkQlJUVkZMRU5CUVVFN1FVRlRSQ3hGUVVGQkxFOUJRVTlNTEZsQlFWa3NRMEZCUVR0QlFVTnlRanM3UVVOeVJFRTdRVUZEWVd0Q0xFbEJRVUZCTEdWQlFXVXNNRUpCUVVFM2FrSXNaMEpCUVVFc1JVRkJRVHRCUVVGQkxFVkJRVUVzVTBGQlFUWnFRaXhsUVVGQkxFZEJRVUU3UVVGQlFUTnFRaXhKUVVGQlFTeGxRVUZCTEU5QlFVRXlha0lzWlVGQlFTeERRVUZCTEVOQlFVRTdRVUZCUVN4SlFVRkJMRTlCUVVFeGFrSXNWVUZCUVN4RFFVRkJMRWxCUVVFc1JVRkJRVEJxUWl4bFFVRkJMRVZCUVVFdmRrSXNVMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVGQk8wVkJRVUVyVGl4VFFVRkJMRU5CUVVGbmFVSXNaVUZCUVN4RlFVRkJOMnBDTEdkQ1FVRkJMRU5CUVVFc1EwRkJRVHRGUVVGQkxFOUJRVUU0UWl4WlFVRkJMRU5CUVVFcmFFSXNaVUZCUVN4RlFVRkJMRU5CUVVFN1NVRkJRV3h2UWl4SFFVRkJMRVZCUVVFc1VVRkJRVHRKUVVGQkwxQXNTMEZCUVN4RlFYTkNNVUlzVTBGQlFXZFlMRTFCUVVGQkxFZEJRVk03UVVGRFVDeE5RVUZCTEVsQlFVRjVSU3hYUVVGQkxFZEJXVWtzU1VGQlNTeERRVUZEZGxrc1MwRkJTenRSUVZoYWMwNHNVMEZCVXl4SFFVRkJhVXdzVjBGQlFTeERRVUZVYWt3c1UwRkJVenRSUVVOVU1HNUNMR2RDUVVGblFpeEhRVUZCZW1Nc1YwRkJRU3hEUVVGb1FubGpMR2RDUVVGblFqdFJRVU5vUW1Zc1ZVRkJWU3hIUVVGQk1XSXNWMEZCUVN4RFFVRldNR0lzVlVGQlZUdFJRVU5XWjBJc1pVRkJaU3hIUVVGQk1XTXNWMEZCUVN4RFFVRm1NR01zWlVGQlpUdFJRVU5tUXl4bFFVRmxMRWRCUVVFell5eFhRVUZCTEVOQlFXWXlZeXhsUVVGbE8xRkJRMlo2UWl4aFFVRmhMRWRCUVVGc1lpeFhRVUZCTEVOQlFXSnJZaXhoUVVGaE8xRkJRMkl3UWl4bFFVRmxMRWRCUVVFMVl5eFhRVUZCTEVOQlFXWTBZeXhsUVVGbE8xRkJRMlkxUXl4UlFVRlJMRWRCUVVGb1lTeFhRVUZCTEVOQlFWSm5ZU3hSUVVGUk8xRkJRMUpHTEZWQlFWVXNSMEZCUVRsYUxGZEJRVUVzUTBGQlZqaGFMRlZCUVZVN1VVRkRWakpDTEZkQlFWY3NSMEZCUVhwaUxGZEJRVUVzUTBGQldIbGlMRmRCUVZjN1VVRkRXRzlDTEZOQlFWTXNSMEZCUVRkakxGZEJRVUVzUTBGQlZEWmpMRk5CUVZNc1EwRkJRVHRCUVVkWUxFMUJRVUVzU1VGQlNVTXNUVUZCVFN4RFFVRkJPMDFCUlZZc1NVRkJTU3hEUVVGRGNFSXNWVUZCVlN4RlFVRkZPMEZCUTJZc1VVRkJRU3hKUVVGTmNFOHNUMEZCVHl4SFFVRkhOMUlzU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhGUVVGRk1VY3NVMEZCVXl4RFFVRkRMRU5CUVVFN1FVRkRNVVFyYmtJc1VVRkJRVUVzVFVGQlRTeG5Ra0ZEU2pGcVFpeExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRM05vUWl4UFFVRlBMRVZCUVVFN1FVRkJRMDhzVlVGQlFVRXNZVUZCWVN4RlFVRkZRU3hoUVVGQlFUdFRRVU4wUWpsb1FpeGxRVUZCUVN4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRTdRVUZEUlhGRExGVkJRVUZCTEVkQlFVY3NSVUZCUlN0bUxGZEJRVmNzUTBGQlEzTkNMRWxCUVVrc1EwRkJRME1zVjBGQldUdFZRVU5zUTNablFpeExRVUZMTEVWQlFVVm5aaXhYUVVGWExFTkJRVU4zUWl4alFVRmxPMEZCUTJ4RGJHOUNMRlZCUVVGQkxGTkJRVk1zUlVGQlJYVlpMRTlCUVZFN1ZVRkRia0lzWjBKQlFXZENiVThzUlVGQlFVRXNWMEZCVnl4RFFVRkRVeXhUUVVGVk8wRkJRM1JEZGxnc1ZVRkJRVUVzVTBGQlV5eEZRVUZGYVZrc1pVRkJRVUU3VTBGRlZrWXNSVUZCUVVFc1pVRkJaU3hGUVVObVJ5eFRRVUZUTEdsQ1FVTlNlbXBDTEV0QlFVRXNRMEZCUVVNc1lVRkJRU3hEUVVGRE5tcENMR0ZCUVdFc1JVRkJRVHRWUVVOYWVHaENMRWRCUVVjc1JVRkJSU3RtTEZkQlFWY3NRMEZCUTBVc1VVRkJVenRWUVVNeFFuZENMRTlCUVU4c1JVRkJSVEZDTEZkQlFWY3NRMEZCUXpCQ0xFOUJRVkU3UVVGRE4wSkRMRlZCUVVGQkxFbEJRVWtzUlVGQlF5eGpRVUZqTzBGQlEyNUNReXhWUVVGQlFTeFhRVUZYTEVWQlFVVXNRMEZCUlR0QlFVTm1jbEVzVlVGQlFVRXNUVUZCVFN4RlFVRkZMRU5CUVVVN1FVRkRWbk5STEZWQlFVRkJMRXRCUVVzc1JVRkJSU3hGUVVGSE8wRkJRMVkzWjBJc1ZVRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlFVVTRaMElzV1VGQlFVRXNVMEZCVXl4RlFVRkZMR3RDUVVGQk8xZEJRWEZDTzBGQlEzcERlRzlDTEZWQlFVRkJMRk5CUVZNc1JVRkJReXcwUWtGQlFUdFRRVU5ZTEVOQlJVRXNRMEZEUlN4RFFVTldMRU5CUVVFN1FVRkRTQ3hQUVVGQk8wRkJSVUVzVFVGQlFTeEpRVUZKTEVsQlFVa3NRMEZCUTNST0xFdEJRVXNzUTBGQlF5c3hRaXhsUVVGbExFVkJRVVU3UVVGRE9VSldMRkZCUVVGQkxFMUJRVTBzWjBKQlFVY3hha0lzUzBGQlN5eERRVUZEUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRE5WSXNTMEZCU3l4RFFVRkRLekZDTEdWQlFXVXNSVUZCUlN4RlFVRkZMRVZCUVVWV0xFMUJRVTBzUTBGQlF5eERRVUZCTzBGQlEzUkZMRTlCUVVFN1FVRkZRU3hOUVVGQkxFbEJRVWs1UXl4UlFVRlJMRWxCUVVrc1EwRkJRekJDTEZWQlFWVXNSVUZCUlR0QlFVTXpRbTlDTEZGQlFVRkJMRTFCUVUwc1owSkJRMG94YWtJc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVTnpaMElzVFVGQlRTeEZRVUZCTzBGQlFVTkxMRlZCUVVGQkxGRkJRVkVzUlVGQlJVRXNVVUZCVXp0QlFVRkRSaXhWUVVGQlFTeFZRVUZWTEVWQlFVVkJMRlZCUVVGQk8wRkJRVmNzVTBGQlFTeEZRVU5vUkdkRUxFMUJRMHNzUTBGRFZDeERRVUZCTzBGQlEwZ3NUMEZCUVR0QlFVVkJMRTFCUVVFc1NVRkJUVmNzWTBGQll5eEhRVUZIYUdsQ0xFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSV2RvUWl4blFrRkJaMElzUTBGQlF5eERRVUZCTzAxQlJYcEZMRzlDUVVORmNtcENMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZEUkN4TFFVRkxMRU5CUVVOemEwSXNVVUZCVVN4RlFVRkJMRWxCUVVFc1pVRkRZblJyUWl4TFFVRkJMRU5CUVVGRExHRkJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRTdRVUZCUzNGRExGRkJRVUZCTEVkQlFVY3NSVUZCUlN0bUxGZEJRVmNzUTBGQlEzTkNMRWxCUVVrc1EwRkJRMWtzV1VGQllUdEJRVUZETlc5Q0xGRkJRVUZCTEZOQlFWTXNSVUZCUlRCdlFpeGpRVUZCUVR0QlFVRmxMRTlCUVVFc1JVRkRhRVZrTEdWQlEwVXNRMEZCUXl4RlFVTk1SeXhOUVVOaExFTkJRVU1zUTBGQlFUdEJRVVZ5UWl4TFFVRkJPMEZCUVVNc1IwRkJRU3hEUVVGQkxFVkJRVUVzUTBGQlFUdEpRVUZCZUc5Q0xFZEJRVUVzUlVGQlFTeGpRVUZCTzBsQlFVRkZMRWRCUVVFc1JVRjZSa1FzVTBGQlFVRXNSMEZCUVVFc1IwRkJNRUk3VFVGRGVFSXNUMEZCVHp0QlFVTk1hMjVDTEZGQlFVRkJMRlZCUVZVc1JVRkJSU3hKUVVGQk8wOUJRMklzUTBGQlFUdEJRVU5JTEV0QlFVRTdRVUZCUXl4SFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUVzUTBGTWEwTjBhVUlzUTBGQlFVRXNTMEZCU3l4RFFVRkRkME1zVTBGQlV5eERRVUZCTEVOQlFVRTdRVUUyUm5CRUxIZENRVUZsZVdZc1dVRkJXU3hEUVVGRGJVSXNaVUZCWlN4RFFVRkRPenRCUXpGRE5VTXNTVUZCVFc5Q0xIVkNRVUYxUWl4SFFVRkhMSGREUVVGM1F5eERRVUZCTzBGQlEzaEZMRWxCUVUxRExHVkJRV1VzUjBGQlJ5OW9RaXhqUVVGakxFTkJRVU4zVnl4UlFVRlJMRU5CUVVNc1EwRkJRVHM3UVVGRmFFUTdRVUZEUVN4VFFVRlRkMHdzYzBKQlFYTkNRU3hEUVVGRE9YcENMRXRCUVVzc1JVRkJSVU1zUzBGQlN5eEZRVUZGTzBWQlF6VkRMRWxCUVVsRUxFdEJRVXNzU1VGQlNVTXNTMEZCU3l4RlFVRkZPMEZCUTJ4Q0xFbEJRVUVzVDBGRFJXbEZMRkZCUVZFc1EwRkJRMnhGTEV0QlFVc3NRMEZCUXl4TFFVRkxhMFVzVVVGQlVTeERRVUZEYWtVc1MwRkJTeXhEUVVGRExFbEJRVWtyUkN4UFFVRlBMRU5CUVVOb1JTeExRVUZMTEVOQlFVTXNTMEZCUzJkRkxFOUJRVThzUTBGQlF5OUVMRXRCUVVzc1EwRkJReXhEUVVGQk8wRkJSVFZGTEVkQlFVRTdSVUZGUVN4UFFVRlBSQ3hMUVVGTExFdEJRVXRETEV0QlFVc3NRMEZCUVR0QlFVTjRRaXhEUVVGQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVUwNGVrSXNWMEZCVnl4SFFVRkhMSFZDUVVGMVFpeERRVUZCTzBGQlJYUkNReXhKUVVGQlFTeFZRVUZWTERCQ1FVRkJjbXhDTEdkQ1FVRkJMRVZCUVVFN1JVRTBVRGRDTEZOQlFVRnhiRUlzVlVGQlFVRXNRMEZCV1hZeVFpeExRVUZMTEVWQlFVVTdRVUZCUVN4SlFVRkJMRWxCUVVGdFVpeExRVUZCTEVOQlFVRTdRVUZCUVVNc1NVRkJRVUVzWlVGQlFTeFBRVUZCYld4Q0xGVkJRVUVzUTBGQlFTeERRVUZCTzBGQlEycENjR3hDTEVsQlFVRkJMRXRCUVVFc1IwRkJRVVVzVlVGQlFTeERRVUZCYTJ4Q0xFbEJRVUZCTEVWQlFVRkJMRlZCUVVFc1IwRkJUWFl5UWl4TFFVRkxMRU5CUVVFc1EwRkJRU3hEUVVGQk8wbEJRVVZ6VWl4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGclJFY3NhVUpCUVVFc1JVRkJRU3haUVVGQk8wMUJRVUVzVDBGRGFFSkJMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNGdFFpeFZRVUZWTEVkQlEycENiRllzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGNXMUNMRlZCUVZVc1IwRkRja0pzVml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTm5XaXhWUVVGVkxFbEJRVWszU0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTkdMRk5CUVZNc1IwRkRNME54VWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTkdMRk5CUVZNc1IwRkRjRUp4VWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXJXU3haUVVGWkxFbEJRVWsxU0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTkVMRTlCUVU4c1IwRkRNME52VWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTkVMRTlCUVU4c1IwRkRiRUpzUkN4UFFVRlBMRVZCUVVVc1EwRkJRVHRCUVVGQkxFdEJRVUVzUTBGQlFTeERRVUZCTzBGQlJXNUNPMGxCUVVGNVZTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkRhVUlzWjBKQlFVRXNSVUZCUVN4WlFVRkJPMEZCUVVFc1RVRkJRU3hKUVVGQmNXeENMRzlDUVVGQkxFTkJRVUU3UVVGQlFTeE5RVUZCTEU5QlFVRXNRMEZCUVVFc2IwSkJRVUVzUjBGRFpuSnNRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNd1dTeFJRVUZSTEUxQlFVRTRaQ3hKUVVGQlFTeEpRVUZCUVN4dlFrRkJRU3hMUVVGdVFrRXNTMEZCUVVFc1EwRkJRVUVzUjBGQlFVRXNTMEZCUVVFc1EwRkJRVUVzUjBGQlFVRXNiMEpCUVVFc1EwRkJjVUl4VUN4TlFVRk5MRU5CUVVNc1ZVRkJRekpRTEZkQlFWY3NSVUZCUlhwdlFpeFBRVUZQTEVWQlFVczdVVUZEY0VRc1NVRkJUVGxQTEVsQlFVa3NSMEZCUnl4SlFVRkpMMElzU1VGQlNTeERRVUZETmxFc1QwRkJUeXhEUVVGRE9VOHNTVUZCU1N4RFFVRkRMRU5CUVVFN1FVRkRia01zVVVGQlFTeEpRVUZKTEVOQlFVTTVRaXhUUVVGUExFTkJRVU00UWl4SlFVRkpMRU5CUVVNc1JVRkJSVHRCUVVOc1FpeFZRVUZCTEU5QlFVOTFNMElzVjBGQlZ5eERRVUZCTzBGQlEzQkNMRk5CUVVFN1VVRkZRU3hQUVVGQkx6SkNMRVZCUVVGQkxFTkJRVUZCTEUxQlFVRXNRMEZCUVRKUExHdENRVUZCTEVOQlFWZHZiMElzVjBGQlZ5eEpRVUZCZWtnc1kwRkJRU3hEUVVGQlFTeGpRVUZCTEVOQlFVRXNSVUZCUVN4RlFVRlBhR2hDTEU5QlFVOHNRMEZCUVN4RlFVRkJMRVZCUVVFc1JVRkJRVHRCUVVGRk9VOHNWVUZCUVVFc1NVRkJTU3hGUVVGS1FTeEpRVUZCUVR0QlFVRkpMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdFBRVU16UXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGQk8wRkJRVUVzUzBGQlFTeERRVUZCTEVOQlFVRTdTVUZCUVc5VExHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMR3RDUVVGQkxFVkJSVmNzV1VGQlRUdEJRVUZCTEUxQlFVRXNTVUZCUVhaU0xFbEJRVUVzUTBGQlFUdEJRVU4yUWl4TlFVRkJMRWxCUVUwNE1rSXNiVUpCUVcxQ0xFZEJRVWQyYkVJc1MwRkJRU3hEUVVGTGQyeENMR1ZCUVdVc1JVRkJSU3hEUVVGQk8wRkJRMnhFTEUxQlFVRXNTVUZCVFd3MVFpeFBRVUZQTEVkQlFVZHZUeXh0UWtGQmJVSXNRMEZCUTNOR0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJReXhEUVVGQk8wRkJReTlETEUxQlFVRXNTVUZCVFd0R0xFOUJRVThzUjBGQlJ5dEhMRzFDUVVGdFFpeERRVUZEYTBZc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkRMME1zVFVGQlFTeEpRVUZOTkRKQ0xHMUNRVUZ0UWl4SFFVTjJRbTQxUWl4UFFVRlBMRWxCUVVreVFpeFJRVUZSTEVOQlFVTnpNMElzYlVKQlFXMUNMRVZCUVVWc01VSXNWVUZCVlN4RFFVRkRMMFFzVDBGQlR5eERRVUZETEVOQlFVTXNSMEZEZWtSQkxFOUJRVThzUjBGRFVIbElMRTlCUVU4c1NVRkJTV2RMTEU5QlFVOHNRMEZCUTNkdVFpeHRRa0ZCYlVJc1JVRkJSWEI2UWl4UlFVRlJMRU5CUVVNMFFpeFBRVUZQTEVOQlFVTXNRMEZCUXl4SFFVTjRSRUVzVDBGQlR5eEhRVU5RZDNoQ0xHMUNRVUZ0UWl4RFFVRkJPMDFCUXpOQ0xFOUJRVTg3UVVGRFRIQkRMRkZCUVVGQkxFbEJRVWtzUlVGQlJXNXFRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNMk1rSXNVMEZCVXl4SlFVRkpMRXRCUVVzN1FVRkRia05ETEZGQlFVRkJMRmxCUVZrc1JVRkJSU3hMUVVGTE8xRkJRMjVDTVdVc1dVRkJXU3hGUVVGQkxFTkJRVUY0V1N4SlFVRkJMRWRCUTFSMVVpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5wV2l4WlFVRlpMRWRCUTNCQ09VZ3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEUml4VFFVRlRMRWRCUTNCQ2NWSXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYlZrc1VVRkJVU3hOUVVGQkxFbEJRVUVzU1VGQlFYWlpMRWxCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFVRXNTVUZCUVN4SFFVRkxaek5DTEcxQ1FVRnRRanRCUVVOcVJEdEJRVU5CTzFGQlEwRjJjVUlzWTBGQll5eEZRVUZGUkN4dlFrRkJiMElzUTBGQlF5dEZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNGTkxHTkJRV01zUTBGQlF6dEJRVU12UkRCeFFpeFJRVUZCUVN4UFFVRlBMRVZCUVVVc1MwRkJTenRCUVVOa08wRkJRMEU3UVVGRFFYaGhMRkZCUVVGQkxHOUNRVUZ2UWl4RlFVRkZMRXRCUVVzN1FVRkRNMEk0VHl4UlFVRkJRU3gxUWtGQmRVSXNSVUZCUlN4TFFVRkJPMDlCUXpGQ0xFTkJRVUU3UzBGRFJpeERRVUZCTEVOQlFVRTdTVUZCUVM5YUxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMREJDUVVGQkxFVkJSVEJDTEZsQlFVMDdUVUZETDBJc1NVRkJTVUVzUzBGQlFTeERRVUZMTm14Q0xHMUNRVUZ0UWl4RlFVRkZPMEZCUXpWQ1F5eFJRVUZCUVN4WlFVRlpMRU5CUVVNNWJFSXNTMEZCUVN4RFFVRkxObXhDTEcxQ1FVRnRRaXhEUVVGRExFTkJRVUU3UVVGRGVFTXNUMEZCUVR0TFFVTkVMRU5CUVVFc1EwRkJRVHRKUVVGQk1XeENMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVUZCTEZWQlFVRXNSVUZGVlN4WlFVRk5PMDFCUTJZc1NVRkJTVUVzUzBGQlFTeERRVUZMSzJ4Q0xFdEJRVXNzU1VGQlNTOXNRaXhMUVVGQkxFTkJRVXNyYkVJc1MwRkJTeXhEUVVGRGNHRXNTMEZCU3l4RlFVRkZPMEZCUTJ4RE0wd3NVVUZCUVVFc1MwRkJRU3hEUVVGTEsyeENMRXRCUVVzc1EwRkJRM0JoTEV0QlFVc3NRMEZCUXp0QlFVRkZReXhWUVVGQlFTeGhRVUZoTEVWQlFVVXNTVUZCUVR0QlFVRkxMRk5CUVVNc1EwRkJReXhEUVVGQk8wRkJRek5ETEU5QlFVRTdTMEZEUkN4RFFVRkJMRU5CUVVFN1NVRkJRWHBNTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVGQkxGTkJRVUVzUlVGRlV5eFpRVUZOTzAxQlEyUXNTVUZCU1VFc1MwRkJRU3hEUVVGTEsyeENMRXRCUVVzc1NVRkJTUzlzUWl4TFFVRkJMRU5CUVVzcmJFSXNTMEZCU3l4RFFVRkRReXhKUVVGSkxFVkJRVVU3UVVGRGFrTm9iVUlzVVVGQlFVRXNTMEZCUVN4RFFVRkxLMnhDTEV0QlFVc3NRMEZCUTBNc1NVRkJTU3hGUVVGRkxFTkJRVUU3UVVGRGJrSXNUMEZCUVR0TlFVVkJhRzFDTEV0QlFVRXNRMEZCUzJsdFFpeG5Ra0ZCWjBJc1JVRkJSU3hEUVVGQk8wdEJRM2hDTEVOQlFVRXNRMEZCUVR0QlFVRkJPV3hDTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVVZUTEZOQlFVRXNSVUZCUVN4VlFVRkRiV3BDTEVsQlFVa3NSVUZCTUVJN1FVRkJRU3hOUVVGQkxFbEJRWGhDSzBNc1YwRkJWeXhIUVVGQmNubENMRk5CUVVFc1EwRkJRV2hITEUxQlFVRXNSMEZCUVN4RFFVRkJMRWxCUVVGblJ5eFRRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRXRCUVVGRExGTkJRVUVzUjBGQlFVUXNVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hIUVVGSExFdEJRVXNzUTBGQlFUdE5RVU5zUTIxTkxFdEJRVUVzUTBGQlMzTkNMRkZCUVZFc1EwRkRXRHRCUVVORk5taENMRkZCUVVGQkxFbEJRVWtzUlVGQlJVRXNTVUZCU1R0UlFVTldiR01zV1VGQldTeEZRVU5XYTJNc1NVRkJTU3hKUVVGSmJtcENMRXRCUVVFc1EwRkJTMDBzUzBGQlN5eERRVUZETm1sQ0xFbEJRVWtzUjBGRGJrSnVha0lzUzBGQlFTeERRVUZMVFN4TFFVRkxMRU5CUVVNeVJ5eFpRVUZaTEVkQlEzWkNha2dzUzBGQlFTeERRVUZMYlcxQ0xHZENRVUZuUWl4RlFVRkZMRU5CUVVOc1ppeFpRVUZaTzBGQlF6RkRiV1lzVVVGQlFVRXNiVUpCUVcxQ0xFVkJRVVZETERaQ1FVRkJRVHRCUVVOMlFpeFBRVUZETEVWQlEwUXNXVUZCVFR0UlFVTktMRWxCUVVrc1EwRkJRMnhFTEVsQlFVa3NSVUZCUlR0QlFVTlVibXBDTEZWQlFVRkJMRXRCUVVFc1EwRkJTM05DTEZGQlFWRXNRMEZEV0N4VlFVRkRjMVVzU1VGQlNTeEZRVUZCTzFsQlFVRXNUMEZCVFR0QlFVTlVaMUVzWTBGQlFVRXNUMEZCVHl4RlFVRkZUU3hYUVVGWExFZEJRVWQwVVN4SlFVRkpMRU5CUVVOblVTeFBRVUZQTEVkQlFVY3NTMEZCUVR0aFFVTjJReXhEUVVGQk8wRkJRVUVzVjBGQlF5eEZRVU5HTEZsQlFVMDdRVUZEU2l4WlFVRkJMRU5CUVVOTkxGZEJRVmNzU1VGQlNXeHRRaXhMUVVGQkxFTkJRVXR6YlVJc1QwRkJUeXhGUVVGRkxFTkJRVUU3V1VGRk9VSjBiVUlzUzBGQlFTeERRVUZMYzBJc1VVRkJVU3hEUVVGRE8wRkJRVVZwYkVJc1kwRkJRVUVzVlVGQlZTeEZRVUZGTEVsQlFVRTdRVUZCU3l4aFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOeVF5eFhRVU5HTEVOQlFVTXNRMEZCUVR0QlFVTklMRk5CUVVFN1FVRkRSaXhQUVVOR0xFTkJRVU1zUTBGQlFUdExRVU5HTEVOQlFVRXNRMEZCUVR0SlFVRkJjRzFDTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVOVExGTkJRVUVzUlVGQlFTeFpRVUZCTzBGQlFVRXNUVUZCUVN4UFFVRk5ka1VzVFVGQlRTeERRVUZEZFVVc1MwRkJRU3hEUVVGTFRTeExRVUZMTEVOQlFVTXlSeXhaUVVGWkxFTkJRVU1zUTBGQlFUdEJRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJPMGxCUVVFNVJ5eGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZPVUlzWjBKQlFVRXNSVUZCUVN4WlFVRkJPMEZCUVVFc1RVRkJRU3hQUVVObVFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU56TUVJc1NVRkJTU3hMUVVGTGNuWkNMRk5CUVZNc1IwRkRla0pyVFN4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUTBGQlF6WnBRaXhKUVVGSkxFbEJRVWtzUTBGQlEyNXFRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOcGVrSXNVVUZCVVN4SlFVRkpMRU5CUVVNNWFFSXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETWpOQ0xGRkJRVkVzUjBGREwwUjRiVUlzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGN6QkNMRWxCUVVrc1EwRkJRVHRCUVVGQkxFdEJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRm9ha0lzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSVkFzWVVGQlFTeEZRVUZCTEZWQlFVTlVMRXRCUVVzc1JVRkJTenRCUVVOMlFpeE5RVUZCTEVsQlFVa3NRMEZCUTFNc1MwRkJRU3hEUVVGTFRTeExRVUZMTEVOQlFVTnhiRUlzV1VGQldTeEZRVUZGTzBGQlF6VkNNMnhDTEZGQlFVRkJMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTI5MVFpeFBRVUZQTEVOQlFVTXhaQ3hMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU42UWl4UlFVRkJMRWxCUVVrc1EwRkJRMU1zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE5ETkNMR3RDUVVGclFpeEpRVUZKTEVOQlFVTjZiVUlzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1qTkNMRkZCUVZFc1JVRkJSVHRCUVVNeFJIaHRRaXhWUVVGQlFTeExRVUZCTEVOQlFVdHpSU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVRTdRVUZEY0VJc1UwRkJRVHRCUVVOR0xFOUJRVUU3VFVGRFFYUkZMRXRCUVVFc1EwRkJTM05DTEZGQlFWRXNRMEZCUXp0QlFVRkZjMnRDTEZGQlFVRkJMRTlCUVU4c1JVRkJSU3hKUVVGQk8wRkJRVXNzVDBGQlF5eERRVUZETEVOQlFVRTdTMEZEYWtNc1EwRkJRU3hEUVVGQk8wbEJRVUY2YkVJc1pVRkJRU3hEUVVGQlNDeExRVUZCTEVWQlFVRXNjMEpCUVVFc1JVRkZjMElzV1VGQlRUdEJRVU16UWp0TlFVTkJMRWxCUVVsQkxFdEJRVUVzUTBGQlN6WnNRaXh0UWtGQmJVSXNSVUZCUlR0UlFVTTFRamRzUWl4TFFVRkJMRU5CUVVzd2JVSXNkMEpCUVhkQ0xFVkJRVVVzUTBGQlFUdEJRVU5xUXl4UFFVRkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdE5RVU5CTVcxQ0xFdEJRVUVzUTBGQlMzTkNMRkZCUVZFc1EwRkJRenRCUVVGRmNXdENMRkZCUVVGQkxGbEJRVmtzUlVGQlJTeEpRVUZCTzBGQlFVc3NUMEZCUXl4RlFVRkZMRmxCUVUwN1FVRkRNVU16YkVJc1VVRkJRVUVzUzBGQlFTeERRVUZMTm14Q0xHMUNRVUZ0UWl4SFFVRkhZeXhWUVVGVkxFTkJRVU1zV1VGQlRUdFZRVU14UXpOdFFpeExRVUZCTEVOQlFVczBiVUlzVVVGQlVTeEZRVUZGTEVOQlFVRTdWVUZEWmpWdFFpeExRVUZCTEVOQlFVdHpRaXhSUVVGUkxFTkJRVU03UVVGQlJYRnJRaXhaUVVGQlFTeFpRVUZaTEVWQlFVVXNTMEZCUVR0QlFVRk5MRmRCUVVNc1EwRkJReXhEUVVGQk8wRkJRM2hETEZOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTBvc1QwRkJReXhEUVVGRExFTkJRVUU3UzBGRFNDeERRVUZCTEVOQlFVRTdTVUZCUVhoc1FpeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hyUWtGQlFTeEZRVVZyUWl4WlFVRk5PMEZCUTNaQ09HeENMRTFCUVVGQkxGbEJRVmtzUTBGQlF6bHNRaXhMUVVGQkxFTkJRVXMyYlVJc2FVSkJRV2xDTEVOQlFVTXNRMEZCUVR0TlFVTndRemR0UWl4TFFVRkJMRU5CUVVzMmJVSXNhVUpCUVdsQ0xFZEJRVWNzU1VGQlNTeERRVUZCTzB0QlF6bENMRU5CUVVFc1EwRkJRVHRKUVVGQk1XMUNMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVUZCTEdsQ1FVRkJMRVZCUldsQ0xGbEJRVTA3VFVGRGRFSkJMRXRCUVVFc1EwRkJTMmx0UWl4blFrRkJaMElzUlVGQlJTeERRVUZCTzBGQlEzWkNhbTFDTEUxQlFVRkJMRXRCUVVFc1EwRkJTelp0UWl4cFFrRkJhVUlzUjBGQlIwWXNWVUZCVlN4RFFVRkRMRmxCUVVFN1FVRkJRU3hSUVVGQkxFOUJRVTB6YlVJc1MwRkJRU3hEUVVGTE5HMUNMRkZCUVZFc1JVRkJSU3hEUVVGQk8wRkJRVUVzVDBGQlFTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMHRCUXpsRUxFTkJRVUVzUTBGQlFUdEpRVUZCZW0xQ0xHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMSEZDUVVGQkxFVkJSWEZDTEZsQlFVMDdUVUZETVVKQkxFdEJRVUVzUTBGQlMybHRRaXhuUWtGQlowSXNSVUZCUlN4RFFVRkJPMHRCUTNoQ0xFTkJRVUVzUTBGQlFUdEJRVUZCT1d4Q0xFbEJRVUZCTEdWQlFVRXNRMEZCUVVnc1MwRkJRU3hGUVVWWkxGbEJRVUVzUlVGQlFTeFZRVUZEVkN4TFFVRkxMRVZCUVVzN1FVRkRkRUlzVFVGQlFTeEpRVUZKTEVOQlFVTlRMRXRCUVVFc1EwRkJTMDBzUzBGQlN5eERRVUZETm1sQ0xFbEJRVWtzU1VGQlNXNXFRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOemQwSXNWVUZCVlN4SlFVRkpibVlzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGVYZENMR0ZCUVdFc1JVRkJSVHRCUVVONlJYUm1MRkZCUVVGQkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMmswUWl4TlFVRk5MRU5CUVVOMmJrSXNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkRNVUlzVDBGQlFUdE5RVVZCVXl4TFFVRkJMRU5CUVV0elFpeFJRVUZSTEVOQlFVTTdRVUZCUlhOclFpeFJRVUZCUVN4UFFVRlBMRVZCUVVVc1MwRkJRVHRCUVVGTkxFOUJRVU1zUTBGQlF5eERRVUZCTzB0QlEyeERMRU5CUVVFc1EwRkJRVHRCUVVGQmVteENMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVVTBRaXcwUWtGQlFTeEZRVUZCTEZWQlFVTlVMRXRCUVVzc1JVRkJTenRCUVVOMFF5eE5RVUZCTEVsQlFVa3NRMEZCUTFNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRjMk1zVFVGQlRTeEZRVUZGTzBGQlEzUkNia3dzVVVGQlFVRXNTMEZCUVN4RFFVRkxjMFVzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUTNKQ0xFOUJRVUU3UVVGRFFYUkZMRTFCUVVGQkxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM0ZWTEdOQlFXTXNRMEZCUXpORUxFdEJRVXNzUTBGQlF5eERRVUZCTzBGQlEyaERMRTFCUVVFc1NVRkJTVk1zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGMzZENMRlZCUVZVc1JVRkJSVHRSUVVONlFqVm1MRXRCUVVzc1EwRkJRMmRJTEdOQlFXTXNSVUZCUlN4RFFVRkJPMEZCUTNoQ0xFOUJRVUU3UzBGRFJDeERRVUZCTEVOQlFVRTdTVUZCUVhCSExHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMR05CUVVFc1JVRkZZeXhaUVVGblFqdEJRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJiMFFzU1VGQlFTeEhRVUZCZGxBc1UwRkJRU3hEUVVGQmFFY3NUVUZCUVN4RlFVRmFhelZDTEU5QlFVOHNSMEZCUVc0MlFpeEpRVUZCUVN4TFFVRkJMRU5CUVVGM1Z5eEpRVUZCTEVkQlFVRkZMRWxCUVVFc1IwRkJRU3hEUVVGQkxFVkJRVUZCTEVsQlFVRXNSMEZCUVVZc1NVRkJRU3hGUVVGQlJTeEpRVUZCTEVWQlFVRXNSVUZCUVR0QlFVRlFlV3BDTEZGQlFVRkJMRTlCUVU4c1EwRkJRWHBxUWl4SlFVRkJMRU5CUVVGNlVDeEhRVUZCUVN4VFFVRkJMRU5CUVVGNVVDeEpRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJMRTlCUVVFN1FVRkRlRUlzVFVGQlFTeEpRVUZKTDBRc1MwRkJTeXhIUVVGSGQyNUNMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdEJRVU4wUWl4TlFVRkJMRWxCUVVrdmJVSXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYlRSQ0xGZEJRVmNzUlVGQlJUdFJRVU14UW1odVFpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU50TkVJc1YwRkJWeXhEUVVGRE4yTXNTMEZCU3l4RFFVRkJia3NzUzBGQlFTeEZRVUZQSzIxQ0xFOUJRVThzUTBGQlF5eERRVUZCTzBGQlF6TkRMRkZCUVVFc1NVRkRSU3hQUVVGUGVHNUNMRXRCUVVzc1EwRkJRekJ1UWl4clFrRkJhMElzUzBGQlN5eFZRVUZWTEVsQlF6bERNVzVDTEV0QlFVc3NRMEZCUXpCdVFpeHJRa0ZCYTBJc1JVRkJSU3hGUVVNeFFqdEJRVU5CTEZWQlFVRXNUMEZCUVR0QlFVTkdMRk5CUVVFN1FVRkRSaXhQUVVGQk8wMUJRMEZxYmtJc1MwRkJRU3hEUVVGTGMwSXNVVUZCVVN4RFFVRkRPMEZCUTFwcGJFSXNVVUZCUVVFc1ZVRkJWU3hGUVVGRmFHNUNMRXRCUVVzc1EwRkJRMnRGTEUxQlFVMHNRMEZCUXpsWUxFdEJRVXM3UVVGRE9VSjVOa0lzVVVGQlFVRXNiVUpCUVcxQ0xFVkJRVVZqTERCQ1FVRkJRVHRCUVVOMlFpeFBRVUZETEVOQlFVTXNRMEZCUVR0QlFVTkdMRTFCUVVFc1NVRkJTVzQxUWl4SlFVRkpMRWRCUVVjM1FpeFRRVUZUTEVOQlEyeENjVlFzUzBGQlN5eERRVUZEYTBVc1RVRkJUU3hEUVVGRE9WZ3NTMEZCU3l4RlFVTnNRbkZWTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6RkRMRlZCUVZVc1JVRkRja0kyVkN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjZReXhOUVVGTkxFVkJRMnBDTkZRc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRlRU1zWVVGQllTeEZRVU40UWpKVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM1pETEU5QlEySXNRMEZCUXl4RFFVRkJPMEZCUTBRN1RVRkRRU3hKUVVORk1GUXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjI1Q0xHdENRVUZyUWl4SlFVTTNRbXBYTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMVpMRkZCUVZFc1NVRkRia0pxV2l4SlFVRkpMRWxCUTBvc1EwRkJRelJFTEZOQlFWTXNRMEZCUXpWRUxFbEJRVWtzUlVGQlJXbFRMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTIxWkxGRkJRVkVzUTBGQlF5eEZRVU55UXp0UlFVTkJhbG9zU1VGQlNTeEhRVUZIWjA4c1IwRkJSeXhEUVVGRGFVVXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYlZrc1VVRkJVU3hGUVVGRk8wRkJRemxDYldkQ0xGVkJRVUZCTEV0QlFVc3NSVUZCUlhKM1FpeFJRVUZSTEVOQlFVTXZTU3hKUVVGSkxFTkJRVU03UVVGRGNrSnhOVUlzVlVGQlFVRXNUMEZCVHl4RlFVRkZjbmRDTEZWQlFWVXNRMEZCUTJoS0xFbEJRVWtzUTBGQlF6dFZRVU42UWpCUkxFOUJRVThzUlVGQlJWb3NWVUZCVlN4RFFVRkRPVkFzU1VGQlNTeERRVUZCTzBGQlF6RkNMRk5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zVDBGQlFUdE5RVU5CTEVsQlFVbEJMRWxCUVVrc1NVRkJTU3hEUVVGRGQxSXNTMEZCU3l4RFFVRkRhMFVzVFVGQlRTeERRVUZET1Znc1MwRkJTeXhGUVVGRk8xRkJReTlDY1ZVc1MwRkJRU3hEUVVGTGNXNUNMRmRCUVZjc1EwRkJRM1ExUWl4SlFVRkpMRVZCUVVWM1VpeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVFN1FVRkRja01zVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0SlFVRkJXU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGWXl4alFVRkJMRVZCUVVFc1ZVRkJRMnBUTEVsQlFVa3NSVUZCUlhkU0xFdEJRVXNzUlVGQlJYVmhMR1ZCUVdVc1JVRkJTenRCUVVNdlF5eE5RVUZCTEVsQlFVazVXaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNd1pTeHRRa0ZCYlVJc1NVRkJTU3hEUVVGRGRrNHNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYVhSQ0xHTkJRV01zUlVGQlJUdEJRVU5vUlR0QlFVTkJPMUZCUTBFNVlpeExRVUZCTEVOQlFVdHpia0lzYjBKQlFXOUNMRVZCUVVVc1EwRkJRVHRCUVVNM1FpeFBRVUZCTzBGQlEwRXNUVUZCUVN4SlFVRkpkRzVDTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMDBRaXhYUVVGWExFVkJRVVU3UVVGRE1VSm9ia0lzVVVGQlFVRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYlRSQ0xGZEJRVmNzUTBGQlEzcHVRaXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU12UWl4UFFVRkJPMDFCUTBGVExFdEJRVUVzUTBGQlMzRnVRaXhYUVVGWExFTkJRVU4wTlVJc1NVRkJTU3hGUVVGRmQxSXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSWFZoTEdWQlFXVXNRMEZCUXl4RFFVRkJPMEZCUTNKRUxFMUJRVUVzU1VGQlNUbGFMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpBMFFpeGpRVUZqTEVWQlFVVTdVVUZETjBKMmJrSXNTMEZCUVN4RFFVRkxjMElzVVVGQlVTeERRVUZETzBGQlFVVTBXU3hWUVVGQlFTeDFRa0ZCZFVJc1JVRkJSU3hKUVVGQk8wRkJRVXNzVTBGQlF5eERRVUZETEVOQlFVRTdRVUZEYkVRc1QwRkJRVHRCUVVOQkxFMUJRVUVzU1VGQlNTeERRVUZEYkdFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNR1VzYlVKQlFXMUNMRWxCUVVsMlRpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5wZEVJc1kwRkJZeXhGUVVGRk8wRkJRMmhGT1dJc1VVRkJRVUVzUzBGQlFTeERRVUZMYTFFc1pVRkJaU3hEUVVGRGJtbENMRWxCUVVrc1EwRkJReXhEUVVGQk8wOUJRek5DTEUxQlFVMHNTVUZCU1N4RFFVRkRhVk1zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGMyTXNUVUZCVFN4RlFVRkZPMEZCUXpkQ0xGRkJRVUVzU1VGQlNTeERRVUZEYmt3c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRhVm9zV1VGQldTeEZRVUZGTzBGQlF6VkNPVWdzVlVGQlFVRXNTMEZCUVN4RFFVRkxjMFVzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUTNKQ0xGTkJRVUU3UVVGRlFTeFJRVUZCTEVsQlFVRTRReXhYUVVGQkxFZEJRU3RDY0Vnc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3p0VlFVRnFRMFlzVTBGQlV5eEhRVUZCZVZrc1YwRkJRU3hEUVVGVWVsa3NVMEZCVXp0VlFVRkZReXhQUVVGUExFZEJRVUYzV1N4WFFVRkJMRU5CUVZCNFdTeFBRVUZQTEVOQlFVRTdRVUZGTVVJc1VVRkJRU3hKUVVGSlJDeFRRVUZUTEVsQlFVa3NRMEZCUTBNc1QwRkJUeXhKUVVGSkxFTkJRVU56VVN4WlFVRlpMRU5CUVVOdVVpeEpRVUZKTEVWQlFVVlpMRk5CUVZNc1EwRkJReXhGUVVGRk8wRkJRek5FY1ZJc1ZVRkJRVUVzUzBGQlFTeERRVUZMYzBVc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBGQlEzSkNMRk5CUVVFN1FVRkRSaXhQUVVGQk8wdEJRMFFzUTBGQlFTeERRVUZCTzBsQlFVRnVSU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZCUVN4aFFVRkJMRVZCUldFc1ZVRkJRMnBUTEVsQlFVa3NSVUZCUlhkU0xFdEJRVXNzUlVGQlJXbHZRaXhUUVVGVExFVkJRVVV4VGl4bFFVRmxMRVZCUVVzN1RVRkRla1FzU1VGQlNUZFVMRmRCUVZjc1IwRkJSMnhaTEVsQlFVa3NRMEZCUVR0QlFVVjBRaXhOUVVGQkxFbEJRVWxwVXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTm5jMElzWTBGQll5eEZRVUZGTzBGQlF6ZENMRkZCUVVFc1NVRkRSVFZWTEZkQlFWY3NTMEZCU3l4SlFVRkpMRWxCUTNCQ2FsRXNZMEZCWXl4RFFVRkRXaXhQUVVGUExFTkJRVU0yVVN4WFFVRlhMRU5CUVVNc1JVRkJSV3BITEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF5eEZRVU5vUkR0QlFVTkJMRlZCUVVFc1QwRkJRVHRCUVVOR0xGTkJRVUU3UVVGRFJpeFBRVUZETEUxQlFVMHNTVUZCU1cxU0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekpyUWl4dFFrRkJiVUlzUlVGQlJUdEJRVU42UXl4UlFVRkJMRWxCUVVsMlRpeFhRVUZYTEV0QlFVc3NTVUZCU1N4SlFVRkpibElzWlVGQlpTeERRVUZEYlZJc1YwRkJWeXhGUVVGRmFrY3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEY0VVc1ZVRkJRU3hQUVVGQk8wRkJRMFlzVTBGQlFUdEJRVU5HTEU5QlFVTXNUVUZCVFR0QlFVTk1MRkZCUVVFc1NVRkJTVzlZTEZkQlFWY3NTMEZCU3l4SlFVRkpMRWxCUVVsMFV5eGhRVUZoTEVOQlFVTnpVeXhYUVVGWExFVkJRVVZxUnl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVTnNSU3hWUVVGQkxFOUJRVUU3UVVGRFJpeFRRVUZCTzBGQlEwWXNUMEZCUVR0QlFVVkJMRTFCUVVFc1NVRkJRWGxaTEZsQlFVRXNSMEZUU1hSSUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzN1VVRlNXamhTTEZGQlFWRXNSMEZCUVRKSExGbEJRVUVzUTBGQlVqTkhMRkZCUVZFN1VVRkRVbTFJTEZsQlFWa3NSMEZCUVZJc1dVRkJRU3hEUVVGYVVTeFpRVUZaTzFGQlExcHVXaXhUUVVGVExFZEJRVUV5V1N4WlFVRkJMRU5CUVZReldTeFRRVUZUTzFGQlExUkRMRTlCUVU4c1IwRkJRVEJaTEZsQlFVRXNRMEZCVURGWkxFOUJRVTg3VVVGRFVHbFpMR1ZCUVdVc1IwRkJRVk1zV1VGQlFTeERRVUZtVkN4bFFVRmxPMUZCUTJaRExHRkJRV0VzUjBGQlFWRXNXVUZCUVN4RFFVRmlVaXhoUVVGaE8xRkJRMkoyVUN4UFFVRlBMRWRCUVVFclVDeFpRVUZCTEVOQlFWQXZVQ3hQUVVGUE8xRkJRMUJyZDBJc1UwRkJVeXhIUVVGQmJtZENMRmxCUVVFc1EwRkJWRzFuUWl4VFFVRlRMRU5CUVVFN1RVRkhXQ3hKUVVORkxFTkJRVU0xTVVJc1QwRkJUeXhEUVVGRGJVOHNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYlZrc1VVRkJVU3hGUVVGRlppeFhRVUZYTEVOQlFVTXNTVUZETVVOcVJ5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU0yTkVJc1dVRkJXU3hKUVVOMlFqVm1MRmxCUVZrc1NVRkRXbXBDTEdWQlFXVXNSVUZEWmp0UlFVTkJMRWxCUVVsYUxGZEJRVmNzUzBGQlN5eEpRVUZKTEVWQlFVVTdRVUZEZUVJc1ZVRkJRU3hKUVVORmFrY3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYlZrc1VVRkJVU3hMUVVOc1FpeERRVUZEZDJkQ0xGTkJRVk1zU1VGRFVpeERRVUZEZUc1Q0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMmwwUWl4alFVRmpMRWxCUTNwQ0xFTkJRVU01WWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZia0lzYTBKQlFXdENMRWxCUXpsQ0xFTkJRVU5xVnl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjVkMElzWVVGQll5eERRVUZETEVWQlF5OUNPMEZCUTBGeVdpeFpRVUZCUVN4WFFVRlhMRWRCUVVjMVZ5eFBRVUZQTEVOQlFVTTBWeXhYUVVGWExFVkJRVVU3WTBGRGFrTjZWeXhKUVVGSkxFVkJRVVZ6U0N4UlFVRlJMRU5CUVVOclNpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU50V1N4UlFVRlJMRU5CUVVNN1kwRkRia04wV0N4TlFVRk5MRVZCUVVWeFNDeFZRVUZWTEVOQlFVTnBTaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdFdTeFJRVUZSTEVOQlFVTTdRVUZEZGtOd1dDeGpRVUZCUVN4TlFVRk5MRVZCUVVWcFR5eFZRVUZWTEVOQlFVTnRReXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdFdTeFJRVUZSTEVOQlFVRTdRVUZEZUVNc1lVRkJReXhEUVVGRExFTkJRVUU3UVVGRFNpeFhRVUZCT3p0QlFVVkJPMEZCUTBFc1ZVRkJRU3hKUVVORkxFTkJRVU4zWjBJc1UwRkJVeXhMUVVOVWVHNUNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJsMFFpeGpRVUZqTEVsQlFVazVZaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdmJrSXNhMEpCUVd0Q0xFTkJRVU1zUlVGRE5VUTdRVUZEUVN4WlFVRkJMRWxCUVVreFpTeFBRVUZQTEVWQlFVVTdRVUZEV0RCUExHTkJRVUZCTEZkQlFWY3NSMEZCUnpWWExFOUJRVThzUTBGQlF6UlhMRmRCUVZjc1JVRkJSVHRCUVVOcVEzcFhMR2RDUVVGQlFTeEpRVUZKTEVWQlFVVXJTQ3hQUVVGUExFTkJRVU5VTEZGQlFWRXNSVUZCUlR0QlFVTjRRbkJJTEdkQ1FVRkJRU3hOUVVGTkxFVkJRVVUyU0N4UFFVRlBMRU5CUVVOU0xGVkJRVlVzUlVGQlJUdEJRVU0xUW01SUxHZENRVUZCUVN4TlFVRk5MRVZCUVVVeVNDeFBRVUZQTEVOQlFVTnpSeXhWUVVGVkxFVkJRVU03UVVGRE4wSXNaVUZCUXl4RFFVRkRMRU5CUVVFN1FVRkRTaXhoUVVGQk8wRkJRMFlzVjBGQlFUdEJRVVZCTEZWQlFVRXNTVUZCU1N4RFFVRkRiVU1zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGMyTXNUVUZCVFN4RlFVRkZPMWxCUTNSQ2Jrd3NTMEZCUVN4RFFVRkxjMElzVVVGQlVTeERRVUZETzBGQlExb3lSaXhqUVVGQlFTeFpRVUZaTEVWQlFVVm9RaXhYUVVGQlFUdEJRVU5vUWl4aFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOS0xGZEJRVUU3UVVGRFFTeFZRVUZCTEVsQlFVa3NRMEZCUTJwSExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRemcwUWl4clFrRkJhMElzUlVGQlJUdFpRVU5zUXpOdVFpeExRVUZCTEVOQlFVdHpRaXhSUVVGUkxFTkJRVU03UVVGQlJYZFpMR05CUVVGQkxHVkJRV1VzUlVGQlJVRXNaVUZCUVVFN1FVRkJaMElzWVVGQlF5eERRVUZETEVOQlFVRTdRVUZEY2tRc1YwRkJRVHRCUVVOR0xGTkJRVUU3UVVGRFFTeFJRVUZCTEVsQlFVbG9VeXhaUVVGWkxFVkJRVVU3UVVGRGFFSXNWVUZCUVN4SlFVRk5PR1lzVVVGQlVTeEhRVUZITEVOQlFVTnFOVUlzVTBGQlV5eEpRVUZKTEVOQlFVTkRMRTlCUVU4c1EwRkJRVHRCUVVOMlF5eFZRVUZCTEVsQlFVMXBOVUlzWVVGQllTeEhRVUZIYkRWQ0xGTkJRVk1zU1VGQlNTeERRVUZEUXl4UFFVRlBMRU5CUVVFN1FVRkRNME1zVlVGQlFTeEpRVUZOYXpWQ0xHRkJRV0VzUjBGQlIyNDFRaXhUUVVGVExFbEJRVWxETEU5QlFVOHNRMEZCUVR0QlFVTXhReXhWUVVGQkxFbEJRVWxuTlVJc1VVRkJVU3hGUVVGRk8xbEJRMXBxYmtJc1VVRkJVU3hEUVVGRExFTkJRVU56Uml4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRExFVkJRVVV4Unl4TFFVRkxMRU5CUVVNc1EwRkJRVHRYUVVOeVF5eE5RVUZOTEVsQlFVbHpiMElzWVVGQllTeEZRVUZGTzFsQlEzaENMRWxCUVVrMWFFSXNWMEZCVnl4TFFVRkxMRWxCUVVrc1JVRkJSVHRqUVVONFFuUkdMRkZCUVZFc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNSVUZCUlhCQ0xFdEJRVXNzUTBGQlF5eERRVUZCTzJGQlF6bENMRTFCUVUwc1NVRkJTVXdzV1VGQldTeERRVUZESzBjc1YwRkJWeXhGUVVGRmRGZ3NVMEZCVXl4RFFVRkRMRVZCUVVVN1FVRkRMME1zWTBGQlFTeEpRVUZKT0RSQ0xGTkJRVk1zUlVGQlJUdG5Ra0ZEWWpsdFFpeFJRVUZSTEVOQlFVTXNRMEZCUTNOR0xGZEJRVmNzUlVGQlJYUllMRk5CUVZNc1EwRkJReXhGUVVGRk5GRXNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkRNME1zWlVGQlF5eE5RVUZOTzJkQ1FVTk1iMElzVVVGQlVTeERRVUZETEVOQlFVTnpSaXhYUVVGWExFVkJRVVVzU1VGQlNTeERRVUZETEVWQlFVVXhSeXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU4wUXl4bFFVRkJPMEZCUTBZc1lVRkJReXhOUVVGTk8yTkJRMHh2UWl4UlFVRlJMRU5CUVVNc1EwRkJRMmhUTEZOQlFWTXNSVUZCUlhOWUxGZEJRVmNzUTBGQlF5eEZRVUZGTVVjc1MwRkJTeXhEUVVGRExFTkJRVUU3UVVGRE0wTXNZVUZCUVR0QlFVTkdMRmRCUVVFN1FVRkRRU3hWUVVGQkxFbEJRVWwxYjBJc1lVRkJZU3hGUVVGRk8xbEJRMnBDYm01Q0xGRkJRVkVzUTBGQlF5eERRVUZEYzBZc1YwRkJWeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTVVjc1MwRkJTeXhEUVVGRExFTkJRVUU3UVVGRGRFTXNWMEZCUVR0VFFVTkVMRTFCUVUwc1NVRkJTWE5JTEdWQlFXVXNSVUZCUlR0VlFVTXhRaXhKUVVGSkxFVkJRVU5ETEdGQlFXRXNTMEZCWWtFc1NVRkJRVUVzU1VGQlFVRXNZVUZCWVN4bFFVRmlRU3hoUVVGaExFTkJRVVZxV2l4TlFVRk5MRU5CUVVVc1JVRkJRVHRCUVVNeFFqaFRMRmxCUVVGQkxGRkJRVkVzUTBGQlF5eERRVUZEYzBZc1YwRkJWeXhEUVVGRExFVkJRVVV4Unl4TFFVRkxMRU5CUVVNc1EwRkJRVHRCUVVOb1F5eFhRVUZETEUxQlFVMDdRVUZEVEN4WlFVRkJMRWxCUVUxM2IwSXNORUpCUVRSQ0xFZEJRVWRxYUVJc1lVRkJZU3hEUVVGRGVGTXNTVUZCU1N4RFFVTnlSQ3hWUVVGRE1IcENMRmxCUVZrc1JVRkJRVHRCUVVGQkxHTkJRVUVzVDBGQlMzSXlRaXhUUVVGVExFTkJRVU54TWtJc1dVRkJXU3hGUVVGRkwyaENMRmRCUVZjc1EwRkJReXhEUVVGQk8wRkJRVUVzWVVGRGVFUXNRMEZCUXl4RFFVRkJPMEZCUlVRc1dVRkJRU3hKUVVGSk9HaENMRFJDUVVFMFFpeEZRVUZGTzBGQlEyaERMR05CUVVFc1NVRkJUVVVzVTBGQlV5eEhRVUZIYm1oQ0xHRkJRV0VzUTBGQlEycE5MRTFCUVUwc1EwRkRjRU1zVlVGQlEyMTBRaXhaUVVGWkxFVkJRVUU3UVVGQlFTeG5Ra0ZCUVN4UFFVRkxMRU5CUVVOeU1rSXNVMEZCVXl4RFFVRkRjVEpDTEZsQlFWa3NSVUZCUlM5b1FpeFhRVUZYTEVOQlFVTXNRMEZCUVR0QlFVRkJMR1ZCUTNwRUxFTkJRVU1zUTBGQlFUdEJRVVZFZEVZc1kwRkJRVUVzVVVGQlVTeERRVUZEYzI1Q0xGTkJRVk1zUlVGQlJURnZRaXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU0xUWl4aFFVRkRMRTFCUVUwN1kwRkRURzlDTEZGQlFWRXNRMEZCUVN4RlFVRkJMRU5CUVVGd1V5eE5RVUZCTEVOQlFVRXlUeXhyUWtGQlFTeERRVUZMTkVvc1lVRkJZU3hEUVVGRllpeEZRVUZCUVN4RFFVRkJRU3hYUVVGWExFTkJRVWN4Unl4RFFVRkJRU3hGUVVGQlFTeExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVTnNSQ3hoUVVGQk8wRkJRMFlzVjBGQlFUdEJRVU5HTEZOQlFVTXNUVUZCVFR0QlFVTk1iMElzVlVGQlFVRXNVVUZCVVN4RFFVRkRjMFlzVjBGQlZ5eEZRVUZGTVVjc1MwRkJTeXhEUVVGRExFTkJRVUU3UVVGRE9VSXNVMEZCUVR0QlFVTkdMRTlCUVVFN1RVRkZRU3hKUVVGSkxFTkJRVU5wYjBJc1UwRkJVeXhGUVVGRk8xRkJRMlI0YmtJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkMVlzVVVGQlVTeERRVUZETkVJc1YwRkJWeXhGUVVGRk1VY3NTMEZCU3l4RFFVRkRMRU5CUVVFN1VVRkRka05UTEV0QlFVRXNRMEZCUzNOQ0xGRkJRVkVzUTBGQlF6dEJRVUZGYVd4Q0xGVkJRVUZCTEZWQlFWVXNSVUZCUlN4SlFVRkJPMEZCUVVzc1UwRkJReXhEUVVGRExFTkJRVUU3UVVGRGNrTXNUMEZCUVR0TFFVTkVMRU5CUVVFc1EwRkJRVHRCUVVWRU8wRkJRVUZ3YlVJc1NVRkJRVUVzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUTJ0Q0xHbENRVUZCTEVWQlFVRXNWVUZCUTJwVExFbEJRVWtzUlVGQlN6dE5RVU14UWl4SlFVRk5iVFpDTEZWQlFWVXNSMEZCUnl4UFFVRlBiRzlDTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzWkRMRTlCUVU4c1MwRkJTeXhYUVVGWExFTkJRVUU3VFVGRE5VUXNTVUZCVFRZM1FpeFZRVUZWTEVkQlFVY3NUMEZCVDI1dlFpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5yUml4UFFVRlBMRXRCUVVzc1YwRkJWeXhEUVVGQk8wMUJRelZFTEVsQlFVbHhNRUlzYjBKQlFXOUNMRWRCUVVjc1NVRkJTU3hEUVVGQk8wRkJReTlDTEUxQlFVRXNTVUZCU1hJMlFpeEpRVUZKTEVWQlFVVTdRVUZEVWl4UlFVRkJMRWxCUVUxek5rSXNZMEZCWXl4SFFVRkhhRFJDTEZWQlFWVXNRMEZCUTNSRExFbEJRVWtzUTBGQlF5eERRVUZCTzFGQlEzWkRMRWxCUVVsdE5rSXNWVUZCVlN4SlFVRkpReXhWUVVGVkxFVkJRVVU3UVVGRE5VSTdRVUZEUVVNc1ZVRkJRVUVzYjBKQlFXOUNMRWRCUVVkeU1rSXNXVUZCV1N4RFFVTnFRMmhGTEVsQlFVa3NSVUZEU21sVExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM1pETEU5QlFVOHNSVUZEYkVJd1ZDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5yUml4UFFVTmlMRU5CUVVNc1EwRkJRVHRUUVVOR0xFMUJRVTBzU1VGQlNXMHdRaXhWUVVGVkxFVkJRVVU3VlVGRGNrSXNTVUZCVFVrc2FVSkJRV2xDTEVkQlFVZHFORUlzVlVGQlZTeERRVUZETWxBc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRka01zVDBGQlR5eERRVUZETEVOQlFVRTdRVUZEZUVRNE4wSXNWVUZCUVVFc2IwSkJRVzlDTEVkQlEyeENjbkZDTEU5QlFVOHNRMEZCUTJoUkxFbEJRVWtzUlVGQlJYVTJRaXhwUWtGQmFVSXNRMEZCUXl4SlFVTm9RM295UWl4UFFVRlBMRU5CUVVOM01rSXNZMEZCWXl4RlFVRkZReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkJPMU5CUXpkRExFMUJRVTBzU1VGQlNVZ3NWVUZCVlN4RlFVRkZPMVZCUTNKQ0xFbEJRVTFKTEdWQlFXVXNSMEZCUjNBeVFpeFJRVUZSTEVOQlFVTTJUaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOclJpeFBRVUZQTEVOQlFVTXNRMEZCUVR0QlFVTndSSEV3UWl4VlFVRkJRU3h2UWtGQmIwSXNSMEZEYkVKdU5rSXNVVUZCVVN4RFFVRkRSaXhKUVVGSkxFVkJRVVYzTmtJc1pVRkJaU3hEUVVGRExFbEJReTlDTVRKQ0xFOUJRVThzUTBGQlEzY3lRaXhqUVVGakxFVkJRVVZGTEdWQlFXVXNRMEZCUXl4RFFVRkJPMEZCUXpWRExGTkJRVUU3UVVGRFJpeFBRVUZCTzBGQlEwRXNUVUZCUVN4SlFVRkpTQ3h2UWtGQmIwSXNSVUZCUlR0UlFVTjRRbkJ2UWl4TFFVRkJMRU5CUVV0elFpeFJRVUZSTEVOQlFVTTdRVUZEV2pKR0xGVkJRVUZCTEZsQlFWa3NSVUZCUld4YUxFbEJRVUZCTzBGQlEyaENMRk5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0SlFVRkJiMU1zWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUVVFc1owSkJRVUVzUlVGRlowSXNXVUZCVFR0TlFVTnlRa0VzUzBGQlFTeERRVUZMYzBVc1QwRkJUeXhEUVVGRExFTkJRVU4wUlN4TFFVRkJMRU5CUVV0TkxFdEJRVXNzUTBGQlF6WnBRaXhKUVVGSkxFTkJRVU1zUTBGQlFUdExRVU12UWl4RFFVRkJMRU5CUVVFN1FVRkJRV2hxUWl4SlFVRkJRU3hsUVVGQkxFTkJRVUZJTEV0QlFVRXNSVUZGYTBJc2EwSkJRVUVzUlVGQlFTeFZRVUZEY2tvc1NVRkJTU3hGUVVGTE8wRkJRek5DTEUxQlFVRXNTVUZCVFhGUkxGRkJRVkVzUjBGQlIyaElMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTIxWkxGRkJRVkVzUjBGRGFFTm9TQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdFdTeFJRVUZSTEVkQlEyNUNhRWdzUzBGQlFTeERRVUZMZDJ4Q0xHVkJRV1VzUlVGQlJTeERRVUZCTzBGQlF6RkNMRTFCUVVFc1NVRkJTWFptTEZkQlFWY3NSMEZCUjJwSExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjFaTEZGQlFWRXNSMEZEYWtOeVVTeEpRVUZKTEVkQlEwcDBTQ3hQUVVGUExFTkJRVU15V0N4UlFVRlJMRVZCUVVVN1FVRkRhRUo0V0N4UlFVRkJRU3hKUVVGSkxFVkJRVVZ6U0N4UlFVRlJMRU5CUVVOSUxFbEJRVWtzUTBGQlF6dFJRVU53UW1wSUxFMUJRVTBzUlVGQlJYRklMRlZCUVZVc1EwRkJRMG9zU1VGQlNTeERRVUZCTzBGQlEzcENMRTlCUVVNc1EwRkJReXhEUVVGQk8wMUJSVTV4U2l4TFFVRkJMRU5CUVV0elFpeFJRVUZSTEVOQlFVTTdRVUZEV2pKR0xGRkJRVUZCTEZsQlFWa3NSVUZCUldoQ0xGZEJRVUZCTzBGQlEyaENMRTlCUVVNc1EwRkJReXhEUVVGQk8wRkJSVVpxUnl4TlFVRkJRU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNFVpeFJRVUZSTEVOQlFVTnpSaXhYUVVGWExFTkJRVU1zUTBGQlFUdEJRVU5vUXl4TlFVRkJMRWxCUVVscVJ5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU13WlN4dFFrRkJiVUlzUlVGQlJUdFJRVU5zUTNaT0xFdEJRVUVzUTBGQlMzTnVRaXh2UWtGQmIwSXNSVUZCUlN4RFFVRkJPMEZCUXpOQ2RHNUNMRkZCUVVGQkxFdEJRVUVzUTBGQlMzTkZMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU55UWl4UFFVRkJPMEZCUTBFc1RVRkJRU3hKUVVGSmRFVXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZVhkQ0xHRkJRV0VzUlVGQlJUdEJRVU0xUW5SbUxGRkJRVUZCTEV0QlFVRXNRMEZCUzNORkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0QlFVTndRaXhQUVVGQk8wMUJRMEVzU1VGQlNYUkZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTI5dVFpeHJRa0ZCYTBJc1NVRkJTV3BYTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEybDBRaXhqUVVGakxFVkJRVVU3VVVGRE9VUTVZaXhMUVVGQkxFTkJRVXR6UWl4UlFVRlJMRU5CUVVNN1FVRkJSVFJaTEZWQlFVRkJMSFZDUVVGMVFpeEZRVUZGTEVsQlFVRTdRVUZCU3l4VFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOc1JDeFBRVUZCTzAxQlEwRnNZU3hMUVVGQkxFTkJRVXR6UWl4UlFVRlJMRU5CUVVNN1FVRkJSV2xzUWl4UlFVRkJRU3hWUVVGVkxFVkJRVVVzU1VGQlFUdEJRVUZMTEU5QlFVTXNRMEZCUXl4RFFVRkJPMHRCUTNCRExFTkJRVUVzUTBGQlFUdEpRVUZCY0cxQ0xHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVRkJMR05CUVVFc1JVRkZZeXhaUVVGTk8wRkJRMjVDTEUxQlFVRXNTVUZCU1N4RFFVRkRRU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOcGVrSXNVVUZCVVN4SlFVRkpMRU5CUVVNNWFFSXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETWpOQ0xGRkJRVkVzUlVGQlJUdEJRVU5vUkhodFFpeFJRVUZCUVN4TFFVRkJMRU5CUVV0elJTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1FVRkRjRUlzVDBGQlFUdEJRVVZCZEVVc1RVRkJRVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1qVkNMRmxCUVZrc1JVRkJSU3hEUVVGQk8wdEJRekZDTEVOQlFVRXNRMEZCUVR0QlFVRkJjbTlDTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVVZuUWl4blFrRkJRU3hGUVVGQkxGVkJRVU5VTEV0QlFVc3NSVUZCU3p0QlFVTXhRbE1zVFVGQlFVRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYTJRc1UwRkJVeXhEUVVGRGVFMHNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkRNMElzVFVGQlFTeEpRVUZOSzBjc1VVRkJVU3hIUVVGSEwwY3NTMEZCU3l4RFFVRkROMFFzUjBGQlJ5eERRVUZCTzAxQlJURkNMRWxCUTBVc1EwRkJRM05GTEV0QlFVRXNRMEZCUzAwc1MwRkJTeXhEUVVGRE5tbENMRWxCUVVrc1NVRkRhRUlzUTBGQlEyNXFRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOell5eE5RVUZOTEVsQlEyeENMRU5CUVVOdVRDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU0wTTBJc2EwSkJRV3RDTEVWQlF6bENPMUZCUTBFc1NVRkRSVzVuUWl4UlFVRlJMRXRCUVVzc1YwRkJWeXhKUVVONFFrRXNVVUZCVVN4TFFVRkxMRk5CUVZNc1NVRkRkRUpCTEZGQlFWRXNTMEZCU3l4UFFVRlBMRVZCUTNCQ08xVkJRMEYwUnl4TFFVRkJMRU5CUVV0M2IwSXNXVUZCV1N4RlFVRkZMRU5CUVVFN1FVRkRja0lzVTBGQlFUdEJRVU5CTEZGQlFVRXNUMEZCUVR0QlFVTkdMRTlCUVVFN08wRkJSVUU3UVVGRFFTeE5RVUZCTEVsQlFVbDRiMElzUzBGQlFTeERRVUZMVFN4TFFVRkxMRU5CUVVNMmFVSXNTVUZCU1N4RlFVRkZPMEZCUTI1Q0xGRkJRVUVzU1VGQlNUZGpMRkZCUVZFc1MwRkJTeXhYUVVGWExFbEJRVWxCTEZGQlFWRXNTMEZCU3l4VFFVRlRMRVZCUVVVN1ZVRkRkRVF2Unl4TFFVRkxMRU5CUVVOblNDeGpRVUZqTEVWQlFVVXNRMEZCUVR0QlFVTjBRaXhWUVVGQkxFbEJRVTFyYVVJc1kwRkJZeXhIUVVOc1FucHZRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeFdTeGpRVUZqTEVsQlFVbHNTQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNFowSXNaVUZCWlN4SFFVTnVSQ3c0UTBGQk9FTXNSMEZET1VNc2MwTkJRWE5ETEVOQlFVRTdRVUZETlVNc1ZVRkJRU3hKUVVGTksxa3NXVUZCV1N4SFFVTm9RakZ2UWl4TFFVRkJMRU5CUVVzeWIwSXNVVUZCVVN4RFFVRkRReXhoUVVGaExFbEJRek5DTlc5Q0xFdEJRVUVzUTBGQlN6SnZRaXhSUVVGUkxFTkJRVU5ETEdGQlFXRXNRMEZCUTBNc1lVRkJZU3hEUVVGRFNpeGpRVUZqTEVOQlFVTXNRMEZCUVR0QlFVTXpSRU1zVlVGQlFVRXNXVUZCV1N4SlFVRkpRU3haUVVGWkxFTkJRVU12WXl4TFFVRkxMRU5CUVVNN1FVRkJSVU1zV1VGQlFVRXNZVUZCWVN4RlFVRkZMRWxCUVVFN1FVRkJTeXhYUVVGRExFTkJRVU1zUTBGQlFUdEJRVVV6UkN4VlFVRkJMRTlCUVVFN1FVRkRSaXhUUVVGQk8xRkJSVUVzU1VGQlRXdGtMRWxCUVVrc1IwRkJSM0E1UWl4UFFVRlBMRU5CUVVOelZTeExRVUZCTEVOQlFVdE5MRXRCUVVzc1EwRkJRekpITEZsQlFWa3NRMEZCUXl4RFFVRkJPMUZCUXpkRExFbEJRVWxZTEZGQlFWRXNTMEZCU3l4UFFVRlBMRVZCUVVVN1ZVRkRlRUl2Unl4TFFVRkxMRU5CUVVOblNDeGpRVUZqTEVWQlFVVXNRMEZCUVR0QlFVTjBRaXhWUVVGQkxFbEJRMFYyUnl4TFFVRkJMRU5CUVVzcmIwSXNUMEZCVHl4RlFVRkZMRWxCUTJRdmIwSXNTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU00YkVJc2JVSkJRVzFDTEV0QlFVdERMRFpDUVVFMlFpeEZRVU5vUlR0QlFVTkJjbTFDTEZsQlFVRkJMRXRCUVVFc1EwRkJTMmR3UWl4WlFVRlpMRU5CUVVOR0xFbEJRVWtzUlVGQlJYWndRaXhMUVVGTExFTkJRVU1zUTBGQlFUdFpRVU01UWl4RFFVRkRVeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNd1pTeHRRa0ZCYlVJc1NVRkJTWFpPTEV0QlFVRXNRMEZCUzJ0UkxHVkJRV1VzUTBGQlF6UlpMRWxCUVVrc1EwRkJReXhEUVVGQk8wRkJReTlFTEZkQlFVTXNUVUZCVFR0QlFVTk1PVzlDTEZsQlFVRkJMRXRCUVVFc1EwRkJTM05GTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRCUVVOeVFpeFhRVUZCTzBGQlEwWXNVMEZCUXl4TlFVRk5MRWxCUVVsblF5eFJRVUZSTEV0QlFVc3NVVUZCVVN4RlFVRkZPMVZCUTJoREwwY3NTMEZCU3l4RFFVRkRaMGdzWTBGQll5eEZRVUZGTEVOQlFVRTdWVUZEZEVKMlJ5eExRVUZCTEVOQlFVdHpia0lzYjBKQlFXOUNMRVZCUVVVc1EwRkJRVHRCUVVNelFuUnVRaXhWUVVGQlFTeExRVUZCTEVOQlFVdHpSU3hQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdRVUZEY2tJc1UwRkJReXhOUVVGTkxFbEJRVWxuUXl4UlFVRlJMRXRCUVVzc1MwRkJTeXhGUVVGRk8wRkJRemRDZEVjc1ZVRkJRVUVzUzBGQlFTeERRVUZMYzBVc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBGQlEzSkNMRk5CUVVFN1FVRkZRU3hSUVVGQkxFbEJRVWtzUTBGQlEzUkZMRXRCUVVFc1EwRkJTeXR2UWl4UFFVRlBMRVZCUVVVc1JVRkJSVHRCUVVOdVFpOXZRaXhWUVVGQlFTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU52TmtJc1dVRkJXU3hEUVVGRE8wRkJRVVZETEZsQlFVRkJMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJRVVZETEZsQlFVRkJMRWRCUVVjc1JVRkJSV2hGTEZkQlFVRkJPMEZCUVZrc1YwRkJReXhEUVVGRExFTkJRVUU3UVVGRGVFUXNVMEZCUVR0QlFVTkdMRTlCUVVFN1MwRkRSQ3hEUVVGQkxFTkJRVUU3UVVGQlFXaHNRaXhKUVVGQlFTeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkZhVUlzYVVKQlFVRXNSVUZCUVN4VlFVRkRWQ3hMUVVGTExFVkJRVXM3UVVGRE0wSXNUVUZCUVN4SlFVRk5LMGNzVVVGQlVTeEhRVUZITDBjc1MwRkJTeXhEUVVGRE4wUXNSMEZCUnl4RFFVRkJPMDFCUXpGQ0xFbEJRVWswU3l4UlFVRlJMRXRCUVVzc1VVRkJVU3hGUVVGRk8xRkJRM3BDTDBjc1MwRkJTeXhEUVVGRFowZ3NZMEZCWXl4RlFVRkZMRU5CUVVFN1VVRkRkRUoyUnl4TFFVRkJMRU5CUVV0elFpeFJRVUZSTEVOQlExZzdRVUZEUlhGclFpeFZRVUZCUVN4WlFVRlpMRVZCUVVVc1NVRkJRVHRCUVVOb1FpeFRRVUZETEVWQlEwUXNXVUZCVFR0QlFVTktNMnhDTEZWQlFVRkJMRXRCUVVFc1EwRkJTM05GTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRCUVVOdVFuRnBRaXhWUVVGQlFTeFZRVUZWTEVOQlFVTXNXVUZCVFR0WlFVTm1NMjFDTEV0QlFVRXNRMEZCU3pSdFFpeFJRVUZSTEVWQlFVVXNRMEZCUVR0WlFVTm1OVzFDTEV0QlFVRXNRMEZCUzNOQ0xGRkJRVkVzUTBGQlF6dEJRVUZGY1d0Q0xHTkJRVUZCTEZsQlFWa3NSVUZCUlN4TFFVRkJPMEZCUVUwc1lVRkJReXhEUVVGRExFTkJRVUU3UVVGRGVFTXNWMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkRTaXhUUVVOR0xFTkJRVU1zUTBGQlFUdEJRVU5JTEU5QlFVRTdTMEZEUkN4RFFVRkJMRU5CUVVFN1FVRkZSRHRCUVVGQmVHeENMRWxCUVVGQkxHVkJRVUVzUTBGQlFVZ3NTMEZCUVN4RlFVTmxMR05CUVVFc1JVRkJRU3hWUVVGRFZDeExRVUZMTEVWQlFVczdRVUZEZUVKVExFMUJRVUZCTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEydGtMRk5CUVZNc1EwRkJRM2hOTEV0QlFVc3NRMEZCUXl4RFFVRkJPMEZCUXpOQ0xFMUJRVUVzU1VGQlRTdEhMRkZCUVZFc1IwRkJSeTlITEV0QlFVc3NRMEZCUXpkRUxFZEJRVWNzUTBGQlFUdEJRVU14UWl4TlFVRkJMRWxCUVUwd2RFSXNaMEpCUVdkQ0xFZEJRVWMzY0VJc1MwRkJTeXhEUVVGRE9IQkNMRkZCUVZFc1EwRkJRVHROUVVWMlF5eEpRVUZOVUN4SlFVRkpMRWRCUVVkd09VSXNUMEZCVHl4RFFVRkRjMVVzUzBGQlFTeERRVUZMVFN4TFFVRkxMRU5CUVVNeVJ5eFpRVUZaTEVOQlFVTXNRMEZCUVR0TlFVTTNReXhKUVVGSldDeFJRVUZSTEV0QlFVc3NUMEZCVHl4RlFVRkZPMUZCUTNoQ0wwY3NTMEZCU3l4RFFVRkRaMGdzWTBGQll5eEZRVUZGTEVOQlFVRTdRVUZEZEVKMlJ5eFJRVUZCUVN4TFFVRkJMRU5CUVV0bmNFSXNXVUZCV1N4RFFVRkRSaXhKUVVGSkxFVkJRVVYyY0VJc1MwRkJTeXhEUVVGRExFTkJRVUU3VVVGRE9VSXNRMEZCUTFNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNR1VzYlVKQlFXMUNMRWxCUVVsMlRpeExRVUZCTEVOQlFVdHJVU3hsUVVGbExFTkJRVU0wV1N4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVNdlJDeFBRVUZETEUxQlFVMHNTVUZCU1hocFFpeFJRVUZSTEV0QlFVc3NVVUZCVVN4RlFVRkZPMUZCUTJoREwwY3NTMEZCU3l4RFFVRkRaMGdzWTBGQll5eEZRVUZGTEVOQlFVRTdRVUZGZEVKMlJ5eFJRVUZCUVN4TFFVRkJMRU5CUVV0elJTeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkRia0lzVVVGQlFTeEpRVUZKTEVOQlFVTjBSU3hMUVVGQkxFTkJRVXNyYjBJc1QwRkJUeXhGUVVGRkxFVkJRVVU3UVVGRGJrSXZiMElzVlVGQlFVRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYnpaQ0xGbEJRVmtzUTBGQlF6dEJRVUZGUXl4WlFVRkJRU3hKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVUZGUXl4WlFVRkJRU3hIUVVGSExFVkJRVVZvUlN4WFFVRkJRVHRCUVVGWkxGZEJRVU1zUTBGQlF5eERRVUZCTzBGQlEzaEVMRk5CUVVFN1QwRkRSQ3hOUVVGTkxFbEJRVWtzUTBGQlEyNXNRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNFdDd3dRa0ZCTUVJc1JVRkJSVHRCUVVOcVJDeFJRVUZCTEVsQlFVa3lhVUlzV1VGQldTeERRVUZCTzBGQlEyaENMRkZCUVVFc1VVRkJVV2hxUWl4UlFVRlJPMEZCUTJRc1ZVRkJRU3hMUVVGTExGZEJRVmM3UVVGRFpDeFpRVUZCTEVsQlFVbDBSeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeFdTeGpRVUZqTEVWQlFVVTdRVUZETjBKdmFVSXNZMEZCUVVFc1dVRkJXU3hIUVVGSFF5eFJRVUZSTEVOQlFVTlVMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlFUdEJRVU5zUXl4aFFVRkRMRTFCUVUwN1FVRkRURkVzWTBGQlFVRXNXVUZCV1N4SFFVRkhSU3hQUVVGUExFTkJRVU5XTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOcVF5eGhRVUZCTzBGQlEwRXNXVUZCUVN4TlFVRkJPMEZCUTBZc1ZVRkJRU3hMUVVGTExGbEJRVms3UVVGRFppeFpRVUZCTEVsQlFVazViMElzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGNWa3NZMEZCWXl4RlFVRkZPMEZCUXpkQ2IybENMR05CUVVGQkxGbEJRVmtzUjBGQlIwY3NVVUZCVVN4RFFVRkRXQ3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEYkVNc1lVRkJReXhOUVVGTk8wRkJRMHhSTEdOQlFVRkJMRmxCUVZrc1IwRkJSM3BpTEU5QlFVOHNRMEZCUTJsaUxFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVTnFReXhoUVVGQk8wRkJRMEVzV1VGQlFTeE5RVUZCTzBGQlEwWXNWVUZCUVN4TFFVRkxMRk5CUVZNN1FVRkRXbEVzV1VGQlFVRXNXVUZCV1N4SFFVRkhReXhSUVVGUkxFTkJRVU5VTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOb1F5eFpRVUZCTEUxQlFVRTdRVUZEUml4VlFVRkJMRXRCUVVzc1YwRkJWenRCUVVOa1VTeFpRVUZCUVN4WlFVRlpMRWRCUVVkSExGRkJRVkVzUTBGQlExZ3NTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMmhETEZsQlFVRXNUVUZCUVR0QlFVTkdMRlZCUVVFc1MwRkJTeXhSUVVGUk8wRkJRMWhSTEZsQlFVRkJMRmxCUVZrc1IwRkJSMFlzWjBKQlFXZENMRWRCUXpOQ09YWkNMRkZCUVZFc1EwRkJRM2QyUWl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRMnBDTjNkQ0xGTkJRVk1zUTBGQlF6WjNRaXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEZEVJc1dVRkJRU3hOUVVGQk8wRkJRMFlzVlVGQlFTeExRVUZMTEZWQlFWVTdRVUZEWWxFc1dVRkJRVUVzV1VGQldTeEhRVUZIUml4blFrRkJaMElzUjBGRE0wSnFka0lzVVVGQlVTeERRVUZETW5WQ0xFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNSMEZEYWtKMmQwSXNVMEZCVXl4RFFVRkRkWGRDTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOMFFpeFpRVUZCTEUxQlFVRTdRVUZEUml4VlFVRkJMRXRCUVVzc1RVRkJUVHRCUVVOVVVTeFpRVUZCUVN4WlFVRlpMRWRCUVVkb05VSXNZMEZCWXl4RFFVTXpRbmMwUWl4SlFVRkpMRVZCUTBvNWIwSXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZWtNc1RVRkJUU3hGUVVOcVFqUlVMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpCQ0xHZENRVU5pTEVOQlFVTXNRMEZCUVR0QlFVTkVMRmxCUVVFc1RVRkJRVHRCUVVOR0xGVkJRVUVzUzBGQlN5eExRVUZMTzBGQlExSXJORUlzV1VGQlFVRXNXVUZCV1N4SFFVRkhjalJDTEZsQlFWa3NRMEZCUXpZelFpeEpRVUZKTEVOQlFVTXNRMEZCUVR0QlFVTnFReXhaUVVGQkxFMUJRVUU3UVVGRFJpeFZRVUZCTzBGQlEwVlJMRmxCUVVGQkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVRTdRVUZEYmtJc1dVRkJRU3hOUVVGQk8wRkJRMG9zVTBGQlFUdFJRVU5CTEVsQlFVa3NRMEZCUTBFc1dVRkJXU3hGUVVGRk8wRkJRMnBDTEZWQlFVRXNTVUZCU1hSd1FpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU52TmtJc1dVRkJXU3hGUVVGRk8wRkJRek5DYW5CQ0xGbEJRVUZCTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyODJRaXhaUVVGWkxFTkJRVU03UVVGQlJVTXNZMEZCUVVFc1NVRkJTU3hGUVVGRkxFTkJRVU03UVVGQlJVTXNZMEZCUVVFc1IwRkJSeXhGUVVGRmFFVXNWMEZCUVVFN1FVRkJXU3hoUVVGRExFTkJRVU1zUTBGQlFUdEJRVU40UkN4WFFVRkJPMEZCUTBFc1ZVRkJRU3hQUVVGQk8wRkJRMFlzVTBGQlFUdFJRVU5CTld4Q0xFdEJRVXNzUTBGQlEyZElMR05CUVdNc1JVRkJSU3hEUVVGQk8xRkJRM1JDZGtjc1MwRkJRU3hEUVVGTGMwSXNVVUZCVVN4RFFVRkRPMEZCUVVVNGEwSXNWVUZCUVVFc2JVSkJRVzFDTEVWQlFVVkRMRFpDUVVGQlFUdEJRVUU0UWl4VFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOeVJTeFJRVUZCTEVsQlFVbHliVUlzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGMxWXNhMEpCUVd0Q0xFVkJRVVU3UVVGRGFrTnVSU3hWUVVGQlFTeExRVUZCTEVOQlFVdHhia0lzVjBGQlZ5eERRVUZEYVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3UVVGRGFFTXNVMEZCUVR0QlFVTkJkSEJDTEZGQlFVRkJMRXRCUVVFc1EwRkJTMnRSTEdWQlFXVXNRMEZCUTI5YUxGbEJRVmtzUTBGQlF5eERRVUZCTzBGQlEyeERPMEZCUTBFc1VVRkJRU3hKUVVGSmRIQkNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNOakxFMUJRVTBzUlVGQlJUdEJRVU55UWl4VlFVRkJMRWxCUVUxMVpTeFRRVUZUTEVkQlFVZHdNRUlzVVVGQlVTeERRVUZEZDNwQ0xFbEJRVWtzUTBGQlF5eERRVUZCTzBGQlEyaERMRlZCUVVFc1NVRkJUVGRaTEZGQlFWRXNSMEZCUnpOaExGRkJRVkVzUTBGQlEyY3dRaXhaUVVGWkxFTkJRVU1zUTBGQlFUdEJRVU4yUXl4VlFVRkJMRWxCUVUxTExGRkJRVkVzUjBGQlIzWXdRaXhQUVVGUExFTkJRVU13ZWtJc1NVRkJTU3hEUVVGRExFTkJRVUU3UVVGRE9VSXNWVUZCUVN4SlFVRk5iSEJDTEU5QlFVOHNSMEZCUjNoTExFOUJRVThzUTBGQlEyc3dRaXhaUVVGWkxFTkJRVU1zUTBGQlFUdEJRVVZ5UXl4VlFVRkJMRWxCUVVsSkxGTkJRVk1zUzBGQlMzcGFMRkZCUVZFc1NVRkJTVEJhTEZGQlFWRXNTMEZCU3k5d1FpeFBRVUZQTEVWQlFVVTdRVUZEYkVRN1dVRkRRVWtzUzBGQlFTeERRVUZMYzBJc1VVRkJVU3hEUVVGRE8wRkJRVVU0U2l4alFVRkJRU3h2UWtGQmIwSXNSVUZCUlN4SlFVRkJPMEZCUVVzc1lVRkJReXhEUVVGRExFTkJRVUU3UVVGREwwTXNWMEZCUXl4TlFVRk5PMEZCUTB3N1dVRkRRWEJNTEV0QlFVRXNRMEZCUzNOQ0xGRkJRVkVzUTBGQlF6dEJRVUZGT0Vvc1kwRkJRVUVzYjBKQlFXOUNMRVZCUVVVc1MwRkJRVHRCUVVGTkxHRkJRVU1zUTBGQlF5eERRVUZCTzBGQlEyaEVMRmRCUVVFN1FVRkRSaXhUUVVGQk8wRkJRMFlzVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0QlFVVkVPMEZCUTBFN1FVRkJRV3BNTEVsQlFVRkJMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVU5yUWl4cFFrRkJRU3hGUVVGQkxGVkJRVU5VTEV0QlFVc3NSVUZCU3p0QlFVTXpRaXhOUVVGQkxFbEJRVTByUnl4UlFVRlJMRWRCUVVjdlJ5eExRVUZMTEVOQlFVTTNSQ3hIUVVGSExFTkJRVUU3VFVGRE1VSXNTVUZCU1RSTExGRkJRVkVzUzBGQlN5eFJRVUZSTEVWQlFVVTdVVUZEZWtJdlJ5eExRVUZMTEVOQlFVTm5TQ3hqUVVGakxFVkJRVVVzUTBGQlFUdFJRVU4wUW5aSExFdEJRVUVzUTBGQlMzTnVRaXh2UWtGQmIwSXNSVUZCUlN4RFFVRkJPMEZCUXpkQ0xFOUJRVUU3UzBGRFJDeERRVUZCTEVOQlFVRTdRVUZCUVc1dVFpeEpRVUZCUVN4bFFVRkJMRU5CUVVGSUxFdEJRVUVzUlVGRll5eGpRVUZCTEVWQlFVRXNWVUZCUTFRc1MwRkJTeXhGUVVGTE8wRkJRM2hDTEUxQlFVRXNTVUZCU1VFc1MwRkJTeXhGUVVGRk8xRkJRMVFzU1VGQlNVRXNTMEZCU3l4RFFVRkRaMGdzWTBGQll5eEZRVUZGTzFWQlEzaENhRWdzUzBGQlN5eERRVUZEWjBnc1kwRkJZeXhGUVVGRkxFTkJRVUU3UVVGRGVFSXNVMEZCUVR0QlFVTkdMRTlCUVVFN1RVRkZRWFpITEV0QlFVRXNRMEZCUzNOdVFpeHZRa0ZCYjBJc1JVRkJSU3hEUVVGQk8wRkJSVE5DTEUxQlFVRXNTVUZCU1hSdVFpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5wV2l4WlFVRlpMRVZCUVVVN1FVRkRNMEk1U0N4UlFVRkJRU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNNFVpeFJRVUZSTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFVkJRVVZ3UWl4TFFVRkxMRU5CUVVNc1EwRkJRVHRCUVVNeFF5eFBRVUZETEUxQlFVMDdVVUZEVEZNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRPRklzVVVGQlVTeERRVUZETEVsQlFVa3NSVUZCUlhCQ0xFdEJRVXNzUTBGQlF5eERRVUZCTzBGQlEyeERMRTlCUVVFN1RVRkRRVk1zUzBGQlFTeERRVUZMYzBJc1VVRkJVU3hEUVVGRE8wRkJRVVZwYkVJc1VVRkJRVUVzVlVGQlZTeEZRVUZGTEVsQlFVRTdRVUZCU3l4UFFVRkRMRU5CUVVNc1EwRkJRVHRMUVVOd1F5eERRVUZCTEVOQlFVRTdTVUZCUVhCdFFpeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hQUVVGQkxFVkJSVThzV1VGQlRUdE5RVU5hUVN4TFFVRkJMRU5CUVVzMGNFSXNXVUZCV1N4RlFVRkZMRU5CUVVFN1MwRkRjRUlzUTBGQlFTeERRVUZCTzBGQlFVRjZjRUlzU1VGQlFVRXNaVUZCUVN4RFFVRkJTQ3hMUVVGQkxFVkJSVlVzVlVGQlFTeEZRVUZCTEZWQlFVTlVMRXRCUVVzc1JVRkJTenRCUVVOd1FpeE5RVUZCTEVsQlEwVXNUMEZCVDFNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRaemRDTEdGQlFXRXNTMEZCU3l4VFFVRlRMRWxCUXpkRE4zQkNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJjM1FpeGhRVUZoTEVWQlEzaENPMUZCUTBFc1NVRkRSWFJ4UWl4TFFVRkxMRU5CUVVOclJTeE5RVUZOTEV0QlFVdDFTQ3hSUVVGUkxFbEJRM3BDZWt3c1MwRkJTeXhEUVVGRGEwVXNUVUZCVFN4TFFVRkxkVWdzVVVGQlVTeERRVUZET0dVc1pVRkJaU3hKUVVONlEzWnhRaXhMUVVGTExFTkJRVU5yUlN4TlFVRk5MRXRCUVV0MVNDeFJRVUZSTEVOQlFVTkZMRWxCUVVrc1JVRkRPVUk3UVVGRFFXeE1MRlZCUVVGQkxFdEJRVUVzUTBGQlMzTkZMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU55UWl4VFFVRkJPMDlCUTBRc1RVRkJUU3hKUVVGSkxFOUJRVTkwUlN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTm5OMElzWVVGQllTeExRVUZMTEZWQlFWVXNSVUZCUlR0UlFVTjZSQ3hKUVVGSk4zQkNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJjM1FpeGhRVUZoTEVOQlFVTjBjVUlzUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEYmtOVExGVkJRVUZCTEV0QlFVRXNRMEZCUzNORkxFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVTnlRaXhUUVVGQk8wRkJRMFlzVDBGQlFUdExRVU5FTEVOQlFVRXNRMEZCUVR0SlFVRkJia1VzWlVGQlFTeERRVUZCU0N4TFFVRkJMRVZCUVVFc1owSkJRVUVzUlVGRlowSXNXVUZCVFR0QlFVTnlRaXhOUVVGQkxFbEJRVWtzUTBGQlEwRXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYzJNc1RVRkJUU3hKUVVGSkxFTkJRVU51VEN4TFFVRkJMRU5CUVVzcmNFSXNZMEZCWXl4RlFVRkZMRVZCUVVVN1FVRkRhRVFzVVVGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUVR0QlFVTmlMRTlCUVVFN1FVRkRRU3hOUVVGQkxHOUNRVU5GZG5CQ0xFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVRkRkMnRDTEdWQlFXVXNSVUZCUVR0QlFVTmtibWxDTEZGQlFVRkJMRWRCUVVjc1JVRkJSU3hUUVVGQlFTeEhRVUZEYTI1Q0xFTkJRVUZCTEVsQlFVa3NSVUZCU3p0VlFVTmlhSEZDTEV0QlFVRXNRMEZCU3pKdlFpeFJRVUZSTEVkQlFVZHhRaXhKUVVGSkxFTkJRVUU3VTBGRGNFSTdRVUZEUmpVNVFpeFJRVUZCUVN4TlFVRk5MRVZCUVVVMFZDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU42UXl4TlFVRlBPMEZCUXpGQ2JVVXNVVUZCUVVFc1owSkJRV2RDTEVWQlFVVjVVQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNd1FpeG5Ra0ZCYVVJN1FVRkRPVU4xWkN4UlFVRkJRU3gzUWtGQmQwSXNSVUZCUlRsT0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMmxtTEhkQ1FVRjVRanRCUVVNNVJFTXNVVUZCUVVFc01FSkJRVEJDTEVWQlFVVXZUaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOclppd3dRa0ZCTWtJN1FVRkRiRVV5UWl4UlFVRkJRU3h0UWtGQmJVSXNSVUZCUlRGUUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelpuUWl4dFFrRkJiMEk3UVVGRGNFUnBVQ3hSUVVGQlFTeHZRa0ZCYjBJc1JVRkJSVE5sTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6aDJRaXh2UWtGQmNVSTdRVUZEZEVSNFlTeFJRVUZCUVN4clFrRkJhMElzUlVGQlJXNUZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNOV0xHdENRVUZ0UWp0UlFVTnNSRWNzVDBGQlR5eEZRVUZGZEVVc1MwRkJRU3hEUVVGTGMwVXNUMEZCVVR0QlFVTjBRbWxLTEZGQlFVRkJMRzFDUVVGdFFpeEZRVUZGZGs0c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNR1VzYlVKQlFXOUNPMEZCUTNCRWNHaENMRkZCUVVGQkxGVkJRVlVzUlVGQlJUWlVMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTI4M1FpeHJRa0ZCYlVJN1FVRkRNVU55VUN4UlFVRkJRU3huUWtGQlowSXNSVUZCUlRWaExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJReXR5UWl4blFrRkJhVUk3UVVGRE9VTkVMRkZCUVVGQkxHRkJRV0VzUlVGQlJUTmhMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpoeVFpeGhRVUZqTzBGQlEzaERibGNzVVVGQlFVRXNXVUZCV1N4RlFVRkZlRVVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE1sWXNXVUZCWVR0QlFVTjBRM2RETEZGQlFVRkJMRkZCUVZFc1JVRkJSV2hJTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMVpMRkZCUVZNN1FVRkRPVUpETEZGQlFVRkJMRmxCUVZrc1JVRkJSV3BJTEV0QlFVRXNRMEZCUzAwc1MwRkJTeXhEUVVGRE1rY3NXVUZCWVR0UlFVTjBRelZETEZGQlFWRXNSVUZCUlhKRkxFdEJRVUVzUTBGQlMyZHdRaXhaUVVGaE8wRkJRelZDTTJJc1VVRkJRVUVzV1VGQldTeEZRVUZGY2s0c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkMlVzV1VGQllUdEJRVU4wUXpaSUxGRkJRVUZCTEZWQlFWVXNSVUZCUld4V0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM0Z0UWl4VlFVRlhPMEZCUTJ4RE5XOUNMRkZCUVVGQkxFOUJRVThzUlVGQlJUQlVMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNaRExFOUJRVkU3UVVGRE5VSjVTQ3hSUVVGQlFTeFBRVUZQTEVWQlFVVnBUU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOclJpeFBRVUZSTzBGQlF6VkNObFFzVVVGQlFVRXNXVUZCV1N4RlFVRkZOVWdzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGREsxa3NXVUZCWVR0QlFVTjBRME1zVVVGQlFVRXNWVUZCVlN4RlFVRkZOMGdzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFoxb3NWVUZCVnp0QlFVTnNRME1zVVVGQlFVRXNXVUZCV1N4RlFVRkZPVWdzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGFWb3NXVUZCWVR0QlFVTjBRMnBDTEZGQlFVRkJMR1ZCUVdVc1JVRkJSVGRITEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyZFpMR1ZCUVdkQ08wRkJRelZEUXl4UlFVRkJRU3hoUVVGaExFVkJRVVU1Unl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnBXU3hoUVVGak8wRkJRM2hEYmxrc1VVRkJRVUVzVTBGQlV5eEZRVUZGY1ZJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRSaXhUUVVGVk8wRkJRMmhEUXl4UlFVRkJRU3hQUVVGUExFVkJRVVZ2VWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTkVMRTlCUVZFN1FVRkROVUp2Uml4UlFVRkJRU3haUVVGWkxFVkJRVVZuVFN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRSaXhaUVVGaE8wRkJRM1JEUXl4UlFVRkJRU3h2UWtGQmIwSXNSVUZCUlN0TUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRMjlHTEc5Q1FVRnhRanRCUVVOMFJFY3NVVUZCUVVFc1ZVRkJWU3hGUVVGRk5Fd3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZFVZc1ZVRkJWenRSUVVOc1F6aFBMR05CUVdNc1JVRkJSV3hFTEV0QlFVRXNRMEZCUzJ0eFFpd3dRa0ZCTWtJN1FVRkRhRVF4WXl4UlFVRkJRU3huUWtGQlowSXNSVUZCUlhoT0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekpsTEdkQ1FVRnBRanRCUVVNNVEzUlRMRkZCUVVGQkxHTkJRV01zUlVGQlJUaEZMRXRCUVVFc1EwRkJTMDBzUzBGQlN5eERRVUZEY0VZc1kwRkJaVHRSUVVNeFEzRk5MRkZCUVZFc1JVRkJSVFZMTEdOQlFXTXNRMEZCUTNGRUxFdEJRVUVzUTBGQlMyMXhRaXhqUVVGakxFVkJRVVVzUTBGQlJUdEJRVU5vUkdveVFpeFJRVUZCUVN4WlFVRlpMRVZCUVVVNFRDeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU54Uml4WlFVRmhPMEZCUTNSRFF5eFJRVUZCUVN4dlFrRkJiMElzUlVGQlJUWk1MRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNOR0xHOUNRVUZ4UWp0QlFVTjBSR2RFTEZGQlFVRkJMRmxCUVZrc1JVRkJSVFpKTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzTkpMRmxCUVdFN1FVRkRkRU15WkN4UlFVRkJRU3hYUVVGWExFVkJRVVU1VlN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnBiVUlzVjBGQldUdEJRVU53UXpOS0xGRkJRVUZCTEUxQlFVMHNSVUZCUlc1TUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM05qTEUxQlFVODdRVUZETVVKRExGRkJRVUZCTEc5Q1FVRnZRaXhGUVVGRmNFd3NTMEZCUVN4RFFVRkxUU3hMUVVGTExFTkJRVU00U3l4dlFrRkJjVUk3UVVGRGRFUXlSU3hSUVVGQlFTeGhRVUZoTEVWQlFVVXZVQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOcmFFSXNZVUZCWXp0QlFVTjRRM2xOTEZGQlFVRkJMR2xDUVVGcFFpeEZRVUZGZUdNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRNblJDTEdsQ1FVRnJRanRCUVVOb1JEUkNMRkZCUVVGQkxHdENRVUZyUWl4RlFVRkZjR1VzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGRYWkNMR3RDUVVGdFFqdEJRVU5zUkd4YUxGRkJRVUZCTEhWQ1FVRjFRaXhGUVVGRmJFWXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEY1Zjc2RVSkJRWGRDTzBGQlF6VkVkVmdzVVVGQlFVRXNjVUpCUVhGQ0xFVkJRVVY2WXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTTBkRUlzY1VKQlFYTkNPMEZCUTNoRU9VMHNVVUZCUVVFc1pVRkJaU3hGUVVGRk0xQXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZET0dkQ0xHVkJRV2RDTzBGQlF6VkRORTBzVVVGQlFVRXNaMEpCUVdkQ0xFVkJRVVYyWXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXdkRUlzWjBKQlFXbENPMEZCUXpsRE5FTXNVVUZCUVVFc1ZVRkJWU3hGUVVGRmJtWXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYzNkQ0xGVkJRVmM3UVVGRGJFTnVSU3hSUVVGQlFTeDNRa0ZCZDBJc1JVRkJSV2hpTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMXpRaXgzUWtGQmVVSTdRVUZET1VSRExGRkJRVUZCTERKQ1FVRXlRaXhGUVVGRmFtSXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjNOQ0xESkNRVUUwUWp0QlFVTndSWGhhTEZGQlFVRkJMSE5DUVVGelFpeEZRVUZGZWtJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRORk1zYzBKQlFYVkNPMEZCUXpGRWJVVXNVVUZCUVVFc01rSkJRVEpDTEVWQlFVVTFSaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNclZ5d3lRa0ZCTkVJN1FVRkRjRVZ2VVN4UlFVRkJRU3hYUVVGWExFVkJRVVZvVnl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRia0lzVjBGQldUdEJRVU53UTNWRkxGRkJRVUZCTEZOQlFWTXNSVUZCUlhaaExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekJ5UWl4VFFVRlZPMEZCUTJoRGVVc3NVVUZCUVVFc2RVSkJRWFZDTEVWQlFVVkJMSFZDUVVGM1FqdEJRVU5xUkhwV0xGRkJRVUZCTEZkQlFWY3NSVUZCUlhaUUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekJuUWl4WFFVRlpPMEZCUTNCRE9FOHNVVUZCUVVFc1YwRkJWeXhGUVVGRmNtVXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZDNaQ0xGZEJRVms3UVVGRGNFTjJSU3hSUVVGQlFTeGxRVUZsTEVWQlFVVTVXaXhMUVVGQkxFTkJRVXROTEV0QlFVc3NRMEZCUTNkYUxHVkJRV2RDTzFGQlF6VkRTQ3hsUVVGbExFVkJRVVV6V2l4TFFVRkJMRU5CUVV0clpDeHRRa0ZCYjBJN1FVRkRNVU01UXl4UlFVRkJRU3hoUVVGaExFVkJRVVZ3WVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjFja0lzWVVGQll6dEJRVU40UTBnc1VVRkJRVUVzV1VGQldTeEZRVUZGYW1Fc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiM0pDTEZsQlFXRTdRVUZEZEVOMFVpeFJRVUZCUVN4WlFVRlpMRVZCUVVVelNTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU00V2l4WlFVRmhPMEZCUTNSREsxSXNVVUZCUVVFc1owSkJRV2RDTEVWQlFVVXhZU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNMmNrSXNaMEpCUVdsQ08wRkJRemxETlVvc1VVRkJRVUVzWTBGQll5eEZRVUZGT1ZFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRhV2xDTEdOQlFXVTdRVUZETVVNMlJDeFJRVUZCUVN4aFFVRmhMRVZCUVVVelZTeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU00YkVJc1lVRkJZenRCUVVONFF6UlRMRkZCUVVGQkxHTkJRV01zUlVGQlJYWnVRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNd05FSXNZMEZCWlR0QlFVTXhRM3BNTEZGQlFVRkJMR05CUVdNc1JVRkJSVGxpTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEybDBRaXhqUVVGbE8wRkJRekZETjBZc1VVRkJRVUVzYTBKQlFXdENMRVZCUVVWcVZ5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU52YmtJc2EwSkJRVzFDTzFGQlEyeEVSeXhaUVVGWkxFVkJRVVZ3Vnl4TFFVRkJMRU5CUVV0dmNVSXNaMEpCUVdsQ08wRkJRM0JEYmt3c1VVRkJRVUVzVlVGQlZTeEZRVUZGYW1Zc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiM2RDTEZWQlFWYzdRVUZEYkVORExGRkJRVUZCTEdGQlFXRXNSVUZCUld4bUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM0YzUWl4aFFVRmpPMEZCUTNoRE0yNUNMRkZCUVVGQkxFOUJRVThzUlVGQlJYbEpMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpCSkxFOUJRVkU3UVVGRE5VSkRMRkZCUVVGQkxFOUJRVThzUlVGQlJYZEpMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpKSkxFOUJRVkU3UVVGRE5VSk9MRkZCUVVGQkxGbEJRVmtzUlVGQlJUaEpMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNGSkxGbEJRV0U3UVVGRGRFTkZMRkZCUVVGQkxGVkJRVlVzUlVGQlJUUkpMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTNWSkxGVkJRVmM3UVVGRGJFTTRaU3hSUVVGQlFTeFhRVUZYTEVWQlFVVnNWeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeGJrSXNWMEZCV1R0QlFVTndReTlhTEZGQlFVRkJMRk5CUVZNc1JVRkJSVFpFTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzYzNRaXhwUWtGQmEwSTdRVUZEZUVOMlN5eFJRVUZCUVN4VFFVRlRMRVZCUVVVNVppeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU41TjBJc2FVSkJRV3RDTzBGQlEzaERNM2RDTEZGQlFVRkJMR05CUVdNc1JVRkJSWEZITEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6aExMR05CUVdVN1FVRkRNVU0yU0N4UlFVRkJRU3h6UWtGQmMwSXNSVUZCUlhoQ0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekpUTEhOQ1FVRjFRanRCUVVNeFJHdGhMRkZCUVVGQkxITkNRVUZ6UWl4RlFVRkZNV0lzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE5uTkNMSE5DUVVGMVFqdEJRVU14UkVnc1VVRkJRVUVzZDBKQlFYZENMRVZCUVVWMllpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU13YzBJc2QwSkJRWGxDTzBGQlF6bEVZU3hSUVVGQlFTeHJRa0ZCYTBJc1JVRkJSWEJqTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzVjBRaXhyUWtGQmJVSTdRVUZEYkVSSUxGRkJRVUZCTEc5Q1FVRnZRaXhGUVVGRmFtTXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYjNSQ0xHOUNRVUZ4UWp0QlFVTjBSRXdzVVVGQlFVRXNjVUpCUVhGQ0xFVkJRVVUxWWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXJjMElzY1VKQlFYTkNPMEZCUTNoRVNpeFJRVUZCUVN4MVFrRkJkVUlzUlVGQlJYaGlMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpKelFpeDFRa0ZCZDBJN1FVRkROVVJqTEZGQlFVRkJMR2xDUVVGcFFpeEZRVUZGZEdNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRlWFJDTEdsQ1FVRnJRanRCUVVOb1JFb3NVVUZCUVVFc2JVSkJRVzFDTEVWQlFVVnNZeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeGRFSXNiVUpCUVc5Q08wRkJRM0JFZEVRc1VVRkJRVUVzWTBGQll5eEZRVUZGTlZrc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRLM0JDTEdOQlFXVTdRVUZETVVOcVV5eFJRVUZCUVN3d1FrRkJNRUlzUlVGQlJUTkhMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpoWUxEQkNRVUV5UWp0QlFVTnNSVzFWTEZGQlFVRkJMR3RDUVVGclFpeEZRVUZGT1dFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRhWE5DTEd0Q1FVRnRRanRCUVVOc1JDdElMRkZCUVVGQkxGZEJRVmNzUlVGQlJUZHBRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVObk1FSXNWMEZCV1R0QlFVTndRMmhZTEZGQlFVRkJMR2xDUVVGcFFpeEZRVUZGTjB3c1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRaMlFzYVVKQlFXdENPMEZCUTJoRWIwY3NVVUZCUVVFc2EwSkJRV3RDTEVWQlFVVnFVeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOdmFrSXNhMEpCUVcxQ08wRkJRMnhFU1N4UlFVRkJRU3h2UWtGQmIwSXNSVUZCUlhKVExFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM2RxUWl4dlFrRkJjVUk3UVVGRGRFUm5SaXhSUVVGQlFTeHBRa0ZCYVVJc1JVRkJSWEpZTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEzZHZRaXhwUWtGQmEwSTdRVUZEYUVScVN5eFJRVUZCUVN4bFFVRmxMRVZCUVVWd1RpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU4xWlN4bFFVRm5RanRCUVVNMVF6Sk5MRkZCUVVGQkxHbENRVUZwUWl4RlFVRkZMMW9zUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGEzSkNMR2xDUVVGclFqdEJRVU5vUkhwRExGRkJRVUZCTEdkQ1FVRm5RaXhGUVVGRmRGZ3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZVc5Q0xHZENRVUZwUWp0QlFVTTVRME1zVVVGQlFVRXNaMEpCUVdkQ0xFVkJRVVYyV0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXdiMElzWjBKQlFXbENPMEZCUXpsRGVGQXNVVUZCUVVFc01FSkJRVEJDTEVWQlFVVXZTQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOcldpd3dRa0ZCTWtJN1FVRkRiRVYxV0N4UlFVRkJRU3hoUVVGaExFVkJRVVYwWml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjVkMElzWVVGQll6dEJRVU40UXpsTUxGRkJRVUZCTEcxQ1FVRnRRaXhGUVVGRmVGUXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETW10Q0xHMUNRVUZ2UWp0QlFVTndSSGhDTEZGQlFVRkJMSFZDUVVGMVFpeEZRVUZGYUZNc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRiV3BDTEhWQ1FVRjNRanRCUVVNMVJHeEVMRkZCUVVGQkxEUkNRVUUwUWl4RlFVRkZPVThzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGFXZENMRFJDUVVFMlFqdEJRVU4wUlVRc1VVRkJRVUVzTmtKQlFUWkNMRVZCUVVVM1R5eExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5uWjBJc05rSkJRVGhDTzBGQlEzaEZaMDBzVVVGQlFVRXNZMEZCWXl4RlFVRkZOMkVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFozTkNMR05CUVdVN1FVRkRNVU53U0N4UlFVRkJRU3h4UWtGQmNVSXNSVUZCUlhwVUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelJyUWl4eFFrRkJjMEk3UVVGRGVFUjJUU3hSUVVGQlFTeGpRVUZqTEVWQlFVVnNTQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeFdTeGpRVUZsTzBGQlF6RkRjV3BDTEZGQlFVRkJMR2RDUVVGblFpeEZRVUZGZG5GQ0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRekEzUWl4blFrRkJhVUk3UVVGRE9VTXZha0lzVVVGQlFVRXNaVUZCWlN4RlFVRkZlRWNzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGEyUXNVMEZCVlR0UlFVTjBRelpUTEd0Q1FVRnJRaXhGUVVGRk5XVXNTMEZCUVN4RFFVRkxkM0ZDTEZsQlFXRTdRVUZEZEVONlppeFJRVUZCUVN4alFVRmpMRVZCUVVVdlN5eExRVUZCTEVOQlFVdE5MRXRCUVVzc1EwRkJRM05zUWl4UFFVRlJPMEZCUTI1RGRFNHNVVUZCUVVFc1pVRkJaU3hGUVVGRmRGa3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZVhCQ0xHVkJRV2RDTzFGQlF6VkRjRWtzWlVGQlpTeEZRVUZGYkZFc1MwRkJRU3hEUVVGTGExRXNaVUZCWjBJN1FVRkRkRU5xUlN4UlFVRkJRU3hsUVVGbExFVkJRVVZxVFN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnZaQ3hsUVVGblFqdEJRVU0xUTJsTUxGRkJRVUZCTEdGQlFXRXNSVUZCUld4WUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRM0Z2UWl4aFFVRkJRVHRCUVVGakxFOUJRVUVzUlVGRmRrTnNXQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeFZDeFJRVU5ITEVOQlFVTXNRMEZCUVR0TFFVVnlRaXhEUVVGQkxFTkJRVUU3U1VGQlFTOUNMR1ZCUVVFc1EwRkJRVWdzUzBGQlFTeEZRVUZCTEhOQ1FVRkJMRVZCUlhOQ0xGbEJRVTA3UVVGRE0wSXNUVUZCUVN4SlFVRkJlVWdzV1VGQlFTeEhRVUVyUW5wSUxFdEJRVUVzUTBGQlMyNVNMRXRCUVVzN1VVRkJha014UXl4VlFVRlZMRWRCUVVGellpeFpRVUZCTEVOQlFWWjBZaXhWUVVGVk8xRkJRVVZETEUxQlFVMHNSMEZCUVhGaUxGbEJRVUVzUTBGQlRuSmlMRTFCUVUwc1EwRkJRVHRCUVVNeFFpeE5RVUZCTEVsQlFVMXhLMElzWTBGQll5eEhRVU5zUW5weFFpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU41ZDBJc1lVRkJZU3hKUVVGSmRHWXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYVhSQ0xHTkJRV01zUTBGQlFUdEJRVU4yUkN4TlFVRkJMRWxCUVUwMFR5eGpRVUZqTEVkQlFVZEVMR05CUVdNc1IwRkJSeXhQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZCTzBGQlEzaEVMRTFCUVVFc1NVRkJTV3BNTEdWQlFXVXNRMEZCUVR0QlFVVnVRaXhOUVVGQkxFbEJRVWw0Wml4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnBXaXhaUVVGWkxFVkJRVVU3VVVGRE0wSXdXQ3hsUVVGbExFZEJRVUVzZFVKQlFVRXNRMEZCUVdwNFFpeE5RVUZCTEVOQlFUSkNReXhqUVVGakxFTkJRM1JFZDFJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRSaXhUUVVGVExFVkJRM0JDTzBGQlEwVjRReXhWUVVGQlFTeFZRVUZWTEVWQlFVVjFLMElzWTBGQll6dEJRVU14UW5RclFpeFZRVUZCUVN4TlFVRk5MRVZCUVU1QkxFMUJRVUZCTzBGQlEwWXNVMEZEUml4RFFVRkRMRVZCUVVGdFF5eEpRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeE5RVUZCTEVOQlEwTjVVaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVORUxFOUJRVThzUjBGRFpDeFpRVUZaTEVkQlExcEtMR05CUVdNc1EwRkJRM2RTTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEwUXNUMEZCVHl4RlFVRkZPMEZCUTJwRGVrTXNWVUZCUVVFc1ZVRkJWU3hGUVVGRmRTdENMR05CUVdNN1FVRkRNVUowSzBJc1ZVRkJRVUVzVFVGQlRTeEZRVUZPUVN4TlFVRkJRVHRUUVVORUxFTkJRVU1zUjBGRFJpeEZRVUZGTEVOQlEwNHNRMEZCUVR0QlFVTktMRTlCUVVNc1RVRkJUVHRCUVVOTUxGRkJRVUVzU1VGQlNUUlVMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTI5dVFpeHJRa0ZCYTBJc1JVRkJSVHRWUVVOcVEzVktMR1ZCUVdVc1IwRkJRU3hwUWtGQlFTeERRVUZCYW5oQ0xFMUJRVUVzUTBGQmNVSkRMR05CUVdNc1EwRkRhRVIzVWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFVkJRMjVDTzBGQlFVVTNZU3haUVVGQlFTeFZRVUZWTEVWQlFWWkJMRlZCUVZVN1FVRkJSVU1zV1VGQlFVRXNUVUZCVFN4RlFVRk9RU3hOUVVGQlFUdEJRVUZQTEZkQlEzWkNMRU5CUVVNc1EwRkJSU3hEUVVGQk8wRkJRMHdzVTBGQlF5eE5RVUZOTEVsQlFVazBWQ3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVObmMwSXNZMEZCWXl4RlFVRkZPMVZCUTNCRE1rVXNaVUZCWlN4SFFVRkJMR2xDUVVGQkxFTkJRVUZxZUVJc1RVRkJRU3hEUVVGeFFrTXNZMEZCWXl4RFFVTm9SSGRTTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMVpMRkZCUVZFc1JVRkRia0k3UVVGQlJUZGhMRmxCUVVGQkxGVkJRVlVzUlVGQlJTeE5RVUZOTzBGQlFVVkRMRmxCUVVGQkxFMUJRVTBzUlVGQlRrRXNUVUZCUVVFN1FVRkJUeXhYUVVNdlFpeERRVUZETEVOQlFVVXNRMEZCUVR0QlFVTk1MRk5CUVVNc1RVRkJUU3hKUVVGSk5GUXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETW10Q0xHMUNRVUZ0UWl4RlFVRkZPMVZCUTNwRFowMHNaVUZCWlN4SFFVRkJMR3RDUVVGQkxFTkJRVUZxZUVJc1RVRkJRU3hEUVVGelFrTXNZMEZCWXl4RFFVTnFSSGRTTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMVpMRkZCUVZFc1JVRkRia0k3UVVGQlJUZGhMRmxCUVVGQkxGVkJRVlVzUlVGQlJTeFhRVUZYTzBGQlFVVkRMRmxCUVVGQkxFMUJRVTBzUlVGQlRrRXNUVUZCUVVFN1FVRkJUeXhYUVVOd1F5eERRVUZETEVOQlFVVXNRMEZCUVR0QlFVTk1MRk5CUVVNc1RVRkJUU3hKUVVGSk5GUXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETkd0Q0xIRkNRVUZ4UWl4RlFVRkZPMVZCUXpOREswd3NaVUZCWlN4SFFVRkJMRzlDUVVGQkxFTkJRVUZxZUVJc1RVRkJRU3hEUVVGM1FrTXNZMEZCWXl4RFFVTnVSSGRTTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlEyMVpMRkZCUVZFc1JVRkRia0k3UVVGRFJUZGhMRmxCUVVGQkxGVkJRVlVzUlVGQlJTeFhRVUZYTzBGQlEzWkNReXhaUVVGQlFTeE5RVUZOTEVWQlFVNUJMRTFCUVVGQk8wRkJRMFlzVjBGRFJpeERRVUZETEVOQlFVVXNRMEZCUVR0QlFVTk1MRk5CUVVNc1RVRkJUVHRWUVVOTWIzcENMR1ZCUVdVc1IwRkJRU3hwUWtGQlFTeERRVUZCYW5oQ0xFMUJRVUVzUTBGQmNVSkRMR05CUVdNc1EwRkRhRVIzVWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFVkJRMjVDTzBGQlEwVTNZU3haUVVGQlFTeFZRVUZWTEVWQlFVVjFLMElzWTBGQll6dEJRVU14UW5RclFpeFpRVUZCUVN4TlFVRk5MRVZCUVU1QkxFMUJRVUZCTzBGQlEwWXNWMEZEUml4RFFVRkRMRU5CUVVVc1EwRkJRVHRCUVVOTUxGTkJRVUU3UVVGRFJpeFBRVUZCTzAxQlJVRXNiMEpCUTBWdlZTeExRVUZCTEVOQlFVRkRMR0ZCUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUU3UVVGRFJUUk1MRkZCUVVGQkxFbEJRVWtzUlVGQlF5eFBRVUZQTzBGQlExb3NVVUZCUVN4WFFVRkJMRVZCUVZVc1VVRkJVVHRCUVVOc1FteFJMRkZCUVVGQkxGTkJRVk1zUlVGQlF5dzJRa0ZCUVR0QlFVRTJRaXhQUVVGQkxFVkJSWFJEY1dwQ0xHVkJRMGNzUTBGQlF5eERRVUZCTzB0QlJWWXNRMEZCUVN4RFFVRkJPMGxCUVVGeVppeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3hwUWtGQlFTeEZRVVZwUWl4WlFVRk5PMEZCUVVFc1RVRkJRU3hKUVVGQk1uRkNMRzFDUVVGQkxFTkJRVUU3VFVGRGRFSXNTVUZCVFhoMVFpeFRRVUZUTEVkQlFVY3dSeXhKUVVGSkxFTkJRVU0zUXl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnpUaXhUUVVGVExFVkJRVUZuUlN4bFFVRkJMRU5CUTNoRE5tdENMRVZCUVVGQkxFVkJRVUZCTEhWQ1FVRjFRaXhGUVVGSGFHeENMRXRCUVVFc1EwRkJTMDBzUzBGQlN5eERRVUZETm1sQ0xFbEJRVWtzUTBGRE0wTXNRMEZCUXl4RFFVRkJPMDFCUlVZc1NVRkJUWGxJTEZkQlFWY3NSMEZCUnpWeFFpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU1yTjBJc1YwRkJWeXhwUWtGQlNYQnhRaXhMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4UFFVRkJMRVZCUVVFN1FVRkJUeXRZTEZGQlFVRkJMRWxCUVVrc1JVRkJReXhOUVVGQk8wRkJRVTBzVDBGQlJTeERRVUZETEVOQlFVRTdUVUZEYmtVc1NVRkJUWEZUTEdOQlFXTXNSMEZCUnpkeFFpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5uT0VJc1kwRkJZeXhKUVVGSkxFdEJRVXNzUTBGQlFUdEJRVU42UkN4TlFVRkJMRWxCUVUxMFJTeFZRVUZWTEVkQlEyUXNUMEZCVDNadFFpeExRVUZCTEVOQlFVdHVVaXhMUVVGTExFTkJRVU5zUkN4TFFVRkxMRXRCUVVzc1VVRkJVU3hIUVVOb1EzRlZMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTJ4RUxFdEJRVXNzUjBGRGFFSXNUMEZCVDNGVkxFdEJRVUVzUTBGQlMwMHNTMEZCU3l4RFFVRkRhVzFDTEZWQlFWVXNTMEZCU3l4UlFVRlJMRWRCUTNaRGRtMUNMRXRCUVVFc1EwRkJTMDBzUzBGQlN5eERRVUZEYVcxQ0xGVkJRVlVzUjBGRGNrSjJiVUlzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGFWb3NXVUZCV1N4SFFVTnlRbkJhTEcxQ1FVRnRRaXhEUVVOcVFuTlNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTBZc1UwRkJVeXhGUVVOd1FuRlNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUTBRc1QwRkJUeXhGUVVOc1FtOVNMRXRCUVVFc1EwRkJTMjVTTEV0QlExQXNRMEZCUXl4SFFVTkViVklzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRFoxa3NaVUZCWlN4SFFVTjRRamRZTEhWQ1FVRjFRaXhEUVVGRFoxSXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEYVZrc1lVRkJZU3hGUVVGRk9VY3NTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETEVkQlF6ZEVUQ3hqUVVGakxFTkJRVU4zVWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFVkJRVVZvU0N4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVVXpSQ3hOUVVGQkxHOUNRVUZQTWxJc1MwRkJTeXhEUVVGREsxZ3NXVUZCV1N4RFFVRkRjVk1zVjBGQlZ5eEhRVUZCUkN4dFFrRkJRU3hIUVVGQmVIRkNMRVZCUVVGQkxFVkJRVUZCTEdWQlFVRXNRMEZCUVVFc1pVRkJRU3hEUVVGQlFTeGxRVUZCTEVOQlFVRkJMR1ZCUVVFc1EwRkJRVUVzWlVGQlFTeERRVUZCUVN4bFFVRkJMRU5CUVVGQkxHVkJRVUVzUTBGQlFVRXNaVUZCUVN4RFFVRkJRU3hsUVVGQkxFTkJRVUZCTEdWQlFVRXNRMEZCUVhkeFFpeHRRa0ZCUVN4RlFVTnNRMFVzWTBGQll5eEZRVUZITEZWQlFVTTVSU3hMUVVGTExFVkJRVXM3VVVGRE0wSXZiRUlzUzBGQlFTeERRVUZMSzJ4Q0xFdEJRVXNzUjBGQlIwRXNTMEZCU3l4RFFVRkJPMEZCUTNCQ0xFOUJRVU1zV1VGRFRWRXNWVUZCVlN4RFFVRkJMRVZCUVVFc1VVRkJRU3hGUVVOVWRtMUNMRXRCUVVFc1EwRkJTemh4UWl4VlFVRlZMRU5CUTJJNWNVSXNSVUZCUVVFc1ZVRkJRVUVzUlVGQlFVRXNTMEZCUVN4RFFVRkxLM0ZDTEZsQlFWa3NZMEZEYkVJdmNVSXNTMEZCUVN4RFFVRkxkMjlDTEZsQlFWa3NRMEZCUVN4RlFVRkJMRk5CUVVFc1JVRkRha0o0YjBJc1MwRkJRU3hEUVVGTFozSkNMRmRCUVZjc1EwRkRaR2h5UWl4RlFVRkJRU3hYUVVGQlFTeEZRVUZCUVN4TFFVRkJMRU5CUVV0cGNrSXNZMEZCWXl4RFFVRkJMRVZCUVVFc1NVRkJRU3hGUVVNeFFtcHlRaXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVOeE9FSXNSVUZCUlN4RFFVTlliSEpDTEVWQlFVRkJMRTFCUVVGQkxFVkJRVUZCTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXNzUTBGQlF6WndRaXhKUVVGSkxFTkJRMll4V1N4RlFVRkJRU3hOUVVGQlFTeEZRVUZCUVN4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTnpPRUlzU1VGQlNTeERRVUZCTEVWQlFVRm9ja0lzWlVGQlFTeERRVUZCUVN4bFFVRkJMRU5CUVVGQkxHVkJRVUVzUTBGQlFVRXNaVUZCUVN4RFFVRkJRU3hsUVVGQkxFTkJRVUZCTEdWQlFVRXNRMEZCUVVFc1pVRkJRU3hEUVVGQlFTeGxRVUZCTEVOQlFVRkJMR1ZCUVVFc1EwRkJRVUVzWlVGQlFTeERRVUZCZDNGQ0xHMUNRVUZCTEdWQlExWXpjVUlzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRGRUaENMRk5CUVZNc1EwRkRiRUp3Y2tJc1JVRkJRVUVzWVVGQlFVRXNSVUZCUVVFc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRkemhDTEdWQlFXVXNRMEZCUVN4RlFVRkJMRlZCUVVFc1JVRkROMEp5Y2tJc1MwRkJRU3hEUVVGTGJsSXNTMEZCU3l4RFFVRkRhWHBDTEZGQlFWRXNRMEZCUVN4RlFVRkJMR05CUVVFc1JVRkRaamxvUWl4TFFVRkJMRU5CUVV0dVVpeExRVUZMTEVOQlFVTjVPRUlzV1VGQldTeERRVU14UW5wdlFpeEZRVUZCUVN4WFFVRkJRU3hGUVVGQlFTeEpRVUZKTEVOQlFVTXJia0lzVjBGQlZ5eERRVUZETHpkQ0xFdEJRVXNzUTBGQlEzTk9MRk5CUVZNc1JVRkJSVUVzVTBGQlV5eERRVUZETEVOQlFVRXNSVUZCUVN4UFFVRkJMRVZCUTJoRU5rUXNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZEZVdRc1MwRkJTeXhsUVVOaWRFMHNTMEZCUVN4RFFVRkxibElzUzBGQlN5eERRVUZETWpOQ0xGRkJRVkVzUTBGRGJrSjRiVUlzUlVGQlFVRXNWVUZCUVVFc1JVRkJRVUVzUzBGQlFTeERRVUZMYmxJc1MwRkJTeXhEUVVGRE9IQkNMRkZCUVZFc1EwRkJRU3hGUVVGQkxGVkJRVUVzUlVGRGJrSXpXU3hMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNeVlpeFJRVUZSTEVOQlFVRXNSVUZETjBJc2EwSkJRV3RDTEVWQlFVVjRTeXhMUVVGQkxFTkJRVXR1VWl4TFFVRkxMRU5CUVVNd09FSXNaVUZCWlN4SFFVRkJjSEpDTEdWQlFVRXNRMEZCUVVFc1pVRkJRU3hEUVVGQlFTeGxRVUZCTEVOQlFVRjNjVUlzYlVKQlFVRXNSVUZET1VNc1kwRkJZeXhGUVVGRk0zRkNMRXRCUVVFc1EwRkJTMjVTTEV0QlFVc3NRMEZCUXpJNFFpeFhRVUZYTEVkQlEzUkRMR2xDUVVGcFFpeEZRVUZGZUhKQ0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelE0UWl4alFVRmpMRU5CUXpWRExFVkJRVUVzWlVGQlpTeEZRVUZGZW5KQ0xFdEJRVUVzUTBGQlMyNVNMRXRCUVVzc1EwRkJRelk0UWl4WlFVRlpMRWRCUTNoRExFTkJRVUU3UzBGRFNDeERRVUZCTEVOQlFVRTdTVUZCUVhaeVFpeGxRVUZCTEVOQlFVRklMRXRCUVVFc1JVRkJRU3h0UWtGQlFTeEZRVVZ0UWl4WlFVRk5PMEZCUTNoQ0xFMUJRVUVzU1VGQlFUSklMRmxCUVVFc1IwRlZTVE5JTEV0QlFVRXNRMEZCUzI1U0xFdEJRVXM3VVVGVVdqZzRRaXhYUVVGWExFZEJRVUZvYTBJc1dVRkJRU3hEUVVGWVoydENMRmRCUVZjN1VVRkRXRGRLTEZGQlFWRXNSMEZCUVc1aExGbEJRVUVzUTBGQlVtMWhMRkZCUVZFN1VVRkRVamxoTEZGQlFWRXNSMEZCUVZjc1dVRkJRU3hEUVVGU1dDeFJRVUZSTzFGQlExSnlXU3hUUVVGVExFZEJRVUZuV2l4WlFVRkJMRU5CUVZSb1dpeFRRVUZUTzFGQlExUkRMRTlCUVU4c1IwRkJRU3RaTEZsQlFVRXNRMEZCVUM5WkxFOUJRVTg3VVVGRFVHYzVRaXhuUWtGQlowSXNSMEZCUVdwclFpeFpRVUZCTEVOQlFXaENhV3RDTEdkQ1FVRm5RanRSUVVGQlF5eHhRa0ZCUVN4SFFVRkJiR3RDTEZsQlFVRXNRMEZEYUVKdGEwSXNiMEpCUVc5Q08wRkJRWEJDUVN4UlFVRkJRU3h2UWtGQmIwSXNSMEZCUVVRc2NVSkJRVUVzUzBGQlJ5eExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkZMRWRCUVVGQkxIRkNRVUZCTzFGQlFVRkZMSEZDUVVGQkxFZEJRVUZ3YTBJc1dVRkJRU3hEUVVONlFuRnJRaXhqUVVGak8wRkJRV1JCTEZGQlFVRkJMR05CUVdNc1IwRkJRVVFzY1VKQlFVRXNTMEZCUnl4TFFVRkJMRU5CUVVFc1IwRkJRU3hQUVVGUExFZEJRVUZCTEhGQ1FVRkJPMUZCUTNoQ2FteENMR0ZCUVdFc1IwRkJRV0VzV1VGQlFTeERRVUZpWWl4aFFVRmhMRU5CUVVFN1RVRkZaaXhKUVVORk5tdENMRmRCUVZjc1MwRkRWak5yUWl4UlFVRlJMRWxCUVVrc1NVRkJTU3hKUVVObWNsa3NVMEZCVXl4SlFVRkpMRWxCUVVrc1NVRkRha0pETEU5QlFVOHNTVUZCU1N4SlFVRkpMRWxCUTJacldTeGhRVUZoTEV0QlFXSkJMRWxCUVVGQkxFbEJRVUZCTEdGQlFXRXNaVUZCWWtFc1lVRkJZU3hEUVVGRmFsb3NUVUZCVFN4RFFVRkRMRVZCUTNoQ08xRkJRMEVzYjBKQlEwVXlVeXhMUVVGQkxFTkJRVUZETEdGQlFVRXNRMEZCUVN4UlFVRkJMRVZCUVVFN1FVRkRSU3RZTEZWQlFVRkJMRWxCUVVrc1JVRkJReXhSUVVGUk8wRkJRMkp5WXl4VlFVRkJRU3hUUVVGVExFVkJRVVV3Unl4SlFVRkpMRU5CUTJJc09FSkJRVGhDTEVWQlF6bENhWEJDTEc5Q1FVRnZRaXhGUVVOd1FqdEJRVUZGTEZsQlFVRXNkME5CUVhkRExFVkJRVVZvU3l4UlFVRkJRVHRCUVVGVExGZEJRM1pFTEVOQlFVVTdRVUZEUmtFc1ZVRkJRVUVzVVVGQlVTeEZRVUZGUVN4UlFVRlRPMEZCUTI1Q0xGVkJRVUVzV1VGQlFTeEZRVUZaYTBzc1kwRkJaVHRWUVVNelFuUnlRaXhQUVVGUExFVkJRVVZXTEV0QlFVRXNRMEZCU3pSd1FpeFpRVUZoTzBGQlF6TkNkR1FzVlVGQlFVRXNTMEZCU3l4RlFVRkZjMllzWjBKQlFXbENPMEZCUTNoQ2NHaENMRlZCUVVGQkxGRkJRVkVzUlVGQlJTeERRVUZETEVOQlFVRTdRVUZCUlN4VFFVTmtMRU5CUVVNc1EwRkJRVHRCUVVWT0xFOUJRVU1zVFVGQlRUdEJRVU5NTEZGQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVFN1FVRkRZaXhQUVVGQk8wdEJRMFFzUTBGQlFTeERRVUZCTzBGQkx6bENRM2hMTEVsQlFVRkJMRXRCUVVFc1EwRkJTMDBzUzBGQlN5eEhRVUZIVGl4TFFVRkJMRU5CUVV0dGJVSXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlFUdEpRVU53UTI1dFFpeExRVUZCTEVOQlFVczJiRUlzYlVKQlFXMUNMRWRCUVVjc1NVRkJTU3hEUVVGQk8wRkJRVU1zU1VGQlFTeFBRVUZCTjJ4Q0xFdEJRVUVzUTBGQlFUdEJRVU5zUXl4SFFVRkJPMFZCUVVNMFFpeFRRVUZCTEVOQlFVRjNha0lzVlVGQlFTeEZRVUZCY214Q0xHZENRVUZCTEVOQlFVRXNRMEZCUVR0RlFVRkJMRTlCUVVFNFFpeFpRVUZCTEVOQlFVRjFha0lzVlVGQlFTeEZRVUZCTEVOQlFVRTdTVUZCUVRGd1FpeEhRVUZCTEVWQlFVRXNiVUpCUVVFN1NVRkJRUzlRTEV0QlFVRXNSVUZGUkN4VFFVRkJiVmNzYVVKQlFVRkJMRWRCUVc5Q08wMUJRMnhDY0ZBc1RVRkJUU3hEUVVGRGRUVkNMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVORExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUVR0QlFVTjRSQ3hMUVVGQk8wRkJRVU1zUjBGQlFTeEZRVUZCTzBsQlFVRjRkMElzUjBGQlFTeEZRVUZCTEc5Q1FVRkJPMEZCUVVFdlVDeEpRVUZCUVN4TFFVRkJMRVZCUlVRc1UwRkJRVGhuUWl4clFrRkJRVUVzUTBGQmJVSTNRaXhUUVVGVExFVkJRVVYxYUVJc1UwRkJVeXhGUVVGRk8wRkJRM1pETEUxQlFVRXNTVUZEUlhab1FpeFRRVUZUTEVOQlFVTlBMRTFCUVUwc1NVRkRhRUlyV2l4elFrRkJjMElzUTBGQlEzUmhMRk5CUVZNc1EwRkJRelZFTEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVOdVdTeExRVUZMTEVOQlFVTnRXU3hSUVVGUkxFTkJRVU1zUlVGREwwUTdVVUZEUVN4SlFVRkpMRU5CUVVOclNpeGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRjbWhDTEV0QlFVc3NRMEZCUTIxWkxGRkJRVkVzUTBGQlF5eERRVUZCTzBGQlF6TkRMRTlCUVVFN1FVRkRRU3hOUVVGQkxFbEJRMFVzU1VGQlNTeERRVUZETVVjc1MwRkJTeXhEUVVGRGQxb3NaVUZCWlN4TFFVRkxhRzFDTEZOQlFWTXNTVUZEZUVNNFZ5eFRRVUZUTEVOQlFVTjVWQ3hYUVVGWExFdEJRVXNzU1VGQlNTeERRVUZEZUhaQ0xFdEJRVXNzUTBGQlEzZDJRaXhYUVVGWExFVkJRMmhFTzFGQlEwRXNTVUZCU1N4RFFVRkRMMk1zVVVGQlVTeERRVUZETzBGQlFVVjNXU3hWUVVGQlFTeGxRVUZsTEVWQlFVVXNRMEZCUVR0QlFVRkZMRk5CUVVNc1EwRkJReXhEUVVGQk8wRkJRM1pETEU5QlFVRTdUVUZEUVN4SlFVRkpiRkFzVTBGQlV5eERRVUZETVZBc1kwRkJZeXhMUVVGTExFbEJRVWtzUTBGQlEzSk5MRXRCUVVzc1EwRkJRM0ZOTEdOQlFXTXNSVUZCUlR0UlFVTXhSQ3hKUVVGSkxFTkJRVU52Unl4UlFVRlJMRU5CUVVNN1FVRkRXbkJITEZWQlFVRkJMR05CUVdNc1JVRkJSVVFzYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRGNFMHNTMEZCU3l4RFFVRkRjVTBzWTBGQll5eERRVUZCTzBGQlEyaEZMRk5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zVDBGQlFUdEJRVU5CTEUxQlFVRXNTVUZEUlN4RFFVRkRhWGhDTEZOQlFWTXNRMEZCUTNaSExFOUJRVThzU1VGRGJFSXNRMEZCUXk5NlFpeFBRVUZQTEVOQlFVTXJXU3hUUVVGVExFTkJRVU0xUkN4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRGJsa3NTMEZCU3l4RFFVRkRiVmtzVVVGQlVTeERRVUZETEVWQlEycEVPMUZCUTBFc1NVRkJTU3hEUVVGRE1VWXNVVUZCVVN4RFFVRkRPMEZCUVVWcGJFSXNWVUZCUVVFc1ZVRkJWU3hGUVVGRkxFbEJRVUU3UVVGQlN5eFRRVUZETEVOQlFVTXNRMEZCUVR0QlFVTnlReXhQUVVGQk8wMUJSVUVzU1VGQlNUUkdMRk5CUVZNc1EwRkJRMmhLTEVsQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNM2FVSXNTMEZCU3l4RFFVRkRObWxDTEVsQlFVa3NSVUZCUlR0QlFVTjBReXhSUVVGQkxFbEJRVWxuU2l4VFFVRlRMRU5CUVVOb1NpeEpRVUZKTEV0QlFVc3NTMEZCU3l4SlFVRkpMRWxCUVVrc1EwRkJRemRwUWl4TFFVRkxMRU5CUVVNMmFVSXNTVUZCU1N4TFFVRkxMRWxCUVVrc1JVRkJSVHRCUVVONFJDeFZRVUZCTEVsQlFVa3NRMEZCUTNRd1FpeExRVUZMTEVOQlFVTjFPVUlzWTBGQll5eEZRVUZGTEVOQlFVRTdRVUZETjBJc1UwRkJRVHRCUVVWQkxGRkJRVUVzU1VGQlNVUXNVMEZCVXl4RFFVRkRhRW9zU1VGQlNTeExRVUZMTEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNM2FVSXNTMEZCU3l4RFFVRkRObWxDTEVsQlFVa3NTMEZCU3l4TFFVRkxMRVZCUVVVN1FVRkRlRVFzVlVGQlFTeEpRVUZKTEVOQlFVTjBNRUlzUzBGQlN5eERRVUZEZHpsQ0xHVkJRV1VzUlVGQlJTeERRVUZCTzBGQlF6bENMRk5CUVVFN1FVRkRSaXhQUVVGQk8wRkJRMFlzUzBGQlFUdEJRVUZETEVkQlFVRXNSVUZCUVR0SlFVRkJNM2RDTEVkQlFVRXNSVUZCUVN4elFrRkJRVHRKUVVGQkwxQXNTMEZCUVN4RlFVVkVMRk5CUVVFME1VSXNiMEpCUVVGQkxFZEJRWFZDTzAxQlEzSkNMRWxCUVVrc1EwRkJRMjFHTEhkQ1FVRjNRaXhGUVVGRkxFTkJRVUU3VFVGREwwSm9NRUlzVFVGQlRTeERRVUZETkRWQ0xHMUNRVUZ0UWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU5LTEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRVHRCUVVNelJDeExRVUZCTzBGQlFVTXNSMEZCUVN4RlFVRkJPMGxCUVVGNGQwSXNSMEZCUVN4RlFVRkJMSE5DUVVGQk8wbEJRVUV2VUN4TFFVRkJMRVZCYXpkQ1JDeFRRVUZCTkdkRExHOUNRVUZCUVN4SFFVRjFRanRCUVVOeVFpeE5RVUZCTEVsQlFVRndhMElzV1VGQlFTeEhRVU5GTEVsQlFVa3NRMEZCUTNSYUxFdEJRVXM3VVVGRVNqSTVRaXhSUVVGUkxFZEJRVUZ5YTBJc1dVRkJRU3hEUVVGU2NXdENMRkZCUVZFN1VVRkJSUzlNTEVsQlFVa3NSMEZCUVhSWkxGbEJRVUVzUTBGQlNuTlpMRWxCUVVrN1VVRkJSV2ROTEhGQ1FVRnhRaXhIUVVGQmRHdENMRmxCUVVFc1EwRkJja0p6YTBJc2NVSkJRWEZDTzFGQlFVVkRMSGxDUVVGNVFpeEhRVUZCZG10Q0xGbEJRVUVzUTBGQmVrSjFhMElzZVVKQlFYbENMRU5CUVVFN1FVRkZlRVVzVFVGQlFTeEpRVUZSZGtvc1NVRkJTU3hIUVVGTExFbEJRVWtzUTBGQlF6ZHBRaXhMUVVGTExFTkJRVzVDTm1sQ0xFbEJRVWtzUTBGQlFUdE5RVVZhTEc5Q1FVTkZNMmxDTEV0QlFVRXNRMEZCUVVNc1lVRkJRU3hEUVVGQkxFdEJRVUVzUlVGQlFUdEJRVU5GZEVVc1VVRkJRVUVzVTBGQlV5eHpRMEZCUVRWT0xFMUJRVUVzUTBGRFVHa3JRaXhSUVVGUkxFZEJRVWNzZFVOQlFYVkRMRWRCUVVjc1JVRkJSU3hEUVVGQk8wOUJSM2hFUVN4RlFVRkJRU3hSUVVGUkxHbENRVU5RYUhOQ0xFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVRkRLMllzWTBGQldTeEZRVUZCTVVJc1VVRkJRU3hEUVVGQk8wRkJRMWd5UWl4UlFVRkJRU3hKUVVGSkxFVkJRVVZCTEVsQlFVczdVVUZEV0hSclFpeFRRVUZUTEVWQlFVRXNSVUZCUVN4RFFVRkJOVTRzVFVGQlFTeERRVUZMYXl0Q0xIRkNRVUZ4UWl4UFFVRkJiQ3RDTEUxQlFVRXNRMEZEYWtNME1FSXNTVUZCU1N4SlFVRkpMSGREUVVGM1F5eERRVUZCTzBGQlF5OURMRTlCUVVFc1JVRkRSWFZLTEhsQ1FVRjVRaXhIUVVNeFFqdFJRVU5GYUhOQ0xFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTnBjMElzWTBGQlFVRTdRVUZEYUVJc1QwRkJReXhIUVVORUxFbEJRVWtzUTBGRFZDeERRVU5HTEVWQlEwRXNTVUZCU1N4RFFVRkRjbk5DTEV0QlFVc3NRMEZCUXpSYUxIVkNRVUYxUWl4SlFVRkpMRWxCUVVrc1EwRkJRemhHTEc5Q1FVRnZRaXhGUVVGRkxFVkJRMnBGTEVsQlFVa3NRMEZCUXpSTkxHVkJRV1VzUlVGQlJTeEZRVU4wUWl4SlFVRkpMRU5CUVVORExHbENRVUZwUWl4RlFVTndRaXhEUVVGRExFTkJRVUU3UVVGRlZpeExRVUZCTzBGQlFVTXNSMEZCUVN4RlFVRkJPMGxCUVVGdWVFSXNSMEZCUVN4RlFVRkJMRkZCUVVFN1NVRkJRUzlRTEV0QlFVRXNSVUZGUkN4VFFVRkJaMWdzVFVGQlFVRXNSMEZCVXp0QlFVTlFMRTFCUVVFc1NVRkJUV2R0UWl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRGJVVXNZMEZCWXl4RlFVRkZMRU5CUVVFN1FVRkZkRU1zVFVGQlFTeEpRVUZKTEVsQlFVa3NRMEZCUTJvclFpeExRVUZMTEVOQlFVTnpZeXhOUVVGTkxFVkJRVVVzVDBGQlQzZGtMRkZCUVZFc1EwRkJRVHRCUVVWMFF5eE5RVUZCTEVsQlFVa3NTVUZCU1N4RFFVRkRPVFZDTEV0QlFVc3NRMEZCUTNOM1FpeFZRVUZWTEVWQlFVVTdRVUZEZWtJc1VVRkJRU3hKUVVGSk5FNHNaVUZCWlN4SFFVRkhMRWxCUVVrc1EwRkJRM3B6UWl4TFFVRkxMRU5CUVVNMmFVSXNTVUZCU1N4blFrRkRia016YVVJc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVTnphRUlzVDBGQlR5eEZRVUZCTzBGQlFVTlBMRlZCUVVGQkxHRkJRV0VzUlVGQlJTeEpRVUZKTEVOQlFVTjZla0lzUzBGQlN5eERRVUZEZVhwQ0xHRkJRVUZCTzFOQlEycERPV2hDTEdWQlFVRkJMRXRCUVVFc1EwRkJRVU1zWVVGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVR0QlFVTkZkRVVzVlVGQlFVRXNVMEZCVXl4RlFVRkRMREJDUVVFd1FqdFZRVU53UTNGUExGRkJRVkVzUlVGQlJTeERRVUZETEVOQlFVVTdWVUZEWW5WQ0xGTkJRVk1zUlVGQlJTeEpRVUZKTEVOQlFVTnBhRUlzWlVGQlFVRTdRVUZCWjBJc1UwRkJRU3hGUVVVdlFuSkZMRkZCUTBVc1EwRkRSU3hEUVVGRExFZEJRMUlzU1VGQlNTeERRVUZCTzFGQlJWSXNTVUZCU1N4SlFVRkpMRU5CUVVOeWIwSXNTMEZCU3l4RFFVRkRObWxDTEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVOME1FSXNTMEZCU3l4RFFVRkRkWGxDTEZGQlFWRXNSVUZCUlR0QlFVTXhRekpNTEZWQlFVRkJMR1ZCUVdVc1owSkJRMkoyYzBJc1MwRkJRU3hEUVVGQlF5eGhRVUZCTEVOQlFVTnpaMElzVFVGQlRTeEZRVUZCTzBGQlEweExMRmxCUVVGQkxGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTjJlVUlzUzBGQlN5eERRVUZEZFhsQ0xGRkJRVk03UVVGRE9VSkdMRmxCUVVGQkxGVkJRVlVzUlVGQlJTeEpRVUZKTEVOQlFVTnllVUlzUzBGQlN5eERRVUZEY1hsQ0xGVkJRVUZCTzBGQlFWY3NWMEZCUVN4RlFVVnFRelpNTEdWQlEwc3NRMEZEVkN4RFFVRkJPMEZCUTBnc1UwRkJRVHRSUVVWQkxHOUNRVU5GZG5OQ0xFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVTkhMRXRCUVVFc1JVRkJRU3hKUVVGQkxFVkJRVUVzU1VGQlNTeERRVUZET0hKQ0xHOUNRVUZ2UWl4RlFVRkZMRVZCUXpOQ1VTeGxRVU5GTEVOQlFVTXNRMEZCUVR0QlFVVldMRTlCUVVFN1FVRkZRU3hOUVVGQkxHOUNRVU5GZG5OQ0xFdEJRVUVzUTBGQlFVTXNZVUZCUVN4RFFVRkRiV3BDTEdsQ1FVRmxMRVZCUVVFN1FVRkRaSHB1UWl4UlFVRkJRU3hUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZEZEU0c1MwRkJTeXhEUVVGRGJ5dENMR1ZCUVdkQ08wRkJRM1JEY0Vvc1VVRkJRVUVzWjBKQlFXZENMRVZCUVVVc1NVRkJTU3hEUVVGRGFERkNMRXRCUVVzc1EwRkJRMmN4UWl4blFrRkJhVUk3UVVGRE9VTm1MRkZCUVVGQkxGVkJRVlVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUTJsSUxHTkJRV01zUlVGQlJ6dEJRVU51UXpOSkxGRkJRVUZCTEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVOMmVVSXNTMEZCU3l4RFFVRkRkWGxDTEZGQlFWTTdRVUZET1VKR0xGRkJRVUZCTEZWQlFWVXNSVUZCUlN4SlFVRkpMRU5CUVVOeWVVSXNTMEZCU3l4RFFVRkRjWGxDTEZWQlFWYzdRVUZEYkVNd1FpeFJRVUZCUVN4bFFVRmxMRVZCUVVVc1NVRkJTU3hEUVVGREwzcENMRXRCUVVzc1EwRkJReXQ2UWl4bFFVRm5RanRCUVVNMVEyMUNMRkZCUVVGQkxHVkJRV1VzUlVGQlJTeEpRVUZKTEVOQlFVTjNTU3h2UWtGQmIwSXNSVUZCUnp0QlFVTTNRek5JTEZGQlFVRkJMR1ZCUVdVc1JVRkJSU3hKUVVGSkxFTkJRVU12TVVJc1MwRkJTeXhEUVVGREt6RkNMR1ZCUVdkQ08wRkJRelZEWkN4UlFVRkJRU3hsUVVGbExFVkJRVVUyUlN4UlFVRlRPMEZCUXpGQ2NFWXNVVUZCUVVFc1pVRkJaU3hGUVVGRkxFbEJRVWtzUTBGQlF6RXdRaXhMUVVGTExFTkJRVU13TUVJc1pVRkJaMEk3UVVGRE5VTldMRkZCUVVGQkxGZEJRVmNzUlVGQlJTeEpRVUZKTEVOQlFVTm9NRUlzUzBGQlN5eERRVUZEWnpCQ0xGZEJRVms3VVVGRGNFTnRRaXhsUVVGbExFVkJRVVVzU1VGQlNTeERRVUZEYTBvc1pVRkJaMEk3UVVGRGRFTTFTeXhSUVVGQlFTeGhRVUZoTEVWQlFVVXNTVUZCU1N4RFFVRkRlbnBDTEV0QlFVc3NRMEZCUTNsNlFpeGhRVUZqTzBGQlEzaERNa0lzVVVGQlFVRXNVMEZCVXl4RlFVRkZMRWxCUVVrc1EwRkJRM0F4UWl4TFFVRkxMRU5CUVVOekswSXNaVUZCUVVFN1FVRkJaMElzVDBGRGRrTXNRMEZCUXl4RFFVRkJPMEZCUlU0c1MwRkJRVHRCUVVGRExFZEJRVUVzUTBGQlFTeEZRVUZCTEVOQlFVRTdTVUZCUVhwNFFpeEhRVUZCTEVWQlFVRXNZMEZCUVR0SlFVRkJSU3hIUVVGQkxFVkJjSHBEUkN4VFFVRkJRU3hIUVVGQlFTeEhRVUV3UWp0TlFVTjRRaXhQUVVGUE8wRkJRMHc0Y2tJc1VVRkJRVUVzV1VGQldTeEZRVUZGTEV0QlFVczdRVUZEYmtKMk4wSXNVVUZCUVVFc1ZVRkJWU3hGUVVGRkxGbEJRVms3UVVGRGVFSTRPVUlzVVVGQlFVRXNhMEpCUVd0Q0xFVkJRVVVzVjBGQlZ6dEJRVU12UW5Sd1FpeFJRVUZCUVN4UlFVRlJMRVZCUVVGQkxGTkJRVUZCTEZGQlFVRkJMRWRCUVVjc1JVRkJSVHRCUVVOaWJXaENMRkZCUVVGQkxGRkJRVkVzUlVGQlJTeExRVUZMTzBGQlEyWnVZaXhSUVVGQlFTd3dRa0ZCTUVJc1JVRkJSU3hMUVVGTE8wRkJRMnBEYmtNc1VVRkJRVUVzV1VGQldTeEZRVUZGTEZGQlFWRTdRVUZEZEVKNVdTeFJRVUZCUVN4UFFVRlBMRVZCUVVGQkxGTkJRVUZCTEU5QlFVRkJMRWRCUVVjc1JVRkJSVHRCUVVOYU5rb3NVVUZCUVVFc1RVRkJUU3hGUVVGQlFTeFRRVUZCUVN4TlFVRkJRU3hIUVVGSExFVkJRVVU3UVVGRFdDOWhMRkZCUVVGQkxGTkJRVk1zUlVGQlFVRXNVMEZCUVVFc1UwRkJRVUVzUjBGQlJ5eEZRVUZGTzBGQlEyUjVZeXhSUVVGQlFTeFpRVUZaTEVWQlFVRkJMRk5CUVVGQkxGbEJRVUZCTEVkQlFVY3NSVUZCUlR0QlFVTnFRbTVyUWl4UlFVRkJRU3hSUVVGUkxFVkJRVUZCTEZOQlFVRkJMRkZCUVVGQkxFZEJRVWNzUlVGQlJUdEJRVU5pYmtJc1VVRkJRVUVzWTBGQll5eEZRVUZCUVN4VFFVRkJRU3hqUVVGQlFTeEhRVUZITEVWQlFVVTdRVUZEYmtKcldDeFJRVUZCUVN4aFFVRmhMRVZCUVVGQkxGTkJRVUZCTEdGQlFVRkJMRWRCUVVjc1JVRkJSVHRCUVVOc1FtZFRMRkZCUVVGQkxHTkJRV01zUlVGQlFVRXNVMEZCUVVFc1kwRkJRVUVzUjBGQlJ5eEZRVUZGTzBGQlEyNUNReXhSUVVGQlFTeGxRVUZsTEVWQlFVRkJMRk5CUVVGQkxHVkJRVUZCTEVkQlFVY3NSVUZCUlR0QlFVTndRalZHTEZGQlFVRkJMR3RDUVVGclFpeEZRVUZGTEV0QlFVczdRVUZEZWtKNFRTeFJRVUZCUVN4WlFVRlpMRVZCUVVGQkxGTkJRVUZCTEZsQlFVRkJMRWRCUVVjc1JVRkJSVHRCUVVOcVFtZFFMRkZCUVVGQkxGbEJRVmtzUlVGQlFVRXNVMEZCUVVFc1dVRkJRVUVzUjBGQlJ5eEZRVUZGTzBGQlEycENOVXNzVVVGQlFVRXNWMEZCVnl4RlFVRkZMRU5CUVVNN1FVRkRaRzFKTEZGQlFVRkJMRkZCUVZFc1JVRkJSU3hMUVVGTE8wRkJRMlp5U0N4UlFVRkJRU3hWUVVGVkxFVkJRVVVzUzBGQlN6dEJRVU5xUW5CWUxGRkJRVUZCTERCQ1FVRXdRaXhGUVVGRkxFdEJRVXM3UVVGRGFrTjNSaXhSUVVGQlFTeHRRa0ZCYlVJc1JVRkJSU3hKUVVGSk8wRkJRM3BDZFU4c1VVRkJRVUVzWTBGQll5eEZRVUZGTEV0QlFVczdRVUZEY2tKM1JDeFJRVUZCUVN4aFFVRmhMRVZCUVVVc1MwRkJTenRCUVVOd1FteENMRkZCUVVGQkxHdENRVUZyUWl4RlFVRkZMRXRCUVVzN1FVRkRla0kxU3l4UlFVRkJRU3h0UWtGQmJVSXNSVUZCUlN4TFFVRkxPMEZCUXpGQ2VFSXNVVUZCUVVFc2RVSkJRWFZDTEVWQlFVVXNTMEZCU3p0QlFVTTVRbXhFTEZGQlFVRkJMRFJDUVVFMFFpeEZRVUZGTEV0QlFVczdRVUZEYmtORUxGRkJRVUZCTERaQ1FVRTJRaXhGUVVGRkxFdEJRVXM3UVVGRGNFTm5UU3hSUVVGQlFTeGpRVUZqTEVWQlFVVXNTMEZCU3p0QlFVTnlRbkJJTEZGQlFVRkJMSEZDUVVGeFFpeEZRVUZGTEV0QlFVczdRVUZETlVKMlRTeFJRVUZCUVN4alFVRmpMRVZCUVVVc1MwRkJTenRCUVVOeVFqZGhMRkZCUVVGQkxHRkJRV0VzUlVGQlJTeExRVUZMTzBGQlEzQkNiemRDTEZGQlFVRkJMRk5CUVZNc1JVRkJSU3hMUVVGTE8wRkJRMmhDZGtrc1VVRkJRVUVzWVVGQllTeEZRVUZGTEVWQlFVVTdRVUZEYWtKb1NpeFJRVUZCUVN4WFFVRlhMRVZCUVVVc1RVRkJUVHRCUVVOdVFuZEdMRkZCUVVGQkxITkNRVUZ6UWl4RlFVRkZMR2RDUVVGblFqdEJRVU40UTBnc1VVRkJRVUVzZDBKQlFYZENMRVZCUVVVc1owSkJRV2RDTzBGQlF6RkRZU3hSUVVGQlFTeHJRa0ZCYTBJc1JVRkJSU3haUVVGWk8wRkJRMmhEU0N4UlFVRkJRU3h2UWtGQmIwSXNSVUZCUlN4WlFVRlpPMEZCUTJ4RFRDeFJRVUZCUVN4eFFrRkJjVUlzUlVGQlJTeGxRVUZsTzBGQlEzUkRTaXhSUVVGQlFTeDFRa0ZCZFVJc1JVRkJSU3hsUVVGbE8wRkJRM2hEWXl4UlFVRkJRU3hwUWtGQmFVSXNSVUZCUlN4WFFVRlhPMEZCUXpsQ1NpeFJRVUZCUVN4dFFrRkJiVUlzUlVGQlJTeFhRVUZYTzBGQlEyaERkRVFzVVVGQlFVRXNZMEZCWXl4RlFVRkZMRTFCUVUwN1FVRkRkRUl3U2l4UlFVRkJRU3hoUVVGaExFVkJRVVVzU1VGQlNUdEJRVU51UWpOdlFpeFJRVUZCUVN4alFVRmpMRVZCUVVWdVR5eDNRa0ZCZDBJN1FVRkRlRU50T0VJc1VVRkJRVUVzYTBKQlFXdENMRVZCUVVVc1MwRkJTenRCUVVONlFuZEdMRkZCUVVGQkxHVkJRV1VzUlVGQlJTeEpRVUZKTzBGQlEzSkNOVU1zVVVGQlFVRXNaMEpCUVdkQ0xFVkJRVVVzU1VGQlNUdEJRVU4wUW1wVExGRkJRVUZCTEdWQlFXVXNSVUZCUlN4SlFVRkpPMEZCUTNKQ0wyNUNMRkZCUVVGQkxHZENRVUZuUWl4RlFVRkZkVVFzVTBGQlV6dEJRVU16UWpRMFFpeFJRVUZCUVN4NVFrRkJlVUlzUlVGQlJTeExRVUZMTzBGQlEyaERlbWRDTEZGQlFVRkJMR1ZCUVdVc1JVRkJSU3hMUVVGQk8wOUJRMnhDTEVOQlFVRTdRVUZEU0N4TFFVRkJPMEZCUVVNc1IwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEVOQk5VUnhRM3BNTEVOQlFVRkJMRXRCUVVzc1EwRkJRM2RETEZOQlFWTXNSVUZCUVR0QlFYZDZRM1pFTEVsQlFVMXJhMElzTUVKQlFUQkNMRWRCUVVjc1QwRkJUeXhEUVVGQk8wRkJRekZETEVsQlFVMWlMRFpDUVVFMlFpeEhRVUZITEZWQlFWVTdPenM3SW4wPVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlUmVmIiwiY2xzeCIsImlzRGF0ZSIsImlzVmFsaWQiLCJpc1ZhbGlkJDEiLCJmb3JtYXQiLCJsb25nRm9ybWF0dGVycyIsImFkZE1pbnV0ZXMiLCJhZGRIb3VycyIsImFkZERheXMiLCJhZGRXZWVrcyIsImFkZE1vbnRocyIsImFkZFF1YXJ0ZXJzIiwiYWRkWWVhcnMiLCJzdWJEYXlzIiwic3ViV2Vla3MiLCJzdWJNb250aHMiLCJzdWJRdWFydGVycyIsInN1YlllYXJzIiwiZ2V0U2Vjb25kcyIsImdldE1pbnV0ZXMiLCJnZXRIb3VycyIsImdldERheSIsImdldERhdGUiLCJnZXRJU09XZWVrIiwiZ2V0TW9udGgiLCJnZXRRdWFydGVyIiwiZ2V0WWVhciIsImdldFRpbWUiLCJzZXRTZWNvbmRzIiwic2V0TWludXRlcyIsInNldEhvdXJzIiwic2V0TW9udGgiLCJzZXRRdWFydGVyIiwic2V0WWVhciIsIm1pbiIsIm1heCIsImRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyIsImRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzIiwiZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycyIsImRpZmZlcmVuY2VJbkNhbGVuZGFyUXVhcnRlcnMiLCJzdGFydE9mRGF5Iiwic3RhcnRPZldlZWsiLCJzdGFydE9mTW9udGgiLCJzdGFydE9mUXVhcnRlciIsInN0YXJ0T2ZZZWFyIiwiZW5kT2ZEYXkiLCJlbmRPZldlZWsiLCJlbmRPZk1vbnRoIiwiZW5kT2ZZZWFyIiwiaXNFcXVhbCIsImlzRXF1YWwkMSIsImlzU2FtZURheSIsImlzU2FtZURheSQxIiwiaXNTYW1lTW9udGgiLCJpc1NhbWVNb250aCQxIiwiaXNTYW1lWWVhciIsImlzU2FtZVllYXIkMSIsImlzU2FtZVF1YXJ0ZXIiLCJpc1NhbWVRdWFydGVyJDEiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCJpc1dpdGhpbkludGVydmFsIiwidG9EYXRlIiwicGFyc2UiLCJwYXJzZUlTTyIsImFkZFNlY29uZHMiLCJnZXRTZWNvbmRzJDEiLCJvbkNsaWNrT3V0c2lkZSIsIlJlYWN0RE9NIiwidXNlRmxvYXRpbmciLCJhdXRvVXBkYXRlIiwiZmxpcCIsIm9mZnNldCIsImFycm93IiwiRmxvYXRpbmdBcnJvdyIsInNldCIsIl9jYWxsU3VwZXIiLCJ0IiwibyIsImUiLCJfZ2V0UHJvdG90eXBlT2YiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJhcHBseSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsIm93bktleXMiLCJyIiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiX29iamVjdFNwcmVhZDIiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1ByaW1pdGl2ZSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiaSIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsIl90b1Byb3BlcnR5S2V5IiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJvYmoiLCJ2YWx1ZSIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInNvdXJjZSIsImhhc093blByb3BlcnR5IiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX3NldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInAiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIkFycmF5IiwiaXNBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiaXRlciIsImZyb20iLCJtaW5MZW4iLCJuIiwidG9TdHJpbmciLCJzbGljZSIsIm5hbWUiLCJ0ZXN0IiwibGVuIiwiYXJyMiIsIkRFRkFVTFRfWUVBUl9JVEVNX05VTUJFUiIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwibmV3RGF0ZSIsImQiLCJEYXRlIiwicGFyc2VEYXRlIiwiZGF0ZUZvcm1hdCIsImxvY2FsZSIsInN0cmljdFBhcnNpbmciLCJtaW5EYXRlIiwicGFyc2VkRGF0ZSIsImxvY2FsZU9iamVjdCIsImdldExvY2FsZU9iamVjdCIsImdldERlZmF1bHRMb2NhbGUiLCJzdHJpY3RQYXJzaW5nVmFsdWVNYXRjaCIsImRmIiwidHJ5UGFyc2VEYXRlIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwidXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyIsImZvcm1hdERhdGUiLCJtYXRjaCIsIm1hcCIsInN1YnN0cmluZyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImZvcm1hdExvbmciLCJqb2luIiwiZGF0ZSIsImZvcm1hdFN0ciIsImxvY2FsZU9iaiIsImNvbnNvbGUiLCJ3YXJuIiwiY29uY2F0Iiwic2FmZURhdGVGb3JtYXQiLCJfcmVmIiwic2FmZURhdGVSYW5nZUZvcm1hdCIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJmb3JtYXR0ZWRTdGFydERhdGUiLCJmb3JtYXR0ZWRFbmREYXRlIiwic2FmZU11bHRpcGxlRGF0ZXNGb3JtYXQiLCJkYXRlcyIsImZvcm1hdHRlZEZpcnN0RGF0ZSIsImZvcm1hdHRlZFNlY29uZERhdGUiLCJleHRyYURhdGVzQ291bnQiLCJzZXRUaW1lIiwiX3JlZjIiLCJfcmVmMiRob3VyIiwiaG91ciIsIl9yZWYyJG1pbnV0ZSIsIm1pbnV0ZSIsIl9yZWYyJHNlY29uZCIsInNlY29uZCIsImdldFdlZWsiLCJnZXREYXlPZldlZWtDb2RlIiwiZGF5IiwiZ2V0U3RhcnRPZkRheSIsImdldFN0YXJ0T2ZXZWVrIiwiY2FsZW5kYXJTdGFydERheSIsIndlZWtTdGFydHNPbiIsImdldFN0YXJ0T2ZNb250aCIsImdldFN0YXJ0T2ZZZWFyIiwiZ2V0U3RhcnRPZlF1YXJ0ZXIiLCJnZXRTdGFydE9mVG9kYXkiLCJnZXRFbmRPZldlZWsiLCJkYXRlMSIsImRhdGUyIiwiaXNEYXlJblJhbmdlIiwidmFsaWQiLCJzdGFydCIsImVuZCIsImVyciIsInJlZ2lzdGVyTG9jYWxlIiwibG9jYWxlTmFtZSIsImxvY2FsZURhdGEiLCJzY29wZSIsIndpbmRvdyIsImdsb2JhbFRoaXMiLCJfX2xvY2FsZURhdGFfXyIsInNldERlZmF1bHRMb2NhbGUiLCJfX2xvY2FsZUlkX18iLCJsb2NhbGVTcGVjIiwiZ2V0Rm9ybWF0dGVkV2Vla2RheUluTG9jYWxlIiwiZm9ybWF0RnVuYyIsImdldFdlZWtkYXlNaW5JbkxvY2FsZSIsImdldFdlZWtkYXlTaG9ydEluTG9jYWxlIiwiZ2V0TW9udGhJbkxvY2FsZSIsIm1vbnRoIiwiZ2V0TW9udGhTaG9ydEluTG9jYWxlIiwiZ2V0UXVhcnRlclNob3J0SW5Mb2NhbGUiLCJxdWFydGVyIiwiaXNEYXlEaXNhYmxlZCIsIl9yZWYzIiwidW5kZWZpbmVkIiwibWF4RGF0ZSIsImV4Y2x1ZGVEYXRlcyIsImV4Y2x1ZGVEYXRlSW50ZXJ2YWxzIiwiaW5jbHVkZURhdGVzIiwiaW5jbHVkZURhdGVJbnRlcnZhbHMiLCJmaWx0ZXJEYXRlIiwiaXNPdXRPZkJvdW5kcyIsInNvbWUiLCJleGNsdWRlRGF0ZSIsIl9yZWY0IiwiaW5jbHVkZURhdGUiLCJfcmVmNSIsImlzRGF5RXhjbHVkZWQiLCJfcmVmNiIsIl9yZWY3IiwiaXNNb250aERpc2FibGVkIiwiX3JlZjgiLCJpc01vbnRoSW5SYW5nZSIsIm0iLCJzdGFydERhdGVZZWFyIiwic3RhcnREYXRlTW9udGgiLCJlbmREYXRlWWVhciIsImVuZERhdGVNb250aCIsImRheVllYXIiLCJpc1F1YXJ0ZXJEaXNhYmxlZCIsIl9yZWY5IiwiaXNZZWFySW5SYW5nZSIsInllYXIiLCJzdGFydFllYXIiLCJlbmRZZWFyIiwiaXNZZWFyRGlzYWJsZWQiLCJfcmVmMTAiLCJpc1F1YXJ0ZXJJblJhbmdlIiwicSIsInN0YXJ0RGF0ZVF1YXJ0ZXIiLCJlbmREYXRlUXVhcnRlciIsIl9yZWYxMSIsImlzVGltZUluTGlzdCIsInRpbWUiLCJ0aW1lcyIsImxpc3RUaW1lIiwiaXNUaW1lRGlzYWJsZWQiLCJfcmVmMTIiLCJleGNsdWRlVGltZXMiLCJpbmNsdWRlVGltZXMiLCJmaWx0ZXJUaW1lIiwiaXNUaW1lSW5EaXNhYmxlZFJhbmdlIiwiX3JlZjEzIiwibWluVGltZSIsIm1heFRpbWUiLCJFcnJvciIsImJhc2UiLCJiYXNlVGltZSIsIm1vbnRoRGlzYWJsZWRCZWZvcmUiLCJfcmVmMTQiLCJwcmV2aW91c01vbnRoIiwiZXZlcnkiLCJtb250aERpc2FibGVkQWZ0ZXIiLCJfcmVmMTUiLCJuZXh0TW9udGgiLCJxdWFydGVyRGlzYWJsZWRCZWZvcmUiLCJfcmVmMTYiLCJmaXJzdERhdGVPZlllYXIiLCJwcmV2aW91c1F1YXJ0ZXIiLCJxdWFydGVyRGlzYWJsZWRBZnRlciIsIl9yZWYxNyIsImxhc3REYXRlT2ZZZWFyIiwibmV4dFF1YXJ0ZXIiLCJ5ZWFyRGlzYWJsZWRCZWZvcmUiLCJfcmVmMTgiLCJwcmV2aW91c1llYXIiLCJ5ZWFyc0Rpc2FibGVkQmVmb3JlIiwiX3JlZjE5IiwiX3JlZjE5JHllYXJJdGVtTnVtYmVyIiwieWVhckl0ZW1OdW1iZXIiLCJfZ2V0WWVhcnNQZXJpb2QiLCJnZXRZZWFyc1BlcmlvZCIsImVuZFBlcmlvZCIsIm1pbkRhdGVZZWFyIiwieWVhckRpc2FibGVkQWZ0ZXIiLCJfcmVmMjAiLCJuZXh0WWVhciIsInllYXJzRGlzYWJsZWRBZnRlciIsIl9yZWYyMSIsIl9yZWYyMSR5ZWFySXRlbU51bWJlciIsIl9nZXRZZWFyc1BlcmlvZDIiLCJzdGFydFBlcmlvZCIsIm1heERhdGVZZWFyIiwiZ2V0RWZmZWN0aXZlTWluRGF0ZSIsIl9yZWYyMiIsIm1pbkRhdGVzIiwiZ2V0RWZmZWN0aXZlTWF4RGF0ZSIsIl9yZWYyMyIsIm1heERhdGVzIiwiZ2V0SGlnaHRMaWdodERheXNNYXAiLCJoaWdobGlnaHREYXRlcyIsImRlZmF1bHRDbGFzc05hbWUiLCJkYXRlQ2xhc3NlcyIsIk1hcCIsImNsYXNzTmFtZXNBcnIiLCJnZXQiLCJpbmNsdWRlcyIsImNsYXNzTmFtZSIsImFyck9mRGF0ZXMiLCJrIiwiX2xlbiIsIl9rZXkiLCJfY2xhc3NOYW1lc0FyciIsImFycmF5c0FyZUVxdWFsIiwiYXJyYXkxIiwiYXJyYXkyIiwiaW5kZXgiLCJnZXRIb2xpZGF5c01hcCIsImhvbGlkYXlEYXRlcyIsImhvbGlkYXkiLCJkYXRlT2JqIiwiaG9saWRheU5hbWUiLCJjbGFzc05hbWVzT2JqIiwiaG9saWRheU5hbWVBcnIiLCJ0aW1lc1RvSW5qZWN0QWZ0ZXIiLCJjdXJyZW50VGltZSIsImN1cnJlbnRNdWx0aXBsaWVyIiwiaW50ZXJ2YWxzIiwiaW5qZWN0ZWRUaW1lcyIsImwiLCJpbmplY3RlZFRpbWUiLCJuZXh0VGltZSIsImFkZFplcm8iLCJNYXRoIiwiY2VpbCIsImdldEhvdXJzSW5EYXkiLCJnZXRGdWxsWWVhciIsInN0YXJ0T2ZUaGVOZXh0RGF5Iiwicm91bmQiLCJzdGFydE9mTWludXRlIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImlzU2FtZU1pbnV0ZSIsImQxIiwiZDIiLCJnZXRNaWRuaWdodERhdGUiLCJkYXRlV2l0aG91dFRpbWUiLCJpc0RhdGVCZWZvcmUiLCJkYXRlVG9Db21wYXJlIiwibWlkbmlnaHREYXRlIiwibWlkbmlnaHREYXRlVG9Db21wYXJlIiwiaXNTcGFjZUtleURvd24iLCJldmVudCIsIlNQQUNFX0tFWSIsImdlbmVyYXRlWWVhcnMiLCJub09mWWVhciIsImxpc3QiLCJuZXdZZWFyIiwiaXNJblJhbmdlIiwiWWVhckRyb3Bkb3duT3B0aW9ucyIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGhpcyIsInNlbGVjdGVkWWVhciIsIm9wdGlvbnMiLCJzdGF0ZSIsInllYXJzTGlzdCIsImNyZWF0ZUVsZW1lbnQiLCJvbkNsaWNrIiwib25DaGFuZ2UiLCJtaW5ZZWFyIiwibWF4WWVhciIsImZpbmQiLCJ1bnNoaWZ0IiwiaW5jcmVtZW50WWVhcnMiLCJkZWNyZW1lbnRZZWFycyIsIm9uQ2FuY2VsIiwiYW1vdW50IiwieWVhcnMiLCJzZXRTdGF0ZSIsInNoaWZ0WWVhcnMiLCJ5ZWFyRHJvcGRvd25JdGVtTnVtYmVyIiwic2Nyb2xsYWJsZVllYXJEcm9wZG93biIsImRyb3Bkb3duUmVmIiwiY29tcG9uZW50RGlkTW91bnQiLCJkcm9wZG93bkN1cnJlbnQiLCJjdXJyZW50IiwiZHJvcGRvd25DdXJyZW50Q2hpbGRyZW4iLCJjaGlsZHJlbiIsInNlbGVjdGVkWWVhck9wdGlvbkVsIiwiY2hpbGRFbCIsImFyaWFTZWxlY3RlZCIsInNjcm9sbFRvcCIsIm9mZnNldFRvcCIsImNsaWVudEhlaWdodCIsInNjcm9sbEhlaWdodCIsInJlbmRlciIsImRyb3Bkb3duQ2xhc3MiLCJyZWYiLCJyZW5kZXJPcHRpb25zIiwiQ29tcG9uZW50IiwiV3JhcHBlZFllYXJEcm9wZG93bk9wdGlvbnMiLCJZZWFyRHJvcGRvd24iLCJhcmdzIiwiZHJvcGRvd25WaXNpYmxlIiwib25TZWxlY3RDaGFuZ2UiLCJyZW5kZXJTZWxlY3RPcHRpb25zIiwidmlzaWJsZSIsInN0eWxlIiwidmlzaWJpbGl0eSIsInRvZ2dsZURyb3Bkb3duIiwicmVzdWx0IiwicmVuZGVyUmVhZFZpZXciLCJyZW5kZXJEcm9wZG93biIsImFkanVzdERhdGVPbkNoYW5nZSIsImhhbmRsZVllYXJDaGFuZ2UiLCJvblNlbGVjdCIsInNldE9wZW4iLCJyZW5kZXJlZERyb3Bkb3duIiwiZHJvcGRvd25Nb2RlIiwicmVuZGVyU2Nyb2xsTW9kZSIsInJlbmRlclNlbGVjdE1vZGUiLCJNb250aERyb3Bkb3duT3B0aW9ucyIsIm1vbnRoTmFtZXMiLCJpc1NlbGVjdGVkTW9udGgiLCJXcmFwcGVkTW9udGhEcm9wZG93bk9wdGlvbnMiLCJNb250aERyb3Bkb3duIiwiTSIsIl90aGlzMiIsInVzZVNob3J0TW9udGhJbkRyb3Bkb3duIiwiZ2VuZXJhdGVNb250aFllYXJzIiwiY3VyckRhdGUiLCJsYXN0RGF0ZSIsIk1vbnRoWWVhckRyb3Bkb3duT3B0aW9ucyIsIm1vbnRoWWVhcnNMaXN0IiwibW9udGhZZWFyIiwibW9udGhZZWFyUG9pbnQiLCJpc1NhbWVNb250aFllYXIiLCJzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd24iLCJXcmFwcGVkTW9udGhZZWFyRHJvcGRvd25PcHRpb25zIiwiTW9udGhZZWFyRHJvcGRvd24iLCJ0aW1lUG9pbnQiLCJ5ZWFyTW9udGgiLCJjaGFuZ2VkRGF0ZSIsInBhcnNlSW50IiwiRGF5IiwiaXNEaXNhYmxlZCIsIm9uTW91c2VFbnRlciIsImV2ZW50S2V5IiwicHJldmVudERlZmF1bHQiLCJoYW5kbGVPbktleURvd24iLCJvdGhlciIsIl90aGlzJHByb3BzJHNlbGVjdGVkRCIsImRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uIiwiaXNTZWxlY3RlZERhdGUiLCJzZWxlY3RzTXVsdGlwbGUiLCJzZWxlY3RlZERhdGVzIiwiaXNTYW1lRGF5T3JXZWVrIiwic2VsZWN0ZWQiLCJwcmVTZWxlY3Rpb24iLCJzaG93V2Vla1BpY2tlciIsImlzU2FtZVdlZWsiLCJfdGhpcyRwcm9wcyIsImRheVN0ciIsIl90aGlzJHByb3BzMiIsImhvbGlkYXlzIiwiaGFzIiwiX3RoaXMkcHJvcHMzIiwiX3RoaXMkcHJvcHMkc2VsZWN0aW5nIiwiX3RoaXMkcHJvcHM0Iiwic2VsZWN0c1N0YXJ0Iiwic2VsZWN0c0VuZCIsInNlbGVjdHNSYW5nZSIsInNlbGVjdHNEaXNhYmxlZERheXNJblJhbmdlIiwic2VsZWN0aW5nRGF0ZSIsIl90aGlzJHByb3BzJHNlbGVjdGluZzIiLCJpc0luU2VsZWN0aW5nUmFuZ2UiLCJfdGhpcyRwcm9wczUiLCJfdGhpcyRwcm9wcyRzZWxlY3RpbmczIiwiX3RoaXMkcHJvcHM2IiwiX3RoaXMkcHJvcHM3IiwiX3RoaXMkcHJvcHM4Iiwid2Vla2RheSIsIl90aGlzJHByb3BzJHNlbGVjdGVkRDIiLCJkYXlDbGFzc05hbWUiLCJpc0V4Y2x1ZGVkIiwiaXNTZWxlY3RlZCIsImlzS2V5Ym9hcmRTZWxlY3RlZCIsImlzUmFuZ2VTdGFydCIsImlzUmFuZ2VFbmQiLCJpc1NlbGVjdGluZ1JhbmdlU3RhcnQiLCJpc1NlbGVjdGluZ1JhbmdlRW5kIiwiaXNDdXJyZW50RGF5IiwiaXNXZWVrZW5kIiwiaXNBZnRlck1vbnRoIiwiaXNCZWZvcmVNb250aCIsImdldEhpZ2hMaWdodGVkQ2xhc3MiLCJnZXRIb2xpZGF5c0NsYXNzIiwiX3RoaXMkcHJvcHM5IiwiX3RoaXMkcHJvcHM5JGFyaWFMYWJlIiwiYXJpYUxhYmVsUHJlZml4V2hlbkVuYWJsZWQiLCJfdGhpcyRwcm9wczkkYXJpYUxhYmUyIiwiYXJpYUxhYmVsUHJlZml4V2hlbkRpc2FibGVkIiwicHJlZml4IiwiX3RoaXMkcHJvcHMxMCIsIl90aGlzJHByb3BzMTAkaG9saWRheSIsImNvbXBhcmVEdCIsInRpdGxlcyIsImhvbGlkYXlOYW1lcyIsIm1lc3NhZ2UiLCJzZWxlY3RlZERheSIsInByZVNlbGVjdGlvbkRheSIsInRhYkluZGV4Iiwic2hvd1dlZWtOdW1iZXIiLCJpc1N0YXJ0T2ZXZWVrIiwiX3RoaXMkZGF5RWwkY3VycmVudCIsInByZXZQcm9wcyIsInNob3VsZEZvY3VzRGF5IiwiZ2V0VGFiSW5kZXgiLCJpc0lucHV0Rm9jdXNlZCIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJpbmxpbmUiLCJzaG91bGRGb2N1c0RheUlubGluZSIsImNvbnRhaW5lclJlZiIsImNvbnRhaW5zIiwiY2xhc3NMaXN0IiwibW9udGhTaG93c0R1cGxpY2F0ZURheXNFbmQiLCJtb250aFNob3dzRHVwbGljYXRlRGF5c1N0YXJ0IiwiZGF5RWwiLCJmb2N1cyIsInByZXZlbnRTY3JvbGwiLCJyZW5kZXJEYXlDb250ZW50cyIsImdldENsYXNzTmFtZXMiLCJvbktleURvd24iLCJoYW5kbGVDbGljayIsInVzZVBvaW50ZXJFdmVudCIsImhhbmRsZU1vdXNlRW50ZXIiLCJvblBvaW50ZXJFbnRlciIsImdldEFyaWFMYWJlbCIsInJvbGUiLCJ0aXRsZSIsImdldFRpdGxlIiwiaGFuZGxlRm9jdXNEYXkiLCJjb21wb25lbnREaWRVcGRhdGUiLCJXZWVrTnVtYmVyIiwic2hvdWxkRm9jdXNXZWVrTnVtYmVyIiwid2Vla051bWJlckVsIiwiaGFuZGxlRm9jdXNXZWVrTnVtYmVyIiwid2Vla051bWJlciIsIl90aGlzJHByb3BzJGFyaWFMYWJlbCIsImFyaWFMYWJlbFByZWZpeCIsIndlZWtOdW1iZXJDbGFzc2VzIiwiV2VlayIsIm9uRGF5Q2xpY2siLCJvbkRheU1vdXNlRW50ZXIiLCJvbldlZWtTZWxlY3QiLCJoYW5kbGVEYXlDbGljayIsInNob3VsZENsb3NlT25TZWxlY3QiLCJmb3JtYXRXZWVrTnVtYmVyIiwiZGF5cyIsIm9uQ2xpY2tBY3Rpb24iLCJoYW5kbGVXZWVrQ2xpY2siLCJjaG9vc2VEYXlBcmlhTGFiZWxQcmVmaXgiLCJkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeCIsImhhbmRsZURheU1vdXNlRW50ZXIiLCJyZW5kZXJEYXlzIiwiRklYRURfSEVJR0hUX1NUQU5EQVJEX1dFRUtfQ09VTlQiLCJNT05USF9DT0xVTU5TX0xBWU9VVCIsIlRXT19DT0xVTU5TIiwiVEhSRUVfQ09MVU1OUyIsIkZPVVJfQ09MVU1OUyIsIk1PTlRIX0NPTFVNTlMiLCJncmlkIiwidmVydGljYWxOYXZpZ2F0aW9uT2Zmc2V0IiwiTU9OVEhfTkFWSUdBVElPTl9IT1JJWk9OVEFMX09GRlNFVCIsImdldE1vbnRoQ29sdW1uc0xheW91dCIsInNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyIiwic2hvd1R3b0NvbHVtbk1vbnRoWWVhclBpY2tlciIsIk1vbnRoIiwib3JkZXJJbkRpc3BsYXkiLCJvbk1vdXNlTGVhdmUiLCJpc0luU2VsZWN0aW5nUmFuZ2VNb250aCIsIl9tb250aCIsIl90aGlzJHByb3BzJHNlbGVjdGluZzQiLCJ3ZWVrcyIsImlzRml4ZWRIZWlnaHQiLCJmaXhlZEhlaWdodCIsImJyZWFrQWZ0ZXJOZXh0UHVzaCIsImN1cnJlbnRXZWVrU3RhcnQiLCJ3ZWVrQXJpYUxhYmVsUHJlZml4Iiwic2hvd1dlZWtOdW1iZXJzIiwiaXNGaXhlZEFuZEZpbmFsV2VlayIsImlzTm9uRml4ZWRBbmRPdXRPZk1vbnRoIiwiaXNXZWVrSW5Nb250aCIsInBlZWtOZXh0TW9udGgiLCJsYWJlbERhdGUiLCJuZXdNb250aCIsInNldFByZVNlbGVjdGlvbiIsIk1PTlRIX1JFRlMiLCJoYW5kbGVPbk1vbnRoS2V5RG93biIsIm1vbnRoQ29sdW1uc0xheW91dCIsInZlcnRpY2FsT2Zmc2V0IiwibW9udGhzR3JpZCIsIm9uTW9udGhDbGljayIsImhhbmRsZU1vbnRoTmF2aWdhdGlvbiIsIm5ld1F1YXJ0ZXIiLCJRVUFSVEVSX1JFRlMiLCJvblF1YXJ0ZXJDbGljayIsImhhbmRsZVF1YXJ0ZXJOYXZpZ2F0aW9uIiwibW9udGhDbGFzc05hbWUiLCJfbW9udGhDbGFzc05hbWUiLCJpc1JhbmdlU3RhcnRNb250aCIsImlzUmFuZ2VFbmRNb250aCIsImlzU2VsZWN0aW5nTW9udGhSYW5nZVN0YXJ0IiwiaXNTZWxlY3RpbmdNb250aFJhbmdlRW5kIiwiaXNDdXJyZW50TW9udGgiLCJwcmVTZWxlY3RlZE1vbnRoIiwicHJlU2VsZWN0ZWRRdWFydGVyIiwiX3RoaXMkcHJvcHMxMSIsIl90aGlzJHByb3BzMTEkY2hvb3NlRCIsIl90aGlzJHByb3BzMTEkZGlzYWJsZSIsIl90aGlzJHByb3BzMTIiLCJpc1NlbGVjdGVkUXVhcnRlciIsImlzSW5TZWxlY3RpbmdSYW5nZVF1YXJ0ZXIiLCJpc1JhbmdlU3RhcnRRdWFydGVyIiwiaXNSYW5nZUVuZFF1YXJ0ZXIiLCJfdGhpcyRwcm9wczEzIiwic2hvd0Z1bGxNb250aFllYXJQaWNrZXIiLCJyZW5kZXJNb250aENvbnRlbnQiLCJzaG9ydE1vbnRoVGV4dCIsImZ1bGxNb250aFRleHQiLCJfdGhpcyRwcm9wczE0IiwicmVuZGVyUXVhcnRlckNvbnRlbnQiLCJzaG9ydFF1YXJ0ZXIiLCJfdGhpcyRwcm9wczE1IiwibW9udGhDb2x1bW5zIiwiaiIsImV2Iiwib25Nb250aEtleURvd24iLCJvbk1vbnRoTW91c2VFbnRlciIsImdldE1vbnRoQ2xhc3NOYW1lcyIsImdldE1vbnRoQ29udGVudCIsIl90aGlzJHByb3BzMTYiLCJxdWFydGVycyIsIm9uUXVhcnRlcktleURvd24iLCJvblF1YXJ0ZXJNb3VzZUVudGVyIiwiZ2V0UXVhcnRlckNsYXNzTmFtZXMiLCJnZXRRdWFydGVyVGFiSW5kZXgiLCJpc0N1cnJlbnRRdWFydGVyIiwiZ2V0UXVhcnRlckNvbnRlbnQiLCJfdGhpcyRwcm9wczE3Iiwic2hvd01vbnRoWWVhclBpY2tlciIsInNob3dRdWFydGVyWWVhclBpY2tlciIsIl90aGlzJHByb3BzMTgiLCJfdGhpcyRwcm9wczE4JGFyaWFMYWIiLCJmb3JtYXR0ZWRBcmlhTGFiZWxQcmVmaXgiLCJ0cmltIiwiaGFuZGxlTW91c2VMZWF2ZSIsIm9uUG9pbnRlckxlYXZlIiwicmVuZGVyTW9udGhzIiwicmVuZGVyUXVhcnRlcnMiLCJyZW5kZXJXZWVrcyIsIlRpbWUiLCJoZWlnaHQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjZW50ZXJMaSIsImNhbGNDZW50ZXJQb3NpdGlvbiIsIm1vbnRoUmVmIiwiaGVhZGVyIiwiY2xhc3NlcyIsInRpbWVDbGFzc05hbWUiLCJpc1NlbGVjdGVkVGltZSIsImlzRGlzYWJsZWRUaW1lIiwiaW5qZWN0VGltZXMiLCJwcmV2aW91c1NpYmxpbmciLCJuZXh0U2libGluZyIsImFjdGl2ZURhdGUiLCJvcGVuVG9EYXRlIiwic29ydGVkSW5qZWN0VGltZXMiLCJzb3J0IiwiYSIsImIiLCJtaW51dGVzSW5EYXkiLCJtdWx0aXBsaWVyIiwidGltZXNUb0luamVjdCIsInRpbWVUb0ZvY3VzIiwicmVkdWNlIiwicHJldiIsImxpQ2xhc3NlcyIsImxpIiwic2Nyb2xsVG9UaGVTZWxlY3RlZFRpbWUiLCJ0b2RheUJ1dHRvbiIsInNob3dUaW1lU2VsZWN0T25seSIsInRpbWVDYXB0aW9uIiwicmVuZGVyVGltZXMiLCJvblRpbWVDaGFuZ2UiLCJsaXN0SGVpZ2h0IiwiY2VudGVyTGlSZWYiLCJZZWFyIiwicmVmSW5kZXgiLCJ3YWl0Rm9yUmVSZW5kZXIiLCJZRUFSX1JFRlMiLCJfdXRpbHMkZ2V0WWVhcnNQZXJpb2QiLCJ1cGRhdGVGb2N1c09uUGFnaW5hdGUiLCJ5IiwiX3llYXIiLCJoYW5kbGVZZWFyQ2xpY2siLCJvblllYXJDbGljayIsImhhbmRsZVllYXJOYXZpZ2F0aW9uIiwieWVhckNsYXNzTmFtZSIsImlzQ3VycmVudFllYXIiLCJwcmVTZWxlY3RlZCIsInJlbmRlclllYXJDb250ZW50Iiwib25ZZWFyTW91c2VFbnRlciIsIm9uWWVhck1vdXNlTGVhdmUiLCJfdXRpbHMkZ2V0WWVhcnNQZXJpb2QyIiwiX2xvb3AiLCJvblllYXJLZXlEb3duIiwiZ2V0WWVhclRhYkluZGV4IiwiZ2V0WWVhckNsYXNzTmFtZXMiLCJnZXRZZWFyQ29udGVudCIsImdldFllYXJDb250YWluZXJDbGFzc05hbWVzIiwiY2xlYXJTZWxlY3RpbmdEYXRlIiwiaW5wdXRUaW1lIiwicHJvcERhdGUiLCJpc1Byb3BEYXRlVmFsaWQiLCJpc05hTiIsInNwbGl0IiwidGltZVN0cmluZyIsImN1c3RvbVRpbWVJbnB1dCIsImNsb25lRWxlbWVudCIsInR5cGUiLCJwbGFjZWhvbGRlciIsInJlcXVpcmVkIiwidGltZUlucHV0TGFiZWwiLCJyZW5kZXJUaW1lSW5wdXQiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJDYWxlbmRhckNvbnRhaW5lciIsIl9yZWYkc2hvd1RpbWVTZWxlY3RPbiIsIl9yZWYkc2hvd1RpbWUiLCJzaG93VGltZSIsImFyaWFMYWJlbCIsIkRST1BET1dOX0ZPQ1VTX0NMQVNTTkFNRVMiLCJpc0Ryb3Bkb3duU2VsZWN0IiwiZWxlbWVudCIsImNsYXNzTmFtZXMiLCJ0ZXN0Q2xhc3NuYW1lIiwiaW5kZXhPZiIsIkNhbGVuZGFyIiwib25Ecm9wZG93bkZvY3VzIiwiaW5pdGlhbERhdGUiLCJoYW5kbGVNb250aENoYW5nZSIsIm1vbnRoU2VsZWN0ZWRJbiIsIm9uTW9udGhNb3VzZUxlYXZlIiwib25ZZWFyQ2hhbmdlIiwiaXNSZW5kZXJBcmlhTGl2ZU1lc3NhZ2UiLCJoYW5kbGVDdXN0b21Nb250aENoYW5nZSIsIm9uTW9udGhDaGFuZ2UiLCJoYW5kbGVNb250aFllYXJDaGFuZ2UiLCJkYXlOYW1lcyIsIndlZWtMYWJlbCIsIndlZWtEYXlOYW1lIiwiZm9ybWF0V2Vla2RheSIsIndlZWtEYXlDbGFzc05hbWUiLCJmb3JtYXRXZWVrRGF5IiwidXNlV2Vla2RheXNTaG9ydCIsInNob3dZZWFyUGlja2VyIiwicmVuZGVyQ3VzdG9tSGVhZGVyIiwiYWxsUHJldkRheXNEaXNhYmxlZCIsImZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbiIsInNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbiIsImljb25DbGFzc2VzIiwiY2xpY2tIYW5kbGVyIiwiZGVjcmVhc2VNb250aCIsImRlY3JlYXNlWWVhciIsImlzRm9yWWVhciIsInByZXZpb3VzTW9udGhCdXR0b25MYWJlbCIsInByZXZpb3VzWWVhckJ1dHRvbkxhYmVsIiwiX3RoaXMkcHJvcHMzJHByZXZpb3VzIiwicHJldmlvdXNNb250aEFyaWFMYWJlbCIsIl90aGlzJHByb3BzMyRwcmV2aW91czIiLCJwcmV2aW91c1llYXJBcmlhTGFiZWwiLCJhbGxOZXh0RGF5c0Rpc2FibGVkIiwic2hvd1RpbWVTZWxlY3QiLCJpbmNyZWFzZU1vbnRoIiwiaW5jcmVhc2VZZWFyIiwibmV4dE1vbnRoQnV0dG9uTGFiZWwiLCJuZXh0WWVhckJ1dHRvbkxhYmVsIiwiX3RoaXMkcHJvcHM1JG5leHRNb250IiwibmV4dE1vbnRoQXJpYUxhYmVsIiwiX3RoaXMkcHJvcHM1JG5leHRZZWFyIiwibmV4dFllYXJBcmlhTGFiZWwiLCJzaG93WWVhckRyb3Bkb3duIiwic2hvd01vbnRoRHJvcGRvd24iLCJzaG93TW9udGhZZWFyRHJvcGRvd24iLCJvdmVycmlkZUhpZGUiLCJjaGFuZ2VZZWFyIiwiY2hhbmdlTW9udGgiLCJjaGFuZ2VNb250aFllYXIiLCJoYW5kbGVUb2RheUJ1dHRvbkNsaWNrIiwibW9udGhEYXRlIiwicmVuZGVyQ3VycmVudE1vbnRoIiwib25Gb2N1cyIsImhhbmRsZURyb3Bkb3duRm9jdXMiLCJyZW5kZXJNb250aERyb3Bkb3duIiwicmVuZGVyTW9udGhZZWFyRHJvcGRvd24iLCJyZW5kZXJZZWFyRHJvcGRvd24iLCJoZWFkZXJBcmdzIiwibW9udGhDb250YWluZXIiLCJwcmV2TW9udGhCdXR0b25EaXNhYmxlZCIsIm5leHRNb250aEJ1dHRvbkRpc2FibGVkIiwicHJldlllYXJCdXR0b25EaXNhYmxlZCIsIm5leHRZZWFyQnV0dG9uRGlzYWJsZWQiLCJzaG93RGF5TmFtZXMiLCJjdXN0b21IZWFkZXJDb3VudCIsInJlbmRlclllYXJIZWFkZXIiLCJyZW5kZXJEZWZhdWx0SGVhZGVyIiwiX3RoaXMkcHJvcHMkbW9udGhTZWxlIiwibW9udGhMaXN0IiwibW9udGhzVG9TdWJ0cmFjdCIsInNob3dQcmV2aW91c01vbnRocyIsIm1vbnRoc1Nob3duIiwiZnJvbU1vbnRoRGF0ZSIsIm1vbnRoc1RvQWRkIiwibW9udGhLZXkiLCJkaXYiLCJyZW5kZXJIZWFkZXIiLCJtb250aEFyaWFMYWJlbFByZWZpeCIsImhhbmRsZU9uRGF5S2V5RG93biIsImhhbmRsZU1vbnRoTW91c2VMZWF2ZSIsImhhbmRsZVllYXJNb3VzZUVudGVyIiwiaGFuZGxlWWVhck1vdXNlTGVhdmUiLCJ0aW1lRm9ybWF0IiwidGltZUludGVydmFscyIsIndpdGhQb3J0YWwiLCJ0aW1lVmFsaWQiLCJzaG93VGltZUlucHV0IiwiYXJpYUxpdmVNZXNzYWdlIiwiZ2V0RGF0ZUluVmlldyIsImFzc2lnbk1vbnRoQ29udGFpbmVyIiwiX3RoaXMzIiwiaGFzTW9udGhDaGFuZ2VkIiwiQ29udGFpbmVyIiwiY29udGFpbmVyIiwiZGlzcGxheSIsInJlbmRlckFyaWFMaXZlUmVnaW9uIiwicmVuZGVyUHJldmlvdXNCdXR0b24iLCJyZW5kZXJOZXh0QnV0dG9uIiwicmVuZGVyWWVhcnMiLCJyZW5kZXJUb2RheUJ1dHRvbiIsInJlbmRlclRpbWVTZWN0aW9uIiwicmVuZGVySW5wdXRUaW1lU2VjdGlvbiIsInJlbmRlckNoaWxkcmVuIiwiQ2FsZW5kYXJJY29uIiwiaWNvbiIsIl9yZWYkY2xhc3NOYW1lIiwiX29uQ2xpY2siLCJkZWZhdWx0Q2xhc3MiLCJpc1ZhbGlkRWxlbWVudCIsInhtbG5zIiwidmlld0JveCIsIkNhbGVuZGFySWNvbiQxIiwiUG9ydGFsIiwiZWwiLCJwb3J0YWxSb290IiwicG9ydGFsSG9zdCIsImdldEVsZW1lbnRCeUlkIiwicG9ydGFsSWQiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVQb3J0YWwiLCJmb2N1c2FibGVFbGVtZW50c1NlbGVjdG9yIiwiZm9jdXNhYmxlRmlsdGVyIiwibm9kZSIsImRpc2FibGVkIiwiVGFiTG9vcCIsInRhYkxvb3BSZWYiLCJxdWVyeVNlbGVjdG9yQWxsIiwidGFiQ2hpbGRyZW4iLCJnZXRUYWJDaGlsZHJlbiIsImVuYWJsZVRhYkxvb3AiLCJoYW5kbGVGb2N1c1N0YXJ0IiwiaGFuZGxlRm9jdXNFbmQiLCJ3aXRoRmxvYXRpbmciLCJXaXRoRmxvYXRpbmciLCJhbHRfcHJvcHMiLCJwb3BwZXJNb2RpZmllcnMiLCJwb3BwZXJQcm9wcyIsImhpZGVQb3BwZXIiLCJhcnJvd1JlZiIsInVzZVJlZiIsImZsb2F0aW5nUHJvcHMiLCJvcGVuIiwid2hpbGVFbGVtZW50c01vdW50ZWQiLCJwbGFjZW1lbnQiLCJwb3BwZXJQbGFjZW1lbnQiLCJtaWRkbGV3YXJlIiwicGFkZGluZyIsIlBvcHBlckNvbXBvbmVudCIsIndyYXBwZXJDbGFzc05hbWUiLCJwb3BwZXJDb21wb25lbnQiLCJ0YXJnZXRDb21wb25lbnQiLCJwb3BwZXJPbktleURvd24iLCJzaG93QXJyb3ciLCJwb3BwZXIiLCJyZWZzIiwic2V0RmxvYXRpbmciLCJmbG9hdGluZ1N0eWxlcyIsImNvbnRleHQiLCJmaWxsIiwic3Ryb2tlV2lkdGgiLCJ3aWR0aCIsInRyYW5zZm9ybSIsInBvcHBlckNvbnRhaW5lciIsIndyYXBwZXJDbGFzc2VzIiwiRnJhZ21lbnQiLCJzZXRSZWZlcmVuY2UiLCJQb3BwZXJDb21wb25lbnQkMSIsIm91dHNpZGVDbGlja0lnbm9yZUNsYXNzIiwiV3JhcHBlZENhbGVuZGFyIiwiaGFzUHJlU2VsZWN0aW9uQ2hhbmdlZCIsIklOUFVUX0VSUl8xIiwiRGF0ZVBpY2tlciIsIl90aGlzJHByb3BzJGhvbGlkYXlzIiwiYWNjdW11bGF0b3IiLCJkZWZhdWx0UHJlU2VsZWN0aW9uIiwiZ2V0UHJlU2VsZWN0aW9uIiwiYm91bmRlZFByZVNlbGVjdGlvbiIsInN0YXJ0T3BlbiIsInByZXZlbnRGb2N1cyIsImZvY3VzZWQiLCJwcmV2ZW50Rm9jdXNUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiaW5wdXQiLCJibHVyIiwiY2FuY2VsRm9jdXNJbnB1dCIsInNraXBTZXRCbHVyIiwiY2FsY0luaXRpYWxTdGF0ZSIsImxhc3RQcmVTZWxlY3RDaGFuZ2UiLCJQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9OQVZJR0FURSIsInNldEJsdXIiLCJpbnB1dFZhbHVlIiwicmVhZE9ubHkiLCJwcmV2ZW50T3Blbk9uRm9jdXMiLCJjbGVhclByZXZlbnRGb2N1c1RpbWVvdXQiLCJzZXRUaW1lb3V0Iiwic2V0Rm9jdXMiLCJpbnB1dEZvY3VzVGltZW91dCIsIm9uQmx1ciIsImFsbEFyZ3MiLCJvbkNoYW5nZVJhdyIsImlzRGVmYXVsdFByZXZlbnRlZCIsIlBSRVNFTEVDVF9DSEFOR0VfVklBX0lOUFVUIiwiaG91cnMiLCJtaW51dGVzIiwic2V0U2VsZWN0ZWQiLCJzZW5kRm9jdXNCYWNrVG9JbnB1dCIsInNob3dEYXRlU2VsZWN0Iiwia2VlcElucHV0Iiwic3dhcFJhbmdlIiwiYWxsb3dTYW1lRGF5IiwiZm9jdXNTZWxlY3RlZE1vbnRoIiwibm9SYW5nZXMiLCJoYXNTdGFydFJhbmdlIiwiaXNSYW5nZUZpbGxlZCIsImlzQ2hhbmdlZERhdGVBbHJlYWR5U2VsZWN0ZWQiLCJzZWxlY3RlZERhdGUiLCJuZXh0RGF0ZXMiLCJoYXNNaW5EYXRlIiwiaGFzTWF4RGF0ZSIsImlzVmFsaWREYXRlU2VsZWN0aW9uIiwiZGF0ZVN0YXJ0T2ZEYXkiLCJtaW5EYXRlU3RhcnRPZkRheSIsIm1heERhdGVFbmRPZkRheSIsIm9uSW5wdXRDbGljayIsInNlbGVjdG9yU3RyaW5nIiwic2VsZWN0ZWRJdGVtIiwiY2FsZW5kYXIiLCJjb21wb25lbnROb2RlIiwicXVlcnlTZWxlY3RvciIsImNvcHkiLCJpbnB1dE9rIiwiaGFuZGxlU2VsZWN0Iiwib25JbnB1dEVycm9yIiwiY29kZSIsIm1zZyIsImlzU2hpZnRLZXlBY3RpdmUiLCJzaGlmdEtleSIsIm5ld1NlbGVjdGlvbiIsInByZXZNb250aCIsInByZXZZZWFyIiwib25DbGVhckNsaWNrIiwiY2xvc2VPblNjcm9sbCIsImRvY3VtZW50RWxlbWVudCIsImlzQ2FsZW5kYXJPcGVuIiwiZWxlbSIsImRhdGVGb3JtYXRDYWxlbmRhciIsImhhbmRsZUNhbGVuZGFyQ2xpY2tPdXRzaWRlIiwibW9kaWZ5SG9saWRheXMiLCJoYW5kbGVUaW1lQ2hhbmdlIiwiY2FsZW5kYXJDbGFzc05hbWUiLCJjYWxlbmRhckNvbnRhaW5lciIsImV4Y2x1ZGVTY3JvbGxiYXIiLCJvbkRheUtleURvd24iLCJpc0NvbnRhaW5zVGltZSIsImxvbmdEYXRlRm9ybWF0IiwiX1JlYWN0JGNsb25lRWxlbWVudCIsImN1c3RvbUlucHV0IiwiY3VzdG9tSW5wdXRSZWYiLCJoYW5kbGVCbHVyIiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlRm9jdXMiLCJvbklucHV0S2V5RG93biIsImlkIiwiZm9ybSIsImF1dG9Gb2N1cyIsInBsYWNlaG9sZGVyVGV4dCIsImF1dG9Db21wbGV0ZSIsImFyaWFEZXNjcmliZWRCeSIsImFyaWFJbnZhbGlkIiwiYXJpYUxhYmVsbGVkQnkiLCJhcmlhUmVxdWlyZWQiLCJpc0NsZWFyYWJsZSIsImNsZWFyQnV0dG9uVGl0bGUiLCJfdGhpcyRwcm9wczQkY2xlYXJCdXQiLCJjbGVhckJ1dHRvbkNsYXNzTmFtZSIsIl90aGlzJHByb3BzNCRhcmlhTGFiZSIsImFyaWFMYWJlbENsb3NlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uU2Nyb2xsIiwicHJldlN0YXRlIiwib25DYWxlbmRhck9wZW4iLCJvbkNhbGVuZGFyQ2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVuZGVySW5wdXRDb250YWluZXIiLCJzaG93SWNvbiIsImNhbGVuZGFySWNvbkNsYXNzbmFtZSIsInRvZ2dsZUNhbGVuZGFyT25JY29uQ2xpY2siLCJ0b2dnbGVDYWxlbmRhciIsInJlbmRlckRhdGVJbnB1dCIsInJlbmRlckNsZWFyQnV0dG9uIiwicmVuZGVyQ2FsZW5kYXIiLCJwb3J0YWxDb250YWluZXIiLCJvblBvcnRhbEtleURvd24iLCJwb3BwZXJDbGFzc05hbWUiLCJvblBvcHBlcktleURvd24iLCJzaG93UG9wcGVyQXJyb3ciLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css":
/*!*****************************************************************!*\
  !*** ./node_modules/react-datepicker/dist/react-datepicker.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"c9ebeb17ff28\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV3LXByb2plY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzPzA3ZjciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJjOWViZWIxN2ZmMjhcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datepicker/node_modules/clsx/dist/clsx.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/react-datepicker/node_modules/clsx/dist/clsx.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: () => (/* binding */ clsx),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction r(e) {\n    var t, f, n = \"\";\n    if (\"string\" == typeof e || \"number\" == typeof e) n += e;\n    else if (\"object\" == typeof e) if (Array.isArray(e)) {\n        var o = e.length;\n        for(t = 0; t < o; t++)e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n    } else for(f in e)e[f] && (n && (n += \" \"), n += f);\n    return n;\n}\nfunction clsx() {\n    for(var e, t, f = 0, n = \"\", o = arguments.length; f < o; f++)(e = arguments[f]) && (t = r(e)) && (n && (n += \" \"), n += t);\n    return n;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clsx);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsRUFBRUMsQ0FBQztJQUFFLElBQUlDLEdBQUVDLEdBQUVDLElBQUU7SUFBRyxJQUFHLFlBQVUsT0FBT0gsS0FBRyxZQUFVLE9BQU9BLEdBQUVHLEtBQUdIO1NBQU8sSUFBRyxZQUFVLE9BQU9BLEdBQUUsSUFBR0ksTUFBTUMsT0FBTyxDQUFDTCxJQUFHO1FBQUMsSUFBSU0sSUFBRU4sRUFBRU8sTUFBTTtRQUFDLElBQUlOLElBQUUsR0FBRUEsSUFBRUssR0FBRUwsSUFBSUQsQ0FBQyxDQUFDQyxFQUFFLElBQUdDLENBQUFBLElBQUVILEVBQUVDLENBQUMsQ0FBQ0MsRUFBRSxNQUFLRSxDQUFBQSxLQUFJQSxDQUFBQSxLQUFHLEdBQUUsR0FBR0EsS0FBR0QsQ0FBQUE7SUFBRSxPQUFNLElBQUlBLEtBQUtGLEVBQUVBLENBQUMsQ0FBQ0UsRUFBRSxJQUFHQyxDQUFBQSxLQUFJQSxDQUFBQSxLQUFHLEdBQUUsR0FBR0EsS0FBR0QsQ0FBQUE7SUFBRyxPQUFPQztBQUFDO0FBQVEsU0FBU0s7SUFBTyxJQUFJLElBQUlSLEdBQUVDLEdBQUVDLElBQUUsR0FBRUMsSUFBRSxJQUFHRyxJQUFFRyxVQUFVRixNQUFNLEVBQUNMLElBQUVJLEdBQUVKLElBQUksQ0FBQ0YsSUFBRVMsU0FBUyxDQUFDUCxFQUFFLEtBQUlELENBQUFBLElBQUVGLEVBQUVDLEVBQUMsS0FBS0csQ0FBQUEsS0FBSUEsQ0FBQUEsS0FBRyxHQUFFLEdBQUdBLEtBQUdGLENBQUFBO0lBQUcsT0FBT0U7QUFBQztBQUFDLGlFQUFlSyxJQUFJQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV3LXByb2plY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubWpzP2Q3M2YiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcihlKXt2YXIgdCxmLG49XCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGUpbis9ZTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciBvPWUubGVuZ3RoO2Zvcih0PTA7dDxvO3QrKyllW3RdJiYoZj1yKGVbdF0pKSYmKG4mJihuKz1cIiBcIiksbis9Zil9ZWxzZSBmb3IoZiBpbiBlKWVbZl0mJihuJiYobis9XCIgXCIpLG4rPWYpO3JldHVybiBufWV4cG9ydCBmdW5jdGlvbiBjbHN4KCl7Zm9yKHZhciBlLHQsZj0wLG49XCJcIixvPWFyZ3VtZW50cy5sZW5ndGg7ZjxvO2YrKykoZT1hcmd1bWVudHNbZl0pJiYodD1yKGUpKSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGRlZmF1bHQgY2xzeDsiXSwibmFtZXMiOlsiciIsImUiLCJ0IiwiZiIsIm4iLCJBcnJheSIsImlzQXJyYXkiLCJvIiwibGVuZ3RoIiwiY2xzeCIsImFyZ3VtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/node_modules/clsx/dist/clsx.mjs\n");

/***/ })

};
;